diff --git a/cc_toolchain_config.bzl b/cc_toolchain_config.bzl
index 0b77afc..a046faf 100644
--- a/cc_toolchain_config.bzl
+++ b/cc_toolchain_config.bzl
@@ -27,6 +27,7 @@ load(
     "with_feature_set",
 )
 load("@bazel_tools//tools/build_defs/cc:action_names.bzl", "ACTION_NAMES")
+load(":toolchain_features.bzl", "gml_toolchain_pre_features", "GML_EXTRA_CC_CONFIG_ATTRS", "gml_toolchain_post_features", "gml_action_configs")
 
 def layering_check_features(compiler):
     if compiler != "clang":
@@ -147,7 +148,7 @@ def _impl(ctx):
         tool_path(name = name, path = path)
         for name, path in ctx.attr.tool_paths.items()
     ]
-    action_configs = []
+    action_configs = gml_action_configs(ctx)
 
     llvm_cov_action = action_config(
         action_name = ACTION_NAMES.llvm_cov,
@@ -168,6 +169,10 @@ def _impl(ctx):
         name = "supports_start_end_lib",
         enabled = True,
     )
+    default_opt_level_flags_feature = feature(
+        name = "default_opt_level_flags",
+        enabled = True,
+    )
 
     default_compile_flags_feature = feature(
         name = "default_compile_flags",
@@ -203,7 +208,7 @@ def _impl(ctx):
                         flags = ctx.attr.dbg_compile_flags,
                     ),
                 ] if ctx.attr.dbg_compile_flags else []),
-                with_features = [with_feature_set(features = ["dbg"])],
+                with_features = [with_feature_set(features = ["dbg", "default_opt_level_flags"])],
             ),
             flag_set(
                 actions = all_compile_actions,
@@ -212,7 +217,7 @@ def _impl(ctx):
                         flags = ctx.attr.opt_compile_flags,
                     ),
                 ] if ctx.attr.opt_compile_flags else []),
-                with_features = [with_feature_set(features = ["opt"])],
+                with_features = [with_feature_set(features = ["opt", "default_opt_level_flags"])],
             ),
             flag_set(
                 actions = all_cpp_compile_actions + [ACTION_NAMES.lto_backend],
@@ -244,7 +249,7 @@ def _impl(ctx):
                         flags = ctx.attr.opt_link_flags,
                     ),
                 ] if ctx.attr.opt_link_flags else []),
-                with_features = [with_feature_set(features = ["opt"])],
+                with_features = [with_feature_set(features = ["opt", "default_opt_level_flags"])],
             ),
         ],
     )
@@ -1255,6 +1260,7 @@ def _impl(ctx):
             strip_debug_symbols_feature,
             coverage_feature,
             supports_pic_feature,
+            default_opt_level_flags_feature,
         ] + (
             [
                 supports_start_end_lib_feature,
@@ -1276,6 +1282,7 @@ def _impl(ctx):
     else:
         features = [
             supports_pic_feature,
+            default_opt_level_flags_feature,
         ] + (
             [
                 supports_start_end_lib_feature,
@@ -1294,6 +1301,13 @@ def _impl(ctx):
             unfiltered_compile_flags_feature,
         ] + layering_check_features(ctx.attr.compiler)
 
+    features = gml_toolchain_pre_features(ctx) + features + gml_toolchain_post_features(ctx)
+
+    sysroot_path = ""
+    sysroot_toolchain = ctx.toolchains["@gml//bazel/cc_toolchains/sysroots/build:toolchain_type"]
+    if sysroot_toolchain:
+        sysroot_path = sysroot_toolchain.sysroot.path
+
     return cc_common.create_cc_toolchain_config_info(
         ctx = ctx,
         features = features,
@@ -1308,12 +1322,12 @@ def _impl(ctx):
         abi_version = ctx.attr.abi_version,
         abi_libc_version = ctx.attr.abi_libc_version,
         tool_paths = tool_paths,
-        builtin_sysroot = ctx.attr.builtin_sysroot,
+        builtin_sysroot = sysroot_path,
     )
 
 cc_toolchain_config = rule(
     implementation = _impl,
-    attrs = {
+    attrs = dict({
         "cpu": attr.string(mandatory = True),
         "compiler": attr.string(mandatory = True),
         "toolchain_identifier": attr.string(mandatory = True),
@@ -1335,7 +1349,9 @@ cc_toolchain_config = rule(
         "coverage_compile_flags": attr.string_list(),
         "coverage_link_flags": attr.string_list(),
         "supports_start_end_lib": attr.bool(),
-        "builtin_sysroot": attr.string(),
-    },
+    }, **GML_EXTRA_CC_CONFIG_ATTRS),
     provides = [CcToolchainConfigInfo],
+    toolchains = [
+        config_common.toolchain_type("@gml//bazel/cc_toolchains/sysroots/build:toolchain_type", mandatory = False),
+    ],
 )
