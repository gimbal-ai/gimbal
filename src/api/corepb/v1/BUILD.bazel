# Copyright Â© 2023- Gimlet Labs, Inc.
# All Rights Reserved.
#
# NOTICE:  All information contained herein is, and remains
# the property of Gimlet Labs, Inc. and its suppliers,
# if any.  The intellectual and technical concepts contained
# herein are proprietary to Gimlet Labs, Inc. and its suppliers and
# may be covered by U.S. and Foreign Patents, patents in process,
# and are protected by trade secret or copyright law. Dissemination
# of this information or reproduction of this material is strictly
# forbidden unless prior written permission is obtained from
# Gimlet Labs, Inc.
#
# SPDX-License-Identifier: Proprietary

load("@build_stack_rules_proto//rules:proto_compile.bzl", "proto_compile")
load("@build_stack_rules_proto//rules/cc:proto_cc_library.bzl", "proto_cc_library")
load("@build_stack_rules_proto//rules/go:proto_go_library.bzl", "proto_go_library")
load("@build_stack_rules_proto//rules/py:proto_py_library.bzl", "proto_py_library")
load("@rules_proto//proto:defs.bzl", "proto_library")

proto_library(
    name = "corepb_proto",
    srcs = [
        "controlplane.proto",
        "cp_edge.proto",
        "mediastream.proto",
        "model_exec.proto",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//src/common/typespb:typespb_proto",
        "//third_party/github.com/gogo/protobuf/gogoproto:gogoproto_proto",
        "//third_party/github.com/google/mediapipe/mediapipe/framework:framework_proto",
        "//third_party/github.com/open-telemetry/opentelemetry-proto/opentelemetry/proto/metrics/v1:v1_proto",
        "@com_google_protobuf//:any_proto",
        "@com_google_protobuf//:timestamp_proto",
    ],
)

proto_cc_library(
    name = "corepb_cc_library",
    srcs = [
        "controlplane.pb.cc",
        "cp_edge.pb.cc",
        "mediastream.pb.cc",
        "model_exec.pb.cc",
    ],
    hdrs = [
        "controlplane.pb.h",
        "cp_edge.pb.h",
        "mediastream.pb.h",
        "model_exec.pb.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//src/common/typespb:typespb_cc_library",
        "//third_party/github.com/gogo/protobuf/gogoproto:gogoproto_cc_library",
        "//third_party/github.com/google/mediapipe/mediapipe/framework:framework_cc_library",
        "//third_party/github.com/open-telemetry/opentelemetry-proto/opentelemetry/proto/metrics/v1:v1_cc_library",
        "@com_google_protobuf//:protobuf",
    ],
)

proto_compile(
    name = "corepb_cpp_compile",
    outputs = [
        "cp_edge.pb.cc",
        "cp_edge.pb.h",
        "mediastream.pb.cc",
        "mediastream.pb.h",
        "model_exec.pb.cc",
        "model_exec.pb.h",
        "controlplane.pb.cc",
        "controlplane.pb.h",
    ],
    plugins = ["@build_stack_rules_proto//plugin/builtin:cpp"],
    proto = "corepb_proto",
    visibility = ["//visibility:public"],
)

proto_compile(
    name = "corepb_go_compile",
    output_mappings = [
        "cp_edge.pb.go=gimletlabs.ai/gimlet/src/api/corepb/v1/cp_edge.pb.go",
        "mediastream.pb.go=gimletlabs.ai/gimlet/src/api/corepb/v1/mediastream.pb.go",
        "model_exec.pb.go=gimletlabs.ai/gimlet/src/api/corepb/v1/model_exec.pb.go",
        "controlplane.pb.go=gimletlabs.ai/gimlet/src/api/corepb/v1/controlplane.pb.go",
    ],
    outputs = [
        "cp_edge.pb.go",
        "mediastream.pb.go",
        "model_exec.pb.go",
        "controlplane.pb.go",
    ],
    plugins = ["@build_stack_rules_proto//plugin/gogo/protobuf:protoc-gen-gogoslick"],
    proto = "corepb_proto",
    visibility = ["//visibility:public"],
)

proto_go_library(
    name = "corepb_go_proto",
    srcs = [
        "controlplane.pb.go",
        "cp_edge.pb.go",
        "mediastream.pb.go",
        "model_exec.pb.go",
    ],
    importpath = "gimletlabs.ai/gimlet/src/api/corepb/v1",
    visibility = ["//visibility:public"],
    deps = [
        "//src/common/typespb:typespb_go_proto",
        "//third_party/github.com/gogo/protobuf/gogoproto:gogoproto_go_proto",
        "//third_party/github.com/google/mediapipe/mediapipe/framework:framework_go_proto",
        "//third_party/github.com/open-telemetry/opentelemetry-proto/opentelemetry/proto/metrics/v1:v1_go_proto",
        "@com_github_gogo_protobuf//proto",
        "@com_github_gogo_protobuf//protoc-gen-gogo/descriptor",
        "@com_github_gogo_protobuf//sortkeys",
        "@com_github_gogo_protobuf//types",
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//status",
        "@org_golang_google_protobuf//types/known/anypb",
        "@org_golang_google_protobuf//types/known/timestamppb",
    ],
)

proto_compile(
    name = "corepb_py_compile",
    outputs = [
        "controlplane_pb2.py",
        "cp_edge_pb2.py",
        "mediastream_pb2.py",
        "model_exec_pb2.py",
        "controlplane_pb2.pyi",
        "cp_edge_pb2.pyi",
        "mediastream_pb2.pyi",
        "model_exec_pb2.pyi",
    ],
    plugins = [
        "@build_stack_rules_proto//plugin/builtin:python",
        "@build_stack_rules_proto//plugin/builtin:pyi",
    ],
    proto = "corepb_proto",
    visibility = ["//visibility:public"],
)

proto_py_library(
    name = "corepb_py_library",
    srcs = [
        "controlplane_pb2.py",
        "cp_edge_pb2.py",
        "mediastream_pb2.py",
        "model_exec_pb2.py",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//src/common/typespb:typespb_py_library",
        "//third_party/github.com/gogo/protobuf/gogoproto:gogoproto_py_library",
        "//third_party/github.com/google/mediapipe/mediapipe/framework:framework_py_library",
        "//third_party/github.com/open-telemetry/opentelemetry-proto/opentelemetry/proto/metrics/v1:v1_py_library",
        "@pip//protobuf",
    ],
)
