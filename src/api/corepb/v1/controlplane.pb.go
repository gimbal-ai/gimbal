// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/api/corepb/v1/controlplane.proto

package corepb

import (
	fmt "fmt"
	typespb "gimletlabs.ai/gimlet/src/common/typespb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CPTopic int32

const (
	CP_TOPIC_UNKNOWN                          CPTopic = 0
	CP_TOPIC_DEVICE_CONNECTED                 CPTopic = 1
	CP_TOPIC_PHYSICAL_PIPELINE_RECONCILIATION CPTopic = 2
)

var CPTopic_name = map[int32]string{
	0: "CP_TOPIC_UNKNOWN",
	1: "CP_TOPIC_DEVICE_CONNECTED",
	2: "CP_TOPIC_PHYSICAL_PIPELINE_RECONCILIATION",
}

var CPTopic_value = map[string]int32{
	"CP_TOPIC_UNKNOWN":                          0,
	"CP_TOPIC_DEVICE_CONNECTED":                 1,
	"CP_TOPIC_PHYSICAL_PIPELINE_RECONCILIATION": 2,
}

func (CPTopic) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f7c2de589f3a2dd8, []int{0}
}

type CPMetadata struct {
	Topic         CPTopic          `protobuf:"varint,1,opt,name=topic,proto3,enum=gml.internal.api.core.v1.CPTopic" json:"topic,omitempty"`
	DeviceID      *typespb.UUID    `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	RecvTimestamp *types.Timestamp `protobuf:"bytes,3,opt,name=recv_timestamp,json=recvTimestamp,proto3" json:"recv_timestamp,omitempty"`
}

func (m *CPMetadata) Reset()      { *m = CPMetadata{} }
func (*CPMetadata) ProtoMessage() {}
func (*CPMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7c2de589f3a2dd8, []int{0}
}
func (m *CPMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPMetadata.Merge(m, src)
}
func (m *CPMetadata) XXX_Size() int {
	return m.Size()
}
func (m *CPMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CPMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CPMetadata proto.InternalMessageInfo

func (m *CPMetadata) GetTopic() CPTopic {
	if m != nil {
		return m.Topic
	}
	return CP_TOPIC_UNKNOWN
}

func (m *CPMetadata) GetDeviceID() *typespb.UUID {
	if m != nil {
		return m.DeviceID
	}
	return nil
}

func (m *CPMetadata) GetRecvTimestamp() *types.Timestamp {
	if m != nil {
		return m.RecvTimestamp
	}
	return nil
}

type CPMessage struct {
	Metadata *CPMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Msg      *types.Any  `protobuf:"bytes,1000,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *CPMessage) Reset()      { *m = CPMessage{} }
func (*CPMessage) ProtoMessage() {}
func (*CPMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7c2de589f3a2dd8, []int{1}
}
func (m *CPMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPMessage.Merge(m, src)
}
func (m *CPMessage) XXX_Size() int {
	return m.Size()
}
func (m *CPMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CPMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CPMessage proto.InternalMessageInfo

func (m *CPMessage) GetMetadata() *CPMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CPMessage) GetMsg() *types.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

type DeviceConnected struct {
	DeviceID *typespb.UUID `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (m *DeviceConnected) Reset()      { *m = DeviceConnected{} }
func (*DeviceConnected) ProtoMessage() {}
func (*DeviceConnected) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7c2de589f3a2dd8, []int{2}
}
func (m *DeviceConnected) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceConnected) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceConnected.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceConnected) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceConnected.Merge(m, src)
}
func (m *DeviceConnected) XXX_Size() int {
	return m.Size()
}
func (m *DeviceConnected) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceConnected.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceConnected proto.InternalMessageInfo

func (m *DeviceConnected) GetDeviceID() *typespb.UUID {
	if m != nil {
		return m.DeviceID
	}
	return nil
}

type PhysicalPipelineReconciliation struct {
	DeviceID           *typespb.UUID `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	PhysicalPipelineID *typespb.UUID `protobuf:"bytes,2,opt,name=physical_pipeline_id,json=physicalPipelineId,proto3" json:"physical_pipeline_id,omitempty"`
	ForceApply         bool          `protobuf:"varint,3,opt,name=force_apply,json=forceApply,proto3" json:"force_apply,omitempty"`
}

func (m *PhysicalPipelineReconciliation) Reset()      { *m = PhysicalPipelineReconciliation{} }
func (*PhysicalPipelineReconciliation) ProtoMessage() {}
func (*PhysicalPipelineReconciliation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7c2de589f3a2dd8, []int{3}
}
func (m *PhysicalPipelineReconciliation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhysicalPipelineReconciliation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhysicalPipelineReconciliation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhysicalPipelineReconciliation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalPipelineReconciliation.Merge(m, src)
}
func (m *PhysicalPipelineReconciliation) XXX_Size() int {
	return m.Size()
}
func (m *PhysicalPipelineReconciliation) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalPipelineReconciliation.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalPipelineReconciliation proto.InternalMessageInfo

func (m *PhysicalPipelineReconciliation) GetDeviceID() *typespb.UUID {
	if m != nil {
		return m.DeviceID
	}
	return nil
}

func (m *PhysicalPipelineReconciliation) GetPhysicalPipelineID() *typespb.UUID {
	if m != nil {
		return m.PhysicalPipelineID
	}
	return nil
}

func (m *PhysicalPipelineReconciliation) GetForceApply() bool {
	if m != nil {
		return m.ForceApply
	}
	return false
}

type PipelineDeploymentReconciliation struct {
	PipelineDeploymentID *typespb.UUID `protobuf:"bytes,1,opt,name=pipeline_deployment_id,json=pipelineDeploymentId,proto3" json:"pipeline_deployment_id,omitempty"`
	FleetID              *typespb.UUID `protobuf:"bytes,2,opt,name=fleet_id,json=fleetId,proto3" json:"fleet_id,omitempty"`
}

func (m *PipelineDeploymentReconciliation) Reset()      { *m = PipelineDeploymentReconciliation{} }
func (*PipelineDeploymentReconciliation) ProtoMessage() {}
func (*PipelineDeploymentReconciliation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7c2de589f3a2dd8, []int{4}
}
func (m *PipelineDeploymentReconciliation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PipelineDeploymentReconciliation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PipelineDeploymentReconciliation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PipelineDeploymentReconciliation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineDeploymentReconciliation.Merge(m, src)
}
func (m *PipelineDeploymentReconciliation) XXX_Size() int {
	return m.Size()
}
func (m *PipelineDeploymentReconciliation) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineDeploymentReconciliation.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineDeploymentReconciliation proto.InternalMessageInfo

func (m *PipelineDeploymentReconciliation) GetPipelineDeploymentID() *typespb.UUID {
	if m != nil {
		return m.PipelineDeploymentID
	}
	return nil
}

func (m *PipelineDeploymentReconciliation) GetFleetID() *typespb.UUID {
	if m != nil {
		return m.FleetID
	}
	return nil
}

func init() {
	proto.RegisterEnum("gml.internal.api.core.v1.CPTopic", CPTopic_name, CPTopic_value)
	proto.RegisterType((*CPMetadata)(nil), "gml.internal.api.core.v1.CPMetadata")
	proto.RegisterType((*CPMessage)(nil), "gml.internal.api.core.v1.CPMessage")
	proto.RegisterType((*DeviceConnected)(nil), "gml.internal.api.core.v1.DeviceConnected")
	proto.RegisterType((*PhysicalPipelineReconciliation)(nil), "gml.internal.api.core.v1.PhysicalPipelineReconciliation")
	proto.RegisterType((*PipelineDeploymentReconciliation)(nil), "gml.internal.api.core.v1.PipelineDeploymentReconciliation")
}

func init() {
	proto.RegisterFile("src/api/corepb/v1/controlplane.proto", fileDescriptor_f7c2de589f3a2dd8)
}

var fileDescriptor_f7c2de589f3a2dd8 = []byte{
	// 650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xc1, 0x6a, 0xdb, 0x4a,
	0x14, 0x86, 0x3d, 0x09, 0xf7, 0xda, 0x19, 0xdf, 0x9b, 0x98, 0xc1, 0x04, 0x27, 0x90, 0x71, 0x6a,
	0x02, 0x4d, 0x0b, 0x91, 0x48, 0xba, 0x08, 0xb4, 0x9b, 0x3a, 0x92, 0x4b, 0x87, 0x26, 0xb2, 0x50,
	0x9d, 0x96, 0x74, 0x23, 0xc6, 0xd2, 0x44, 0x1d, 0x90, 0x34, 0x83, 0x35, 0x31, 0x78, 0xd7, 0x47,
	0xe8, 0x63, 0xf4, 0x21, 0xba, 0xec, 0xa2, 0xcb, 0x2c, 0xb3, 0x32, 0x8d, 0xb2, 0xc9, 0x32, 0x8f,
	0x50, 0x24, 0xd9, 0x86, 0xda, 0xd4, 0x50, 0xba, 0xd3, 0x39, 0xe7, 0x3b, 0x3f, 0xff, 0x3f, 0x33,
	0x08, 0xee, 0x25, 0x03, 0x4f, 0xa7, 0x92, 0xeb, 0x9e, 0x18, 0x30, 0xd9, 0xd7, 0x87, 0x87, 0xba,
	0x27, 0x62, 0x35, 0x10, 0xa1, 0x0c, 0x69, 0xcc, 0x34, 0x39, 0x10, 0x4a, 0xa0, 0x46, 0x10, 0x85,
	0x1a, 0x8f, 0x15, 0x1b, 0xc4, 0x34, 0xd4, 0xa8, 0xe4, 0x5a, 0x86, 0x6b, 0xc3, 0xc3, 0xed, 0x7a,
	0x20, 0x02, 0x91, 0x43, 0x7a, 0xf6, 0x55, 0xf0, 0xdb, 0x3b, 0x99, 0xaa, 0x27, 0xa2, 0x48, 0xc4,
	0xba, 0x1a, 0x49, 0x96, 0xc8, 0xbe, 0x7e, 0x75, 0xc5, 0xfd, 0xc9, 0x78, 0x2b, 0x10, 0x22, 0x08,
	0x99, 0x9e, 0x57, 0xfd, 0xab, 0x4b, 0x9d, 0xc6, 0xa3, 0xc9, 0xa8, 0x39, 0x3f, 0x52, 0x3c, 0x62,
	0x89, 0xa2, 0x91, 0x2c, 0x80, 0xd6, 0x37, 0x00, 0xa1, 0x61, 0x9f, 0x31, 0x45, 0x7d, 0xaa, 0x28,
	0x3a, 0x86, 0xff, 0x28, 0x21, 0xb9, 0xd7, 0x00, 0xbb, 0x60, 0x7f, 0xfd, 0xe8, 0x91, 0xf6, 0x3b,
	0xa7, 0x9a, 0x61, 0xf7, 0x32, 0xd0, 0x29, 0x78, 0xf4, 0x1c, 0xae, 0xf9, 0x6c, 0xc8, 0x3d, 0xe6,
	0x72, 0xbf, 0xb1, 0xb2, 0x0b, 0xf6, 0xab, 0x47, 0x1b, 0xf9, 0x72, 0xee, 0x57, 0x3b, 0x3f, 0x27,
	0xe6, 0xc9, 0x7f, 0xe9, 0xb8, 0x59, 0x31, 0x73, 0x8a, 0x98, 0x4e, 0xa5, 0xe0, 0x89, 0x8f, 0xda,
	0x70, 0x7d, 0xc0, 0xbc, 0xa1, 0x3b, 0xf3, 0xd6, 0x58, 0xcd, 0x05, 0xb6, 0xb5, 0xc2, 0xbd, 0x36,
	0x75, 0xaf, 0xf5, 0xa6, 0x84, 0xf3, 0x7f, 0xb6, 0x31, 0x2b, 0x5b, 0x43, 0xb8, 0x96, 0xa5, 0x48,
	0x12, 0x1a, 0x30, 0xf4, 0x12, 0x56, 0xa2, 0x49, 0xa0, 0x3c, 0x47, 0xf5, 0x68, 0x6f, 0x59, 0x8e,
	0x69, 0x78, 0x67, 0xb6, 0x85, 0x1e, 0xc3, 0xd5, 0x28, 0x09, 0x1a, 0xf7, 0xe5, 0x7c, 0xbb, 0xbe,
	0xe0, 0xa3, 0x1d, 0x8f, 0x9c, 0x8c, 0x68, 0x9d, 0xc1, 0x8d, 0x22, 0x90, 0x21, 0xe2, 0x98, 0x79,
	0x8a, 0xf9, 0xbf, 0x9e, 0x04, 0xf8, 0xa3, 0x93, 0x68, 0xdd, 0x00, 0x88, 0xed, 0x8f, 0xa3, 0x84,
	0x7b, 0x34, 0xb4, 0xb9, 0x64, 0x21, 0x8f, 0x99, 0xc3, 0x3c, 0x11, 0x7b, 0x3c, 0xe4, 0x54, 0x71,
	0x11, 0xff, 0x8d, 0x3c, 0xba, 0x80, 0x75, 0x39, 0x51, 0x77, 0xe5, 0x44, 0x7e, 0xc9, 0x7d, 0x6d,
	0xa6, 0xe3, 0x26, 0x9a, 0xb7, 0x43, 0x4c, 0x07, 0xc9, 0xf9, 0x9e, 0x8f, 0x9a, 0xb0, 0x7a, 0x29,
	0x06, 0x1e, 0x73, 0xa9, 0x94, 0xe1, 0x28, 0xbf, 0xc0, 0x8a, 0x03, 0xf3, 0x56, 0x3b, 0xeb, 0xb4,
	0xbe, 0x02, 0xb8, 0x3b, 0xe5, 0x4d, 0x26, 0x43, 0x31, 0x8a, 0x58, 0xac, 0xe6, 0xc2, 0xb9, 0x70,
	0x73, 0xe6, 0xcb, 0x9f, 0x41, 0x4b, 0x92, 0x36, 0xd2, 0x71, 0xb3, 0xbe, 0x28, 0x4b, 0x4c, 0xa7,
	0x2e, 0x17, 0xbb, 0x3e, 0x3a, 0x86, 0x95, 0xcb, 0x90, 0x31, 0xb5, 0x24, 0x75, 0x35, 0x1d, 0x37,
	0xcb, 0xaf, 0x32, 0x88, 0x98, 0x4e, 0x39, 0xa7, 0x89, 0xff, 0x34, 0x82, 0xe5, 0xc9, 0x8b, 0x47,
	0x75, 0x58, 0x33, 0x6c, 0xb7, 0xd7, 0xb5, 0x89, 0xe1, 0x9e, 0x5b, 0x6f, 0xac, 0xee, 0x7b, 0xab,
	0x56, 0x42, 0x3b, 0x70, 0x6b, 0xd6, 0x35, 0x3b, 0xef, 0x88, 0xd1, 0x71, 0x8d, 0xae, 0x65, 0x75,
	0x8c, 0x5e, 0xc7, 0xac, 0x01, 0x74, 0x00, 0x9f, 0xcc, 0xc6, 0xf6, 0xeb, 0x8b, 0xb7, 0xc4, 0x68,
	0x9f, 0xba, 0x36, 0xb1, 0x3b, 0xa7, 0xc4, 0xea, 0xb8, 0x4e, 0xc7, 0xe8, 0x5a, 0x06, 0x39, 0x25,
	0xed, 0x1e, 0xe9, 0x5a, 0xb5, 0x95, 0x13, 0xef, 0xfa, 0x16, 0x97, 0x6e, 0x6e, 0x71, 0xe9, 0xe1,
	0x16, 0x83, 0x4f, 0x29, 0x06, 0x5f, 0x52, 0x0c, 0xbe, 0xa7, 0x18, 0x5c, 0xa7, 0x18, 0xfc, 0x48,
	0x31, 0xb8, 0x4f, 0x71, 0xe9, 0x21, 0xc5, 0xe0, 0xf3, 0x1d, 0x2e, 0x5d, 0xdf, 0xe1, 0xd2, 0xcd,
	0x1d, 0x2e, 0x7d, 0x38, 0x08, 0x78, 0x14, 0x32, 0x15, 0xd2, 0x7e, 0xa2, 0x51, 0xae, 0x17, 0x95,
	0xbe, 0xf0, 0x4b, 0x7a, 0x51, 0x7c, 0xf5, 0xff, 0xcd, 0xdf, 0xf3, 0xb3, 0x9f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x25, 0x65, 0xcb, 0xfb, 0xb5, 0x04, 0x00, 0x00,
}

func (x CPTopic) String() string {
	s, ok := CPTopic_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *CPMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPMetadata)
	if !ok {
		that2, ok := that.(CPMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	if !this.DeviceID.Equal(that1.DeviceID) {
		return false
	}
	if !this.RecvTimestamp.Equal(that1.RecvTimestamp) {
		return false
	}
	return true
}
func (this *CPMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPMessage)
	if !ok {
		that2, ok := that.(CPMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *DeviceConnected) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceConnected)
	if !ok {
		that2, ok := that.(DeviceConnected)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeviceID.Equal(that1.DeviceID) {
		return false
	}
	return true
}
func (this *PhysicalPipelineReconciliation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PhysicalPipelineReconciliation)
	if !ok {
		that2, ok := that.(PhysicalPipelineReconciliation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeviceID.Equal(that1.DeviceID) {
		return false
	}
	if !this.PhysicalPipelineID.Equal(that1.PhysicalPipelineID) {
		return false
	}
	if this.ForceApply != that1.ForceApply {
		return false
	}
	return true
}
func (this *PipelineDeploymentReconciliation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PipelineDeploymentReconciliation)
	if !ok {
		that2, ok := that.(PipelineDeploymentReconciliation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PipelineDeploymentID.Equal(that1.PipelineDeploymentID) {
		return false
	}
	if !this.FleetID.Equal(that1.FleetID) {
		return false
	}
	return true
}
func (this *CPMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&corepb.CPMetadata{")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	if this.DeviceID != nil {
		s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	}
	if this.RecvTimestamp != nil {
		s = append(s, "RecvTimestamp: "+fmt.Sprintf("%#v", this.RecvTimestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CPMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&corepb.CPMessage{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceConnected) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.DeviceConnected{")
	if this.DeviceID != nil {
		s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PhysicalPipelineReconciliation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&corepb.PhysicalPipelineReconciliation{")
	if this.DeviceID != nil {
		s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	}
	if this.PhysicalPipelineID != nil {
		s = append(s, "PhysicalPipelineID: "+fmt.Sprintf("%#v", this.PhysicalPipelineID)+",\n")
	}
	s = append(s, "ForceApply: "+fmt.Sprintf("%#v", this.ForceApply)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PipelineDeploymentReconciliation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&corepb.PipelineDeploymentReconciliation{")
	if this.PipelineDeploymentID != nil {
		s = append(s, "PipelineDeploymentID: "+fmt.Sprintf("%#v", this.PipelineDeploymentID)+",\n")
	}
	if this.FleetID != nil {
		s = append(s, "FleetID: "+fmt.Sprintf("%#v", this.FleetID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringControlplane(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CPMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecvTimestamp != nil {
		{
			size, err := m.RecvTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControlplane(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DeviceID != nil {
		{
			size, err := m.DeviceID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControlplane(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Topic != 0 {
		i = encodeVarintControlplane(dAtA, i, uint64(m.Topic))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControlplane(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControlplane(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceConnected) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceConnected) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceConnected) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviceID != nil {
		{
			size, err := m.DeviceID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControlplane(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PhysicalPipelineReconciliation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhysicalPipelineReconciliation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhysicalPipelineReconciliation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForceApply {
		i--
		if m.ForceApply {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PhysicalPipelineID != nil {
		{
			size, err := m.PhysicalPipelineID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControlplane(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DeviceID != nil {
		{
			size, err := m.DeviceID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControlplane(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PipelineDeploymentReconciliation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipelineDeploymentReconciliation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PipelineDeploymentReconciliation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FleetID != nil {
		{
			size, err := m.FleetID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControlplane(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PipelineDeploymentID != nil {
		{
			size, err := m.PipelineDeploymentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControlplane(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintControlplane(dAtA []byte, offset int, v uint64) int {
	offset -= sovControlplane(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CPMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != 0 {
		n += 1 + sovControlplane(uint64(m.Topic))
	}
	if m.DeviceID != nil {
		l = m.DeviceID.Size()
		n += 1 + l + sovControlplane(uint64(l))
	}
	if m.RecvTimestamp != nil {
		l = m.RecvTimestamp.Size()
		n += 1 + l + sovControlplane(uint64(l))
	}
	return n
}

func (m *CPMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovControlplane(uint64(l))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 2 + l + sovControlplane(uint64(l))
	}
	return n
}

func (m *DeviceConnected) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceID != nil {
		l = m.DeviceID.Size()
		n += 1 + l + sovControlplane(uint64(l))
	}
	return n
}

func (m *PhysicalPipelineReconciliation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceID != nil {
		l = m.DeviceID.Size()
		n += 1 + l + sovControlplane(uint64(l))
	}
	if m.PhysicalPipelineID != nil {
		l = m.PhysicalPipelineID.Size()
		n += 1 + l + sovControlplane(uint64(l))
	}
	if m.ForceApply {
		n += 2
	}
	return n
}

func (m *PipelineDeploymentReconciliation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PipelineDeploymentID != nil {
		l = m.PipelineDeploymentID.Size()
		n += 1 + l + sovControlplane(uint64(l))
	}
	if m.FleetID != nil {
		l = m.FleetID.Size()
		n += 1 + l + sovControlplane(uint64(l))
	}
	return n
}

func sovControlplane(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozControlplane(x uint64) (n int) {
	return sovControlplane(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CPMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CPMetadata{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`DeviceID:` + strings.Replace(fmt.Sprintf("%v", this.DeviceID), "UUID", "typespb.UUID", 1) + `,`,
		`RecvTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.RecvTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CPMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CPMessage{`,
		`Metadata:` + strings.Replace(this.Metadata.String(), "CPMetadata", "CPMetadata", 1) + `,`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceConnected) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceConnected{`,
		`DeviceID:` + strings.Replace(fmt.Sprintf("%v", this.DeviceID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalPipelineReconciliation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalPipelineReconciliation{`,
		`DeviceID:` + strings.Replace(fmt.Sprintf("%v", this.DeviceID), "UUID", "typespb.UUID", 1) + `,`,
		`PhysicalPipelineID:` + strings.Replace(fmt.Sprintf("%v", this.PhysicalPipelineID), "UUID", "typespb.UUID", 1) + `,`,
		`ForceApply:` + fmt.Sprintf("%v", this.ForceApply) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PipelineDeploymentReconciliation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PipelineDeploymentReconciliation{`,
		`PipelineDeploymentID:` + strings.Replace(fmt.Sprintf("%v", this.PipelineDeploymentID), "UUID", "typespb.UUID", 1) + `,`,
		`FleetID:` + strings.Replace(fmt.Sprintf("%v", this.FleetID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringControlplane(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CPMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControlplane
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			m.Topic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topic |= CPTopic(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControlplane
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControlplane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceID == nil {
				m.DeviceID = &typespb.UUID{}
			}
			if err := m.DeviceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControlplane
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControlplane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecvTimestamp == nil {
				m.RecvTimestamp = &types.Timestamp{}
			}
			if err := m.RecvTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControlplane(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControlplane
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControlplane
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControlplane
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControlplane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &CPMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControlplane
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControlplane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControlplane(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControlplane
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceConnected) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControlplane
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceConnected: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceConnected: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControlplane
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControlplane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceID == nil {
				m.DeviceID = &typespb.UUID{}
			}
			if err := m.DeviceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControlplane(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControlplane
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhysicalPipelineReconciliation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControlplane
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhysicalPipelineReconciliation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhysicalPipelineReconciliation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControlplane
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControlplane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceID == nil {
				m.DeviceID = &typespb.UUID{}
			}
			if err := m.DeviceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhysicalPipelineID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControlplane
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControlplane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PhysicalPipelineID == nil {
				m.PhysicalPipelineID = &typespb.UUID{}
			}
			if err := m.PhysicalPipelineID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceApply", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceApply = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipControlplane(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControlplane
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PipelineDeploymentReconciliation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControlplane
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipelineDeploymentReconciliation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipelineDeploymentReconciliation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PipelineDeploymentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControlplane
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControlplane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PipelineDeploymentID == nil {
				m.PipelineDeploymentID = &typespb.UUID{}
			}
			if err := m.PipelineDeploymentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControlplane
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControlplane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FleetID == nil {
				m.FleetID = &typespb.UUID{}
			}
			if err := m.FleetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControlplane(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControlplane
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipControlplane(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowControlplane
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowControlplane
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowControlplane
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthControlplane
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupControlplane
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthControlplane
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthControlplane        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowControlplane          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupControlplane = fmt.Errorf("proto: unexpected end of group")
)
