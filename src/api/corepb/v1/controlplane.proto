/*
 * Copyright Â© 2023- Gimlet Labs, Inc.
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Gimlet Labs, Inc. and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Gimlet Labs, Inc. and its suppliers and
 * may be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law. Dissemination
 * of this information or reproduction of this material is strictly
 * forbidden unless prior written permission is obtained from
 * Gimlet Labs, Inc.
 *
 * SPDX-License-Identifier: Proprietary
 */

syntax = "proto3";

package gml.internal.api.core.v1;

option go_package = "gimletlabs.ai/gimlet/src/api/corepb/v1;corepb";

import "gogoproto/gogo.proto";
import "src/common/typespb/uuid.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

// CPEdgeMetadata has basic routing information for messages on the controlplane.
message CPMetadata {
  // The topic of this message.
  CPTopic topic = 1;
  // The device ID where the message is going.
  gml.types.UUID device_id = 2 [ (gogoproto.customname) = "DeviceID" ];
  // The timestamp when the message was generated.
  google.protobuf.Timestamp recv_timestamp = 3;
}

// CPMessage wraps the message sent across the control plane.
message CPMessage {
  // Associated metadata.
  CPMetadata metadata = 1;

  // The actual message.
  google.protobuf.Any msg = 1000;
}

// CPTopic has the list of topics used between services in the CP.
enum CPTopic {
  CP_TOPIC_UNKNOWN = 0;
  CP_TOPIC_DEVICE_CONNECTED = 1;
  CP_TOPIC_PHYSICAL_PIPELINE_RECONCILIATION = 2;
}

// DeviceConnected is sent whenever a device connects.
message DeviceConnected {
  gml.types.UUID device_id = 1 [ (gogoproto.customname) = "DeviceID" ];
}

// PhysicalPipelineReconciliation is triggered whenever there is a change in spec/status of a device
// or pipeline.
message PhysicalPipelineReconciliation {
  gml.types.UUID device_id = 1 [ (gogoproto.customname) = "DeviceID" ];
  gml.types.UUID physical_pipeline_id = 2 [ (gogoproto.customname) = "PhysicalPipelineID" ];
  // Whether the reconciliation should apply the pipeline, regardless of whether the spec
  // matches the status. This is used for newly connected devices which need to fetch
  // all pipelines.
  bool force_apply = 3;
}

// PipelineDeploymentReconciliation is triggered whenever there is a change in spec/status of a
// device or pipeline.
message PipelineDeploymentReconciliation {
  // The pipeline deployment that should be reconciled.
  gml.types.UUID pipeline_deployment_id = 1 [ (gogoproto.customname) = "PipelineDeploymentID" ];
  // The fleet ID that the pipeline deployment is for.
  gml.types.UUID fleet_id = 2 [ (gogoproto.customname) = "FleetID" ];
}
