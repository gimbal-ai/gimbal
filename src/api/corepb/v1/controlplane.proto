/*
 * Copyright 2023- Gimlet Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package gml.internal.api.core.v1;

option go_package = "gimletlabs.ai/gimlet/src/api/corepb/v1;corepb";

import "gogoproto/gogo.proto";
import "src/common/typespb/uuid.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

// CPMetadata has basic routing information for messages on the controlplane.
message CPMetadata {
  // The topic of this message.
  CPTopic topic = 1;
  // The device ID where the message is going.
  gml.types.UUID entity_id = 2 [ (gogoproto.customname) = "EntityID" ];
  // The timestamp when the message was generated.
  google.protobuf.Timestamp recv_timestamp = 3;
}

// CPMessage wraps the message sent across the control plane.
message CPMessage {
  // Associated metadata.
  CPMetadata metadata = 1;

  // The actual message.
  google.protobuf.Any msg = 1000;
}

// CPTopic has the list of topics used between services in the CP.
enum CPTopic {
  CP_TOPIC_UNKNOWN = 0;
  CP_TOPIC_DEVICE_CONNECTED = 1;
  CP_TOPIC_PHYSICAL_PIPELINE_RECONCILIATION = 2;
  CP_TOPIC_DEVICE_DISCONNECTED = 3;
  CP_TOPIC_PIPELINE_DEPLOYMENT_RECONCILIATION = 4;
  CP_TOPIC_DEVICE_UPDATE = 5;
}

// DeviceConnected is sent whenever a device connects.
message DeviceConnected {
  gml.types.UUID device_id = 1 [ (gogoproto.customname) = "DeviceID" ];
}

// DeviceUpdateis sent whenever a device has an update.
message DeviceUpdate {
  gml.types.UUID device_id = 1 [ (gogoproto.customname) = "DeviceID" ];
}

// DeviceDisconnected is sent whenever a device disconnects from the NATS bridge.
// This does not necessarily mean that the device is offline, the bridge may have just timed out.
message DeviceDisconnected {
  gml.types.UUID device_id = 1 [ (gogoproto.customname) = "DeviceID" ];
}

// PhysicalPipelineReconciliation is triggered whenever there is a change in spec/status of a device
// or pipeline.
message PhysicalPipelineReconciliation {
  gml.types.UUID device_id = 1 [ (gogoproto.customname) = "DeviceID" ];
  gml.types.UUID physical_pipeline_id = 2 [ (gogoproto.customname) = "PhysicalPipelineID" ];
  // Whether the reconciliation should apply the pipeline, regardless of whether the spec
  // matches the status. This is used for newly connected devices which need to fetch
  // all pipelines.
  bool force_apply = 3;
}

// PipelineDeploymentReconciliation is triggered whenever there is a change in spec/status of a
// device or pipeline.
message PipelineDeploymentReconciliation {
  // The pipeline deployment that should be reconciled.
  gml.types.UUID pipeline_deployment_id = 1 [ (gogoproto.customname) = "PipelineDeploymentID" ];
  // The fleet ID that the pipeline deployment is for.
  gml.types.UUID fleet_id = 2 [ (gogoproto.customname) = "FleetID" ];
}
