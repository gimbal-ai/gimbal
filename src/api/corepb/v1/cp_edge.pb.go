// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/api/corepb/v1/cp_edge.proto

package corepb

import (
	fmt "fmt"
	typespb "gimletlabs.ai/gimlet/src/common/typespb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EdgeCPTopic int32

const (
	EDGE_CP_TOPIC_UNKNOWN EdgeCPTopic = 0
	EDGE_CP_TOPIC_STATUS  EdgeCPTopic = 1
	EDGE_CP_TOPIC_EXEC    EdgeCPTopic = 3
)

var EdgeCPTopic_name = map[int32]string{
	0: "EDGE_CP_TOPIC_UNKNOWN",
	1: "EDGE_CP_TOPIC_STATUS",
	3: "EDGE_CP_TOPIC_EXEC",
}

var EdgeCPTopic_value = map[string]int32{
	"EDGE_CP_TOPIC_UNKNOWN": 0,
	"EDGE_CP_TOPIC_STATUS":  1,
	"EDGE_CP_TOPIC_EXEC":    3,
}

func (EdgeCPTopic) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fdaf1f89158d2cba, []int{0}
}

type CPEdgeTopic int32

const (
	CP_EDGE_TOPIC_UNKNOWN CPEdgeTopic = 0
	CP_EDGE_TOPIC_STATUS  CPEdgeTopic = 1
	CP_EDGE_TOPIC_EXEC    CPEdgeTopic = 3
)

var CPEdgeTopic_name = map[int32]string{
	0: "CP_EDGE_TOPIC_UNKNOWN",
	1: "CP_EDGE_TOPIC_STATUS",
	3: "CP_EDGE_TOPIC_EXEC",
}

var CPEdgeTopic_value = map[string]int32{
	"CP_EDGE_TOPIC_UNKNOWN": 0,
	"CP_EDGE_TOPIC_STATUS":  1,
	"CP_EDGE_TOPIC_EXEC":    3,
}

func (CPEdgeTopic) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fdaf1f89158d2cba, []int{1}
}

type EdgeHeartbeat struct {
	SeqID int64 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
}

func (m *EdgeHeartbeat) Reset()      { *m = EdgeHeartbeat{} }
func (*EdgeHeartbeat) ProtoMessage() {}
func (*EdgeHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdaf1f89158d2cba, []int{0}
}
func (m *EdgeHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EdgeHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EdgeHeartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EdgeHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeHeartbeat.Merge(m, src)
}
func (m *EdgeHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *EdgeHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeHeartbeat proto.InternalMessageInfo

func (m *EdgeHeartbeat) GetSeqID() int64 {
	if m != nil {
		return m.SeqID
	}
	return 0
}

type EdgeHeartbeatAck struct {
	SeqID int64 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
}

func (m *EdgeHeartbeatAck) Reset()      { *m = EdgeHeartbeatAck{} }
func (*EdgeHeartbeatAck) ProtoMessage() {}
func (*EdgeHeartbeatAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdaf1f89158d2cba, []int{1}
}
func (m *EdgeHeartbeatAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EdgeHeartbeatAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EdgeHeartbeatAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EdgeHeartbeatAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeHeartbeatAck.Merge(m, src)
}
func (m *EdgeHeartbeatAck) XXX_Size() int {
	return m.Size()
}
func (m *EdgeHeartbeatAck) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeHeartbeatAck.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeHeartbeatAck proto.InternalMessageInfo

func (m *EdgeHeartbeatAck) GetSeqID() int64 {
	if m != nil {
		return m.SeqID
	}
	return 0
}

type CPRunModel struct {
}

func (m *CPRunModel) Reset()      { *m = CPRunModel{} }
func (*CPRunModel) ProtoMessage() {}
func (*CPRunModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdaf1f89158d2cba, []int{2}
}
func (m *CPRunModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPRunModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPRunModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPRunModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPRunModel.Merge(m, src)
}
func (m *CPRunModel) XXX_Size() int {
	return m.Size()
}
func (m *CPRunModel) XXX_DiscardUnknown() {
	xxx_messageInfo_CPRunModel.DiscardUnknown(m)
}

var xxx_messageInfo_CPRunModel proto.InternalMessageInfo

type CPRunModelAck struct {
}

func (m *CPRunModelAck) Reset()      { *m = CPRunModelAck{} }
func (*CPRunModelAck) ProtoMessage() {}
func (*CPRunModelAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdaf1f89158d2cba, []int{3}
}
func (m *CPRunModelAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPRunModelAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPRunModelAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPRunModelAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPRunModelAck.Merge(m, src)
}
func (m *CPRunModelAck) XXX_Size() int {
	return m.Size()
}
func (m *CPRunModelAck) XXX_DiscardUnknown() {
	xxx_messageInfo_CPRunModelAck.DiscardUnknown(m)
}

var xxx_messageInfo_CPRunModelAck proto.InternalMessageInfo

type EdgeCPMetadata struct {
	Topic         EdgeCPTopic      `protobuf:"varint,1,opt,name=topic,proto3,enum=gml.internal.api.core.v1.EdgeCPTopic" json:"topic,omitempty"`
	DeviceID      *typespb.UUID    `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	RecvTimestamp *types.Timestamp `protobuf:"bytes,3,opt,name=recv_timestamp,json=recvTimestamp,proto3" json:"recv_timestamp,omitempty"`
}

func (m *EdgeCPMetadata) Reset()      { *m = EdgeCPMetadata{} }
func (*EdgeCPMetadata) ProtoMessage() {}
func (*EdgeCPMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdaf1f89158d2cba, []int{4}
}
func (m *EdgeCPMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EdgeCPMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EdgeCPMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EdgeCPMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeCPMetadata.Merge(m, src)
}
func (m *EdgeCPMetadata) XXX_Size() int {
	return m.Size()
}
func (m *EdgeCPMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeCPMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeCPMetadata proto.InternalMessageInfo

func (m *EdgeCPMetadata) GetTopic() EdgeCPTopic {
	if m != nil {
		return m.Topic
	}
	return EDGE_CP_TOPIC_UNKNOWN
}

func (m *EdgeCPMetadata) GetDeviceID() *typespb.UUID {
	if m != nil {
		return m.DeviceID
	}
	return nil
}

func (m *EdgeCPMetadata) GetRecvTimestamp() *types.Timestamp {
	if m != nil {
		return m.RecvTimestamp
	}
	return nil
}

type EdgeCPMessage struct {
	Metadata *EdgeCPMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Msg      *types.Any      `protobuf:"bytes,1000,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *EdgeCPMessage) Reset()      { *m = EdgeCPMessage{} }
func (*EdgeCPMessage) ProtoMessage() {}
func (*EdgeCPMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdaf1f89158d2cba, []int{5}
}
func (m *EdgeCPMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EdgeCPMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EdgeCPMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EdgeCPMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeCPMessage.Merge(m, src)
}
func (m *EdgeCPMessage) XXX_Size() int {
	return m.Size()
}
func (m *EdgeCPMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeCPMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeCPMessage proto.InternalMessageInfo

func (m *EdgeCPMessage) GetMetadata() *EdgeCPMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *EdgeCPMessage) GetMsg() *types.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

type CPEdgeMetadata struct {
	Topic         CPEdgeTopic      `protobuf:"varint,1,opt,name=topic,proto3,enum=gml.internal.api.core.v1.CPEdgeTopic" json:"topic,omitempty"`
	DeviceID      *typespb.UUID    `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	RecvTimestamp *types.Timestamp `protobuf:"bytes,3,opt,name=recv_timestamp,json=recvTimestamp,proto3" json:"recv_timestamp,omitempty"`
}

func (m *CPEdgeMetadata) Reset()      { *m = CPEdgeMetadata{} }
func (*CPEdgeMetadata) ProtoMessage() {}
func (*CPEdgeMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdaf1f89158d2cba, []int{6}
}
func (m *CPEdgeMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPEdgeMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPEdgeMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPEdgeMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPEdgeMetadata.Merge(m, src)
}
func (m *CPEdgeMetadata) XXX_Size() int {
	return m.Size()
}
func (m *CPEdgeMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CPEdgeMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CPEdgeMetadata proto.InternalMessageInfo

func (m *CPEdgeMetadata) GetTopic() CPEdgeTopic {
	if m != nil {
		return m.Topic
	}
	return CP_EDGE_TOPIC_UNKNOWN
}

func (m *CPEdgeMetadata) GetDeviceID() *typespb.UUID {
	if m != nil {
		return m.DeviceID
	}
	return nil
}

func (m *CPEdgeMetadata) GetRecvTimestamp() *types.Timestamp {
	if m != nil {
		return m.RecvTimestamp
	}
	return nil
}

type CPEdgeMessage struct {
	Metadata *CPEdgeMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Msg      *types.Any      `protobuf:"bytes,1000,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *CPEdgeMessage) Reset()      { *m = CPEdgeMessage{} }
func (*CPEdgeMessage) ProtoMessage() {}
func (*CPEdgeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdaf1f89158d2cba, []int{7}
}
func (m *CPEdgeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPEdgeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPEdgeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPEdgeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPEdgeMessage.Merge(m, src)
}
func (m *CPEdgeMessage) XXX_Size() int {
	return m.Size()
}
func (m *CPEdgeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CPEdgeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CPEdgeMessage proto.InternalMessageInfo

func (m *CPEdgeMessage) GetMetadata() *CPEdgeMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CPEdgeMessage) GetMsg() *types.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

func init() {
	proto.RegisterEnum("gml.internal.api.core.v1.EdgeCPTopic", EdgeCPTopic_name, EdgeCPTopic_value)
	proto.RegisterEnum("gml.internal.api.core.v1.CPEdgeTopic", CPEdgeTopic_name, CPEdgeTopic_value)
	proto.RegisterType((*EdgeHeartbeat)(nil), "gml.internal.api.core.v1.EdgeHeartbeat")
	proto.RegisterType((*EdgeHeartbeatAck)(nil), "gml.internal.api.core.v1.EdgeHeartbeatAck")
	proto.RegisterType((*CPRunModel)(nil), "gml.internal.api.core.v1.CPRunModel")
	proto.RegisterType((*CPRunModelAck)(nil), "gml.internal.api.core.v1.CPRunModelAck")
	proto.RegisterType((*EdgeCPMetadata)(nil), "gml.internal.api.core.v1.EdgeCPMetadata")
	proto.RegisterType((*EdgeCPMessage)(nil), "gml.internal.api.core.v1.EdgeCPMessage")
	proto.RegisterType((*CPEdgeMetadata)(nil), "gml.internal.api.core.v1.CPEdgeMetadata")
	proto.RegisterType((*CPEdgeMessage)(nil), "gml.internal.api.core.v1.CPEdgeMessage")
}

func init() { proto.RegisterFile("src/api/corepb/v1/cp_edge.proto", fileDescriptor_fdaf1f89158d2cba) }

var fileDescriptor_fdaf1f89158d2cba = []byte{
	// 598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0x4d, 0x4b, 0xdc, 0x4e,
	0x1c, 0xc7, 0x33, 0xff, 0x45, 0xff, 0x3a, 0x3e, 0x2d, 0xc1, 0x96, 0x55, 0xe8, 0xac, 0x2c, 0x94,
	0x4a, 0xa1, 0x13, 0xb4, 0xbd, 0xb4, 0x9e, 0xd6, 0x64, 0x69, 0x43, 0x51, 0x43, 0xdc, 0xa5, 0xc5,
	0x4b, 0x98, 0x24, 0xd3, 0x38, 0x98, 0x64, 0x62, 0x32, 0xbb, 0xb0, 0x97, 0xd2, 0x97, 0xd0, 0x97,
	0xd1, 0x97, 0xd2, 0x43, 0x0f, 0x1e, 0x3d, 0x49, 0x8d, 0x17, 0x8f, 0xbe, 0x84, 0x92, 0x89, 0xbb,
	0x6e, 0x6a, 0x4b, 0xcb, 0x9e, 0x7a, 0x9b, 0x1f, 0xdf, 0x87, 0xcc, 0xef, 0x43, 0x18, 0xd8, 0xcc,
	0x52, 0x4f, 0x23, 0x09, 0xd3, 0x3c, 0x9e, 0xd2, 0xc4, 0xd5, 0x06, 0x5b, 0x9a, 0x97, 0x38, 0xd4,
	0x0f, 0x28, 0x4e, 0x52, 0x2e, 0xb8, 0xda, 0x08, 0xa2, 0x10, 0xb3, 0x58, 0xd0, 0x34, 0x26, 0x21,
	0x26, 0x09, 0xc3, 0x85, 0x13, 0x0f, 0xb6, 0xd6, 0x5f, 0x8a, 0x63, 0x96, 0xfa, 0x4e, 0x42, 0x52,
	0x31, 0xd4, 0x02, 0x26, 0x8e, 0xfb, 0x2e, 0xf6, 0x78, 0xa4, 0x05, 0x3c, 0xe0, 0x9a, 0x0c, 0xbb,
	0xfd, 0x0f, 0x72, 0x92, 0x83, 0x3c, 0x95, 0xa5, 0xeb, 0x8f, 0x8a, 0xaf, 0x7a, 0x3c, 0x8a, 0x78,
	0xac, 0x89, 0x61, 0x42, 0xb3, 0xc4, 0xd5, 0xfa, 0x7d, 0xe6, 0xdf, 0xca, 0x6b, 0x01, 0xe7, 0x41,
	0x48, 0xef, 0x4a, 0x48, 0x3c, 0xbc, 0x95, 0x9a, 0x3f, 0x4b, 0x82, 0x45, 0x34, 0x13, 0x24, 0x4a,
	0x4a, 0x43, 0x6b, 0x0b, 0x2e, 0x75, 0xfc, 0x80, 0xbe, 0xa1, 0x24, 0x15, 0x2e, 0x25, 0x42, 0xdd,
	0x80, 0xb3, 0x19, 0x3d, 0x75, 0x98, 0xdf, 0x00, 0x1b, 0x60, 0xb3, 0xb6, 0x3b, 0x9f, 0x5f, 0x34,
	0x67, 0x0e, 0xe9, 0xa9, 0x69, 0xd8, 0x33, 0x19, 0x3d, 0x35, 0xfd, 0xd6, 0x0b, 0x58, 0xaf, 0x44,
	0xda, 0xde, 0xc9, 0x5f, 0xa4, 0x16, 0x21, 0xd4, 0x2d, 0xbb, 0x1f, 0xef, 0x71, 0x9f, 0x86, 0xad,
	0x15, 0xb8, 0x74, 0x37, 0xb5, 0xbd, 0x93, 0xd6, 0x37, 0x00, 0x97, 0x8b, 0x56, 0xdd, 0xda, 0xa3,
	0x82, 0xf8, 0x44, 0x10, 0x75, 0x07, 0xce, 0x08, 0x9e, 0x30, 0x4f, 0x56, 0x2e, 0x6f, 0x3f, 0xc6,
	0xbf, 0x43, 0x8b, 0xcb, 0x60, 0xb7, 0x30, 0xdb, 0x65, 0x46, 0x7d, 0x05, 0xe7, 0x7d, 0x3a, 0x60,
	0x1e, 0x2d, 0xee, 0xf4, 0xdf, 0x06, 0xd8, 0x5c, 0xd8, 0x5e, 0x91, 0x05, 0x92, 0x1f, 0xee, 0xf5,
	0x4c, 0x63, 0x77, 0x31, 0xbf, 0x68, 0xce, 0x19, 0xd2, 0x65, 0x1a, 0xf6, 0x5c, 0xe9, 0x37, 0x7d,
	0xb5, 0x0d, 0x97, 0x53, 0xea, 0x0d, 0x9c, 0x31, 0xab, 0x46, 0x4d, 0x16, 0xac, 0xe3, 0x92, 0x26,
	0x1e, 0xd1, 0xc4, 0xdd, 0x91, 0xc3, 0x5e, 0x2a, 0x12, 0xe3, 0xb1, 0xf5, 0xb1, 0xc4, 0x5a, 0x6c,
	0x93, 0x65, 0x24, 0xa0, 0xaa, 0x01, 0xe7, 0xa2, 0xdb, 0xc5, 0xe4, 0x3e, 0x0b, 0xdb, 0x9b, 0x7f,
	0xda, 0x67, 0x04, 0xc2, 0x1e, 0x27, 0xd5, 0x27, 0xb0, 0x16, 0x65, 0x41, 0xe3, 0xfa, 0x7f, 0xd9,
	0xb0, 0x7a, 0xef, 0x3e, 0xed, 0x78, 0x68, 0x17, 0x0e, 0x89, 0x53, 0xb7, 0x8a, 0x9e, 0x29, 0x70,
	0x96, 0xc1, 0x7f, 0x0c, 0xe7, 0x68, 0x9b, 0x29, 0x70, 0x56, 0x41, 0x4c, 0x81, 0xf3, 0xe9, 0x11,
	0x5c, 0x98, 0xf8, 0xc7, 0xd4, 0x35, 0xf8, 0xa0, 0x63, 0xbc, 0xee, 0x38, 0xba, 0xe5, 0x74, 0x0f,
	0x2c, 0x53, 0x77, 0x7a, 0xfb, 0x6f, 0xf7, 0x0f, 0xde, 0xed, 0xd7, 0x15, 0xb5, 0x01, 0x57, 0xab,
	0xd2, 0x61, 0xb7, 0xdd, 0xed, 0x1d, 0xd6, 0x81, 0xfa, 0x10, 0xaa, 0x55, 0xa5, 0xf3, 0xbe, 0xa3,
	0xd7, 0x6b, 0x45, 0xf7, 0x04, 0xf0, 0xa2, 0x5b, 0xb7, 0x1c, 0xe9, 0xfc, 0x45, 0x77, 0x55, 0x9a,
	0xec, 0xae, 0x2a, 0x65, 0xf7, 0xae, 0x77, 0x76, 0x89, 0x94, 0xf3, 0x4b, 0xa4, 0xdc, 0x5c, 0x22,
	0xf0, 0x29, 0x47, 0xe0, 0x4b, 0x8e, 0xc0, 0xd7, 0x1c, 0x81, 0xb3, 0x1c, 0x81, 0xef, 0x39, 0x02,
	0xd7, 0x39, 0x52, 0x6e, 0x72, 0x04, 0x3e, 0x5f, 0x21, 0xe5, 0xec, 0x0a, 0x29, 0xe7, 0x57, 0x48,
	0x39, 0x7a, 0x16, 0xb0, 0x28, 0xa4, 0x22, 0x24, 0x6e, 0x86, 0x09, 0xd3, 0xca, 0x49, 0xbb, 0xf7,
	0xf2, 0xed, 0x94, 0x27, 0x77, 0x56, 0xf2, 0x7a, 0xfe, 0x23, 0x00, 0x00, 0xff, 0xff, 0x46, 0xc4,
	0xda, 0x28, 0x1c, 0x05, 0x00, 0x00,
}

func (x EdgeCPTopic) String() string {
	s, ok := EdgeCPTopic_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CPEdgeTopic) String() string {
	s, ok := CPEdgeTopic_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *EdgeHeartbeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EdgeHeartbeat)
	if !ok {
		that2, ok := that.(EdgeHeartbeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SeqID != that1.SeqID {
		return false
	}
	return true
}
func (this *EdgeHeartbeatAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EdgeHeartbeatAck)
	if !ok {
		that2, ok := that.(EdgeHeartbeatAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SeqID != that1.SeqID {
		return false
	}
	return true
}
func (this *CPRunModel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPRunModel)
	if !ok {
		that2, ok := that.(CPRunModel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CPRunModelAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPRunModelAck)
	if !ok {
		that2, ok := that.(CPRunModelAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *EdgeCPMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EdgeCPMetadata)
	if !ok {
		that2, ok := that.(EdgeCPMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	if !this.DeviceID.Equal(that1.DeviceID) {
		return false
	}
	if !this.RecvTimestamp.Equal(that1.RecvTimestamp) {
		return false
	}
	return true
}
func (this *EdgeCPMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EdgeCPMessage)
	if !ok {
		that2, ok := that.(EdgeCPMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *CPEdgeMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPEdgeMetadata)
	if !ok {
		that2, ok := that.(CPEdgeMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	if !this.DeviceID.Equal(that1.DeviceID) {
		return false
	}
	if !this.RecvTimestamp.Equal(that1.RecvTimestamp) {
		return false
	}
	return true
}
func (this *CPEdgeMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPEdgeMessage)
	if !ok {
		that2, ok := that.(CPEdgeMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *EdgeHeartbeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.EdgeHeartbeat{")
	s = append(s, "SeqID: "+fmt.Sprintf("%#v", this.SeqID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EdgeHeartbeatAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.EdgeHeartbeatAck{")
	s = append(s, "SeqID: "+fmt.Sprintf("%#v", this.SeqID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CPRunModel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&corepb.CPRunModel{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CPRunModelAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&corepb.CPRunModelAck{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EdgeCPMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&corepb.EdgeCPMetadata{")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	if this.DeviceID != nil {
		s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	}
	if this.RecvTimestamp != nil {
		s = append(s, "RecvTimestamp: "+fmt.Sprintf("%#v", this.RecvTimestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EdgeCPMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&corepb.EdgeCPMessage{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CPEdgeMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&corepb.CPEdgeMetadata{")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	if this.DeviceID != nil {
		s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	}
	if this.RecvTimestamp != nil {
		s = append(s, "RecvTimestamp: "+fmt.Sprintf("%#v", this.RecvTimestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CPEdgeMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&corepb.CPEdgeMessage{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCpEdge(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *EdgeHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EdgeHeartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeqID != 0 {
		i = encodeVarintCpEdge(dAtA, i, uint64(m.SeqID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EdgeHeartbeatAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeHeartbeatAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EdgeHeartbeatAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeqID != 0 {
		i = encodeVarintCpEdge(dAtA, i, uint64(m.SeqID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPRunModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRunModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPRunModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CPRunModelAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRunModelAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPRunModelAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EdgeCPMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeCPMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EdgeCPMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecvTimestamp != nil {
		{
			size, err := m.RecvTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DeviceID != nil {
		{
			size, err := m.DeviceID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Topic != 0 {
		i = encodeVarintCpEdge(dAtA, i, uint64(m.Topic))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EdgeCPMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeCPMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EdgeCPMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPEdgeMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPEdgeMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPEdgeMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecvTimestamp != nil {
		{
			size, err := m.RecvTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DeviceID != nil {
		{
			size, err := m.DeviceID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Topic != 0 {
		i = encodeVarintCpEdge(dAtA, i, uint64(m.Topic))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPEdgeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPEdgeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPEdgeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCpEdge(dAtA []byte, offset int, v uint64) int {
	offset -= sovCpEdge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EdgeHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqID != 0 {
		n += 1 + sovCpEdge(uint64(m.SeqID))
	}
	return n
}

func (m *EdgeHeartbeatAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqID != 0 {
		n += 1 + sovCpEdge(uint64(m.SeqID))
	}
	return n
}

func (m *CPRunModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CPRunModelAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EdgeCPMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != 0 {
		n += 1 + sovCpEdge(uint64(m.Topic))
	}
	if m.DeviceID != nil {
		l = m.DeviceID.Size()
		n += 1 + l + sovCpEdge(uint64(l))
	}
	if m.RecvTimestamp != nil {
		l = m.RecvTimestamp.Size()
		n += 1 + l + sovCpEdge(uint64(l))
	}
	return n
}

func (m *EdgeCPMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCpEdge(uint64(l))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 2 + l + sovCpEdge(uint64(l))
	}
	return n
}

func (m *CPEdgeMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != 0 {
		n += 1 + sovCpEdge(uint64(m.Topic))
	}
	if m.DeviceID != nil {
		l = m.DeviceID.Size()
		n += 1 + l + sovCpEdge(uint64(l))
	}
	if m.RecvTimestamp != nil {
		l = m.RecvTimestamp.Size()
		n += 1 + l + sovCpEdge(uint64(l))
	}
	return n
}

func (m *CPEdgeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCpEdge(uint64(l))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 2 + l + sovCpEdge(uint64(l))
	}
	return n
}

func sovCpEdge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCpEdge(x uint64) (n int) {
	return sovCpEdge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EdgeHeartbeat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EdgeHeartbeat{`,
		`SeqID:` + fmt.Sprintf("%v", this.SeqID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EdgeHeartbeatAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EdgeHeartbeatAck{`,
		`SeqID:` + fmt.Sprintf("%v", this.SeqID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CPRunModel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CPRunModel{`,
		`}`,
	}, "")
	return s
}
func (this *CPRunModelAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CPRunModelAck{`,
		`}`,
	}, "")
	return s
}
func (this *EdgeCPMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EdgeCPMetadata{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`DeviceID:` + strings.Replace(fmt.Sprintf("%v", this.DeviceID), "UUID", "typespb.UUID", 1) + `,`,
		`RecvTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.RecvTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EdgeCPMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EdgeCPMessage{`,
		`Metadata:` + strings.Replace(this.Metadata.String(), "EdgeCPMetadata", "EdgeCPMetadata", 1) + `,`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CPEdgeMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CPEdgeMetadata{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`DeviceID:` + strings.Replace(fmt.Sprintf("%v", this.DeviceID), "UUID", "typespb.UUID", 1) + `,`,
		`RecvTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.RecvTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CPEdgeMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CPEdgeMessage{`,
		`Metadata:` + strings.Replace(this.Metadata.String(), "CPEdgeMetadata", "CPEdgeMetadata", 1) + `,`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCpEdge(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EdgeHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqID", wireType)
			}
			m.SeqID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCpEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EdgeHeartbeatAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeHeartbeatAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeHeartbeatAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqID", wireType)
			}
			m.SeqID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCpEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRunModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRunModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRunModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCpEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCpEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRunModelAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRunModelAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRunModelAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCpEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCpEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EdgeCPMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeCPMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeCPMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			m.Topic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topic |= EdgeCPTopic(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceID == nil {
				m.DeviceID = &typespb.UUID{}
			}
			if err := m.DeviceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecvTimestamp == nil {
				m.RecvTimestamp = &types.Timestamp{}
			}
			if err := m.RecvTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCpEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EdgeCPMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeCPMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeCPMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &EdgeCPMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCpEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPEdgeMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPEdgeMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPEdgeMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			m.Topic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topic |= CPEdgeTopic(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceID == nil {
				m.DeviceID = &typespb.UUID{}
			}
			if err := m.DeviceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecvTimestamp == nil {
				m.RecvTimestamp = &types.Timestamp{}
			}
			if err := m.RecvTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCpEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPEdgeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPEdgeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPEdgeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &CPEdgeMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCpEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCpEdge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCpEdge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCpEdge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCpEdge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCpEdge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCpEdge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCpEdge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCpEdge = fmt.Errorf("proto: unexpected end of group")
)
