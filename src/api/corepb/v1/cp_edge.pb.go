// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/api/corepb/v1/cp_edge.proto

package corepb

import (
	fmt "fmt"
	typespb "gimletlabs.ai/gimlet/src/common/typespb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EdgeHeartbeat struct {
	SeqID int64 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
}

func (m *EdgeHeartbeat) Reset()      { *m = EdgeHeartbeat{} }
func (*EdgeHeartbeat) ProtoMessage() {}
func (*EdgeHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdaf1f89158d2cba, []int{0}
}
func (m *EdgeHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EdgeHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EdgeHeartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EdgeHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeHeartbeat.Merge(m, src)
}
func (m *EdgeHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *EdgeHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeHeartbeat proto.InternalMessageInfo

func (m *EdgeHeartbeat) GetSeqID() int64 {
	if m != nil {
		return m.SeqID
	}
	return 0
}

type EdgeCPMetadata struct {
	DeviceID      *typespb.UUID    `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	RecvTimestamp *types.Timestamp `protobuf:"bytes,2,opt,name=recv_timestamp,json=recvTimestamp,proto3" json:"recv_timestamp,omitempty"`
}

func (m *EdgeCPMetadata) Reset()      { *m = EdgeCPMetadata{} }
func (*EdgeCPMetadata) ProtoMessage() {}
func (*EdgeCPMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdaf1f89158d2cba, []int{1}
}
func (m *EdgeCPMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EdgeCPMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EdgeCPMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EdgeCPMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeCPMetadata.Merge(m, src)
}
func (m *EdgeCPMetadata) XXX_Size() int {
	return m.Size()
}
func (m *EdgeCPMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeCPMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeCPMetadata proto.InternalMessageInfo

func (m *EdgeCPMetadata) GetDeviceID() *typespb.UUID {
	if m != nil {
		return m.DeviceID
	}
	return nil
}

func (m *EdgeCPMetadata) GetRecvTimestamp() *types.Timestamp {
	if m != nil {
		return m.RecvTimestamp
	}
	return nil
}

type EdgeCPStatus struct {
	Metadata *EdgeCPMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Types that are valid to be assigned to MsgOneof:
	//
	//	*EdgeCPStatus_Heartbeat
	MsgOneof isEdgeCPStatus_MsgOneof `protobuf_oneof:"msg_oneof"`
}

func (m *EdgeCPStatus) Reset()      { *m = EdgeCPStatus{} }
func (*EdgeCPStatus) ProtoMessage() {}
func (*EdgeCPStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdaf1f89158d2cba, []int{2}
}
func (m *EdgeCPStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EdgeCPStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EdgeCPStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EdgeCPStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeCPStatus.Merge(m, src)
}
func (m *EdgeCPStatus) XXX_Size() int {
	return m.Size()
}
func (m *EdgeCPStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeCPStatus.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeCPStatus proto.InternalMessageInfo

type isEdgeCPStatus_MsgOneof interface {
	isEdgeCPStatus_MsgOneof()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type EdgeCPStatus_Heartbeat struct {
	Heartbeat *EdgeHeartbeat `protobuf:"bytes,1000,opt,name=heartbeat,proto3,oneof" json:"heartbeat,omitempty"`
}

func (*EdgeCPStatus_Heartbeat) isEdgeCPStatus_MsgOneof() {}

func (m *EdgeCPStatus) GetMsgOneof() isEdgeCPStatus_MsgOneof {
	if m != nil {
		return m.MsgOneof
	}
	return nil
}

func (m *EdgeCPStatus) GetMetadata() *EdgeCPMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *EdgeCPStatus) GetHeartbeat() *EdgeHeartbeat {
	if x, ok := m.GetMsgOneof().(*EdgeCPStatus_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EdgeCPStatus) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EdgeCPStatus_Heartbeat)(nil),
	}
}

func init() {
	proto.RegisterType((*EdgeHeartbeat)(nil), "gml.internal.api.core.v1.EdgeHeartbeat")
	proto.RegisterType((*EdgeCPMetadata)(nil), "gml.internal.api.core.v1.EdgeCPMetadata")
	proto.RegisterType((*EdgeCPStatus)(nil), "gml.internal.api.core.v1.EdgeCPStatus")
}

func init() { proto.RegisterFile("src/api/corepb/v1/cp_edge.proto", fileDescriptor_fdaf1f89158d2cba) }

var fileDescriptor_fdaf1f89158d2cba = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x3d, 0x8f, 0xd3, 0x30,
	0x1c, 0xc6, 0x63, 0xd0, 0x1d, 0xad, 0xef, 0x05, 0x29, 0x53, 0x55, 0x09, 0xf7, 0xd4, 0x85, 0x5b,
	0xb0, 0x55, 0x98, 0x80, 0x89, 0x12, 0xa4, 0x66, 0x40, 0x42, 0x39, 0x6e, 0x61, 0x89, 0x9c, 0xe4,
	0x7f, 0xae, 0xa5, 0xa4, 0x76, 0x13, 0xa7, 0xd2, 0x6d, 0x7c, 0x03, 0xf8, 0x18, 0x48, 0x7c, 0x11,
	0xc6, 0x8e, 0x37, 0x9d, 0xa8, 0xbb, 0xdc, 0x78, 0x1f, 0x01, 0xc5, 0xe9, 0x8b, 0x10, 0xe2, 0x36,
	0x3f, 0xca, 0xf3, 0x3c, 0xf9, 0xf9, 0x91, 0xf1, 0xa0, 0x2a, 0x53, 0xc6, 0xb5, 0x64, 0xa9, 0x2a,
	0x41, 0x27, 0x6c, 0x31, 0x62, 0xa9, 0x8e, 0x21, 0x13, 0x40, 0x75, 0xa9, 0x8c, 0xf2, 0x7b, 0xa2,
	0xc8, 0xa9, 0x9c, 0x19, 0x28, 0x67, 0x3c, 0xa7, 0x5c, 0x4b, 0xda, 0x38, 0xe9, 0x62, 0xd4, 0x7f,
	0x6d, 0xa6, 0xb2, 0xcc, 0x62, 0xcd, 0x4b, 0x73, 0xcd, 0x84, 0x34, 0xd3, 0x3a, 0xa1, 0xa9, 0x2a,
	0x98, 0x50, 0x42, 0x31, 0x17, 0x4e, 0xea, 0x2b, 0xa7, 0x9c, 0x70, 0xa7, 0xb6, 0xb4, 0xff, 0xac,
	0xf9, 0x6b, 0xaa, 0x8a, 0x42, 0xcd, 0x98, 0xb9, 0xd6, 0x50, 0xe9, 0x84, 0xd5, 0xb5, 0xcc, 0x36,
	0x9f, 0x07, 0x42, 0x29, 0x91, 0xc3, 0xbe, 0xc4, 0xc8, 0x02, 0x2a, 0xc3, 0x0b, 0xdd, 0x1a, 0x86,
	0x23, 0x7c, 0xf2, 0x21, 0x13, 0x30, 0x01, 0x5e, 0x9a, 0x04, 0xb8, 0xf1, 0xcf, 0xf0, 0x61, 0x05,
	0xf3, 0x58, 0x66, 0x3d, 0x74, 0x86, 0xce, 0x1f, 0x8f, 0xbb, 0xf6, 0x76, 0x70, 0x70, 0x01, 0xf3,
	0x30, 0x88, 0x0e, 0x2a, 0x98, 0x87, 0xd9, 0xf0, 0x1b, 0xc2, 0xa7, 0x4d, 0xe6, 0xfd, 0xa7, 0x8f,
	0x60, 0x78, 0xc6, 0x0d, 0xf7, 0xdf, 0xe0, 0x6e, 0x06, 0x0b, 0x99, 0xc2, 0x36, 0x77, 0xf4, 0xf2,
	0x29, 0x6d, 0xae, 0xeb, 0x90, 0xe8, 0xe5, 0x65, 0x18, 0x8c, 0x8f, 0xed, 0xed, 0xa0, 0x13, 0x38,
	0x57, 0x18, 0x44, 0x9d, 0xd6, 0x1f, 0x66, 0xfe, 0x3b, 0x7c, 0x5a, 0x42, 0xba, 0x88, 0x77, 0x64,
	0xbd, 0x47, 0xae, 0xa0, 0x4f, 0x5b, 0x76, 0xba, 0x65, 0xa7, 0x9f, 0xb7, 0x8e, 0xe8, 0xa4, 0x49,
	0xec, 0xe4, 0xf0, 0x27, 0xc2, 0xc7, 0x2d, 0xd1, 0x85, 0xe1, 0xa6, 0xae, 0xfc, 0x00, 0x77, 0x8a,
	0x0d, 0xdb, 0x06, 0xe7, 0x9c, 0xfe, 0x6f, 0x7d, 0xfa, 0xf7, 0x5d, 0xa2, 0x5d, 0xd2, 0x9f, 0xe0,
	0xee, 0x74, 0xbb, 0x4b, 0xef, 0xee, 0x89, 0xeb, 0x79, 0xfe, 0x70, 0xcf, 0x6e, 0xc7, 0x89, 0x17,
	0xed, 0xc3, 0xe3, 0x23, 0xdc, 0x2d, 0x2a, 0x11, 0xab, 0x19, 0xa8, 0xab, 0x71, 0xba, 0x5c, 0x11,
	0xef, 0x66, 0x45, 0xbc, 0xfb, 0x15, 0x41, 0x5f, 0x2d, 0x41, 0x3f, 0x2c, 0x41, 0xbf, 0x2c, 0x41,
	0x4b, 0x4b, 0xd0, 0x6f, 0x4b, 0xd0, 0x9d, 0x25, 0xde, 0xbd, 0x25, 0xe8, 0xfb, 0x9a, 0x78, 0xcb,
	0x35, 0xf1, 0x6e, 0xd6, 0xc4, 0xfb, 0xf2, 0x42, 0xc8, 0x22, 0x07, 0x93, 0xf3, 0xa4, 0xa2, 0x5c,
	0xb2, 0x56, 0xb1, 0x7f, 0xde, 0xdc, 0xdb, 0xf6, 0x94, 0x1c, 0xba, 0xd5, 0x5e, 0xfd, 0x09, 0x00,
	0x00, 0xff, 0xff, 0x48, 0xe8, 0x31, 0xdc, 0x96, 0x02, 0x00, 0x00,
}

func (this *EdgeHeartbeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EdgeHeartbeat)
	if !ok {
		that2, ok := that.(EdgeHeartbeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SeqID != that1.SeqID {
		return false
	}
	return true
}
func (this *EdgeCPMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EdgeCPMetadata)
	if !ok {
		that2, ok := that.(EdgeCPMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeviceID.Equal(that1.DeviceID) {
		return false
	}
	if !this.RecvTimestamp.Equal(that1.RecvTimestamp) {
		return false
	}
	return true
}
func (this *EdgeCPStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EdgeCPStatus)
	if !ok {
		that2, ok := that.(EdgeCPStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.MsgOneof == nil {
		if this.MsgOneof != nil {
			return false
		}
	} else if this.MsgOneof == nil {
		return false
	} else if !this.MsgOneof.Equal(that1.MsgOneof) {
		return false
	}
	return true
}
func (this *EdgeCPStatus_Heartbeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EdgeCPStatus_Heartbeat)
	if !ok {
		that2, ok := that.(EdgeCPStatus_Heartbeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Heartbeat.Equal(that1.Heartbeat) {
		return false
	}
	return true
}
func (this *EdgeHeartbeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.EdgeHeartbeat{")
	s = append(s, "SeqID: "+fmt.Sprintf("%#v", this.SeqID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EdgeCPMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&corepb.EdgeCPMetadata{")
	if this.DeviceID != nil {
		s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	}
	if this.RecvTimestamp != nil {
		s = append(s, "RecvTimestamp: "+fmt.Sprintf("%#v", this.RecvTimestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EdgeCPStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&corepb.EdgeCPStatus{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.MsgOneof != nil {
		s = append(s, "MsgOneof: "+fmt.Sprintf("%#v", this.MsgOneof)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EdgeCPStatus_Heartbeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&corepb.EdgeCPStatus_Heartbeat{` +
		`Heartbeat:` + fmt.Sprintf("%#v", this.Heartbeat) + `}`}, ", ")
	return s
}
func valueToGoStringCpEdge(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *EdgeHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EdgeHeartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeqID != 0 {
		i = encodeVarintCpEdge(dAtA, i, uint64(m.SeqID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EdgeCPMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeCPMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EdgeCPMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecvTimestamp != nil {
		{
			size, err := m.RecvTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DeviceID != nil {
		{
			size, err := m.DeviceID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EdgeCPStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeCPStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EdgeCPStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgOneof != nil {
		{
			size := m.MsgOneof.Size()
			i -= size
			if _, err := m.MsgOneof.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EdgeCPStatus_Heartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EdgeCPStatus_Heartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Heartbeat != nil {
		{
			size, err := m.Heartbeat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func encodeVarintCpEdge(dAtA []byte, offset int, v uint64) int {
	offset -= sovCpEdge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EdgeHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqID != 0 {
		n += 1 + sovCpEdge(uint64(m.SeqID))
	}
	return n
}

func (m *EdgeCPMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceID != nil {
		l = m.DeviceID.Size()
		n += 1 + l + sovCpEdge(uint64(l))
	}
	if m.RecvTimestamp != nil {
		l = m.RecvTimestamp.Size()
		n += 1 + l + sovCpEdge(uint64(l))
	}
	return n
}

func (m *EdgeCPStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCpEdge(uint64(l))
	}
	if m.MsgOneof != nil {
		n += m.MsgOneof.Size()
	}
	return n
}

func (m *EdgeCPStatus_Heartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Heartbeat != nil {
		l = m.Heartbeat.Size()
		n += 2 + l + sovCpEdge(uint64(l))
	}
	return n
}

func sovCpEdge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCpEdge(x uint64) (n int) {
	return sovCpEdge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EdgeHeartbeat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EdgeHeartbeat{`,
		`SeqID:` + fmt.Sprintf("%v", this.SeqID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EdgeCPMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EdgeCPMetadata{`,
		`DeviceID:` + strings.Replace(fmt.Sprintf("%v", this.DeviceID), "UUID", "typespb.UUID", 1) + `,`,
		`RecvTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.RecvTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EdgeCPStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EdgeCPStatus{`,
		`Metadata:` + strings.Replace(this.Metadata.String(), "EdgeCPMetadata", "EdgeCPMetadata", 1) + `,`,
		`MsgOneof:` + fmt.Sprintf("%v", this.MsgOneof) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EdgeCPStatus_Heartbeat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EdgeCPStatus_Heartbeat{`,
		`Heartbeat:` + strings.Replace(fmt.Sprintf("%v", this.Heartbeat), "EdgeHeartbeat", "EdgeHeartbeat", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCpEdge(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EdgeHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqID", wireType)
			}
			m.SeqID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCpEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EdgeCPMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeCPMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeCPMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceID == nil {
				m.DeviceID = &typespb.UUID{}
			}
			if err := m.DeviceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecvTimestamp == nil {
				m.RecvTimestamp = &types.Timestamp{}
			}
			if err := m.RecvTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCpEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EdgeCPStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeCPStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeCPStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &EdgeCPMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heartbeat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EdgeHeartbeat{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MsgOneof = &EdgeCPStatus_Heartbeat{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCpEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCpEdge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCpEdge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCpEdge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCpEdge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCpEdge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCpEdge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCpEdge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCpEdge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCpEdge = fmt.Errorf("proto: unexpected end of group")
)
