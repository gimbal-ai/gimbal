/*
 * Copyright Â© 2023- Gimlet Labs, Inc.
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Gimlet Labs, Inc. and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Gimlet Labs, Inc. and its suppliers and
 * may be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law. Dissemination
 * of this information or reproduction of this material is strictly
 * forbidden unless prior written permission is obtained from
 * Gimlet Labs, Inc.
 *
 * SPDX-License-Identifier: Proprietary
 */

syntax = "proto3";

package gml.internal.api.core.v1;

option go_package = "gimletlabs.ai/gimlet/src/api/corepb/v1;corepb";

import "gogoproto/gogo.proto";
import "src/common/typespb/uuid.proto";
import "src/common/typespb/status.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "opentelemetry/proto/metrics/v1/metrics.proto";
import "src/api/corepb/v1/model_exec.proto";

/**
 * This file contains all the messages that are shared between the control plane and edge.
 */

/****************************************************************************
 * Messages that are used to monitor health status, routing, etc.
 * These should be sent on the .STATUS topic.
 *****************************************************************************/

// EdgeHeartbeat is the message sent from the edge device to let the control plane know it's
// connected and responsive.
message EdgeHeartbeat {
  // The sequence ID of this heartbeat. This needs to be monotonically increasing.
  int64 seq_id = 1 [ (gogoproto.customname) = "SeqID" ];
}

// EdgeHeartbeatAck is the message sent from the control plane to the edge device to acknowledge its
// heartbeat.
message EdgeHeartbeatAck {
  int64 seq_id = 1 [ (gogoproto.customname) = "SeqID" ];
}

/****************************************************************************
 * Messages that are used to signal start/stop of execution on the edge, etc.
 * These should be sent on the .EXEC topic.
 *****************************************************************************/

// PhysicalPipelineUpdate is a message from the control plane to edge to indicate requested updates
// to the device's physical pipeline.
message PhysicalPipelineSpecUpdate {
  // The ID of the physical pipeline.
  gml.types.UUID physical_pipeline_id = 1 [ (gogoproto.customname) = "PhysicalPipelineID" ];
  int64 version = 2;
  // The spec of the physical pipeline. This will contain the execution graph and other
  // configurations.
  gml.internal.api.core.v1.PhysicalPipelineSpec spec = 3;
}

// PhysicalPipelineUpdate is a message from the edge to control plane to indicate changes with the
// device's actual state.
message PhysicalPipelineStatusUpdate {
  // The ID of the physical pipeline.
  gml.types.UUID physical_pipeline_id = 1 [ (gogoproto.customname) = "PhysicalPipelineID" ];
  int64 version = 2;
  // The status of the physical pipeline on the device.
  gml.internal.api.core.v1.PhysicalPipelineStatus status = 3;
}

// CPRunModel is a temporary message sent from the control plane to the edge device  to signal
// starting of the model/mediapipe graph on the edge. In the future, this will be separated into
// separate Setup and Run phases.
message CPRunModel {}
// CPRunModelAck is a temporary message sent from the edge to the control plane to acknowledge that
// it received a CPRunModel message.
message CPRunModelAck {}

enum ExecutionGraphState {
  EXECUTION_GRAPH_STATE_UNKNOWN = 0;
  EXECUTION_GRAPH_STATE_UPDATE_REQUESTED = 10;
  EXECUTION_GRAPH_STATE_DOWNLOADING = 20;
  EXECUTION_GRAPH_STATE_COMPILING = 30;
  EXECUTION_GRAPH_STATE_READY = 40;
  EXECUTION_GRAPH_STATE_DEPLOYED = 50;
  EXECUTION_GRAPH_STATE_TERMINATING = 60;
  EXECUTION_GRAPH_STATE_FAILED = 100;
}

// ExecutionGraphSpec contains the specifications for the execution graph deployment.
message ExecutionGraphSpec {
  // The graph to deploy.
  gml.internal.api.core.v1.ExecutionSpec graph = 1;
  // The expected state in which we want the execution graph to be in.
  ExecutionGraphState state = 2;
  // The version of the exec graph. Should be monotonically increasing.
  int64 version = 3;
}

// ExecutionGraphSpec contains the status details for the execution graph deployment.
message ExecutionGraphStatus {
  // The expected state in which we want the execution graph to be in.
  ExecutionGraphState state = 1;
  // The reason for why the exec graph is in this state.
  string reason = 2;
  // The version of the exec graph.
  int64 version = 3;
}

// ApplyExecutionGraph is a request to apply the execution graph deployment to the edge device.
message ApplyExecutionGraph {
  // The ID of the physical pipeline that generated this graph.
  gml.types.UUID physical_pipeline_id = 1 [ (gogoproto.customname) = "PhysicalPipelineID" ];
  // The ID of the logical pipeline that generated this graph.
  gml.types.UUID logical_pipeline_id = 3 [ (gogoproto.customname) = "LogicalPipelineID" ];
  ExecutionGraphSpec spec = 2;
}

// DeleteExecutionGraph is a request to delete an execution graph deployment from the edge device.
message DeleteExecutionGraph {
  // The ID of the physical pipeline to delete.
  gml.types.UUID physical_pipeline_id = 1 [ (gogoproto.customname) = "PhysicalPipelineID" ];
}

// ExecutionGraphStatusUpdate is a status message from the edge device to the control plane about
// its exec graph state.
message ExecutionGraphStatusUpdate {
  // The ID of the physical pipeline.
  gml.types.UUID physical_pipeline_id = 1 [ (gogoproto.customname) = "PhysicalPipelineID" ];
  ExecutionGraphStatus status = 2;
}

/****************************************************************************
 * Messages that are used to stream video from the edge.
 * These should be sent on the .VIDEO topic.
 * The device will send messages from mediastream.
 *****************************************************************************/

// VideoStreamStart is a request to start a video stream on the device.
message VideoStreamStart {}

// VideoStreamStop is a request to notify the device to stop the video stream.
message VideoStreamStop {}

// VideoStreamKeepAlive is a keep alive, which the control plane sends out periodically to
// let the edge device know it should continue streaming video.
message VideoStreamKeepAlive {}

/****************************************************************************
 * Messages that are used to stream metrics from the edge.
 * These should be sent on the .METRICS topic.
 *****************************************************************************/

// EdgeOtelMetrics is a message sent from the edge to the controlplane containing arbitrary OTel
// format metrics.
message EdgeOTelMetrics {
  opentelemetry.proto.metrics.v1.ResourceMetrics resource_metrics = 1;
}

/****************************************************************************
 * Messages that are used to stream files to the edge.
 * These should be sent on the .FILETRANSFER topic.
 *****************************************************************************/

// FileTransferRequest is a request from the edge to the controlplane for the file at the given
// path.
message FileTransferRequest {
  // The path of the file to request.
  gml.types.UUID file_id = 1 [ (gogoproto.customname) = "FileID" ];
  // The byte at which we should start sending the chunk.
  int64 chunk_start_bytes = 2;
  // The number of bytes.
  int64 num_bytes = 3;
}

// FileTransferResponse is sent in response to a FileTransferRequest.
message FileTransferResponse {
  gml.types.Status status = 1;

  // FileChunk is a chunk of the requested file, sent from the controlplane to the edge.
  message FileChunk {
    // The byte at which this chunk begins.
    int64 start_bytes = 1;
    // The bytes of the chunk. Note, the length of this may not necessarily equal num_bytes from the
    // FileTransferRequest if it is the end of the file. We will not send the number of requested
    // bytes.
    bytes payload = 2;
  }
  // The chunk for this response. If empty, considered EOS.
  FileChunk chunk = 2;
  // The file that this chunk is from.
  gml.types.UUID file_id = 3 [ (gogoproto.customname) = "FileID" ];
}

/****************************************************************************
 * Messages that provide info about the device.
 * These should be sent on the .INFO topic.
 *****************************************************************************/
// DeviceCapabilities is a message that contains the capabilities of the device, such
// as the model runtime, camera driver, etc.
// Whenever this message is sent, it should be sent with the latest capabilities.
message DeviceCapabilities {
  // The possible model runtimes.
  message ModelRuntimeInfo {
    enum ModelRuntimeType {
      MODEL_RUNTIME_TYPE_UNKNOWN = 0;
      MODEL_RUNTIME_TYPE_TENSORRT = 1;
      MODEL_RUNTIME_TYPE_OPENVINO = 2;
    }
    ModelRuntimeType type = 1;
  }

  message CameraInfo {
    enum CameraDriver {
      CAMERA_DRIVER_UNKNOWN = 0;
      CAMERA_DRIVER_ARGUS = 1;
      CAMERA_DRIVER_V4L2 = 2;
    }
    CameraDriver driver = 1;
    string camera_id = 2 [ (gogoproto.customname) = "CameraID" ];
  }

  // ModelRuntimes is the info about all the model runtimes available on the device.
  repeated ModelRuntimeInfo model_runtimes = 1;
  // Cameras is the info about all the cameras available on the device.
  repeated CameraInfo cameras = 2;
}

/****************************************************************************
 * Wrapper messages for each channel on the NATS bus from the edge.
 * They are named EdgeCP[*] for messages originating from the edge.
 * They are named CPEdge[*] for messages originating from the control plane.
 *****************************************************************************/

// EdgeCPTopic has the list of topics used between edge and CP.
enum EdgeCPTopic {
  EDGE_CP_TOPIC_UNKNOWN = 0;
  EDGE_CP_TOPIC_STATUS = 1;
  EDGE_CP_TOPIC_VIDEO = 2;
  EDGE_CP_TOPIC_EXEC = 3;
  EDGE_CP_TOPIC_METRICS = 4;
  EDGE_CP_TOPIC_FILE_TRANSFER = 5;
  EDGE_CP_TOPIC_INFO = 6;
}

// CPEdgeTopic has the list of topics used between CP and edge.
enum CPEdgeTopic {
  CP_EDGE_TOPIC_UNKNOWN = 0;
  CP_EDGE_TOPIC_STATUS = 1;
  CP_EDGE_TOPIC_VIDEO = 2;
  CP_EDGE_TOPIC_EXEC = 3;
  CP_EDGE_TOPIC_METRICS = 4;
  CP_EDGE_TOPIC_FILE_TRANSFER = 5;
  CP_EDGE_TOPIC_INFO = 6;
}

// EdgeCPMetadata has basic routing information for shared bus.
message EdgeCPMetadata {
  // The topic of this message.
  EdgeCPTopic topic = 1;
  // The device ID where the message is originating from.
  gml.types.UUID device_id = 2 [ (gogoproto.customname) = "DeviceID" ];
  // The timestamp when the message was received.
  google.protobuf.Timestamp recv_timestamp = 3;
}

// EdgeCPMessage has status message and is on the .Status topic.
message EdgeCPMessage {
  // Associated metadata.
  EdgeCPMetadata metadata = 1;

  // The actual message.
  google.protobuf.Any msg = 1000;
}

// CPEdgeMetadata has basic routing information for shared bus.
message CPEdgeMetadata {
  // The topic of this message.
  CPEdgeTopic topic = 1;
  // The device ID where the message is going.
  gml.types.UUID device_id = 2 [ (gogoproto.customname) = "DeviceID" ];
  // The timestamp when the message was generated.
  google.protobuf.Timestamp recv_timestamp = 3;
}

// CPEdgeMessage wraps the message sent from the control plane to the edge.
message CPEdgeMessage {
  // Associated metadata.
  CPEdgeMetadata metadata = 1;

  // The actual message.
  google.protobuf.Any msg = 1000;
}
