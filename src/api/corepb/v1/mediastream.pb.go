// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/api/corepb/v1/mediastream.proto

package corepb

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ImageColorChannel int32

const (
	IMAGE_COLOR_CHANNEL_UNKNOWN ImageColorChannel = 0
	IMAGE_COLOR_CHANNEL_GRAY    ImageColorChannel = 1
	IMAGE_COLOR_CHANNEL_RED     ImageColorChannel = 2
	IMAGE_COLOR_CHANNEL_GREEN   ImageColorChannel = 3
	IMAGE_COLOR_CHANNEL_BLUE    ImageColorChannel = 4
)

var ImageColorChannel_name = map[int32]string{
	0: "IMAGE_COLOR_CHANNEL_UNKNOWN",
	1: "IMAGE_COLOR_CHANNEL_GRAY",
	2: "IMAGE_COLOR_CHANNEL_RED",
	3: "IMAGE_COLOR_CHANNEL_GREEN",
	4: "IMAGE_COLOR_CHANNEL_BLUE",
}

var ImageColorChannel_value = map[string]int32{
	"IMAGE_COLOR_CHANNEL_UNKNOWN": 0,
	"IMAGE_COLOR_CHANNEL_GRAY":    1,
	"IMAGE_COLOR_CHANNEL_RED":     2,
	"IMAGE_COLOR_CHANNEL_GREEN":   3,
	"IMAGE_COLOR_CHANNEL_BLUE":    4,
}

func (ImageColorChannel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d0e2e756820efd7b, []int{0}
}

type Label struct {
	Label string  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Score float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *Label) Reset()      { *m = Label{} }
func (*Label) ProtoMessage() {}
func (*Label) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0e2e756820efd7b, []int{0}
}
func (m *Label) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Label) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Label.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Label) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Label.Merge(m, src)
}
func (m *Label) XXX_Size() int {
	return m.Size()
}
func (m *Label) XXX_DiscardUnknown() {
	xxx_messageInfo_Label.DiscardUnknown(m)
}

var xxx_messageInfo_Label proto.InternalMessageInfo

func (m *Label) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Label) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type NormalizedCenterRect struct {
	Xc     float32 `protobuf:"fixed32,1,opt,name=xc,proto3" json:"xc,omitempty"`
	Yc     float32 `protobuf:"fixed32,2,opt,name=yc,proto3" json:"yc,omitempty"`
	Width  float32 `protobuf:"fixed32,3,opt,name=width,proto3" json:"width,omitempty"`
	Height float32 `protobuf:"fixed32,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *NormalizedCenterRect) Reset()      { *m = NormalizedCenterRect{} }
func (*NormalizedCenterRect) ProtoMessage() {}
func (*NormalizedCenterRect) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0e2e756820efd7b, []int{1}
}
func (m *NormalizedCenterRect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NormalizedCenterRect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NormalizedCenterRect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NormalizedCenterRect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NormalizedCenterRect.Merge(m, src)
}
func (m *NormalizedCenterRect) XXX_Size() int {
	return m.Size()
}
func (m *NormalizedCenterRect) XXX_DiscardUnknown() {
	xxx_messageInfo_NormalizedCenterRect.DiscardUnknown(m)
}

var xxx_messageInfo_NormalizedCenterRect proto.InternalMessageInfo

func (m *NormalizedCenterRect) GetXc() float32 {
	if m != nil {
		return m.Xc
	}
	return 0
}

func (m *NormalizedCenterRect) GetYc() float32 {
	if m != nil {
		return m.Yc
	}
	return 0
}

func (m *NormalizedCenterRect) GetWidth() float32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *NormalizedCenterRect) GetHeight() float32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Detection struct {
	Label       []*Label              `protobuf:"bytes,1,rep,name=label,proto3" json:"label,omitempty"`
	BoundingBox *NormalizedCenterRect `protobuf:"bytes,2,opt,name=bounding_box,json=boundingBox,proto3" json:"bounding_box,omitempty"`
}

func (m *Detection) Reset()      { *m = Detection{} }
func (*Detection) ProtoMessage() {}
func (*Detection) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0e2e756820efd7b, []int{2}
}
func (m *Detection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Detection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Detection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Detection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Detection.Merge(m, src)
}
func (m *Detection) XXX_Size() int {
	return m.Size()
}
func (m *Detection) XXX_DiscardUnknown() {
	xxx_messageInfo_Detection.DiscardUnknown(m)
}

var xxx_messageInfo_Detection proto.InternalMessageInfo

func (m *Detection) GetLabel() []*Label {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Detection) GetBoundingBox() *NormalizedCenterRect {
	if m != nil {
		return m.BoundingBox
	}
	return nil
}

type DetectionList struct {
	Detection []*Detection `protobuf:"bytes,1,rep,name=detection,proto3" json:"detection,omitempty"`
}

func (m *DetectionList) Reset()      { *m = DetectionList{} }
func (*DetectionList) ProtoMessage() {}
func (*DetectionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0e2e756820efd7b, []int{3}
}
func (m *DetectionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetectionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DetectionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DetectionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectionList.Merge(m, src)
}
func (m *DetectionList) XXX_Size() int {
	return m.Size()
}
func (m *DetectionList) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectionList.DiscardUnknown(m)
}

var xxx_messageInfo_DetectionList proto.InternalMessageInfo

func (m *DetectionList) GetDetection() []*Detection {
	if m != nil {
		return m.Detection
	}
	return nil
}

type SegmentationMask struct {
	Label             string  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	RunLengthEncoding []int32 `protobuf:"varint,2,rep,packed,name=run_length_encoding,json=runLengthEncoding,proto3" json:"run_length_encoding,omitempty"`
}

func (m *SegmentationMask) Reset()      { *m = SegmentationMask{} }
func (*SegmentationMask) ProtoMessage() {}
func (*SegmentationMask) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0e2e756820efd7b, []int{4}
}
func (m *SegmentationMask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentationMask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentationMask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentationMask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentationMask.Merge(m, src)
}
func (m *SegmentationMask) XXX_Size() int {
	return m.Size()
}
func (m *SegmentationMask) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentationMask.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentationMask proto.InternalMessageInfo

func (m *SegmentationMask) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *SegmentationMask) GetRunLengthEncoding() []int32 {
	if m != nil {
		return m.RunLengthEncoding
	}
	return nil
}

type Segmentation struct {
	Masks  []*SegmentationMask `protobuf:"bytes,1,rep,name=masks,proto3" json:"masks,omitempty"`
	Width  int64               `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height int64               `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *Segmentation) Reset()      { *m = Segmentation{} }
func (*Segmentation) ProtoMessage() {}
func (*Segmentation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0e2e756820efd7b, []int{5}
}
func (m *Segmentation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Segmentation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Segmentation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Segmentation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Segmentation.Merge(m, src)
}
func (m *Segmentation) XXX_Size() int {
	return m.Size()
}
func (m *Segmentation) XXX_DiscardUnknown() {
	xxx_messageInfo_Segmentation.DiscardUnknown(m)
}

var xxx_messageInfo_Segmentation proto.InternalMessageInfo

func (m *Segmentation) GetMasks() []*SegmentationMask {
	if m != nil {
		return m.Masks
	}
	return nil
}

func (m *Segmentation) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Segmentation) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ImageHistogram struct {
	Channel ImageColorChannel `protobuf:"varint,1,opt,name=channel,proto3,enum=gml.internal.api.core.v1.ImageColorChannel" json:"channel,omitempty"`
	Min     float64           `protobuf:"fixed64,2,opt,name=min,proto3" json:"min,omitempty"`
	Max     float64           `protobuf:"fixed64,3,opt,name=max,proto3" json:"max,omitempty"`
	Num     int64             `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	Sum     float64           `protobuf:"fixed64,5,opt,name=sum,proto3" json:"sum,omitempty"`
	Bucket  []int64           `protobuf:"varint,6,rep,packed,name=bucket,proto3" json:"bucket,omitempty"`
}

func (m *ImageHistogram) Reset()      { *m = ImageHistogram{} }
func (*ImageHistogram) ProtoMessage() {}
func (*ImageHistogram) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0e2e756820efd7b, []int{6}
}
func (m *ImageHistogram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageHistogram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageHistogram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageHistogram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageHistogram.Merge(m, src)
}
func (m *ImageHistogram) XXX_Size() int {
	return m.Size()
}
func (m *ImageHistogram) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageHistogram.DiscardUnknown(m)
}

var xxx_messageInfo_ImageHistogram proto.InternalMessageInfo

func (m *ImageHistogram) GetChannel() ImageColorChannel {
	if m != nil {
		return m.Channel
	}
	return IMAGE_COLOR_CHANNEL_UNKNOWN
}

func (m *ImageHistogram) GetMin() float64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *ImageHistogram) GetMax() float64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *ImageHistogram) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *ImageHistogram) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *ImageHistogram) GetBucket() []int64 {
	if m != nil {
		return m.Bucket
	}
	return nil
}

type ImageHistogramBatch struct {
	Histograms []*ImageHistogram `protobuf:"bytes,1,rep,name=histograms,proto3" json:"histograms,omitempty"`
}

func (m *ImageHistogramBatch) Reset()      { *m = ImageHistogramBatch{} }
func (*ImageHistogramBatch) ProtoMessage() {}
func (*ImageHistogramBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0e2e756820efd7b, []int{7}
}
func (m *ImageHistogramBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageHistogramBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageHistogramBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageHistogramBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageHistogramBatch.Merge(m, src)
}
func (m *ImageHistogramBatch) XXX_Size() int {
	return m.Size()
}
func (m *ImageHistogramBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageHistogramBatch.DiscardUnknown(m)
}

var xxx_messageInfo_ImageHistogramBatch proto.InternalMessageInfo

func (m *ImageHistogramBatch) GetHistograms() []*ImageHistogram {
	if m != nil {
		return m.Histograms
	}
	return nil
}

type ImageQualityMetrics struct {
	BrisqueScore    float64 `protobuf:"fixed64,1,opt,name=brisque_score,json=brisqueScore,proto3" json:"brisque_score,omitempty"`
	BlurrinessScore float64 `protobuf:"fixed64,2,opt,name=blurriness_score,json=blurrinessScore,proto3" json:"blurriness_score,omitempty"`
}

func (m *ImageQualityMetrics) Reset()      { *m = ImageQualityMetrics{} }
func (*ImageQualityMetrics) ProtoMessage() {}
func (*ImageQualityMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0e2e756820efd7b, []int{8}
}
func (m *ImageQualityMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageQualityMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageQualityMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageQualityMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageQualityMetrics.Merge(m, src)
}
func (m *ImageQualityMetrics) XXX_Size() int {
	return m.Size()
}
func (m *ImageQualityMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageQualityMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_ImageQualityMetrics proto.InternalMessageInfo

func (m *ImageQualityMetrics) GetBrisqueScore() float64 {
	if m != nil {
		return m.BrisqueScore
	}
	return 0
}

func (m *ImageQualityMetrics) GetBlurrinessScore() float64 {
	if m != nil {
		return m.BlurrinessScore
	}
	return 0
}

type ImageOverlayChunk struct {
	FrameTS int64 `protobuf:"varint,1,opt,name=frame_ts,json=frameTS,proto3" json:"frameTS"`
	EOF     bool  `protobuf:"varint,2,opt,name=eof,proto3" json:"eof,omitempty"`
	// Types that are valid to be assigned to Overlay:
	//	*ImageOverlayChunk_Detections
	//	*ImageOverlayChunk_Segmentation
	//	*ImageOverlayChunk_Histograms
	//	*ImageOverlayChunk_ImageQuality
	Overlay isImageOverlayChunk_Overlay `protobuf_oneof:"overlay"`
}

func (m *ImageOverlayChunk) Reset()      { *m = ImageOverlayChunk{} }
func (*ImageOverlayChunk) ProtoMessage() {}
func (*ImageOverlayChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0e2e756820efd7b, []int{9}
}
func (m *ImageOverlayChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageOverlayChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageOverlayChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageOverlayChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageOverlayChunk.Merge(m, src)
}
func (m *ImageOverlayChunk) XXX_Size() int {
	return m.Size()
}
func (m *ImageOverlayChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageOverlayChunk.DiscardUnknown(m)
}

var xxx_messageInfo_ImageOverlayChunk proto.InternalMessageInfo

type isImageOverlayChunk_Overlay interface {
	isImageOverlayChunk_Overlay()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ImageOverlayChunk_Detections struct {
	Detections *DetectionList `protobuf:"bytes,100,opt,name=detections,proto3,oneof" json:"detections,omitempty"`
}
type ImageOverlayChunk_Segmentation struct {
	Segmentation *Segmentation `protobuf:"bytes,101,opt,name=segmentation,proto3,oneof" json:"segmentation,omitempty"`
}
type ImageOverlayChunk_Histograms struct {
	Histograms *ImageHistogramBatch `protobuf:"bytes,200,opt,name=histograms,proto3,oneof" json:"histograms,omitempty"`
}
type ImageOverlayChunk_ImageQuality struct {
	ImageQuality *ImageQualityMetrics `protobuf:"bytes,300,opt,name=image_quality,json=imageQuality,proto3,oneof" json:"image_quality,omitempty"`
}

func (*ImageOverlayChunk_Detections) isImageOverlayChunk_Overlay()   {}
func (*ImageOverlayChunk_Segmentation) isImageOverlayChunk_Overlay() {}
func (*ImageOverlayChunk_Histograms) isImageOverlayChunk_Overlay()   {}
func (*ImageOverlayChunk_ImageQuality) isImageOverlayChunk_Overlay() {}

func (m *ImageOverlayChunk) GetOverlay() isImageOverlayChunk_Overlay {
	if m != nil {
		return m.Overlay
	}
	return nil
}

func (m *ImageOverlayChunk) GetFrameTS() int64 {
	if m != nil {
		return m.FrameTS
	}
	return 0
}

func (m *ImageOverlayChunk) GetEOF() bool {
	if m != nil {
		return m.EOF
	}
	return false
}

func (m *ImageOverlayChunk) GetDetections() *DetectionList {
	if x, ok := m.GetOverlay().(*ImageOverlayChunk_Detections); ok {
		return x.Detections
	}
	return nil
}

func (m *ImageOverlayChunk) GetSegmentation() *Segmentation {
	if x, ok := m.GetOverlay().(*ImageOverlayChunk_Segmentation); ok {
		return x.Segmentation
	}
	return nil
}

func (m *ImageOverlayChunk) GetHistograms() *ImageHistogramBatch {
	if x, ok := m.GetOverlay().(*ImageOverlayChunk_Histograms); ok {
		return x.Histograms
	}
	return nil
}

func (m *ImageOverlayChunk) GetImageQuality() *ImageQualityMetrics {
	if x, ok := m.GetOverlay().(*ImageOverlayChunk_ImageQuality); ok {
		return x.ImageQuality
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ImageOverlayChunk) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ImageOverlayChunk_Detections)(nil),
		(*ImageOverlayChunk_Segmentation)(nil),
		(*ImageOverlayChunk_Histograms)(nil),
		(*ImageOverlayChunk_ImageQuality)(nil),
	}
}

type H264Chunk struct {
	FrameTS int64  `protobuf:"varint,1,opt,name=frame_ts,json=frameTS,proto3" json:"frameTS"`
	EOF     bool   `protobuf:"varint,2,opt,name=eof,proto3" json:"eof,omitempty"`
	NALData []byte `protobuf:"bytes,3,opt,name=nal_data,json=nalData,proto3" json:"nal_data,omitempty"`
}

func (m *H264Chunk) Reset()      { *m = H264Chunk{} }
func (*H264Chunk) ProtoMessage() {}
func (*H264Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0e2e756820efd7b, []int{10}
}
func (m *H264Chunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *H264Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_H264Chunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *H264Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_H264Chunk.Merge(m, src)
}
func (m *H264Chunk) XXX_Size() int {
	return m.Size()
}
func (m *H264Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_H264Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_H264Chunk proto.InternalMessageInfo

func (m *H264Chunk) GetFrameTS() int64 {
	if m != nil {
		return m.FrameTS
	}
	return 0
}

func (m *H264Chunk) GetEOF() bool {
	if m != nil {
		return m.EOF
	}
	return false
}

func (m *H264Chunk) GetNALData() []byte {
	if m != nil {
		return m.NALData
	}
	return nil
}

type VideoHeader struct {
	Width     int64   `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height    int64   `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	FrameRate float64 `protobuf:"fixed64,3,opt,name=frame_rate,json=frameRate,proto3" json:"frame_rate,omitempty"`
}

func (m *VideoHeader) Reset()      { *m = VideoHeader{} }
func (*VideoHeader) ProtoMessage() {}
func (*VideoHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0e2e756820efd7b, []int{11}
}
func (m *VideoHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoHeader.Merge(m, src)
}
func (m *VideoHeader) XXX_Size() int {
	return m.Size()
}
func (m *VideoHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoHeader.DiscardUnknown(m)
}

var xxx_messageInfo_VideoHeader proto.InternalMessageInfo

func (m *VideoHeader) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *VideoHeader) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *VideoHeader) GetFrameRate() float64 {
	if m != nil {
		return m.FrameRate
	}
	return 0
}

func init() {
	proto.RegisterEnum("gml.internal.api.core.v1.ImageColorChannel", ImageColorChannel_name, ImageColorChannel_value)
	proto.RegisterType((*Label)(nil), "gml.internal.api.core.v1.Label")
	proto.RegisterType((*NormalizedCenterRect)(nil), "gml.internal.api.core.v1.NormalizedCenterRect")
	proto.RegisterType((*Detection)(nil), "gml.internal.api.core.v1.Detection")
	proto.RegisterType((*DetectionList)(nil), "gml.internal.api.core.v1.DetectionList")
	proto.RegisterType((*SegmentationMask)(nil), "gml.internal.api.core.v1.SegmentationMask")
	proto.RegisterType((*Segmentation)(nil), "gml.internal.api.core.v1.Segmentation")
	proto.RegisterType((*ImageHistogram)(nil), "gml.internal.api.core.v1.ImageHistogram")
	proto.RegisterType((*ImageHistogramBatch)(nil), "gml.internal.api.core.v1.ImageHistogramBatch")
	proto.RegisterType((*ImageQualityMetrics)(nil), "gml.internal.api.core.v1.ImageQualityMetrics")
	proto.RegisterType((*ImageOverlayChunk)(nil), "gml.internal.api.core.v1.ImageOverlayChunk")
	proto.RegisterType((*H264Chunk)(nil), "gml.internal.api.core.v1.H264Chunk")
	proto.RegisterType((*VideoHeader)(nil), "gml.internal.api.core.v1.VideoHeader")
}

func init() {
	proto.RegisterFile("src/api/corepb/v1/mediastream.proto", fileDescriptor_d0e2e756820efd7b)
}

var fileDescriptor_d0e2e756820efd7b = []byte{
	// 957 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xd6, 0x92, 0xb1, 0x65, 0x8d, 0x7f, 0xaa, 0x6c, 0x8c, 0x94, 0x49, 0x1a, 0xda, 0xa0, 0x81,
	0x54, 0x4d, 0x11, 0x09, 0x76, 0xda, 0x5e, 0x7a, 0xa9, 0x25, 0x2b, 0x91, 0x51, 0x59, 0x6e, 0xd6,
	0x75, 0x7f, 0x72, 0x21, 0x56, 0xe4, 0x9a, 0x5a, 0x98, 0x3f, 0x0e, 0xb9, 0x74, 0xe5, 0x1e, 0x8a,
	0xf6, 0x0d, 0x7a, 0xe9, 0x3b, 0xf4, 0x10, 0xf4, 0x05, 0xfa, 0x02, 0x39, 0xfa, 0x98, 0x93, 0x51,
	0xcb, 0x97, 0xa2, 0xa7, 0x3c, 0x42, 0xb1, 0x4b, 0xca, 0x92, 0x1b, 0x09, 0xf5, 0x25, 0xb7, 0x99,
	0x6f, 0xe7, 0xfb, 0xf6, 0x1b, 0xce, 0x0e, 0x08, 0x6b, 0x49, 0xec, 0xd4, 0xe8, 0x11, 0xaf, 0x39,
	0x51, 0xcc, 0x8e, 0xba, 0xb5, 0xe3, 0xf5, 0x5a, 0xc0, 0x5c, 0x4e, 0x13, 0x11, 0x33, 0x1a, 0x54,
	0x8f, 0xe2, 0x48, 0x44, 0xd8, 0xf0, 0x02, 0xbf, 0xca, 0x43, 0xc1, 0xe2, 0x90, 0xfa, 0x55, 0x7a,
	0xc4, 0xab, 0xb2, 0xba, 0x7a, 0xbc, 0x7e, 0x77, 0xd9, 0x8b, 0xbc, 0x48, 0x15, 0xd5, 0x64, 0x94,
	0xd5, 0x5b, 0x8f, 0x61, 0xa6, 0x4d, 0xbb, 0xcc, 0xc7, 0xcb, 0x30, 0xe3, 0xcb, 0xc0, 0x40, 0xab,
	0xa8, 0x52, 0x22, 0x59, 0x22, 0xd1, 0x44, 0x0a, 0x18, 0xda, 0x2a, 0xaa, 0x68, 0x24, 0x4b, 0x2c,
	0x17, 0x96, 0x3b, 0x51, 0x1c, 0x50, 0x9f, 0xff, 0xc8, 0xdc, 0x06, 0x93, 0xb7, 0x11, 0xe6, 0x08,
	0xbc, 0x04, 0x5a, 0xdf, 0x51, 0x02, 0x1a, 0xd1, 0xfa, 0x8e, 0xcc, 0x4f, 0x9c, 0x9c, 0xaa, 0x9d,
	0x38, 0x52, 0xed, 0x07, 0xee, 0x8a, 0x9e, 0xa1, 0x67, 0x6a, 0x2a, 0xc1, 0xb7, 0x61, 0xb6, 0xc7,
	0xb8, 0xd7, 0x13, 0xc6, 0x0d, 0x05, 0xe7, 0x99, 0xf5, 0x1b, 0x82, 0xd2, 0x16, 0x13, 0xcc, 0x11,
	0x3c, 0x0a, 0xf1, 0xa7, 0x23, 0x7f, 0x7a, 0x65, 0x7e, 0x63, 0xa5, 0x3a, 0xad, 0xd1, 0xaa, 0xea,
	0x67, 0xd8, 0xc0, 0x33, 0x58, 0xe8, 0x46, 0x69, 0xe8, 0xf2, 0xd0, 0xb3, 0xbb, 0x51, 0x5f, 0x99,
	0x99, 0xdf, 0xa8, 0x4e, 0x67, 0x4f, 0x6a, 0x8c, 0xcc, 0x0f, 0x35, 0xea, 0x51, 0xdf, 0x22, 0xb0,
	0x78, 0x69, 0xab, 0xcd, 0x13, 0x81, 0x37, 0xa1, 0xe4, 0x0e, 0x81, 0xdc, 0xde, 0xda, 0xf4, 0x0b,
	0x2e, 0xb9, 0x64, 0xc4, 0xb2, 0xbe, 0x83, 0xf2, 0x1e, 0xf3, 0x02, 0x16, 0x0a, 0x2a, 0xf3, 0x1d,
	0x9a, 0x1c, 0x4e, 0x99, 0x48, 0x15, 0x6e, 0xc5, 0x69, 0x68, 0xfb, 0x2c, 0xf4, 0x44, 0xcf, 0x66,
	0xa1, 0x13, 0x49, 0x5f, 0x86, 0xb6, 0xaa, 0x57, 0x66, 0xc8, 0xcd, 0x38, 0x0d, 0xdb, 0xea, 0xa4,
	0x99, 0x1f, 0x58, 0x3f, 0xc1, 0xc2, 0xb8, 0x32, 0xfe, 0x02, 0x66, 0x02, 0x9a, 0x1c, 0x26, 0xb9,
	0xd1, 0x87, 0xd3, 0x8d, 0xfe, 0xd7, 0x10, 0xc9, 0x88, 0xa3, 0x29, 0xca, 0x6f, 0xa9, 0xbf, 0x3d,
	0x45, 0x5d, 0xc1, 0xc3, 0x29, 0xfe, 0x89, 0x60, 0x69, 0x3b, 0xa0, 0x1e, 0x6b, 0xf1, 0x44, 0x44,
	0x5e, 0x4c, 0x03, 0xdc, 0x84, 0xa2, 0xd3, 0xa3, 0x61, 0x98, 0xb7, 0xb6, 0xb4, 0xf1, 0xf1, 0x74,
	0x13, 0x8a, 0xda, 0x88, 0xfc, 0x28, 0x6e, 0x64, 0x14, 0x32, 0xe4, 0xe2, 0x32, 0xe8, 0x01, 0x0f,
	0x95, 0x0b, 0x44, 0x64, 0xa8, 0x10, 0xda, 0x57, 0x06, 0x24, 0x42, 0xfb, 0x12, 0x09, 0xd3, 0x40,
	0x3d, 0x2c, 0x9d, 0xc8, 0x50, 0x22, 0x49, 0x1a, 0x18, 0x33, 0x59, 0x4d, 0x92, 0x06, 0xf8, 0x2e,
	0xcc, 0x76, 0x53, 0xe7, 0x90, 0x09, 0x63, 0x76, 0x55, 0xaf, 0xe8, 0x75, 0xad, 0x8c, 0x48, 0x8e,
	0x58, 0x36, 0xdc, 0xba, 0x6a, 0xbe, 0x4e, 0x85, 0xd3, 0xc3, 0x2d, 0x80, 0xde, 0x10, 0x19, 0x7e,
	0xc9, 0xca, 0xff, 0x34, 0x71, 0x29, 0x41, 0xc6, 0xb8, 0x16, 0xcb, 0x2f, 0x78, 0x96, 0x52, 0x9f,
	0x8b, 0x93, 0x1d, 0x26, 0x62, 0xee, 0x24, 0x78, 0x0d, 0x16, 0xbb, 0x31, 0x4f, 0x5e, 0xa4, 0xcc,
	0xce, 0xf6, 0x0f, 0x29, 0xbf, 0x0b, 0x39, 0xb8, 0x27, 0x31, 0xfc, 0x11, 0x94, 0xbb, 0x7e, 0x1a,
	0xc7, 0x3c, 0x64, 0x49, 0x62, 0x8f, 0xf6, 0x14, 0x91, 0xf7, 0x46, 0xb8, 0x2a, 0xb5, 0xfe, 0xd0,
	0xe1, 0xa6, 0xba, 0x67, 0xf7, 0x98, 0xc5, 0x3e, 0x3d, 0x69, 0xf4, 0xd2, 0xf0, 0x10, 0xaf, 0xc3,
	0xdc, 0x41, 0x4c, 0x03, 0x66, 0x8b, 0x44, 0x5d, 0xa0, 0xd7, 0x6f, 0x0f, 0xce, 0x56, 0x8a, 0x4f,
	0x24, 0xf6, 0xf5, 0xde, 0x3f, 0x67, 0x2b, 0xc5, 0x83, 0x2c, 0x24, 0xc3, 0x00, 0xdf, 0x01, 0x9d,
	0x45, 0x07, 0xea, 0x9a, 0xb9, 0x7a, 0x71, 0x70, 0xb6, 0xa2, 0x37, 0x77, 0x9f, 0x10, 0x89, 0xe1,
	0x6d, 0x80, 0xcb, 0x07, 0x9d, 0x18, 0xae, 0x5a, 0xb4, 0x0f, 0xaf, 0xb1, 0x07, 0x72, 0x87, 0x5a,
	0x05, 0x32, 0x46, 0xc6, 0x6d, 0x58, 0x48, 0xc6, 0x5e, 0x9f, 0xc1, 0x94, 0xd8, 0x83, 0xeb, 0xbd,
	0xd5, 0x56, 0x81, 0x5c, 0x61, 0xe3, 0xaf, 0xae, 0x4c, 0xeb, 0x15, 0x52, 0x62, 0x8f, 0xae, 0x3b,
	0x2e, 0x35, 0x71, 0xe9, 0x6f, 0xa4, 0x81, 0xf7, 0x61, 0x91, 0xcb, 0x22, 0xfb, 0x45, 0x36, 0x36,
	0xe3, 0xa5, 0x76, 0x2d, 0xd1, 0xab, 0x53, 0x96, 0x46, 0xf9, 0x18, 0x5c, 0x2f, 0x41, 0x31, 0xca,
	0xe6, 0x63, 0xfd, 0x82, 0xa0, 0xd4, 0xda, 0xf8, 0xec, 0x93, 0x77, 0x31, 0xa8, 0x07, 0x30, 0x17,
	0x52, 0xdf, 0x76, 0xa9, 0xa0, 0x6a, 0x57, 0x16, 0xea, 0xf3, 0x52, 0xad, 0xb3, 0xd9, 0xde, 0xa2,
	0x82, 0x92, 0x62, 0x48, 0x7d, 0x19, 0x58, 0xcf, 0x61, 0xfe, 0x1b, 0xee, 0xb2, 0xa8, 0xc5, 0xa8,
	0xcb, 0xe2, 0xd1, 0xde, 0xa3, 0xc9, 0x7b, 0xaf, 0x8d, 0xef, 0x3d, 0xbe, 0x0f, 0x90, 0x59, 0x8e,
	0xa9, 0x60, 0xf9, 0x4a, 0x96, 0x14, 0x42, 0xa8, 0x60, 0x0f, 0x5f, 0xa2, 0xfc, 0x41, 0x8e, 0xef,
	0x36, 0x5e, 0x81, 0x7b, 0xdb, 0x3b, 0x9b, 0x4f, 0x9b, 0x76, 0x63, 0xb7, 0xbd, 0x4b, 0xec, 0x46,
	0x6b, 0xb3, 0xd3, 0x69, 0xb6, 0xed, 0xfd, 0xce, 0x97, 0x9d, 0xdd, 0x6f, 0x3b, 0xe5, 0x02, 0xfe,
	0x00, 0x8c, 0x49, 0x05, 0x4f, 0xc9, 0xe6, 0xf7, 0x65, 0x84, 0xef, 0xc1, 0xfb, 0x93, 0x4e, 0x49,
	0x73, 0xab, 0xac, 0xe1, 0xfb, 0x70, 0x67, 0x32, 0xb5, 0xd9, 0xec, 0x94, 0xf5, 0x69, 0xca, 0xf5,
	0xf6, 0x7e, 0xb3, 0x7c, 0xa3, 0xee, 0x9c, 0x9e, 0x9b, 0x85, 0xd7, 0xe7, 0x66, 0xe1, 0xcd, 0xb9,
	0x89, 0x7e, 0x1e, 0x98, 0xe8, 0xf7, 0x81, 0x89, 0x5e, 0x0d, 0x4c, 0x74, 0x3a, 0x30, 0xd1, 0x5f,
	0x03, 0x13, 0xfd, 0x3d, 0x30, 0x0b, 0x6f, 0x06, 0x26, 0xfa, 0xf5, 0xc2, 0x2c, 0x9c, 0x5e, 0x98,
	0x85, 0xd7, 0x17, 0x66, 0xe1, 0xf9, 0x23, 0x8f, 0x07, 0x3e, 0x13, 0x3e, 0xed, 0x26, 0x55, 0xca,
	0x6b, 0x59, 0x56, 0x7b, 0xeb, 0x37, 0xfe, 0x79, 0x16, 0x75, 0x67, 0xd5, 0x2f, 0xf9, 0xf1, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xb4, 0x1e, 0xe9, 0xe9, 0x07, 0x00, 0x00,
}

func (x ImageColorChannel) String() string {
	s, ok := ImageColorChannel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Label) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Label)
	if !ok {
		that2, ok := that.(Label)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	return true
}
func (this *NormalizedCenterRect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NormalizedCenterRect)
	if !ok {
		that2, ok := that.(NormalizedCenterRect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Xc != that1.Xc {
		return false
	}
	if this.Yc != that1.Yc {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	return true
}
func (this *Detection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Detection)
	if !ok {
		that2, ok := that.(Detection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Label) != len(that1.Label) {
		return false
	}
	for i := range this.Label {
		if !this.Label[i].Equal(that1.Label[i]) {
			return false
		}
	}
	if !this.BoundingBox.Equal(that1.BoundingBox) {
		return false
	}
	return true
}
func (this *DetectionList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionList)
	if !ok {
		that2, ok := that.(DetectionList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Detection) != len(that1.Detection) {
		return false
	}
	for i := range this.Detection {
		if !this.Detection[i].Equal(that1.Detection[i]) {
			return false
		}
	}
	return true
}
func (this *SegmentationMask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SegmentationMask)
	if !ok {
		that2, ok := that.(SegmentationMask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if len(this.RunLengthEncoding) != len(that1.RunLengthEncoding) {
		return false
	}
	for i := range this.RunLengthEncoding {
		if this.RunLengthEncoding[i] != that1.RunLengthEncoding[i] {
			return false
		}
	}
	return true
}
func (this *Segmentation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Segmentation)
	if !ok {
		that2, ok := that.(Segmentation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Masks) != len(that1.Masks) {
		return false
	}
	for i := range this.Masks {
		if !this.Masks[i].Equal(that1.Masks[i]) {
			return false
		}
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	return true
}
func (this *ImageHistogram) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageHistogram)
	if !ok {
		that2, ok := that.(ImageHistogram)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	if this.Min != that1.Min {
		return false
	}
	if this.Max != that1.Max {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Sum != that1.Sum {
		return false
	}
	if len(this.Bucket) != len(that1.Bucket) {
		return false
	}
	for i := range this.Bucket {
		if this.Bucket[i] != that1.Bucket[i] {
			return false
		}
	}
	return true
}
func (this *ImageHistogramBatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageHistogramBatch)
	if !ok {
		that2, ok := that.(ImageHistogramBatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Histograms) != len(that1.Histograms) {
		return false
	}
	for i := range this.Histograms {
		if !this.Histograms[i].Equal(that1.Histograms[i]) {
			return false
		}
	}
	return true
}
func (this *ImageQualityMetrics) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageQualityMetrics)
	if !ok {
		that2, ok := that.(ImageQualityMetrics)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BrisqueScore != that1.BrisqueScore {
		return false
	}
	if this.BlurrinessScore != that1.BlurrinessScore {
		return false
	}
	return true
}
func (this *ImageOverlayChunk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageOverlayChunk)
	if !ok {
		that2, ok := that.(ImageOverlayChunk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FrameTS != that1.FrameTS {
		return false
	}
	if this.EOF != that1.EOF {
		return false
	}
	if that1.Overlay == nil {
		if this.Overlay != nil {
			return false
		}
	} else if this.Overlay == nil {
		return false
	} else if !this.Overlay.Equal(that1.Overlay) {
		return false
	}
	return true
}
func (this *ImageOverlayChunk_Detections) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageOverlayChunk_Detections)
	if !ok {
		that2, ok := that.(ImageOverlayChunk_Detections)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Detections.Equal(that1.Detections) {
		return false
	}
	return true
}
func (this *ImageOverlayChunk_Segmentation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageOverlayChunk_Segmentation)
	if !ok {
		that2, ok := that.(ImageOverlayChunk_Segmentation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Segmentation.Equal(that1.Segmentation) {
		return false
	}
	return true
}
func (this *ImageOverlayChunk_Histograms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageOverlayChunk_Histograms)
	if !ok {
		that2, ok := that.(ImageOverlayChunk_Histograms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Histograms.Equal(that1.Histograms) {
		return false
	}
	return true
}
func (this *ImageOverlayChunk_ImageQuality) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageOverlayChunk_ImageQuality)
	if !ok {
		that2, ok := that.(ImageOverlayChunk_ImageQuality)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ImageQuality.Equal(that1.ImageQuality) {
		return false
	}
	return true
}
func (this *H264Chunk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*H264Chunk)
	if !ok {
		that2, ok := that.(H264Chunk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FrameTS != that1.FrameTS {
		return false
	}
	if this.EOF != that1.EOF {
		return false
	}
	if !bytes.Equal(this.NALData, that1.NALData) {
		return false
	}
	return true
}
func (this *VideoHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VideoHeader)
	if !ok {
		that2, ok := that.(VideoHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.FrameRate != that1.FrameRate {
		return false
	}
	return true
}
func (this *Label) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&corepb.Label{")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NormalizedCenterRect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&corepb.NormalizedCenterRect{")
	s = append(s, "Xc: "+fmt.Sprintf("%#v", this.Xc)+",\n")
	s = append(s, "Yc: "+fmt.Sprintf("%#v", this.Yc)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Detection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&corepb.Detection{")
	if this.Label != nil {
		s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	}
	if this.BoundingBox != nil {
		s = append(s, "BoundingBox: "+fmt.Sprintf("%#v", this.BoundingBox)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DetectionList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.DetectionList{")
	if this.Detection != nil {
		s = append(s, "Detection: "+fmt.Sprintf("%#v", this.Detection)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SegmentationMask) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&corepb.SegmentationMask{")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "RunLengthEncoding: "+fmt.Sprintf("%#v", this.RunLengthEncoding)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Segmentation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&corepb.Segmentation{")
	if this.Masks != nil {
		s = append(s, "Masks: "+fmt.Sprintf("%#v", this.Masks)+",\n")
	}
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageHistogram) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&corepb.ImageHistogram{")
	s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	s = append(s, "Min: "+fmt.Sprintf("%#v", this.Min)+",\n")
	s = append(s, "Max: "+fmt.Sprintf("%#v", this.Max)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Sum: "+fmt.Sprintf("%#v", this.Sum)+",\n")
	s = append(s, "Bucket: "+fmt.Sprintf("%#v", this.Bucket)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageHistogramBatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.ImageHistogramBatch{")
	if this.Histograms != nil {
		s = append(s, "Histograms: "+fmt.Sprintf("%#v", this.Histograms)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageQualityMetrics) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&corepb.ImageQualityMetrics{")
	s = append(s, "BrisqueScore: "+fmt.Sprintf("%#v", this.BrisqueScore)+",\n")
	s = append(s, "BlurrinessScore: "+fmt.Sprintf("%#v", this.BlurrinessScore)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageOverlayChunk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&corepb.ImageOverlayChunk{")
	s = append(s, "FrameTS: "+fmt.Sprintf("%#v", this.FrameTS)+",\n")
	s = append(s, "EOF: "+fmt.Sprintf("%#v", this.EOF)+",\n")
	if this.Overlay != nil {
		s = append(s, "Overlay: "+fmt.Sprintf("%#v", this.Overlay)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageOverlayChunk_Detections) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&corepb.ImageOverlayChunk_Detections{` +
		`Detections:` + fmt.Sprintf("%#v", this.Detections) + `}`}, ", ")
	return s
}
func (this *ImageOverlayChunk_Segmentation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&corepb.ImageOverlayChunk_Segmentation{` +
		`Segmentation:` + fmt.Sprintf("%#v", this.Segmentation) + `}`}, ", ")
	return s
}
func (this *ImageOverlayChunk_Histograms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&corepb.ImageOverlayChunk_Histograms{` +
		`Histograms:` + fmt.Sprintf("%#v", this.Histograms) + `}`}, ", ")
	return s
}
func (this *ImageOverlayChunk_ImageQuality) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&corepb.ImageOverlayChunk_ImageQuality{` +
		`ImageQuality:` + fmt.Sprintf("%#v", this.ImageQuality) + `}`}, ", ")
	return s
}
func (this *H264Chunk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&corepb.H264Chunk{")
	s = append(s, "FrameTS: "+fmt.Sprintf("%#v", this.FrameTS)+",\n")
	s = append(s, "EOF: "+fmt.Sprintf("%#v", this.EOF)+",\n")
	s = append(s, "NALData: "+fmt.Sprintf("%#v", this.NALData)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VideoHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&corepb.VideoHeader{")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "FrameRate: "+fmt.Sprintf("%#v", this.FrameRate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMediastream(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Label) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Label) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Label) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Score))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintMediastream(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NormalizedCenterRect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NormalizedCenterRect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NormalizedCenterRect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Height))))
		i--
		dAtA[i] = 0x25
	}
	if m.Width != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Width))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Yc != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Yc))))
		i--
		dAtA[i] = 0x15
	}
	if m.Xc != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Xc))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *Detection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Detection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Detection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BoundingBox != nil {
		{
			size, err := m.BoundingBox.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMediastream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Label) > 0 {
		for iNdEx := len(m.Label) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Label[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMediastream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DetectionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetectionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Detection) > 0 {
		for iNdEx := len(m.Detection) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Detection[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMediastream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SegmentationMask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentationMask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentationMask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunLengthEncoding) > 0 {
		dAtA3 := make([]byte, len(m.RunLengthEncoding)*10)
		var j2 int
		for _, num1 := range m.RunLengthEncoding {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintMediastream(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintMediastream(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Segmentation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Segmentation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Segmentation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintMediastream(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if m.Width != 0 {
		i = encodeVarintMediastream(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Masks) > 0 {
		for iNdEx := len(m.Masks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Masks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMediastream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ImageHistogram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageHistogram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageHistogram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bucket) > 0 {
		dAtA5 := make([]byte, len(m.Bucket)*10)
		var j4 int
		for _, num1 := range m.Bucket {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintMediastream(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x32
	}
	if m.Sum != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Sum))))
		i--
		dAtA[i] = 0x29
	}
	if m.Num != 0 {
		i = encodeVarintMediastream(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x20
	}
	if m.Max != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Max))))
		i--
		dAtA[i] = 0x19
	}
	if m.Min != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Min))))
		i--
		dAtA[i] = 0x11
	}
	if m.Channel != 0 {
		i = encodeVarintMediastream(dAtA, i, uint64(m.Channel))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ImageHistogramBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageHistogramBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageHistogramBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Histograms) > 0 {
		for iNdEx := len(m.Histograms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Histograms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMediastream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ImageQualityMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageQualityMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageQualityMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlurrinessScore != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BlurrinessScore))))
		i--
		dAtA[i] = 0x11
	}
	if m.BrisqueScore != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BrisqueScore))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *ImageOverlayChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageOverlayChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageOverlayChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Overlay != nil {
		{
			size := m.Overlay.Size()
			i -= size
			if _, err := m.Overlay.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EOF {
		i--
		if m.EOF {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.FrameTS != 0 {
		i = encodeVarintMediastream(dAtA, i, uint64(m.FrameTS))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ImageOverlayChunk_Detections) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageOverlayChunk_Detections) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Detections != nil {
		{
			size, err := m.Detections.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMediastream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ImageOverlayChunk_Segmentation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageOverlayChunk_Segmentation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Segmentation != nil {
		{
			size, err := m.Segmentation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMediastream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *ImageOverlayChunk_Histograms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageOverlayChunk_Histograms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Histograms != nil {
		{
			size, err := m.Histograms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMediastream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *ImageOverlayChunk_ImageQuality) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageOverlayChunk_ImageQuality) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ImageQuality != nil {
		{
			size, err := m.ImageQuality.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMediastream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *H264Chunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *H264Chunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *H264Chunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NALData) > 0 {
		i -= len(m.NALData)
		copy(dAtA[i:], m.NALData)
		i = encodeVarintMediastream(dAtA, i, uint64(len(m.NALData)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EOF {
		i--
		if m.EOF {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.FrameTS != 0 {
		i = encodeVarintMediastream(dAtA, i, uint64(m.FrameTS))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VideoHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FrameRate != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FrameRate))))
		i--
		dAtA[i] = 0x19
	}
	if m.Height != 0 {
		i = encodeVarintMediastream(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Width != 0 {
		i = encodeVarintMediastream(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMediastream(dAtA []byte, offset int, v uint64) int {
	offset -= sovMediastream(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Label) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovMediastream(uint64(l))
	}
	if m.Score != 0 {
		n += 5
	}
	return n
}

func (m *NormalizedCenterRect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Xc != 0 {
		n += 5
	}
	if m.Yc != 0 {
		n += 5
	}
	if m.Width != 0 {
		n += 5
	}
	if m.Height != 0 {
		n += 5
	}
	return n
}

func (m *Detection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Label) > 0 {
		for _, e := range m.Label {
			l = e.Size()
			n += 1 + l + sovMediastream(uint64(l))
		}
	}
	if m.BoundingBox != nil {
		l = m.BoundingBox.Size()
		n += 1 + l + sovMediastream(uint64(l))
	}
	return n
}

func (m *DetectionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Detection) > 0 {
		for _, e := range m.Detection {
			l = e.Size()
			n += 1 + l + sovMediastream(uint64(l))
		}
	}
	return n
}

func (m *SegmentationMask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovMediastream(uint64(l))
	}
	if len(m.RunLengthEncoding) > 0 {
		l = 0
		for _, e := range m.RunLengthEncoding {
			l += sovMediastream(uint64(e))
		}
		n += 1 + sovMediastream(uint64(l)) + l
	}
	return n
}

func (m *Segmentation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Masks) > 0 {
		for _, e := range m.Masks {
			l = e.Size()
			n += 1 + l + sovMediastream(uint64(l))
		}
	}
	if m.Width != 0 {
		n += 1 + sovMediastream(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovMediastream(uint64(m.Height))
	}
	return n
}

func (m *ImageHistogram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovMediastream(uint64(m.Channel))
	}
	if m.Min != 0 {
		n += 9
	}
	if m.Max != 0 {
		n += 9
	}
	if m.Num != 0 {
		n += 1 + sovMediastream(uint64(m.Num))
	}
	if m.Sum != 0 {
		n += 9
	}
	if len(m.Bucket) > 0 {
		l = 0
		for _, e := range m.Bucket {
			l += sovMediastream(uint64(e))
		}
		n += 1 + sovMediastream(uint64(l)) + l
	}
	return n
}

func (m *ImageHistogramBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Histograms) > 0 {
		for _, e := range m.Histograms {
			l = e.Size()
			n += 1 + l + sovMediastream(uint64(l))
		}
	}
	return n
}

func (m *ImageQualityMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BrisqueScore != 0 {
		n += 9
	}
	if m.BlurrinessScore != 0 {
		n += 9
	}
	return n
}

func (m *ImageOverlayChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FrameTS != 0 {
		n += 1 + sovMediastream(uint64(m.FrameTS))
	}
	if m.EOF {
		n += 2
	}
	if m.Overlay != nil {
		n += m.Overlay.Size()
	}
	return n
}

func (m *ImageOverlayChunk_Detections) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Detections != nil {
		l = m.Detections.Size()
		n += 2 + l + sovMediastream(uint64(l))
	}
	return n
}
func (m *ImageOverlayChunk_Segmentation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Segmentation != nil {
		l = m.Segmentation.Size()
		n += 2 + l + sovMediastream(uint64(l))
	}
	return n
}
func (m *ImageOverlayChunk_Histograms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Histograms != nil {
		l = m.Histograms.Size()
		n += 2 + l + sovMediastream(uint64(l))
	}
	return n
}
func (m *ImageOverlayChunk_ImageQuality) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ImageQuality != nil {
		l = m.ImageQuality.Size()
		n += 2 + l + sovMediastream(uint64(l))
	}
	return n
}
func (m *H264Chunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FrameTS != 0 {
		n += 1 + sovMediastream(uint64(m.FrameTS))
	}
	if m.EOF {
		n += 2
	}
	l = len(m.NALData)
	if l > 0 {
		n += 1 + l + sovMediastream(uint64(l))
	}
	return n
}

func (m *VideoHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Width != 0 {
		n += 1 + sovMediastream(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovMediastream(uint64(m.Height))
	}
	if m.FrameRate != 0 {
		n += 9
	}
	return n
}

func sovMediastream(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMediastream(x uint64) (n int) {
	return sovMediastream(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Label) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Label{`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NormalizedCenterRect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NormalizedCenterRect{`,
		`Xc:` + fmt.Sprintf("%v", this.Xc) + `,`,
		`Yc:` + fmt.Sprintf("%v", this.Yc) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Detection) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLabel := "[]*Label{"
	for _, f := range this.Label {
		repeatedStringForLabel += strings.Replace(f.String(), "Label", "Label", 1) + ","
	}
	repeatedStringForLabel += "}"
	s := strings.Join([]string{`&Detection{`,
		`Label:` + repeatedStringForLabel + `,`,
		`BoundingBox:` + strings.Replace(this.BoundingBox.String(), "NormalizedCenterRect", "NormalizedCenterRect", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDetection := "[]*Detection{"
	for _, f := range this.Detection {
		repeatedStringForDetection += strings.Replace(f.String(), "Detection", "Detection", 1) + ","
	}
	repeatedStringForDetection += "}"
	s := strings.Join([]string{`&DetectionList{`,
		`Detection:` + repeatedStringForDetection + `,`,
		`}`,
	}, "")
	return s
}
func (this *SegmentationMask) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SegmentationMask{`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`RunLengthEncoding:` + fmt.Sprintf("%v", this.RunLengthEncoding) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Segmentation) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMasks := "[]*SegmentationMask{"
	for _, f := range this.Masks {
		repeatedStringForMasks += strings.Replace(f.String(), "SegmentationMask", "SegmentationMask", 1) + ","
	}
	repeatedStringForMasks += "}"
	s := strings.Join([]string{`&Segmentation{`,
		`Masks:` + repeatedStringForMasks + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageHistogram) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageHistogram{`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`Min:` + fmt.Sprintf("%v", this.Min) + `,`,
		`Max:` + fmt.Sprintf("%v", this.Max) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Sum:` + fmt.Sprintf("%v", this.Sum) + `,`,
		`Bucket:` + fmt.Sprintf("%v", this.Bucket) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageHistogramBatch) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHistograms := "[]*ImageHistogram{"
	for _, f := range this.Histograms {
		repeatedStringForHistograms += strings.Replace(f.String(), "ImageHistogram", "ImageHistogram", 1) + ","
	}
	repeatedStringForHistograms += "}"
	s := strings.Join([]string{`&ImageHistogramBatch{`,
		`Histograms:` + repeatedStringForHistograms + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageQualityMetrics) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageQualityMetrics{`,
		`BrisqueScore:` + fmt.Sprintf("%v", this.BrisqueScore) + `,`,
		`BlurrinessScore:` + fmt.Sprintf("%v", this.BlurrinessScore) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageOverlayChunk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageOverlayChunk{`,
		`FrameTS:` + fmt.Sprintf("%v", this.FrameTS) + `,`,
		`EOF:` + fmt.Sprintf("%v", this.EOF) + `,`,
		`Overlay:` + fmt.Sprintf("%v", this.Overlay) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageOverlayChunk_Detections) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageOverlayChunk_Detections{`,
		`Detections:` + strings.Replace(fmt.Sprintf("%v", this.Detections), "DetectionList", "DetectionList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageOverlayChunk_Segmentation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageOverlayChunk_Segmentation{`,
		`Segmentation:` + strings.Replace(fmt.Sprintf("%v", this.Segmentation), "Segmentation", "Segmentation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageOverlayChunk_Histograms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageOverlayChunk_Histograms{`,
		`Histograms:` + strings.Replace(fmt.Sprintf("%v", this.Histograms), "ImageHistogramBatch", "ImageHistogramBatch", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageOverlayChunk_ImageQuality) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageOverlayChunk_ImageQuality{`,
		`ImageQuality:` + strings.Replace(fmt.Sprintf("%v", this.ImageQuality), "ImageQualityMetrics", "ImageQualityMetrics", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *H264Chunk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&H264Chunk{`,
		`FrameTS:` + fmt.Sprintf("%v", this.FrameTS) + `,`,
		`EOF:` + fmt.Sprintf("%v", this.EOF) + `,`,
		`NALData:` + fmt.Sprintf("%v", this.NALData) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VideoHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VideoHeader{`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`FrameRate:` + fmt.Sprintf("%v", this.FrameRate) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMediastream(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Label) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMediastream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Label: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Label: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMediastream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMediastream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Score = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMediastream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMediastream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NormalizedCenterRect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMediastream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NormalizedCenterRect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NormalizedCenterRect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xc", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Xc = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yc", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Yc = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Width = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Height = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMediastream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMediastream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Detection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMediastream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Detection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Detection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMediastream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMediastream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = append(m.Label, &Label{})
			if err := m.Label[len(m.Label)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoundingBox", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMediastream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMediastream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BoundingBox == nil {
				m.BoundingBox = &NormalizedCenterRect{}
			}
			if err := m.BoundingBox.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMediastream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMediastream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetectionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMediastream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetectionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetectionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMediastream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMediastream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detection = append(m.Detection, &Detection{})
			if err := m.Detection[len(m.Detection)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMediastream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMediastream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentationMask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMediastream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentationMask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentationMask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMediastream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMediastream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMediastream
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RunLengthEncoding = append(m.RunLengthEncoding, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMediastream
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMediastream
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMediastream
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RunLengthEncoding) == 0 {
					m.RunLengthEncoding = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMediastream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RunLengthEncoding = append(m.RunLengthEncoding, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RunLengthEncoding", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMediastream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMediastream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Segmentation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMediastream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Segmentation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Segmentation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMediastream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMediastream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Masks = append(m.Masks, &SegmentationMask{})
			if err := m.Masks[len(m.Masks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMediastream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMediastream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageHistogram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMediastream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageHistogram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageHistogram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= ImageColorChannel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Min = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Max = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Sum = float64(math.Float64frombits(v))
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMediastream
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bucket = append(m.Bucket, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMediastream
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMediastream
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMediastream
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Bucket) == 0 {
					m.Bucket = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMediastream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bucket = append(m.Bucket, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMediastream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMediastream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageHistogramBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMediastream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageHistogramBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageHistogramBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Histograms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMediastream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMediastream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Histograms = append(m.Histograms, &ImageHistogram{})
			if err := m.Histograms[len(m.Histograms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMediastream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMediastream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageQualityMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMediastream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageQualityMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageQualityMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrisqueScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BrisqueScore = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlurrinessScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BlurrinessScore = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMediastream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMediastream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageOverlayChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMediastream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageOverlayChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageOverlayChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameTS", wireType)
			}
			m.FrameTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameTS |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EOF", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EOF = bool(v != 0)
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMediastream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMediastream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DetectionList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Overlay = &ImageOverlayChunk_Detections{v}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segmentation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMediastream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMediastream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Segmentation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Overlay = &ImageOverlayChunk_Segmentation{v}
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Histograms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMediastream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMediastream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ImageHistogramBatch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Overlay = &ImageOverlayChunk_Histograms{v}
			iNdEx = postIndex
		case 300:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageQuality", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMediastream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMediastream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ImageQualityMetrics{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Overlay = &ImageOverlayChunk_ImageQuality{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMediastream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMediastream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *H264Chunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMediastream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: H264Chunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: H264Chunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameTS", wireType)
			}
			m.FrameTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameTS |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EOF", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EOF = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NALData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMediastream
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMediastream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NALData = append(m.NALData[:0], dAtA[iNdEx:postIndex]...)
			if m.NALData == nil {
				m.NALData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMediastream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMediastream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMediastream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FrameRate = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMediastream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMediastream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMediastream(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMediastream
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMediastream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMediastream
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMediastream
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMediastream
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMediastream        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMediastream          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMediastream = fmt.Errorf("proto: unexpected end of group")
)
