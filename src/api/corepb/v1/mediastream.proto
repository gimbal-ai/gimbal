/*
 * Copyright 2023- Gimlet Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package gml.internal.api.core.v1;

option go_package = "gimletlabs.ai/gimlet/src/api/corepb/v1;corepb";

import "gogoproto/gogo.proto";
import "google/protobuf/wrappers.proto";

// Label represents a label with its confidence score.
message Label {
  string label = 1;
  // Confidence score associated with the label.
  float score = 2;
}

// NormalizedCenterRect represents a rectangle in normalized coordinates with the anchor point
// specified as the center of the rectangle, such that the rectangle is:
//  [xc - width/2, xc + width/2] x [yc - height/2, yc + height/2]
// All values are in [0, 1].
message NormalizedCenterRect {
  float xc = 1;
  float yc = 2;
  float width = 3;
  float height = 4;
}

// Classification represents a single classification of an image.
message Classification {
  // Label of the classification (top k).
  repeated Label label = 1;
}

// Detection represents a bounding-box style object detection.
message Detection {
  // Support sending multiple labels for a single bounding box with associated confidence scores.
  // Labels should be sorted by their associated confidence scores, such that label[0].score is the
  // highest of all label scores.
  repeated Label label = 1;

  NormalizedCenterRect bounding_box = 2;

  google.protobuf.Int64Value track_id = 3;
}

// DetectionList is a list of Detection protos. The only reason it's necessary is because oneofs
// aren't allowed to have `repeated` fields.
message DetectionList {
  repeated Detection detection = 1;
}

// A single binary segmentation mask with a class label.
message SegmentationMask {
  // Class label for this mask.
  string label = 1;
  // Run-length encoded binary mask. Specifies the number of 0s in a row, followed by the number of
  // 1s, and so on.
  repeated int32 run_length_encoding = 2;
}

// Segmentation represents a segmentation of an image, assigning each pixel a class.
message Segmentation {
  repeated SegmentationMask masks = 1;
  // Width of the mask.
  int64 width = 2;
  // Height of the mask.
  int64 height = 3;
}

enum ImageColorChannel {
  IMAGE_COLOR_CHANNEL_UNKNOWN = 0;
  IMAGE_COLOR_CHANNEL_GRAY = 1;
  IMAGE_COLOR_CHANNEL_RED = 2;
  IMAGE_COLOR_CHANNEL_GREEN = 3;
  IMAGE_COLOR_CHANNEL_BLUE = 4;
}

// Regression represents a single predicted numeric variable.
message Regression {
  // Label for the predicted variable, eg. "count of cars in image".
  string label = 1;
  double value = 2;
}

// ImageHistogram represents histogram data for a single frame.
message ImageHistogram {
  ImageColorChannel channel = 1;
  double min = 2;
  double max = 3;
  int64 num = 4;
  double sum = 5;

  // bucket(i) is the count for the bucket i.  The pixie values are normalized between 0.0 and 1.0.
  // The pixel values are binned equally.
  repeated int64 bucket = 6 [ packed = true ];
}

// ImageHistogramBatch contains a list of histograms per channel.
message ImageHistogramBatch {
  // One histogram per channel.
  repeated ImageHistogram histograms = 1;
}

message ImageQualityMetrics {
  // The brisque score (https://live.ece.utexas.edu/publications/2012/TIP%20BRISQUE.pdf) for the
  // image in range [0, 1.0]. Higher score is better.
  double brisque_score = 1;
  // The blurriness score in range [0, 1.0]. Higher score means more blurry.
  double blurriness_score = 2;
}

// ImageOverlayChunk stores a chunk of image overlays (bounding boxes, segmentation masks, etc)
// Each chunk only contains overlays for a single frame (not necessarily all the overlays for a
// single frame).
message ImageOverlayChunk {
  // Monotonically increasing frame timestamp.
  int64 frame_ts = 1 [
    (gogoproto.customname) = "FrameTS",
    (gogoproto.jsontag) = "frameTS",
    json_name = "frameTS"
  ];
  // Whether this is the last overlay chunk for this frame
  bool eof = 2 [ (gogoproto.customname) = "EOF" ];

  oneof overlay {
    // Each detection is a bounding box with a label.
    DetectionList detections = 100;
    Segmentation segmentation = 101;
    ImageHistogramBatch histograms = 200;
    ImageQualityMetrics image_quality = 300;
  }
}

// H264Chunk stores a chunk of h.264 encoded NAL units. The NAL units are stored packed into a
// single byte array. Each chunk has the NAL units for no more than a single frame.
message H264Chunk {
  // Monotonically increasing frame timestamp.
  int64 frame_ts = 1 [
    (gogoproto.customname) = "FrameTS",
    (gogoproto.jsontag) = "frameTS",
    json_name = "frameTS"
  ];
  // Whether this is the last h264 chunk for this frame
  bool eof = 2 [ (gogoproto.customname) = "EOF" ];

  // NAL units in bytestream format (i.e. delineated by the 3-byte start code prefix 0x000001)
  bytes nal_data = 3 [ (gogoproto.customname) = "NALData" ];
}

// VideoHeader stores the header information for a video stream. Roughly matches
// mediapipe::VideoHeader.
message VideoHeader {
  // Dimensions of the video in pixels.
  int64 width = 1;
  int64 height = 2;

  // The frame rate in Hz at which the video frames are output.
  double frame_rate = 3;
}
