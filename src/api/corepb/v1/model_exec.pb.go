// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/api/corepb/v1/model_exec.proto

package corepb

import (
	fmt "fmt"
	typespb "gimletlabs.ai/gimlet/src/common/typespb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Pipeline struct {
	Nodes []*PipelineNode `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *Pipeline) Reset()      { *m = Pipeline{} }
func (*Pipeline) ProtoMessage() {}
func (*Pipeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{0}
}
func (m *Pipeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pipeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pipeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pipeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pipeline.Merge(m, src)
}
func (m *Pipeline) XXX_Size() int {
	return m.Size()
}
func (m *Pipeline) XXX_DiscardUnknown() {
	xxx_messageInfo_Pipeline.DiscardUnknown(m)
}

var xxx_messageInfo_Pipeline proto.InternalMessageInfo

func (m *Pipeline) GetNodes() []*PipelineNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type PipelineNode struct {
	Id      uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type    string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Inputs  []*Port `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs []*Port `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (m *PipelineNode) Reset()      { *m = PipelineNode{} }
func (*PipelineNode) ProtoMessage() {}
func (*PipelineNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{1}
}
func (m *PipelineNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PipelineNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PipelineNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PipelineNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineNode.Merge(m, src)
}
func (m *PipelineNode) XXX_Size() int {
	return m.Size()
}
func (m *PipelineNode) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineNode.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineNode proto.InternalMessageInfo

func (m *PipelineNode) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PipelineNode) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PipelineNode) GetInputs() []*Port {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *PipelineNode) GetOutputs() []*Port {
	if m != nil {
		return m.Outputs
	}
	return nil
}

type Port struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Net  string `protobuf:"bytes,2,opt,name=net,proto3" json:"net,omitempty"`
}

func (m *Port) Reset()      { *m = Port{} }
func (*Port) ProtoMessage() {}
func (*Port) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{2}
}
func (m *Port) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Port) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Port.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Port) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Port.Merge(m, src)
}
func (m *Port) XXX_Size() int {
	return m.Size()
}
func (m *Port) XXX_DiscardUnknown() {
	xxx_messageInfo_Port.DiscardUnknown(m)
}

var xxx_messageInfo_Port proto.InternalMessageInfo

func (m *Port) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Port) GetNet() string {
	if m != nil {
		return m.Net
	}
	return ""
}

type FileResource struct {
	FileID     *typespb.UUID `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	SizeBytes  uint64        `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	Sha256Hash string        `protobuf:"bytes,3,opt,name=sha256_hash,json=sha256Hash,proto3" json:"sha256_hash,omitempty"`
}

func (m *FileResource) Reset()      { *m = FileResource{} }
func (*FileResource) ProtoMessage() {}
func (*FileResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{3}
}
func (m *FileResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileResource.Merge(m, src)
}
func (m *FileResource) XXX_Size() int {
	return m.Size()
}
func (m *FileResource) XXX_DiscardUnknown() {
	xxx_messageInfo_FileResource.DiscardUnknown(m)
}

var xxx_messageInfo_FileResource proto.InternalMessageInfo

func (m *FileResource) GetFileID() *typespb.UUID {
	if m != nil {
		return m.FileID
	}
	return nil
}

func (m *FileResource) GetSizeBytes() uint64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

func (m *FileResource) GetSha256Hash() string {
	if m != nil {
		return m.Sha256Hash
	}
	return ""
}

type ExecutionSpec struct {
	Graph     *framework.CalculatorGraphConfig `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	ModelSpec []*ModelSpec                     `protobuf:"bytes,2,rep,name=model_spec,json=modelSpec,proto3" json:"model_spec,omitempty"`
}

func (m *ExecutionSpec) Reset()      { *m = ExecutionSpec{} }
func (*ExecutionSpec) ProtoMessage() {}
func (*ExecutionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{4}
}
func (m *ExecutionSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionSpec.Merge(m, src)
}
func (m *ExecutionSpec) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionSpec proto.InternalMessageInfo

func (m *ExecutionSpec) GetGraph() *framework.CalculatorGraphConfig {
	if m != nil {
		return m.Graph
	}
	return nil
}

func (m *ExecutionSpec) GetModelSpec() []*ModelSpec {
	if m != nil {
		return m.ModelSpec
	}
	return nil
}

type ModelSpec struct {
	Name         string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ONNXBlobKey  string             `protobuf:"bytes,2,opt,name=onnx_blob_key,json=onnxBlobKey,proto3" json:"onnx_blob_key,omitempty"`
	ONNXFile     *FileResource      `protobuf:"bytes,3,opt,name=onnx_file,json=onnxFile,proto3" json:"onnx_file,omitempty"`
	Runtime      string             `protobuf:"bytes,50,opt,name=runtime,proto3" json:"runtime,omitempty"`
	TensorRTSpec *TensorRTModelSpec `protobuf:"bytes,100,opt,name=tensorrt_spec,json=tensorrtSpec,proto3" json:"tensorrt_spec,omitempty"`
	OpenVINOSpec *OpenVINOModelSpec `protobuf:"bytes,101,opt,name=openvino_spec,json=openvinoSpec,proto3" json:"openvino_spec,omitempty"`
}

func (m *ModelSpec) Reset()      { *m = ModelSpec{} }
func (*ModelSpec) ProtoMessage() {}
func (*ModelSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{5}
}
func (m *ModelSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelSpec.Merge(m, src)
}
func (m *ModelSpec) XXX_Size() int {
	return m.Size()
}
func (m *ModelSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ModelSpec proto.InternalMessageInfo

func (m *ModelSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModelSpec) GetONNXBlobKey() string {
	if m != nil {
		return m.ONNXBlobKey
	}
	return ""
}

func (m *ModelSpec) GetONNXFile() *FileResource {
	if m != nil {
		return m.ONNXFile
	}
	return nil
}

func (m *ModelSpec) GetRuntime() string {
	if m != nil {
		return m.Runtime
	}
	return ""
}

func (m *ModelSpec) GetTensorRTSpec() *TensorRTModelSpec {
	if m != nil {
		return m.TensorRTSpec
	}
	return nil
}

func (m *ModelSpec) GetOpenVINOSpec() *OpenVINOModelSpec {
	if m != nil {
		return m.OpenVINOSpec
	}
	return nil
}

type TensorRTModelSpec struct {
	OptimizationProfile []*TensorRTOptimizationProfile `protobuf:"bytes,1,rep,name=optimization_profile,json=optimizationProfile,proto3" json:"optimization_profile,omitempty"`
	EngineBlobKey       string                         `protobuf:"bytes,2,opt,name=engine_blob_key,json=engineBlobKey,proto3" json:"engine_blob_key,omitempty"`
	MemPoolLimits       *TensorRTMemPoolLimits         `protobuf:"bytes,3,opt,name=mem_pool_limits,json=memPoolLimits,proto3" json:"mem_pool_limits,omitempty"`
}

func (m *TensorRTModelSpec) Reset()      { *m = TensorRTModelSpec{} }
func (*TensorRTModelSpec) ProtoMessage() {}
func (*TensorRTModelSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{6}
}
func (m *TensorRTModelSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TensorRTModelSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TensorRTModelSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TensorRTModelSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TensorRTModelSpec.Merge(m, src)
}
func (m *TensorRTModelSpec) XXX_Size() int {
	return m.Size()
}
func (m *TensorRTModelSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TensorRTModelSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TensorRTModelSpec proto.InternalMessageInfo

func (m *TensorRTModelSpec) GetOptimizationProfile() []*TensorRTOptimizationProfile {
	if m != nil {
		return m.OptimizationProfile
	}
	return nil
}

func (m *TensorRTModelSpec) GetEngineBlobKey() string {
	if m != nil {
		return m.EngineBlobKey
	}
	return ""
}

func (m *TensorRTModelSpec) GetMemPoolLimits() *TensorRTMemPoolLimits {
	if m != nil {
		return m.MemPoolLimits
	}
	return nil
}

type TensorRTOptimizationProfile struct {
	TensorShapeRange []*TensorRTTensorShapeRange `protobuf:"bytes,1,rep,name=tensor_shape_range,json=tensorShapeRange,proto3" json:"tensor_shape_range,omitempty"`
}

func (m *TensorRTOptimizationProfile) Reset()      { *m = TensorRTOptimizationProfile{} }
func (*TensorRTOptimizationProfile) ProtoMessage() {}
func (*TensorRTOptimizationProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{7}
}
func (m *TensorRTOptimizationProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TensorRTOptimizationProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TensorRTOptimizationProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TensorRTOptimizationProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TensorRTOptimizationProfile.Merge(m, src)
}
func (m *TensorRTOptimizationProfile) XXX_Size() int {
	return m.Size()
}
func (m *TensorRTOptimizationProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_TensorRTOptimizationProfile.DiscardUnknown(m)
}

var xxx_messageInfo_TensorRTOptimizationProfile proto.InternalMessageInfo

func (m *TensorRTOptimizationProfile) GetTensorShapeRange() []*TensorRTTensorShapeRange {
	if m != nil {
		return m.TensorShapeRange
	}
	return nil
}

type TensorRTTensorShapeRange struct {
	TensorName string  `protobuf:"bytes,1,opt,name=tensor_name,json=tensorName,proto3" json:"tensor_name,omitempty"`
	Dim        []int32 `protobuf:"varint,2,rep,packed,name=dim,proto3" json:"dim,omitempty"`
}

func (m *TensorRTTensorShapeRange) Reset()      { *m = TensorRTTensorShapeRange{} }
func (*TensorRTTensorShapeRange) ProtoMessage() {}
func (*TensorRTTensorShapeRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{8}
}
func (m *TensorRTTensorShapeRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TensorRTTensorShapeRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TensorRTTensorShapeRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TensorRTTensorShapeRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TensorRTTensorShapeRange.Merge(m, src)
}
func (m *TensorRTTensorShapeRange) XXX_Size() int {
	return m.Size()
}
func (m *TensorRTTensorShapeRange) XXX_DiscardUnknown() {
	xxx_messageInfo_TensorRTTensorShapeRange.DiscardUnknown(m)
}

var xxx_messageInfo_TensorRTTensorShapeRange proto.InternalMessageInfo

func (m *TensorRTTensorShapeRange) GetTensorName() string {
	if m != nil {
		return m.TensorName
	}
	return ""
}

func (m *TensorRTTensorShapeRange) GetDim() []int32 {
	if m != nil {
		return m.Dim
	}
	return nil
}

type TensorRTMemPoolLimits struct {
	Workspace int64 `protobuf:"varint,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (m *TensorRTMemPoolLimits) Reset()      { *m = TensorRTMemPoolLimits{} }
func (*TensorRTMemPoolLimits) ProtoMessage() {}
func (*TensorRTMemPoolLimits) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{9}
}
func (m *TensorRTMemPoolLimits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TensorRTMemPoolLimits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TensorRTMemPoolLimits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TensorRTMemPoolLimits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TensorRTMemPoolLimits.Merge(m, src)
}
func (m *TensorRTMemPoolLimits) XXX_Size() int {
	return m.Size()
}
func (m *TensorRTMemPoolLimits) XXX_DiscardUnknown() {
	xxx_messageInfo_TensorRTMemPoolLimits.DiscardUnknown(m)
}

var xxx_messageInfo_TensorRTMemPoolLimits proto.InternalMessageInfo

func (m *TensorRTMemPoolLimits) GetWorkspace() int64 {
	if m != nil {
		return m.Workspace
	}
	return 0
}

type OpenVINOModelSpec struct {
	InputShape []*OpenVINOModelSpec_TensorShape `protobuf:"bytes,1,rep,name=input_shape,json=inputShape,proto3" json:"input_shape,omitempty"`
}

func (m *OpenVINOModelSpec) Reset()      { *m = OpenVINOModelSpec{} }
func (*OpenVINOModelSpec) ProtoMessage() {}
func (*OpenVINOModelSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{10}
}
func (m *OpenVINOModelSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenVINOModelSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenVINOModelSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenVINOModelSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenVINOModelSpec.Merge(m, src)
}
func (m *OpenVINOModelSpec) XXX_Size() int {
	return m.Size()
}
func (m *OpenVINOModelSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenVINOModelSpec.DiscardUnknown(m)
}

var xxx_messageInfo_OpenVINOModelSpec proto.InternalMessageInfo

func (m *OpenVINOModelSpec) GetInputShape() []*OpenVINOModelSpec_TensorShape {
	if m != nil {
		return m.InputShape
	}
	return nil
}

type OpenVINOModelSpec_TensorShape struct {
	Dim []int32 `protobuf:"varint,1,rep,packed,name=dim,proto3" json:"dim,omitempty"`
}

func (m *OpenVINOModelSpec_TensorShape) Reset()      { *m = OpenVINOModelSpec_TensorShape{} }
func (*OpenVINOModelSpec_TensorShape) ProtoMessage() {}
func (*OpenVINOModelSpec_TensorShape) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{10, 0}
}
func (m *OpenVINOModelSpec_TensorShape) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenVINOModelSpec_TensorShape) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenVINOModelSpec_TensorShape.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenVINOModelSpec_TensorShape) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenVINOModelSpec_TensorShape.Merge(m, src)
}
func (m *OpenVINOModelSpec_TensorShape) XXX_Size() int {
	return m.Size()
}
func (m *OpenVINOModelSpec_TensorShape) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenVINOModelSpec_TensorShape.DiscardUnknown(m)
}

var xxx_messageInfo_OpenVINOModelSpec_TensorShape proto.InternalMessageInfo

func (m *OpenVINOModelSpec_TensorShape) GetDim() []int32 {
	if m != nil {
		return m.Dim
	}
	return nil
}

func init() {
	proto.RegisterType((*Pipeline)(nil), "gml.internal.api.core.v1.Pipeline")
	proto.RegisterType((*PipelineNode)(nil), "gml.internal.api.core.v1.PipelineNode")
	proto.RegisterType((*Port)(nil), "gml.internal.api.core.v1.Port")
	proto.RegisterType((*FileResource)(nil), "gml.internal.api.core.v1.FileResource")
	proto.RegisterType((*ExecutionSpec)(nil), "gml.internal.api.core.v1.ExecutionSpec")
	proto.RegisterType((*ModelSpec)(nil), "gml.internal.api.core.v1.ModelSpec")
	proto.RegisterType((*TensorRTModelSpec)(nil), "gml.internal.api.core.v1.TensorRTModelSpec")
	proto.RegisterType((*TensorRTOptimizationProfile)(nil), "gml.internal.api.core.v1.TensorRTOptimizationProfile")
	proto.RegisterType((*TensorRTTensorShapeRange)(nil), "gml.internal.api.core.v1.TensorRTTensorShapeRange")
	proto.RegisterType((*TensorRTMemPoolLimits)(nil), "gml.internal.api.core.v1.TensorRTMemPoolLimits")
	proto.RegisterType((*OpenVINOModelSpec)(nil), "gml.internal.api.core.v1.OpenVINOModelSpec")
	proto.RegisterType((*OpenVINOModelSpec_TensorShape)(nil), "gml.internal.api.core.v1.OpenVINOModelSpec.TensorShape")
}

func init() {
	proto.RegisterFile("src/api/corepb/v1/model_exec.proto", fileDescriptor_2eacf87cbdc6b8b6)
}

var fileDescriptor_2eacf87cbdc6b8b6 = []byte{
	// 900 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0x5e, 0x67, 0xf3, 0x6b, 0xdf, 0xee, 0x92, 0x74, 0x28, 0x92, 0x15, 0xa8, 0x37, 0x32, 0xa8,
	0x8a, 0x04, 0xd8, 0xea, 0x96, 0x04, 0x24, 0x38, 0x6d, 0x0b, 0x34, 0x82, 0x6e, 0x82, 0xdb, 0x42,
	0xc5, 0xc5, 0xf8, 0xc7, 0xcb, 0xee, 0xa8, 0xf6, 0xcc, 0xc8, 0xf6, 0x86, 0xa4, 0x17, 0x38, 0x70,
	0x41, 0x48, 0x88, 0x3f, 0x82, 0x03, 0x7f, 0x0a, 0xc7, 0x1c, 0x7b, 0x8a, 0x88, 0x73, 0xe1, 0xd8,
	0xbf, 0x00, 0xa1, 0x99, 0xb1, 0x97, 0x55, 0xd2, 0xfc, 0xe0, 0xb4, 0xcf, 0x9f, 0xbf, 0x37, 0xdf,
	0x7b, 0xdf, 0x7b, 0xe3, 0x05, 0x3b, 0xcf, 0x22, 0x37, 0x10, 0xd4, 0x8d, 0x78, 0x86, 0x22, 0x74,
	0xf7, 0xef, 0xb8, 0x29, 0x8f, 0x31, 0xf1, 0xf1, 0x00, 0x23, 0x47, 0x64, 0xbc, 0xe0, 0xc4, 0x1c,
	0xa5, 0x89, 0x43, 0x59, 0x81, 0x19, 0x0b, 0x12, 0x27, 0x10, 0xd4, 0x91, 0x64, 0x67, 0xff, 0xce,
	0xda, 0xcd, 0x11, 0x1f, 0x71, 0x45, 0x72, 0x65, 0xa4, 0xf9, 0x6b, 0xef, 0xa4, 0x18, 0xd3, 0x40,
	0x50, 0x81, 0xee, 0x5e, 0x16, 0xa4, 0xf8, 0x3d, 0xcf, 0x9e, 0xb9, 0x51, 0x90, 0x44, 0x93, 0x24,
	0x28, 0x78, 0x56, 0xb1, 0x6e, 0x49, 0xe5, 0x88, 0xa7, 0x29, 0x67, 0x6e, 0x71, 0x28, 0x30, 0x17,
	0xa1, 0x3b, 0x99, 0xd0, 0x58, 0xbf, 0xb6, 0x1f, 0xc0, 0xf2, 0x2e, 0x15, 0x98, 0x50, 0x86, 0xe4,
	0x13, 0x58, 0x60, 0x3c, 0xc6, 0xdc, 0x9c, 0x5b, 0x6f, 0x6e, 0xb4, 0xfb, 0xb7, 0x9d, 0x8b, 0x0a,
	0x72, 0xea, 0x94, 0x21, 0x8f, 0xd1, 0xd3, 0x49, 0xf6, 0xef, 0x06, 0x74, 0x66, 0x71, 0xf2, 0x1a,
	0xcc, 0xd1, 0xd8, 0x34, 0xd6, 0x8d, 0x8d, 0x79, 0x6f, 0x8e, 0xc6, 0x84, 0xc0, 0xbc, 0x2c, 0xc0,
	0x9c, 0x5b, 0x37, 0x36, 0x5a, 0x9e, 0x8a, 0xc9, 0x16, 0x2c, 0x52, 0x26, 0x26, 0x45, 0x6e, 0x36,
	0x95, 0xa6, 0x75, 0x89, 0x26, 0xcf, 0x0a, 0xaf, 0x62, 0x93, 0x8f, 0x60, 0x89, 0x4f, 0x0a, 0x95,
	0x38, 0x7f, 0xad, 0xc4, 0x9a, 0x6e, 0xbf, 0x07, 0xf3, 0x12, 0x90, 0xd5, 0xb0, 0x20, 0x45, 0x55,
	0x5f, 0xcb, 0x53, 0x31, 0x59, 0x85, 0x26, 0xc3, 0xa2, 0x2a, 0x50, 0x86, 0xf6, 0x4f, 0x06, 0x74,
	0x3e, 0xa3, 0x09, 0x7a, 0x98, 0xf3, 0x49, 0x16, 0x21, 0xf9, 0x00, 0x96, 0xf6, 0x68, 0x82, 0x7e,
	0xd5, 0x59, 0xbb, 0xbf, 0xa2, 0x84, 0x95, 0xb3, 0xce, 0x93, 0x27, 0xdb, 0xf7, 0x07, 0x50, 0x1e,
	0xf7, 0x16, 0x65, 0xce, 0xf6, 0x7d, 0x6f, 0x51, 0x72, 0xb7, 0x63, 0x72, 0x0b, 0x20, 0xa7, 0xcf,
	0xd1, 0x0f, 0x0f, 0x0b, 0x65, 0xaf, 0xb4, 0xa4, 0x25, 0x91, 0x81, 0x04, 0x48, 0x0f, 0xda, 0xf9,
	0x38, 0xe8, 0x6f, 0x6e, 0xf9, 0xe3, 0x20, 0x1f, 0x9b, 0x4d, 0xa5, 0x0f, 0x1a, 0x7a, 0x10, 0xe4,
	0x63, 0xfb, 0x17, 0x03, 0xba, 0x9f, 0x1e, 0x60, 0x34, 0x29, 0x28, 0x67, 0x8f, 0x04, 0x46, 0x64,
	0x0b, 0x16, 0x46, 0x59, 0x20, 0xc6, 0x55, 0x15, 0xeb, 0xce, 0x74, 0x19, 0x9c, 0x7b, 0xd3, 0x15,
	0xf8, 0x5c, 0x32, 0xee, 0x71, 0xb6, 0x47, 0x47, 0x9e, 0xa6, 0x93, 0x01, 0x80, 0x5e, 0xbc, 0x5c,
	0x60, 0x54, 0x0d, 0xfa, 0xed, 0x8b, 0xbd, 0x7b, 0x28, 0xb9, 0x52, 0xd0, 0x6b, 0xa5, 0x75, 0x68,
	0xff, 0xdc, 0x84, 0xd6, 0xf4, 0xc5, 0x2b, 0x8d, 0xbc, 0x0b, 0x5d, 0xce, 0xd8, 0x81, 0x1f, 0x26,
	0x3c, 0xf4, 0x9f, 0xe1, 0xa1, 0xb6, 0x74, 0xb0, 0x52, 0x1e, 0xf7, 0xda, 0x3b, 0xc3, 0xe1, 0xd3,
	0x41, 0xc2, 0xc3, 0x2f, 0xf0, 0xd0, 0x6b, 0x4b, 0x56, 0xf5, 0x40, 0xbe, 0x82, 0x96, 0x4a, 0x92,
	0x9e, 0x29, 0x0f, 0x2e, 0x5d, 0xc1, 0xd9, 0xa9, 0x0c, 0x3a, 0xe5, 0x71, 0x6f, 0x59, 0x1e, 0xac,
	0xd0, 0x65, 0x79, 0x8c, 0x8c, 0x88, 0x09, 0x4b, 0xd9, 0x84, 0x15, 0x34, 0x45, 0xb3, 0xaf, 0xca,
	0xab, 0x1f, 0x49, 0x08, 0xdd, 0x02, 0x59, 0xce, 0xb3, 0xac, 0xd0, 0x56, 0xc4, 0x4a, 0xf0, 0xdd,
	0x8b, 0x05, 0x1f, 0x2b, 0xba, 0xf7, 0x78, 0xda, 0xf9, 0x60, 0xb5, 0x3c, 0xee, 0x75, 0x6a, 0x58,
	0x99, 0xd4, 0xa9, 0xcf, 0x54, 0xce, 0x84, 0xd0, 0xe5, 0x02, 0xd9, 0x3e, 0x65, 0x5c, 0x6b, 0xe0,
	0x55, 0x1a, 0x3b, 0x02, 0xd9, 0xd7, 0xdb, 0xc3, 0x9d, 0x33, 0x1a, 0x35, 0xac, 0x35, 0xea, 0x33,
	0xd5, 0x2c, 0xfe, 0x31, 0xe0, 0xc6, 0xb9, 0xca, 0xc8, 0x18, 0x6e, 0x72, 0x51, 0xd0, 0x94, 0x3e,
	0x0f, 0xe4, 0xc6, 0xf8, 0x22, 0xe3, 0xca, 0x55, 0x43, 0xcd, 0x7b, 0xf3, 0xea, 0x26, 0x77, 0x66,
	0xb2, 0x77, 0x75, 0xb2, 0xf7, 0x3a, 0x3f, 0x0f, 0x92, 0xdb, 0xb0, 0x82, 0x6c, 0x44, 0x19, 0x9e,
	0x99, 0xb5, 0xd7, 0xd5, 0x70, 0x3d, 0xdc, 0x6f, 0x60, 0x25, 0xc5, 0xd4, 0x17, 0x9c, 0x27, 0x7e,
	0x42, 0x53, 0xaa, 0x6e, 0xbc, 0x74, 0xc3, 0xbd, 0x86, 0xe3, 0x98, 0xee, 0x72, 0x9e, 0x7c, 0xa9,
	0xd2, 0xbc, 0x6e, 0x3a, 0xfb, 0x68, 0xff, 0x00, 0x6f, 0x5e, 0x52, 0x34, 0xf9, 0x0e, 0x88, 0x9e,
	0x89, 0x9f, 0x8f, 0x03, 0x81, 0x7e, 0x16, 0xb0, 0x51, 0xed, 0x43, 0xff, 0x6a, 0x69, 0xfd, 0xfb,
	0x48, 0xa6, 0x7a, 0x32, 0xd3, 0x5b, 0x2d, 0xce, 0x20, 0xf6, 0x43, 0x30, 0x2f, 0x62, 0xcb, 0x8b,
	0x5d, 0xa9, 0xcf, 0x5c, 0x11, 0xd0, 0xd0, 0xb0, 0xfa, 0xe2, 0xc4, 0x34, 0x55, 0xf7, 0x70, 0xc1,
	0x93, 0xa1, 0xbd, 0x09, 0x6f, 0xbc, 0xb2, 0x6f, 0xf2, 0x16, 0xb4, 0xe4, 0x17, 0x3e, 0x17, 0x41,
	0xa4, 0x4f, 0x6a, 0x7a, 0xff, 0x01, 0xf6, 0xaf, 0x06, 0xdc, 0x38, 0xb7, 0x3d, 0xe4, 0x29, 0xb4,
	0xd5, 0x07, 0x53, 0x37, 0x5f, 0xb5, 0xfd, 0xe1, 0xff, 0xd8, 0x3f, 0x67, 0xb6, 0x25, 0x50, 0x67,
	0xa9, 0x78, 0xad, 0x07, 0xed, 0x99, 0x57, 0x75, 0x1f, 0xc6, 0xb4, 0x8f, 0x41, 0x74, 0x74, 0x62,
	0x35, 0x5e, 0x9c, 0x58, 0x8d, 0x97, 0x27, 0x96, 0xf1, 0x63, 0x69, 0x19, 0x7f, 0x94, 0x96, 0xf1,
	0x67, 0x69, 0x19, 0x47, 0xa5, 0x65, 0xfc, 0x55, 0x5a, 0xc6, 0xdf, 0xa5, 0xd5, 0x78, 0x59, 0x5a,
	0xc6, 0x6f, 0xa7, 0x56, 0xe3, 0xe8, 0xd4, 0x6a, 0xbc, 0x38, 0xb5, 0x1a, 0xdf, 0xbe, 0x3f, 0xa2,
	0x69, 0x82, 0x45, 0x12, 0x84, 0xb9, 0x13, 0x50, 0x57, 0x3f, 0xb9, 0xe7, 0xfe, 0x3c, 0x3f, 0xd6,
	0x51, 0xb8, 0xa8, 0xfe, 0xc4, 0xee, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x9a, 0x6e, 0x43,
	0x5f, 0x07, 0x00, 0x00,
}

func (this *Pipeline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pipeline)
	if !ok {
		that2, ok := that.(Pipeline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	return true
}
func (this *PipelineNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PipelineNode)
	if !ok {
		that2, ok := that.(PipelineNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Inputs) != len(that1.Inputs) {
		return false
	}
	for i := range this.Inputs {
		if !this.Inputs[i].Equal(that1.Inputs[i]) {
			return false
		}
	}
	if len(this.Outputs) != len(that1.Outputs) {
		return false
	}
	for i := range this.Outputs {
		if !this.Outputs[i].Equal(that1.Outputs[i]) {
			return false
		}
	}
	return true
}
func (this *Port) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Port)
	if !ok {
		that2, ok := that.(Port)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Net != that1.Net {
		return false
	}
	return true
}
func (this *FileResource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileResource)
	if !ok {
		that2, ok := that.(FileResource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FileID.Equal(that1.FileID) {
		return false
	}
	if this.SizeBytes != that1.SizeBytes {
		return false
	}
	if this.Sha256Hash != that1.Sha256Hash {
		return false
	}
	return true
}
func (this *ExecutionSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionSpec)
	if !ok {
		that2, ok := that.(ExecutionSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Graph.Equal(that1.Graph) {
		return false
	}
	if len(this.ModelSpec) != len(that1.ModelSpec) {
		return false
	}
	for i := range this.ModelSpec {
		if !this.ModelSpec[i].Equal(that1.ModelSpec[i]) {
			return false
		}
	}
	return true
}
func (this *ModelSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ModelSpec)
	if !ok {
		that2, ok := that.(ModelSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ONNXBlobKey != that1.ONNXBlobKey {
		return false
	}
	if !this.ONNXFile.Equal(that1.ONNXFile) {
		return false
	}
	if this.Runtime != that1.Runtime {
		return false
	}
	if !this.TensorRTSpec.Equal(that1.TensorRTSpec) {
		return false
	}
	if !this.OpenVINOSpec.Equal(that1.OpenVINOSpec) {
		return false
	}
	return true
}
func (this *TensorRTModelSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TensorRTModelSpec)
	if !ok {
		that2, ok := that.(TensorRTModelSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OptimizationProfile) != len(that1.OptimizationProfile) {
		return false
	}
	for i := range this.OptimizationProfile {
		if !this.OptimizationProfile[i].Equal(that1.OptimizationProfile[i]) {
			return false
		}
	}
	if this.EngineBlobKey != that1.EngineBlobKey {
		return false
	}
	if !this.MemPoolLimits.Equal(that1.MemPoolLimits) {
		return false
	}
	return true
}
func (this *TensorRTOptimizationProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TensorRTOptimizationProfile)
	if !ok {
		that2, ok := that.(TensorRTOptimizationProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TensorShapeRange) != len(that1.TensorShapeRange) {
		return false
	}
	for i := range this.TensorShapeRange {
		if !this.TensorShapeRange[i].Equal(that1.TensorShapeRange[i]) {
			return false
		}
	}
	return true
}
func (this *TensorRTTensorShapeRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TensorRTTensorShapeRange)
	if !ok {
		that2, ok := that.(TensorRTTensorShapeRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TensorName != that1.TensorName {
		return false
	}
	if len(this.Dim) != len(that1.Dim) {
		return false
	}
	for i := range this.Dim {
		if this.Dim[i] != that1.Dim[i] {
			return false
		}
	}
	return true
}
func (this *TensorRTMemPoolLimits) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TensorRTMemPoolLimits)
	if !ok {
		that2, ok := that.(TensorRTMemPoolLimits)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Workspace != that1.Workspace {
		return false
	}
	return true
}
func (this *OpenVINOModelSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenVINOModelSpec)
	if !ok {
		that2, ok := that.(OpenVINOModelSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.InputShape) != len(that1.InputShape) {
		return false
	}
	for i := range this.InputShape {
		if !this.InputShape[i].Equal(that1.InputShape[i]) {
			return false
		}
	}
	return true
}
func (this *OpenVINOModelSpec_TensorShape) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenVINOModelSpec_TensorShape)
	if !ok {
		that2, ok := that.(OpenVINOModelSpec_TensorShape)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Dim) != len(that1.Dim) {
		return false
	}
	for i := range this.Dim {
		if this.Dim[i] != that1.Dim[i] {
			return false
		}
	}
	return true
}
func (this *Pipeline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.Pipeline{")
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PipelineNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&corepb.PipelineNode{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Inputs != nil {
		s = append(s, "Inputs: "+fmt.Sprintf("%#v", this.Inputs)+",\n")
	}
	if this.Outputs != nil {
		s = append(s, "Outputs: "+fmt.Sprintf("%#v", this.Outputs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Port) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&corepb.Port{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Net: "+fmt.Sprintf("%#v", this.Net)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FileResource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&corepb.FileResource{")
	if this.FileID != nil {
		s = append(s, "FileID: "+fmt.Sprintf("%#v", this.FileID)+",\n")
	}
	s = append(s, "SizeBytes: "+fmt.Sprintf("%#v", this.SizeBytes)+",\n")
	s = append(s, "Sha256Hash: "+fmt.Sprintf("%#v", this.Sha256Hash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecutionSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&corepb.ExecutionSpec{")
	if this.Graph != nil {
		s = append(s, "Graph: "+fmt.Sprintf("%#v", this.Graph)+",\n")
	}
	if this.ModelSpec != nil {
		s = append(s, "ModelSpec: "+fmt.Sprintf("%#v", this.ModelSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&corepb.ModelSpec{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ONNXBlobKey: "+fmt.Sprintf("%#v", this.ONNXBlobKey)+",\n")
	if this.ONNXFile != nil {
		s = append(s, "ONNXFile: "+fmt.Sprintf("%#v", this.ONNXFile)+",\n")
	}
	s = append(s, "Runtime: "+fmt.Sprintf("%#v", this.Runtime)+",\n")
	if this.TensorRTSpec != nil {
		s = append(s, "TensorRTSpec: "+fmt.Sprintf("%#v", this.TensorRTSpec)+",\n")
	}
	if this.OpenVINOSpec != nil {
		s = append(s, "OpenVINOSpec: "+fmt.Sprintf("%#v", this.OpenVINOSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TensorRTModelSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&corepb.TensorRTModelSpec{")
	if this.OptimizationProfile != nil {
		s = append(s, "OptimizationProfile: "+fmt.Sprintf("%#v", this.OptimizationProfile)+",\n")
	}
	s = append(s, "EngineBlobKey: "+fmt.Sprintf("%#v", this.EngineBlobKey)+",\n")
	if this.MemPoolLimits != nil {
		s = append(s, "MemPoolLimits: "+fmt.Sprintf("%#v", this.MemPoolLimits)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TensorRTOptimizationProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.TensorRTOptimizationProfile{")
	if this.TensorShapeRange != nil {
		s = append(s, "TensorShapeRange: "+fmt.Sprintf("%#v", this.TensorShapeRange)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TensorRTTensorShapeRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&corepb.TensorRTTensorShapeRange{")
	s = append(s, "TensorName: "+fmt.Sprintf("%#v", this.TensorName)+",\n")
	s = append(s, "Dim: "+fmt.Sprintf("%#v", this.Dim)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TensorRTMemPoolLimits) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.TensorRTMemPoolLimits{")
	s = append(s, "Workspace: "+fmt.Sprintf("%#v", this.Workspace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenVINOModelSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.OpenVINOModelSpec{")
	if this.InputShape != nil {
		s = append(s, "InputShape: "+fmt.Sprintf("%#v", this.InputShape)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenVINOModelSpec_TensorShape) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.OpenVINOModelSpec_TensorShape{")
	s = append(s, "Dim: "+fmt.Sprintf("%#v", this.Dim)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringModelExec(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Pipeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pipeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pipeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *PipelineNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipelineNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PipelineNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Outputs) > 0 {
		for iNdEx := len(m.Outputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Outputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Inputs) > 0 {
		for iNdEx := len(m.Inputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintModelExec(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Port) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Port) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Port) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Net) > 0 {
		i -= len(m.Net)
		copy(dAtA[i:], m.Net)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.Net)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sha256Hash) > 0 {
		i -= len(m.Sha256Hash)
		copy(dAtA[i:], m.Sha256Hash)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.Sha256Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SizeBytes != 0 {
		i = encodeVarintModelExec(dAtA, i, uint64(m.SizeBytes))
		i--
		dAtA[i] = 0x10
	}
	if m.FileID != nil {
		{
			size, err := m.FileID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModelSpec) > 0 {
		for iNdEx := len(m.ModelSpec) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ModelSpec[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Graph != nil {
		{
			size, err := m.Graph.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModelSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OpenVINOSpec != nil {
		{
			size, err := m.OpenVINOSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.TensorRTSpec != nil {
		{
			size, err := m.TensorRTSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Runtime) > 0 {
		i -= len(m.Runtime)
		copy(dAtA[i:], m.Runtime)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.Runtime)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if m.ONNXFile != nil {
		{
			size, err := m.ONNXFile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ONNXBlobKey) > 0 {
		i -= len(m.ONNXBlobKey)
		copy(dAtA[i:], m.ONNXBlobKey)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.ONNXBlobKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TensorRTModelSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorRTModelSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TensorRTModelSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MemPoolLimits != nil {
		{
			size, err := m.MemPoolLimits.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EngineBlobKey) > 0 {
		i -= len(m.EngineBlobKey)
		copy(dAtA[i:], m.EngineBlobKey)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.EngineBlobKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OptimizationProfile) > 0 {
		for iNdEx := len(m.OptimizationProfile) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OptimizationProfile[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TensorRTOptimizationProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorRTOptimizationProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TensorRTOptimizationProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TensorShapeRange) > 0 {
		for iNdEx := len(m.TensorShapeRange) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TensorShapeRange[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TensorRTTensorShapeRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorRTTensorShapeRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TensorRTTensorShapeRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dim) > 0 {
		dAtA8 := make([]byte, len(m.Dim)*10)
		var j7 int
		for _, num1 := range m.Dim {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintModelExec(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TensorName) > 0 {
		i -= len(m.TensorName)
		copy(dAtA[i:], m.TensorName)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.TensorName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TensorRTMemPoolLimits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorRTMemPoolLimits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TensorRTMemPoolLimits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Workspace != 0 {
		i = encodeVarintModelExec(dAtA, i, uint64(m.Workspace))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OpenVINOModelSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenVINOModelSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenVINOModelSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InputShape) > 0 {
		for iNdEx := len(m.InputShape) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InputShape[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OpenVINOModelSpec_TensorShape) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenVINOModelSpec_TensorShape) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenVINOModelSpec_TensorShape) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dim) > 0 {
		dAtA10 := make([]byte, len(m.Dim)*10)
		var j9 int
		for _, num1 := range m.Dim {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintModelExec(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintModelExec(dAtA []byte, offset int, v uint64) int {
	offset -= sovModelExec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pipeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	return n
}

func (m *PipelineNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModelExec(uint64(m.Id))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	return n
}

func (m *Port) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	l = len(m.Net)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	return n
}

func (m *FileResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileID != nil {
		l = m.FileID.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.SizeBytes != 0 {
		n += 1 + sovModelExec(uint64(m.SizeBytes))
	}
	l = len(m.Sha256Hash)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	return n
}

func (m *ExecutionSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Graph != nil {
		l = m.Graph.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	if len(m.ModelSpec) > 0 {
		for _, e := range m.ModelSpec {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	return n
}

func (m *ModelSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	l = len(m.ONNXBlobKey)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.ONNXFile != nil {
		l = m.ONNXFile.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	l = len(m.Runtime)
	if l > 0 {
		n += 2 + l + sovModelExec(uint64(l))
	}
	if m.TensorRTSpec != nil {
		l = m.TensorRTSpec.Size()
		n += 2 + l + sovModelExec(uint64(l))
	}
	if m.OpenVINOSpec != nil {
		l = m.OpenVINOSpec.Size()
		n += 2 + l + sovModelExec(uint64(l))
	}
	return n
}

func (m *TensorRTModelSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OptimizationProfile) > 0 {
		for _, e := range m.OptimizationProfile {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	l = len(m.EngineBlobKey)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.MemPoolLimits != nil {
		l = m.MemPoolLimits.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	return n
}

func (m *TensorRTOptimizationProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TensorShapeRange) > 0 {
		for _, e := range m.TensorShapeRange {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	return n
}

func (m *TensorRTTensorShapeRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TensorName)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	if len(m.Dim) > 0 {
		l = 0
		for _, e := range m.Dim {
			l += sovModelExec(uint64(e))
		}
		n += 1 + sovModelExec(uint64(l)) + l
	}
	return n
}

func (m *TensorRTMemPoolLimits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Workspace != 0 {
		n += 1 + sovModelExec(uint64(m.Workspace))
	}
	return n
}

func (m *OpenVINOModelSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InputShape) > 0 {
		for _, e := range m.InputShape {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	return n
}

func (m *OpenVINOModelSpec_TensorShape) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dim) > 0 {
		l = 0
		for _, e := range m.Dim {
			l += sovModelExec(uint64(e))
		}
		n += 1 + sovModelExec(uint64(l)) + l
	}
	return n
}

func sovModelExec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModelExec(x uint64) (n int) {
	return sovModelExec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Pipeline) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodes := "[]*PipelineNode{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(f.String(), "PipelineNode", "PipelineNode", 1) + ","
	}
	repeatedStringForNodes += "}"
	s := strings.Join([]string{`&Pipeline{`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *PipelineNode) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInputs := "[]*Port{"
	for _, f := range this.Inputs {
		repeatedStringForInputs += strings.Replace(f.String(), "Port", "Port", 1) + ","
	}
	repeatedStringForInputs += "}"
	repeatedStringForOutputs := "[]*Port{"
	for _, f := range this.Outputs {
		repeatedStringForOutputs += strings.Replace(f.String(), "Port", "Port", 1) + ","
	}
	repeatedStringForOutputs += "}"
	s := strings.Join([]string{`&PipelineNode{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Inputs:` + repeatedStringForInputs + `,`,
		`Outputs:` + repeatedStringForOutputs + `,`,
		`}`,
	}, "")
	return s
}
func (this *Port) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Port{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Net:` + fmt.Sprintf("%v", this.Net) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileResource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileResource{`,
		`FileID:` + strings.Replace(fmt.Sprintf("%v", this.FileID), "UUID", "typespb.UUID", 1) + `,`,
		`SizeBytes:` + fmt.Sprintf("%v", this.SizeBytes) + `,`,
		`Sha256Hash:` + fmt.Sprintf("%v", this.Sha256Hash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecutionSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForModelSpec := "[]*ModelSpec{"
	for _, f := range this.ModelSpec {
		repeatedStringForModelSpec += strings.Replace(f.String(), "ModelSpec", "ModelSpec", 1) + ","
	}
	repeatedStringForModelSpec += "}"
	s := strings.Join([]string{`&ExecutionSpec{`,
		`Graph:` + strings.Replace(fmt.Sprintf("%v", this.Graph), "CalculatorGraphConfig", "framework.CalculatorGraphConfig", 1) + `,`,
		`ModelSpec:` + repeatedStringForModelSpec + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelSpec{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ONNXBlobKey:` + fmt.Sprintf("%v", this.ONNXBlobKey) + `,`,
		`ONNXFile:` + strings.Replace(this.ONNXFile.String(), "FileResource", "FileResource", 1) + `,`,
		`Runtime:` + fmt.Sprintf("%v", this.Runtime) + `,`,
		`TensorRTSpec:` + strings.Replace(this.TensorRTSpec.String(), "TensorRTModelSpec", "TensorRTModelSpec", 1) + `,`,
		`OpenVINOSpec:` + strings.Replace(this.OpenVINOSpec.String(), "OpenVINOModelSpec", "OpenVINOModelSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TensorRTModelSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOptimizationProfile := "[]*TensorRTOptimizationProfile{"
	for _, f := range this.OptimizationProfile {
		repeatedStringForOptimizationProfile += strings.Replace(f.String(), "TensorRTOptimizationProfile", "TensorRTOptimizationProfile", 1) + ","
	}
	repeatedStringForOptimizationProfile += "}"
	s := strings.Join([]string{`&TensorRTModelSpec{`,
		`OptimizationProfile:` + repeatedStringForOptimizationProfile + `,`,
		`EngineBlobKey:` + fmt.Sprintf("%v", this.EngineBlobKey) + `,`,
		`MemPoolLimits:` + strings.Replace(this.MemPoolLimits.String(), "TensorRTMemPoolLimits", "TensorRTMemPoolLimits", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TensorRTOptimizationProfile) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTensorShapeRange := "[]*TensorRTTensorShapeRange{"
	for _, f := range this.TensorShapeRange {
		repeatedStringForTensorShapeRange += strings.Replace(f.String(), "TensorRTTensorShapeRange", "TensorRTTensorShapeRange", 1) + ","
	}
	repeatedStringForTensorShapeRange += "}"
	s := strings.Join([]string{`&TensorRTOptimizationProfile{`,
		`TensorShapeRange:` + repeatedStringForTensorShapeRange + `,`,
		`}`,
	}, "")
	return s
}
func (this *TensorRTTensorShapeRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TensorRTTensorShapeRange{`,
		`TensorName:` + fmt.Sprintf("%v", this.TensorName) + `,`,
		`Dim:` + fmt.Sprintf("%v", this.Dim) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TensorRTMemPoolLimits) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TensorRTMemPoolLimits{`,
		`Workspace:` + fmt.Sprintf("%v", this.Workspace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenVINOModelSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInputShape := "[]*OpenVINOModelSpec_TensorShape{"
	for _, f := range this.InputShape {
		repeatedStringForInputShape += strings.Replace(fmt.Sprintf("%v", f), "OpenVINOModelSpec_TensorShape", "OpenVINOModelSpec_TensorShape", 1) + ","
	}
	repeatedStringForInputShape += "}"
	s := strings.Join([]string{`&OpenVINOModelSpec{`,
		`InputShape:` + repeatedStringForInputShape + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenVINOModelSpec_TensorShape) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenVINOModelSpec_TensorShape{`,
		`Dim:` + fmt.Sprintf("%v", this.Dim) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringModelExec(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Pipeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pipeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pipeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &PipelineNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PipelineNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipelineNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipelineNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &Port{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, &Port{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Port) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Port: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Port: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Net", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Net = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileID == nil {
				m.FileID = &typespb.UUID{}
			}
			if err := m.FileID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeBytes", wireType)
			}
			m.SizeBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha256Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Graph", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Graph == nil {
				m.Graph = &framework.CalculatorGraphConfig{}
			}
			if err := m.Graph.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelSpec = append(m.ModelSpec, &ModelSpec{})
			if err := m.ModelSpec[len(m.ModelSpec)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ONNXBlobKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ONNXBlobKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ONNXFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ONNXFile == nil {
				m.ONNXFile = &FileResource{}
			}
			if err := m.ONNXFile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorRTSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TensorRTSpec == nil {
				m.TensorRTSpec = &TensorRTModelSpec{}
			}
			if err := m.TensorRTSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenVINOSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OpenVINOSpec == nil {
				m.OpenVINOSpec = &OpenVINOModelSpec{}
			}
			if err := m.OpenVINOSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TensorRTModelSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorRTModelSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorRTModelSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizationProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OptimizationProfile = append(m.OptimizationProfile, &TensorRTOptimizationProfile{})
			if err := m.OptimizationProfile[len(m.OptimizationProfile)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngineBlobKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EngineBlobKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemPoolLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemPoolLimits == nil {
				m.MemPoolLimits = &TensorRTMemPoolLimits{}
			}
			if err := m.MemPoolLimits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TensorRTOptimizationProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorRTOptimizationProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorRTOptimizationProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorShapeRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TensorShapeRange = append(m.TensorShapeRange, &TensorRTTensorShapeRange{})
			if err := m.TensorShapeRange[len(m.TensorShapeRange)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TensorRTTensorShapeRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorRTTensorShapeRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorRTTensorShapeRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TensorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModelExec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dim = append(m.Dim, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModelExec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModelExec
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModelExec
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Dim) == 0 {
					m.Dim = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModelExec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dim = append(m.Dim, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dim", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TensorRTMemPoolLimits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorRTMemPoolLimits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorRTMemPoolLimits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			m.Workspace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Workspace |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenVINOModelSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenVINOModelSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenVINOModelSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputShape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputShape = append(m.InputShape, &OpenVINOModelSpec_TensorShape{})
			if err := m.InputShape[len(m.InputShape)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenVINOModelSpec_TensorShape) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorShape: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorShape: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModelExec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dim = append(m.Dim, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModelExec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModelExec
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModelExec
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Dim) == 0 {
					m.Dim = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModelExec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dim = append(m.Dim, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dim", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModelExec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModelExec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModelExec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModelExec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModelExec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModelExec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModelExec = fmt.Errorf("proto: unexpected end of group")
)
