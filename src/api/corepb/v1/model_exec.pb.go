// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/api/corepb/v1/model_exec.proto

package corepb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	typespb "gimletlabs.ai/gimlet/src/common/typespb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LogicalPipelineNodeKind int32

const (
	LOGICAL_PIPELINE_NODE_KIND_UNKNOWN                 LogicalPipelineNodeKind = 0
	LOGICAL_PIPELINE_NODE_KIND_INPUT                   LogicalPipelineNodeKind = 1
	LOGICAL_PIPELINE_NODE_KIND_OUTPUT                  LogicalPipelineNodeKind = 2
	LOGICAL_PIPELINE_NODE_KIND_CAMERA_SOURCE           LogicalPipelineNodeKind = 10
	LOGICAL_PIPELINE_NODE_KIND_DETECT                  LogicalPipelineNodeKind = 1000
	LOGICAL_PIPELINE_NODE_KIND_CLASSIFY                LogicalPipelineNodeKind = 1001
	LOGICAL_PIPELINE_NODE_KIND_FOR_EACH_ROI            LogicalPipelineNodeKind = 1503
	LOGICAL_PIPELINE_NODE_KIND_VIDEO_STREAM_SINK       LogicalPipelineNodeKind = 2000
	LOGICAL_PIPELINE_NODE_KIND_DETECTIONS_METRICS_SINK LogicalPipelineNodeKind = 2001
	LOGICAL_PIPELINE_NODE_KIND_LATENCY_METRICS_SINK    LogicalPipelineNodeKind = 2002
	LOGICAL_PIPELINE_NODE_KIND_FRAME_METRICS_SINK      LogicalPipelineNodeKind = 2003
)

var LogicalPipelineNodeKind_name = map[int32]string{
	0:    "LOGICAL_PIPELINE_NODE_KIND_UNKNOWN",
	1:    "LOGICAL_PIPELINE_NODE_KIND_INPUT",
	2:    "LOGICAL_PIPELINE_NODE_KIND_OUTPUT",
	10:   "LOGICAL_PIPELINE_NODE_KIND_CAMERA_SOURCE",
	1000: "LOGICAL_PIPELINE_NODE_KIND_DETECT",
	1001: "LOGICAL_PIPELINE_NODE_KIND_CLASSIFY",
	1503: "LOGICAL_PIPELINE_NODE_KIND_FOR_EACH_ROI",
	2000: "LOGICAL_PIPELINE_NODE_KIND_VIDEO_STREAM_SINK",
	2001: "LOGICAL_PIPELINE_NODE_KIND_DETECTIONS_METRICS_SINK",
	2002: "LOGICAL_PIPELINE_NODE_KIND_LATENCY_METRICS_SINK",
	2003: "LOGICAL_PIPELINE_NODE_KIND_FRAME_METRICS_SINK",
}

var LogicalPipelineNodeKind_value = map[string]int32{
	"LOGICAL_PIPELINE_NODE_KIND_UNKNOWN":                 0,
	"LOGICAL_PIPELINE_NODE_KIND_INPUT":                   1,
	"LOGICAL_PIPELINE_NODE_KIND_OUTPUT":                  2,
	"LOGICAL_PIPELINE_NODE_KIND_CAMERA_SOURCE":           10,
	"LOGICAL_PIPELINE_NODE_KIND_DETECT":                  1000,
	"LOGICAL_PIPELINE_NODE_KIND_CLASSIFY":                1001,
	"LOGICAL_PIPELINE_NODE_KIND_FOR_EACH_ROI":            1503,
	"LOGICAL_PIPELINE_NODE_KIND_VIDEO_STREAM_SINK":       2000,
	"LOGICAL_PIPELINE_NODE_KIND_DETECTIONS_METRICS_SINK": 2001,
	"LOGICAL_PIPELINE_NODE_KIND_LATENCY_METRICS_SINK":    2002,
	"LOGICAL_PIPELINE_NODE_KIND_FRAME_METRICS_SINK":      2003,
}

func (LogicalPipelineNodeKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{0}
}

type PipelineState int32

const (
	PIPELINE_STATE_UNKNOWN     PipelineState = 0
	PIPELINE_STATE_PENDING     PipelineState = 1
	PIPELINE_STATE_READY       PipelineState = 2
	PIPELINE_STATE_RUNNING     PipelineState = 3
	PIPELINE_STATE_TERMINATING PipelineState = 4
	PIPELINE_STATE_TERMINATED  PipelineState = 5
	PIPELINE_STATE_FAILED      PipelineState = 6
)

var PipelineState_name = map[int32]string{
	0: "PIPELINE_STATE_UNKNOWN",
	1: "PIPELINE_STATE_PENDING",
	2: "PIPELINE_STATE_READY",
	3: "PIPELINE_STATE_RUNNING",
	4: "PIPELINE_STATE_TERMINATING",
	5: "PIPELINE_STATE_TERMINATED",
	6: "PIPELINE_STATE_FAILED",
}

var PipelineState_value = map[string]int32{
	"PIPELINE_STATE_UNKNOWN":     0,
	"PIPELINE_STATE_PENDING":     1,
	"PIPELINE_STATE_READY":       2,
	"PIPELINE_STATE_RUNNING":     3,
	"PIPELINE_STATE_TERMINATING": 4,
	"PIPELINE_STATE_TERMINATED":  5,
	"PIPELINE_STATE_FAILED":      6,
}

func (PipelineState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{1}
}

type Node struct {
	Name     string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind     LogicalPipelineNodeKind `protobuf:"varint,2,opt,name=kind,proto3,enum=gml.internal.api.core.v1.LogicalPipelineNodeKind" json:"kind,omitempty"`
	Inputs   []*NodeInput            `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs  []*NodeOutput           `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	InitArgs []*NodeInitArgs         `protobuf:"bytes,5,rep,name=init_args,json=initArgs,proto3" json:"init_args,omitempty"`
}

func (m *Node) Reset()      { *m = Node{} }
func (*Node) ProtoMessage() {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{0}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetKind() LogicalPipelineNodeKind {
	if m != nil {
		return m.Kind
	}
	return LOGICAL_PIPELINE_NODE_KIND_UNKNOWN
}

func (m *Node) GetInputs() []*NodeInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *Node) GetOutputs() []*NodeOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *Node) GetInitArgs() []*NodeInitArgs {
	if m != nil {
		return m.InitArgs
	}
	return nil
}

type NodeInitArgs struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to DefaultValue:
	//	*NodeInitArgs_StringValue
	//	*NodeInitArgs_Int64Value
	//	*NodeInitArgs_DoubleValue
	//	*NodeInitArgs_BoolValue
	//	*NodeInitArgs_LambdaValue
	DefaultValue isNodeInitArgs_DefaultValue `protobuf_oneof:"default_value"`
}

func (m *NodeInitArgs) Reset()      { *m = NodeInitArgs{} }
func (*NodeInitArgs) ProtoMessage() {}
func (*NodeInitArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{1}
}
func (m *NodeInitArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInitArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInitArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInitArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInitArgs.Merge(m, src)
}
func (m *NodeInitArgs) XXX_Size() int {
	return m.Size()
}
func (m *NodeInitArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInitArgs.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInitArgs proto.InternalMessageInfo

type isNodeInitArgs_DefaultValue interface {
	isNodeInitArgs_DefaultValue()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type NodeInitArgs_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof" json:"string_value,omitempty"`
}
type NodeInitArgs_Int64Value struct {
	Int64Value int64 `protobuf:"varint,3,opt,name=int64_value,json=int64Value,proto3,oneof" json:"int64_value,omitempty"`
}
type NodeInitArgs_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof" json:"double_value,omitempty"`
}
type NodeInitArgs_BoolValue struct {
	BoolValue bool `protobuf:"varint,5,opt,name=bool_value,json=boolValue,proto3,oneof" json:"bool_value,omitempty"`
}
type NodeInitArgs_LambdaValue struct {
	LambdaValue *Lambda `protobuf:"bytes,6,opt,name=lambda_value,json=lambdaValue,proto3,oneof" json:"lambda_value,omitempty"`
}

func (*NodeInitArgs_StringValue) isNodeInitArgs_DefaultValue() {}
func (*NodeInitArgs_Int64Value) isNodeInitArgs_DefaultValue()  {}
func (*NodeInitArgs_DoubleValue) isNodeInitArgs_DefaultValue() {}
func (*NodeInitArgs_BoolValue) isNodeInitArgs_DefaultValue()   {}
func (*NodeInitArgs_LambdaValue) isNodeInitArgs_DefaultValue() {}

func (m *NodeInitArgs) GetDefaultValue() isNodeInitArgs_DefaultValue {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

func (m *NodeInitArgs) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeInitArgs) GetStringValue() string {
	if x, ok := m.GetDefaultValue().(*NodeInitArgs_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *NodeInitArgs) GetInt64Value() int64 {
	if x, ok := m.GetDefaultValue().(*NodeInitArgs_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *NodeInitArgs) GetDoubleValue() float64 {
	if x, ok := m.GetDefaultValue().(*NodeInitArgs_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *NodeInitArgs) GetBoolValue() bool {
	if x, ok := m.GetDefaultValue().(*NodeInitArgs_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *NodeInitArgs) GetLambdaValue() *Lambda {
	if x, ok := m.GetDefaultValue().(*NodeInitArgs_LambdaValue); ok {
		return x.LambdaValue
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NodeInitArgs) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NodeInitArgs_StringValue)(nil),
		(*NodeInitArgs_Int64Value)(nil),
		(*NodeInitArgs_DoubleValue)(nil),
		(*NodeInitArgs_BoolValue)(nil),
		(*NodeInitArgs_LambdaValue)(nil),
	}
}

type Lambda struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *Lambda) Reset()      { *m = Lambda{} }
func (*Lambda) ProtoMessage() {}
func (*Lambda) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{2}
}
func (m *Lambda) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lambda) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lambda.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lambda) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lambda.Merge(m, src)
}
func (m *Lambda) XXX_Size() int {
	return m.Size()
}
func (m *Lambda) XXX_DiscardUnknown() {
	xxx_messageInfo_Lambda.DiscardUnknown(m)
}

var xxx_messageInfo_Lambda proto.InternalMessageInfo

func (m *Lambda) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type NodeInput struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*NodeInput_ParamValue
	//	*NodeInput_ModelValue
	//	*NodeInput_NodeOutputValue
	Value isNodeInput_Value `protobuf_oneof:"value"`
}

func (m *NodeInput) Reset()      { *m = NodeInput{} }
func (*NodeInput) ProtoMessage() {}
func (*NodeInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{3}
}
func (m *NodeInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInput.Merge(m, src)
}
func (m *NodeInput) XXX_Size() int {
	return m.Size()
}
func (m *NodeInput) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInput.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInput proto.InternalMessageInfo

type isNodeInput_Value interface {
	isNodeInput_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type NodeInput_ParamValue struct {
	ParamValue *NodeInput_ParamInput `protobuf:"bytes,2,opt,name=param_value,json=paramValue,proto3,oneof" json:"param_value,omitempty"`
}
type NodeInput_ModelValue struct {
	ModelValue *NodeInput_ModelInput `protobuf:"bytes,3,opt,name=model_value,json=modelValue,proto3,oneof" json:"model_value,omitempty"`
}
type NodeInput_NodeOutputValue struct {
	NodeOutputValue *NodeInput_NodeOutputRef `protobuf:"bytes,4,opt,name=node_output_value,json=nodeOutputValue,proto3,oneof" json:"node_output_value,omitempty"`
}

func (*NodeInput_ParamValue) isNodeInput_Value()      {}
func (*NodeInput_ModelValue) isNodeInput_Value()      {}
func (*NodeInput_NodeOutputValue) isNodeInput_Value() {}

func (m *NodeInput) GetValue() isNodeInput_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *NodeInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeInput) GetParamValue() *NodeInput_ParamInput {
	if x, ok := m.GetValue().(*NodeInput_ParamValue); ok {
		return x.ParamValue
	}
	return nil
}

func (m *NodeInput) GetModelValue() *NodeInput_ModelInput {
	if x, ok := m.GetValue().(*NodeInput_ModelValue); ok {
		return x.ModelValue
	}
	return nil
}

func (m *NodeInput) GetNodeOutputValue() *NodeInput_NodeOutputRef {
	if x, ok := m.GetValue().(*NodeInput_NodeOutputValue); ok {
		return x.NodeOutputValue
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NodeInput) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NodeInput_ParamValue)(nil),
		(*NodeInput_ModelValue)(nil),
		(*NodeInput_NodeOutputValue)(nil),
	}
}

type NodeInput_NodeOutputRef struct {
	NodeName int64  `protobuf:"varint,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *NodeInput_NodeOutputRef) Reset()      { *m = NodeInput_NodeOutputRef{} }
func (*NodeInput_NodeOutputRef) ProtoMessage() {}
func (*NodeInput_NodeOutputRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{3, 0}
}
func (m *NodeInput_NodeOutputRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInput_NodeOutputRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInput_NodeOutputRef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInput_NodeOutputRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInput_NodeOutputRef.Merge(m, src)
}
func (m *NodeInput_NodeOutputRef) XXX_Size() int {
	return m.Size()
}
func (m *NodeInput_NodeOutputRef) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInput_NodeOutputRef.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInput_NodeOutputRef proto.InternalMessageInfo

func (m *NodeInput_NodeOutputRef) GetNodeName() int64 {
	if m != nil {
		return m.NodeName
	}
	return 0
}

func (m *NodeInput_NodeOutputRef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type NodeInput_ModelInput struct {
	ModelName string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
}

func (m *NodeInput_ModelInput) Reset()      { *m = NodeInput_ModelInput{} }
func (*NodeInput_ModelInput) ProtoMessage() {}
func (*NodeInput_ModelInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{3, 1}
}
func (m *NodeInput_ModelInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInput_ModelInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInput_ModelInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInput_ModelInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInput_ModelInput.Merge(m, src)
}
func (m *NodeInput_ModelInput) XXX_Size() int {
	return m.Size()
}
func (m *NodeInput_ModelInput) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInput_ModelInput.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInput_ModelInput proto.InternalMessageInfo

func (m *NodeInput_ModelInput) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

type NodeInput_ParamInput struct {
	ParamName string `protobuf:"bytes,1,opt,name=param_name,json=paramName,proto3" json:"param_name,omitempty"`
}

func (m *NodeInput_ParamInput) Reset()      { *m = NodeInput_ParamInput{} }
func (*NodeInput_ParamInput) ProtoMessage() {}
func (*NodeInput_ParamInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{3, 2}
}
func (m *NodeInput_ParamInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInput_ParamInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInput_ParamInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInput_ParamInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInput_ParamInput.Merge(m, src)
}
func (m *NodeInput_ParamInput) XXX_Size() int {
	return m.Size()
}
func (m *NodeInput_ParamInput) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInput_ParamInput.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInput_ParamInput proto.InternalMessageInfo

func (m *NodeInput_ParamInput) GetParamName() string {
	if m != nil {
		return m.ParamName
	}
	return ""
}

type NodeOutput struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *NodeOutput) Reset()      { *m = NodeOutput{} }
func (*NodeOutput) ProtoMessage() {}
func (*NodeOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{4}
}
func (m *NodeOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeOutput.Merge(m, src)
}
func (m *NodeOutput) XXX_Size() int {
	return m.Size()
}
func (m *NodeOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeOutput.DiscardUnknown(m)
}

var xxx_messageInfo_NodeOutput proto.InternalMessageInfo

func (m *NodeOutput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GlobalParam struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to DefaultValue:
	//	*GlobalParam_StringValue
	//	*GlobalParam_Int64Value
	//	*GlobalParam_DoubleValue
	//	*GlobalParam_BoolValue
	DefaultValue isGlobalParam_DefaultValue `protobuf_oneof:"default_value"`
}

func (m *GlobalParam) Reset()      { *m = GlobalParam{} }
func (*GlobalParam) ProtoMessage() {}
func (*GlobalParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{5}
}
func (m *GlobalParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalParam.Merge(m, src)
}
func (m *GlobalParam) XXX_Size() int {
	return m.Size()
}
func (m *GlobalParam) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalParam.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalParam proto.InternalMessageInfo

type isGlobalParam_DefaultValue interface {
	isGlobalParam_DefaultValue()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalParam_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof" json:"string_value,omitempty"`
}
type GlobalParam_Int64Value struct {
	Int64Value int64 `protobuf:"varint,3,opt,name=int64_value,json=int64Value,proto3,oneof" json:"int64_value,omitempty"`
}
type GlobalParam_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof" json:"double_value,omitempty"`
}
type GlobalParam_BoolValue struct {
	BoolValue bool `protobuf:"varint,5,opt,name=bool_value,json=boolValue,proto3,oneof" json:"bool_value,omitempty"`
}

func (*GlobalParam_StringValue) isGlobalParam_DefaultValue() {}
func (*GlobalParam_Int64Value) isGlobalParam_DefaultValue()  {}
func (*GlobalParam_DoubleValue) isGlobalParam_DefaultValue() {}
func (*GlobalParam_BoolValue) isGlobalParam_DefaultValue()   {}

func (m *GlobalParam) GetDefaultValue() isGlobalParam_DefaultValue {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

func (m *GlobalParam) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GlobalParam) GetStringValue() string {
	if x, ok := m.GetDefaultValue().(*GlobalParam_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *GlobalParam) GetInt64Value() int64 {
	if x, ok := m.GetDefaultValue().(*GlobalParam_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *GlobalParam) GetDoubleValue() float64 {
	if x, ok := m.GetDefaultValue().(*GlobalParam_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *GlobalParam) GetBoolValue() bool {
	if x, ok := m.GetDefaultValue().(*GlobalParam_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalParam) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalParam_StringValue)(nil),
		(*GlobalParam_Int64Value)(nil),
		(*GlobalParam_DoubleValue)(nil),
		(*GlobalParam_BoolValue)(nil),
	}
}

type LogicalPipeline struct {
	GlobalParams []*GlobalParam `protobuf:"bytes,1,rep,name=global_params,json=globalParams,proto3" json:"global_params,omitempty"`
	Nodes        []*Node        `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *LogicalPipeline) Reset()      { *m = LogicalPipeline{} }
func (*LogicalPipeline) ProtoMessage() {}
func (*LogicalPipeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{6}
}
func (m *LogicalPipeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogicalPipeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogicalPipeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogicalPipeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalPipeline.Merge(m, src)
}
func (m *LogicalPipeline) XXX_Size() int {
	return m.Size()
}
func (m *LogicalPipeline) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalPipeline.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalPipeline proto.InternalMessageInfo

func (m *LogicalPipeline) GetGlobalParams() []*GlobalParam {
	if m != nil {
		return m.GlobalParams
	}
	return nil
}

func (m *LogicalPipeline) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type PipelineDeployment struct {
	ID                *typespb.UUID            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LogicalPipelineID *typespb.UUID            `protobuf:"bytes,2,opt,name=logical_pipeline_id,json=logicalPipelineId,proto3" json:"logical_pipeline_id,omitempty"`
	FleetID           *typespb.UUID            `protobuf:"bytes,3,opt,name=fleet_id,json=fleetId,proto3" json:"fleet_id,omitempty"`
	CreatedAt         *types.Timestamp         `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *types.Timestamp         `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Version           int64                    `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	Spec              *PipelineDeploymentSpec  `protobuf:"bytes,7,opt,name=spec,proto3" json:"spec,omitempty"`
	State             *PipelineDeploymentState `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *PipelineDeployment) Reset()      { *m = PipelineDeployment{} }
func (*PipelineDeployment) ProtoMessage() {}
func (*PipelineDeployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{7}
}
func (m *PipelineDeployment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PipelineDeployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PipelineDeployment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PipelineDeployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineDeployment.Merge(m, src)
}
func (m *PipelineDeployment) XXX_Size() int {
	return m.Size()
}
func (m *PipelineDeployment) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineDeployment.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineDeployment proto.InternalMessageInfo

func (m *PipelineDeployment) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *PipelineDeployment) GetLogicalPipelineID() *typespb.UUID {
	if m != nil {
		return m.LogicalPipelineID
	}
	return nil
}

func (m *PipelineDeployment) GetFleetID() *typespb.UUID {
	if m != nil {
		return m.FleetID
	}
	return nil
}

func (m *PipelineDeployment) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PipelineDeployment) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *PipelineDeployment) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PipelineDeployment) GetSpec() *PipelineDeploymentSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PipelineDeployment) GetState() *PipelineDeploymentState {
	if m != nil {
		return m.State
	}
	return nil
}

type PipelineDeploymentSpec struct {
	State PipelineState `protobuf:"varint,1,opt,name=state,proto3,enum=gml.internal.api.core.v1.PipelineState" json:"state,omitempty"`
}

func (m *PipelineDeploymentSpec) Reset()      { *m = PipelineDeploymentSpec{} }
func (*PipelineDeploymentSpec) ProtoMessage() {}
func (*PipelineDeploymentSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{8}
}
func (m *PipelineDeploymentSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PipelineDeploymentSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PipelineDeploymentSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PipelineDeploymentSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineDeploymentSpec.Merge(m, src)
}
func (m *PipelineDeploymentSpec) XXX_Size() int {
	return m.Size()
}
func (m *PipelineDeploymentSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineDeploymentSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineDeploymentSpec proto.InternalMessageInfo

func (m *PipelineDeploymentSpec) GetState() PipelineState {
	if m != nil {
		return m.State
	}
	return PIPELINE_STATE_UNKNOWN
}

type PipelineDeploymentState struct {
	State PipelineState `protobuf:"varint,2,opt,name=state,proto3,enum=gml.internal.api.core.v1.PipelineState" json:"state,omitempty"`
}

func (m *PipelineDeploymentState) Reset()      { *m = PipelineDeploymentState{} }
func (*PipelineDeploymentState) ProtoMessage() {}
func (*PipelineDeploymentState) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{9}
}
func (m *PipelineDeploymentState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PipelineDeploymentState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PipelineDeploymentState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PipelineDeploymentState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineDeploymentState.Merge(m, src)
}
func (m *PipelineDeploymentState) XXX_Size() int {
	return m.Size()
}
func (m *PipelineDeploymentState) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineDeploymentState.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineDeploymentState proto.InternalMessageInfo

func (m *PipelineDeploymentState) GetState() PipelineState {
	if m != nil {
		return m.State
	}
	return PIPELINE_STATE_UNKNOWN
}

type PhysicalPipeline struct {
	ID                   *typespb.UUID           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PipelineDeploymentID *typespb.UUID           `protobuf:"bytes,2,opt,name=pipeline_deployment_id,json=pipelineDeploymentId,proto3" json:"pipeline_deployment_id,omitempty"`
	DeviceID             *typespb.UUID           `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	CreatedAt            *types.Timestamp        `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *types.Timestamp        `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Version              int64                   `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	Spec                 *PhysicalPipelineSpec   `protobuf:"bytes,7,opt,name=spec,proto3" json:"spec,omitempty"`
	Status               *PhysicalPipelineStatus `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *PhysicalPipeline) Reset()      { *m = PhysicalPipeline{} }
func (*PhysicalPipeline) ProtoMessage() {}
func (*PhysicalPipeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{10}
}
func (m *PhysicalPipeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhysicalPipeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhysicalPipeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhysicalPipeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalPipeline.Merge(m, src)
}
func (m *PhysicalPipeline) XXX_Size() int {
	return m.Size()
}
func (m *PhysicalPipeline) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalPipeline.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalPipeline proto.InternalMessageInfo

func (m *PhysicalPipeline) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *PhysicalPipeline) GetPipelineDeploymentID() *typespb.UUID {
	if m != nil {
		return m.PipelineDeploymentID
	}
	return nil
}

func (m *PhysicalPipeline) GetDeviceID() *typespb.UUID {
	if m != nil {
		return m.DeviceID
	}
	return nil
}

func (m *PhysicalPipeline) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PhysicalPipeline) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *PhysicalPipeline) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PhysicalPipeline) GetSpec() *PhysicalPipelineSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PhysicalPipeline) GetStatus() *PhysicalPipelineStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type PhysicalPipelineSpec struct {
	State PipelineState `protobuf:"varint,1,opt,name=state,proto3,enum=gml.internal.api.core.v1.PipelineState" json:"state,omitempty"`
}

func (m *PhysicalPipelineSpec) Reset()      { *m = PhysicalPipelineSpec{} }
func (*PhysicalPipelineSpec) ProtoMessage() {}
func (*PhysicalPipelineSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{11}
}
func (m *PhysicalPipelineSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhysicalPipelineSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhysicalPipelineSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhysicalPipelineSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalPipelineSpec.Merge(m, src)
}
func (m *PhysicalPipelineSpec) XXX_Size() int {
	return m.Size()
}
func (m *PhysicalPipelineSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalPipelineSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalPipelineSpec proto.InternalMessageInfo

func (m *PhysicalPipelineSpec) GetState() PipelineState {
	if m != nil {
		return m.State
	}
	return PIPELINE_STATE_UNKNOWN
}

type PhysicalPipelineStatus struct {
	State PipelineState `protobuf:"varint,1,opt,name=state,proto3,enum=gml.internal.api.core.v1.PipelineState" json:"state,omitempty"`
}

func (m *PhysicalPipelineStatus) Reset()      { *m = PhysicalPipelineStatus{} }
func (*PhysicalPipelineStatus) ProtoMessage() {}
func (*PhysicalPipelineStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{12}
}
func (m *PhysicalPipelineStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhysicalPipelineStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhysicalPipelineStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhysicalPipelineStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalPipelineStatus.Merge(m, src)
}
func (m *PhysicalPipelineStatus) XXX_Size() int {
	return m.Size()
}
func (m *PhysicalPipelineStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalPipelineStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalPipelineStatus proto.InternalMessageInfo

func (m *PhysicalPipelineStatus) GetState() PipelineState {
	if m != nil {
		return m.State
	}
	return PIPELINE_STATE_UNKNOWN
}

type Pipeline struct {
	Nodes []*PipelineNode `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *Pipeline) Reset()      { *m = Pipeline{} }
func (*Pipeline) ProtoMessage() {}
func (*Pipeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{13}
}
func (m *Pipeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pipeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pipeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pipeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pipeline.Merge(m, src)
}
func (m *Pipeline) XXX_Size() int {
	return m.Size()
}
func (m *Pipeline) XXX_DiscardUnknown() {
	xxx_messageInfo_Pipeline.DiscardUnknown(m)
}

var xxx_messageInfo_Pipeline proto.InternalMessageInfo

func (m *Pipeline) GetNodes() []*PipelineNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type PipelineNode struct {
	Id      uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type    string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Inputs  []*Port           `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs []*Port           `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Attr    map[string]string `protobuf:"bytes,5,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PipelineNode) Reset()      { *m = PipelineNode{} }
func (*PipelineNode) ProtoMessage() {}
func (*PipelineNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{14}
}
func (m *PipelineNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PipelineNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PipelineNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PipelineNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineNode.Merge(m, src)
}
func (m *PipelineNode) XXX_Size() int {
	return m.Size()
}
func (m *PipelineNode) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineNode.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineNode proto.InternalMessageInfo

func (m *PipelineNode) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PipelineNode) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PipelineNode) GetInputs() []*Port {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *PipelineNode) GetOutputs() []*Port {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *PipelineNode) GetAttr() map[string]string {
	if m != nil {
		return m.Attr
	}
	return nil
}

type Port struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Net  string `protobuf:"bytes,2,opt,name=net,proto3" json:"net,omitempty"`
}

func (m *Port) Reset()      { *m = Port{} }
func (*Port) ProtoMessage() {}
func (*Port) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{15}
}
func (m *Port) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Port) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Port.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Port) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Port.Merge(m, src)
}
func (m *Port) XXX_Size() int {
	return m.Size()
}
func (m *Port) XXX_DiscardUnknown() {
	xxx_messageInfo_Port.DiscardUnknown(m)
}

var xxx_messageInfo_Port proto.InternalMessageInfo

func (m *Port) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Port) GetNet() string {
	if m != nil {
		return m.Net
	}
	return ""
}

type FileResource struct {
	FileID     *typespb.UUID `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	SizeBytes  uint64        `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	Sha256Hash string        `protobuf:"bytes,3,opt,name=sha256_hash,json=sha256Hash,proto3" json:"sha256_hash,omitempty"`
}

func (m *FileResource) Reset()      { *m = FileResource{} }
func (*FileResource) ProtoMessage() {}
func (*FileResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{16}
}
func (m *FileResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileResource.Merge(m, src)
}
func (m *FileResource) XXX_Size() int {
	return m.Size()
}
func (m *FileResource) XXX_DiscardUnknown() {
	xxx_messageInfo_FileResource.DiscardUnknown(m)
}

var xxx_messageInfo_FileResource proto.InternalMessageInfo

func (m *FileResource) GetFileID() *typespb.UUID {
	if m != nil {
		return m.FileID
	}
	return nil
}

func (m *FileResource) GetSizeBytes() uint64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

func (m *FileResource) GetSha256Hash() string {
	if m != nil {
		return m.Sha256Hash
	}
	return ""
}

type ExecutionSpec struct {
	Graph     *framework.CalculatorGraphConfig `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	ModelSpec []*ModelSpec                     `protobuf:"bytes,2,rep,name=model_spec,json=modelSpec,proto3" json:"model_spec,omitempty"`
}

func (m *ExecutionSpec) Reset()      { *m = ExecutionSpec{} }
func (*ExecutionSpec) ProtoMessage() {}
func (*ExecutionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{17}
}
func (m *ExecutionSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionSpec.Merge(m, src)
}
func (m *ExecutionSpec) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionSpec proto.InternalMessageInfo

func (m *ExecutionSpec) GetGraph() *framework.CalculatorGraphConfig {
	if m != nil {
		return m.Graph
	}
	return nil
}

func (m *ExecutionSpec) GetModelSpec() []*ModelSpec {
	if m != nil {
		return m.ModelSpec
	}
	return nil
}

type ModelSpec struct {
	Name         string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ONNXBlobKey  string             `protobuf:"bytes,2,opt,name=onnx_blob_key,json=onnxBlobKey,proto3" json:"onnx_blob_key,omitempty"`
	ONNXFile     *FileResource      `protobuf:"bytes,3,opt,name=onnx_file,json=onnxFile,proto3" json:"onnx_file,omitempty"`
	Runtime      string             `protobuf:"bytes,50,opt,name=runtime,proto3" json:"runtime,omitempty"`
	TensorRTSpec *TensorRTModelSpec `protobuf:"bytes,100,opt,name=tensorrt_spec,json=tensorrtSpec,proto3" json:"tensorrt_spec,omitempty"`
	OpenVINOSpec *OpenVINOModelSpec `protobuf:"bytes,101,opt,name=openvino_spec,json=openvinoSpec,proto3" json:"openvino_spec,omitempty"`
}

func (m *ModelSpec) Reset()      { *m = ModelSpec{} }
func (*ModelSpec) ProtoMessage() {}
func (*ModelSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{18}
}
func (m *ModelSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelSpec.Merge(m, src)
}
func (m *ModelSpec) XXX_Size() int {
	return m.Size()
}
func (m *ModelSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ModelSpec proto.InternalMessageInfo

func (m *ModelSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModelSpec) GetONNXBlobKey() string {
	if m != nil {
		return m.ONNXBlobKey
	}
	return ""
}

func (m *ModelSpec) GetONNXFile() *FileResource {
	if m != nil {
		return m.ONNXFile
	}
	return nil
}

func (m *ModelSpec) GetRuntime() string {
	if m != nil {
		return m.Runtime
	}
	return ""
}

func (m *ModelSpec) GetTensorRTSpec() *TensorRTModelSpec {
	if m != nil {
		return m.TensorRTSpec
	}
	return nil
}

func (m *ModelSpec) GetOpenVINOSpec() *OpenVINOModelSpec {
	if m != nil {
		return m.OpenVINOSpec
	}
	return nil
}

type TensorRTModelSpec struct {
	OptimizationProfile []*TensorRTOptimizationProfile `protobuf:"bytes,1,rep,name=optimization_profile,json=optimizationProfile,proto3" json:"optimization_profile,omitempty"`
	EngineBlobKey       string                         `protobuf:"bytes,2,opt,name=engine_blob_key,json=engineBlobKey,proto3" json:"engine_blob_key,omitempty"`
	MemPoolLimits       *TensorRTMemPoolLimits         `protobuf:"bytes,3,opt,name=mem_pool_limits,json=memPoolLimits,proto3" json:"mem_pool_limits,omitempty"`
}

func (m *TensorRTModelSpec) Reset()      { *m = TensorRTModelSpec{} }
func (*TensorRTModelSpec) ProtoMessage() {}
func (*TensorRTModelSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{19}
}
func (m *TensorRTModelSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TensorRTModelSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TensorRTModelSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TensorRTModelSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TensorRTModelSpec.Merge(m, src)
}
func (m *TensorRTModelSpec) XXX_Size() int {
	return m.Size()
}
func (m *TensorRTModelSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TensorRTModelSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TensorRTModelSpec proto.InternalMessageInfo

func (m *TensorRTModelSpec) GetOptimizationProfile() []*TensorRTOptimizationProfile {
	if m != nil {
		return m.OptimizationProfile
	}
	return nil
}

func (m *TensorRTModelSpec) GetEngineBlobKey() string {
	if m != nil {
		return m.EngineBlobKey
	}
	return ""
}

func (m *TensorRTModelSpec) GetMemPoolLimits() *TensorRTMemPoolLimits {
	if m != nil {
		return m.MemPoolLimits
	}
	return nil
}

type TensorRTOptimizationProfile struct {
	TensorShapeRange []*TensorRTTensorShapeRange `protobuf:"bytes,1,rep,name=tensor_shape_range,json=tensorShapeRange,proto3" json:"tensor_shape_range,omitempty"`
}

func (m *TensorRTOptimizationProfile) Reset()      { *m = TensorRTOptimizationProfile{} }
func (*TensorRTOptimizationProfile) ProtoMessage() {}
func (*TensorRTOptimizationProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{20}
}
func (m *TensorRTOptimizationProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TensorRTOptimizationProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TensorRTOptimizationProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TensorRTOptimizationProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TensorRTOptimizationProfile.Merge(m, src)
}
func (m *TensorRTOptimizationProfile) XXX_Size() int {
	return m.Size()
}
func (m *TensorRTOptimizationProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_TensorRTOptimizationProfile.DiscardUnknown(m)
}

var xxx_messageInfo_TensorRTOptimizationProfile proto.InternalMessageInfo

func (m *TensorRTOptimizationProfile) GetTensorShapeRange() []*TensorRTTensorShapeRange {
	if m != nil {
		return m.TensorShapeRange
	}
	return nil
}

type TensorRTTensorShapeRange struct {
	TensorName string  `protobuf:"bytes,1,opt,name=tensor_name,json=tensorName,proto3" json:"tensor_name,omitempty"`
	Dim        []int32 `protobuf:"varint,2,rep,packed,name=dim,proto3" json:"dim,omitempty"`
}

func (m *TensorRTTensorShapeRange) Reset()      { *m = TensorRTTensorShapeRange{} }
func (*TensorRTTensorShapeRange) ProtoMessage() {}
func (*TensorRTTensorShapeRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{21}
}
func (m *TensorRTTensorShapeRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TensorRTTensorShapeRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TensorRTTensorShapeRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TensorRTTensorShapeRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TensorRTTensorShapeRange.Merge(m, src)
}
func (m *TensorRTTensorShapeRange) XXX_Size() int {
	return m.Size()
}
func (m *TensorRTTensorShapeRange) XXX_DiscardUnknown() {
	xxx_messageInfo_TensorRTTensorShapeRange.DiscardUnknown(m)
}

var xxx_messageInfo_TensorRTTensorShapeRange proto.InternalMessageInfo

func (m *TensorRTTensorShapeRange) GetTensorName() string {
	if m != nil {
		return m.TensorName
	}
	return ""
}

func (m *TensorRTTensorShapeRange) GetDim() []int32 {
	if m != nil {
		return m.Dim
	}
	return nil
}

type TensorRTMemPoolLimits struct {
	Workspace int64 `protobuf:"varint,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (m *TensorRTMemPoolLimits) Reset()      { *m = TensorRTMemPoolLimits{} }
func (*TensorRTMemPoolLimits) ProtoMessage() {}
func (*TensorRTMemPoolLimits) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{22}
}
func (m *TensorRTMemPoolLimits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TensorRTMemPoolLimits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TensorRTMemPoolLimits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TensorRTMemPoolLimits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TensorRTMemPoolLimits.Merge(m, src)
}
func (m *TensorRTMemPoolLimits) XXX_Size() int {
	return m.Size()
}
func (m *TensorRTMemPoolLimits) XXX_DiscardUnknown() {
	xxx_messageInfo_TensorRTMemPoolLimits.DiscardUnknown(m)
}

var xxx_messageInfo_TensorRTMemPoolLimits proto.InternalMessageInfo

func (m *TensorRTMemPoolLimits) GetWorkspace() int64 {
	if m != nil {
		return m.Workspace
	}
	return 0
}

type OpenVINOModelSpec struct {
	InputShape []*OpenVINOModelSpec_TensorShape `protobuf:"bytes,1,rep,name=input_shape,json=inputShape,proto3" json:"input_shape,omitempty"`
}

func (m *OpenVINOModelSpec) Reset()      { *m = OpenVINOModelSpec{} }
func (*OpenVINOModelSpec) ProtoMessage() {}
func (*OpenVINOModelSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{23}
}
func (m *OpenVINOModelSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenVINOModelSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenVINOModelSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenVINOModelSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenVINOModelSpec.Merge(m, src)
}
func (m *OpenVINOModelSpec) XXX_Size() int {
	return m.Size()
}
func (m *OpenVINOModelSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenVINOModelSpec.DiscardUnknown(m)
}

var xxx_messageInfo_OpenVINOModelSpec proto.InternalMessageInfo

func (m *OpenVINOModelSpec) GetInputShape() []*OpenVINOModelSpec_TensorShape {
	if m != nil {
		return m.InputShape
	}
	return nil
}

type OpenVINOModelSpec_TensorShape struct {
	Dim []int32 `protobuf:"varint,1,rep,packed,name=dim,proto3" json:"dim,omitempty"`
}

func (m *OpenVINOModelSpec_TensorShape) Reset()      { *m = OpenVINOModelSpec_TensorShape{} }
func (*OpenVINOModelSpec_TensorShape) ProtoMessage() {}
func (*OpenVINOModelSpec_TensorShape) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eacf87cbdc6b8b6, []int{23, 0}
}
func (m *OpenVINOModelSpec_TensorShape) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenVINOModelSpec_TensorShape) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenVINOModelSpec_TensorShape.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenVINOModelSpec_TensorShape) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenVINOModelSpec_TensorShape.Merge(m, src)
}
func (m *OpenVINOModelSpec_TensorShape) XXX_Size() int {
	return m.Size()
}
func (m *OpenVINOModelSpec_TensorShape) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenVINOModelSpec_TensorShape.DiscardUnknown(m)
}

var xxx_messageInfo_OpenVINOModelSpec_TensorShape proto.InternalMessageInfo

func (m *OpenVINOModelSpec_TensorShape) GetDim() []int32 {
	if m != nil {
		return m.Dim
	}
	return nil
}

func init() {
	proto.RegisterEnum("gml.internal.api.core.v1.LogicalPipelineNodeKind", LogicalPipelineNodeKind_name, LogicalPipelineNodeKind_value)
	proto.RegisterEnum("gml.internal.api.core.v1.PipelineState", PipelineState_name, PipelineState_value)
	proto.RegisterType((*Node)(nil), "gml.internal.api.core.v1.Node")
	proto.RegisterType((*NodeInitArgs)(nil), "gml.internal.api.core.v1.NodeInitArgs")
	proto.RegisterType((*Lambda)(nil), "gml.internal.api.core.v1.Lambda")
	proto.RegisterType((*NodeInput)(nil), "gml.internal.api.core.v1.NodeInput")
	proto.RegisterType((*NodeInput_NodeOutputRef)(nil), "gml.internal.api.core.v1.NodeInput.NodeOutputRef")
	proto.RegisterType((*NodeInput_ModelInput)(nil), "gml.internal.api.core.v1.NodeInput.ModelInput")
	proto.RegisterType((*NodeInput_ParamInput)(nil), "gml.internal.api.core.v1.NodeInput.ParamInput")
	proto.RegisterType((*NodeOutput)(nil), "gml.internal.api.core.v1.NodeOutput")
	proto.RegisterType((*GlobalParam)(nil), "gml.internal.api.core.v1.GlobalParam")
	proto.RegisterType((*LogicalPipeline)(nil), "gml.internal.api.core.v1.LogicalPipeline")
	proto.RegisterType((*PipelineDeployment)(nil), "gml.internal.api.core.v1.PipelineDeployment")
	proto.RegisterType((*PipelineDeploymentSpec)(nil), "gml.internal.api.core.v1.PipelineDeploymentSpec")
	proto.RegisterType((*PipelineDeploymentState)(nil), "gml.internal.api.core.v1.PipelineDeploymentState")
	proto.RegisterType((*PhysicalPipeline)(nil), "gml.internal.api.core.v1.PhysicalPipeline")
	proto.RegisterType((*PhysicalPipelineSpec)(nil), "gml.internal.api.core.v1.PhysicalPipelineSpec")
	proto.RegisterType((*PhysicalPipelineStatus)(nil), "gml.internal.api.core.v1.PhysicalPipelineStatus")
	proto.RegisterType((*Pipeline)(nil), "gml.internal.api.core.v1.Pipeline")
	proto.RegisterType((*PipelineNode)(nil), "gml.internal.api.core.v1.PipelineNode")
	proto.RegisterMapType((map[string]string)(nil), "gml.internal.api.core.v1.PipelineNode.AttrEntry")
	proto.RegisterType((*Port)(nil), "gml.internal.api.core.v1.Port")
	proto.RegisterType((*FileResource)(nil), "gml.internal.api.core.v1.FileResource")
	proto.RegisterType((*ExecutionSpec)(nil), "gml.internal.api.core.v1.ExecutionSpec")
	proto.RegisterType((*ModelSpec)(nil), "gml.internal.api.core.v1.ModelSpec")
	proto.RegisterType((*TensorRTModelSpec)(nil), "gml.internal.api.core.v1.TensorRTModelSpec")
	proto.RegisterType((*TensorRTOptimizationProfile)(nil), "gml.internal.api.core.v1.TensorRTOptimizationProfile")
	proto.RegisterType((*TensorRTTensorShapeRange)(nil), "gml.internal.api.core.v1.TensorRTTensorShapeRange")
	proto.RegisterType((*TensorRTMemPoolLimits)(nil), "gml.internal.api.core.v1.TensorRTMemPoolLimits")
	proto.RegisterType((*OpenVINOModelSpec)(nil), "gml.internal.api.core.v1.OpenVINOModelSpec")
	proto.RegisterType((*OpenVINOModelSpec_TensorShape)(nil), "gml.internal.api.core.v1.OpenVINOModelSpec.TensorShape")
}

func init() {
	proto.RegisterFile("src/api/corepb/v1/model_exec.proto", fileDescriptor_2eacf87cbdc6b8b6)
}

var fileDescriptor_2eacf87cbdc6b8b6 = []byte{
	// 2011 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcb, 0x93, 0x1b, 0x47,
	0x19, 0xd7, 0x48, 0xda, 0x87, 0x3e, 0x49, 0x91, 0xdc, 0x59, 0x3b, 0xca, 0x06, 0x4b, 0x8a, 0xec,
	0xd8, 0x5b, 0x89, 0x23, 0xd9, 0x8a, 0x1f, 0x21, 0x81, 0x14, 0x7a, 0xcc, 0xee, 0x0e, 0xbb, 0x3b,
	0x92, 0x5b, 0x5a, 0x3f, 0xb8, 0x0c, 0x23, 0x4d, 0xaf, 0x76, 0xca, 0xf3, 0xaa, 0x99, 0xd1, 0xc6,
	0x9b, 0x0b, 0x1c, 0x38, 0x40, 0x51, 0x45, 0x51, 0xf0, 0x27, 0xe4, 0xc2, 0x9f, 0xc1, 0x91, 0x2a,
	0x2e, 0x06, 0x0e, 0xe4, 0xb4, 0x60, 0xf9, 0x12, 0x0e, 0x54, 0xe5, 0xc4, 0x91, 0xa2, 0xba, 0x67,
	0x46, 0xd2, 0xea, 0xb9, 0x26, 0x97, 0x9c, 0xd4, 0xfd, 0xf5, 0xef, 0xf7, 0x7d, 0xfd, 0xbd, 0xba,
	0x7b, 0x04, 0x05, 0xc7, 0xee, 0x96, 0x64, 0x4b, 0x2d, 0x75, 0x4d, 0x9b, 0x58, 0x9d, 0xd2, 0xc9,
	0x9d, 0x92, 0x6e, 0x2a, 0x44, 0x93, 0xc8, 0x73, 0xd2, 0x2d, 0x5a, 0xb6, 0xe9, 0x9a, 0x28, 0xd3,
	0xd3, 0xb5, 0xa2, 0x6a, 0xb8, 0xc4, 0x36, 0x64, 0xad, 0x28, 0x5b, 0x6a, 0x91, 0x82, 0x8b, 0x27,
	0x77, 0x36, 0x37, 0x7a, 0x66, 0xcf, 0x64, 0xa0, 0x12, 0x1d, 0x79, 0xf8, 0xcd, 0xeb, 0x3a, 0x51,
	0x54, 0xd9, 0x52, 0x2d, 0x52, 0x3a, 0xb2, 0x65, 0x9d, 0x7c, 0x6e, 0xda, 0xcf, 0x4a, 0x5d, 0x59,
	0xeb, 0xf6, 0x35, 0xd9, 0x35, 0x6d, 0x1f, 0x75, 0x95, 0x5a, 0xee, 0x9a, 0xba, 0x6e, 0x1a, 0x25,
	0xf7, 0xd4, 0x22, 0x8e, 0xd5, 0x29, 0xf5, 0xfb, 0xaa, 0xe2, 0x2f, 0xe7, 0x7a, 0xa6, 0xd9, 0xd3,
	0x48, 0x89, 0xcd, 0x3a, 0xfd, 0xa3, 0x92, 0xab, 0xea, 0xc4, 0x71, 0x65, 0xdd, 0xf2, 0x00, 0x85,
	0x2f, 0xc3, 0x10, 0x15, 0x4d, 0x85, 0x20, 0x04, 0x51, 0x43, 0xd6, 0x49, 0x86, 0xcb, 0x73, 0x5b,
	0x31, 0xcc, 0xc6, 0x88, 0x87, 0xe8, 0x33, 0xd5, 0x50, 0x32, 0xe1, 0x3c, 0xb7, 0xf5, 0x46, 0xf9,
	0x4e, 0x71, 0x9e, 0x07, 0xc5, 0x7d, 0xb3, 0xa7, 0x76, 0x65, 0xad, 0xa9, 0x5a, 0x44, 0x53, 0x0d,
	0x42, 0x15, 0xee, 0xa9, 0x86, 0x82, 0x19, 0x1d, 0x7d, 0x0a, 0xab, 0xaa, 0x61, 0xf5, 0x5d, 0x27,
	0x13, 0xc9, 0x47, 0xb6, 0xe2, 0xe5, 0x6b, 0xf3, 0x15, 0x51, 0xa6, 0x40, 0xb1, 0xd8, 0xa7, 0xa0,
	0xcf, 0x60, 0xcd, 0xec, 0xbb, 0x8c, 0x1d, 0x65, 0xec, 0xeb, 0x8b, 0xd9, 0x0d, 0x06, 0xc6, 0x01,
	0x09, 0xd5, 0x20, 0xa6, 0x1a, 0xaa, 0x2b, 0xc9, 0x76, 0xcf, 0xc9, 0xac, 0x30, 0x0d, 0x37, 0x96,
	0xd9, 0x57, 0xdd, 0x8a, 0xdd, 0x73, 0xf0, 0xba, 0xea, 0x8f, 0x0a, 0xbf, 0x0c, 0x43, 0x62, 0x7c,
	0x69, 0x66, 0xb4, 0xae, 0x41, 0xc2, 0x71, 0x6d, 0xd5, 0xe8, 0x49, 0x27, 0xb2, 0xd6, 0x27, 0x2c,
	0x6a, 0xb1, 0xdd, 0x10, 0x8e, 0x7b, 0xd2, 0x47, 0x54, 0x88, 0xde, 0x85, 0xb8, 0x6a, 0xb8, 0xf7,
	0xef, 0xfa, 0x98, 0x48, 0x9e, 0xdb, 0x8a, 0xec, 0x86, 0x30, 0x30, 0xa1, 0x07, 0xb9, 0x06, 0x09,
	0xc5, 0xec, 0x77, 0x34, 0xe2, 0x63, 0xa2, 0x79, 0x6e, 0x8b, 0xa3, 0x7a, 0x3c, 0xa9, 0x07, 0xca,
	0x01, 0x74, 0x4c, 0x53, 0xf3, 0x21, 0x2b, 0x79, 0x6e, 0x6b, 0x7d, 0x37, 0x84, 0x63, 0x54, 0xe6,
	0x01, 0x78, 0x48, 0x68, 0xb2, 0xde, 0x51, 0x64, 0x1f, 0xb2, 0x9a, 0xe7, 0xb6, 0xe2, 0xe5, 0xfc,
	0x82, 0x1c, 0x32, 0x34, 0xb5, 0xe3, 0xf1, 0x98, 0x9a, 0x6a, 0x0a, 0x92, 0x0a, 0x39, 0x92, 0xfb,
	0x9a, 0xeb, 0xe9, 0x29, 0x7c, 0x06, 0xab, 0x1e, 0x12, 0xdd, 0x85, 0x15, 0xc3, 0x54, 0x88, 0x93,
	0xe1, 0x58, 0x54, 0xb3, 0x8b, 0xa3, 0x8a, 0x3d, 0x70, 0xe1, 0xcf, 0x11, 0x88, 0x0d, 0xb3, 0x3c,
	0x33, 0x8e, 0x0f, 0x21, 0x6e, 0xc9, 0xb6, 0xac, 0x8f, 0x85, 0x31, 0x5e, 0x2e, 0x5e, 0xa0, 0x66,
	0x8a, 0x4d, 0x4a, 0x63, 0x43, 0x1a, 0x52, 0xa6, 0xc4, 0x0b, 0xc6, 0x43, 0x88, 0x7b, 0xfd, 0x38,
	0x8a, 0xfa, 0x05, 0x55, 0x1e, 0x50, 0xda, 0x50, 0x25, 0x53, 0xe2, 0xa9, 0x94, 0xe0, 0x12, 0x75,
	0x48, 0xf2, 0xea, 0x6c, 0x2c, 0x55, 0xf1, 0x45, 0x8d, 0x32, 0x52, 0x3c, 0x56, 0xab, 0xe4, 0x68,
	0x37, 0x84, 0x53, 0xc6, 0x50, 0xc0, 0x0c, 0x6c, 0xfe, 0x08, 0x92, 0xe7, 0x30, 0xe8, 0x1d, 0x88,
	0x31, 0x8b, 0xc3, 0x80, 0x45, 0xf0, 0x3a, 0x15, 0x88, 0x34, 0x68, 0x41, 0x20, 0xc3, 0xa3, 0x40,
	0x6e, 0x7e, 0x00, 0x30, 0xda, 0x3e, 0xba, 0x0a, 0xde, 0xf6, 0xa5, 0xb1, 0x80, 0xc7, 0x98, 0x44,
	0xf4, 0xc1, 0xa3, 0xf0, 0x51, 0xb0, 0x97, 0x83, 0x71, 0x30, 0x93, 0x50, 0x70, 0x75, 0x0d, 0x56,
	0xbc, 0x6a, 0xc8, 0x03, 0x8c, 0x36, 0x39, 0x2b, 0x9b, 0x85, 0x3f, 0x72, 0x10, 0xdf, 0xd1, 0xcc,
	0x8e, 0xac, 0x31, 0xf5, 0xdf, 0xfd, 0xce, 0x99, 0x2e, 0xf9, 0xdf, 0x73, 0x90, 0x9a, 0x38, 0xe1,
	0xd0, 0x8f, 0x21, 0xd9, 0x63, 0x5e, 0x49, 0x2c, 0x2a, 0x41, 0x13, 0xbc, 0x37, 0x3f, 0xf5, 0x63,
	0x41, 0xc0, 0x89, 0xde, 0x68, 0xe2, 0x8c, 0x1a, 0x29, 0xfc, 0x3a, 0x8d, 0xf4, 0xef, 0x08, 0xa0,
	0x60, 0x3b, 0x75, 0x62, 0x69, 0xe6, 0xa9, 0x4e, 0x0c, 0x17, 0xdd, 0x84, 0xb0, 0xaa, 0xb0, 0xe8,
	0xc6, 0xcb, 0x29, 0xa6, 0x89, 0x5d, 0x0b, 0xc5, 0xc3, 0x43, 0xa1, 0x5e, 0x5d, 0x1d, 0x9c, 0xe5,
	0xc2, 0x42, 0x1d, 0x87, 0x55, 0x05, 0x3d, 0x82, 0x37, 0x35, 0xcf, 0x29, 0xc9, 0xf2, 0xd5, 0x48,
	0xaa, 0xe2, 0xb7, 0xdb, 0x14, 0xf3, 0xf2, 0xe0, 0x2c, 0x77, 0x69, 0x22, 0x08, 0x42, 0x1d, 0x5f,
	0xd2, 0x26, 0x44, 0x0a, 0x7a, 0x00, 0xeb, 0x47, 0x1a, 0x21, 0x2e, 0x55, 0x16, 0x99, 0xad, 0x2c,
	0x3e, 0x38, 0xcb, 0xad, 0x6d, 0x53, 0x90, 0x50, 0xc7, 0x6b, 0x0c, 0x2d, 0x28, 0xe8, 0xfb, 0x00,
	0x5d, 0x9b, 0xc8, 0x2e, 0x51, 0x24, 0xd9, 0xf5, 0x5b, 0x69, 0xb3, 0xe8, 0x5d, 0x60, 0xc5, 0xe0,
	0x02, 0x2b, 0xb6, 0x83, 0x0b, 0x0c, 0xc7, 0x7c, 0x74, 0xc5, 0xa5, 0xd4, 0xbe, 0xa5, 0x04, 0xd4,
	0x95, 0xe5, 0x54, 0x1f, 0x5d, 0x71, 0x51, 0x06, 0xd6, 0x4e, 0x88, 0xed, 0xa8, 0xa6, 0xc1, 0x8e,
	0xc8, 0x08, 0x0e, 0xa6, 0xa8, 0x0e, 0x51, 0xc7, 0x22, 0xdd, 0xcc, 0x1a, 0x53, 0x77, 0x7b, 0x7e,
	0x56, 0xa6, 0xb3, 0xd0, 0xb2, 0x48, 0x17, 0x33, 0x36, 0xda, 0x81, 0x15, 0xc7, 0x95, 0x5d, 0x92,
	0x59, 0x5f, 0x76, 0x36, 0xcc, 0x50, 0x43, 0x89, 0xd8, 0xe3, 0x17, 0x1e, 0xc3, 0x95, 0xd9, 0x86,
	0xd0, 0x0f, 0x03, 0x13, 0x1c, 0xbb, 0xa7, 0x6f, 0x2e, 0x37, 0x71, 0x4e, 0xf1, 0x13, 0x78, 0x6b,
	0x8e, 0xe9, 0x91, 0xe6, 0xf0, 0xff, 0xa5, 0xf9, 0x3f, 0x11, 0x48, 0x37, 0x8f, 0x4f, 0x9d, 0x73,
	0x9d, 0x73, 0xe1, 0x02, 0x95, 0xe0, 0xca, 0xb0, 0x30, 0x95, 0xe1, 0xc6, 0x16, 0xd4, 0x68, 0x66,
	0x70, 0x96, 0xdb, 0x98, 0x76, 0x45, 0xa8, 0xe3, 0x0d, 0x6b, 0x5a, 0xaa, 0xa0, 0x4f, 0x20, 0xa6,
	0x90, 0x13, 0xb5, 0x4b, 0x16, 0x94, 0x6a, 0x62, 0x70, 0x96, 0x5b, 0xaf, 0x33, 0x94, 0x50, 0xc7,
	0xeb, 0x1e, 0xfe, 0x3b, 0x58, 0xac, 0xd5, 0x73, 0xc5, 0xba, 0xe0, 0x6a, 0x9b, 0xcc, 0xc7, 0x58,
	0xa9, 0xee, 0xc2, 0x2a, 0xcd, 0x5b, 0xdf, 0xf1, 0x6b, 0xf5, 0xf6, 0x6b, 0x68, 0x61, 0x3c, 0xec,
	0xf3, 0x0b, 0x87, 0xb0, 0x31, 0xcb, 0xce, 0xb7, 0xad, 0x54, 0xda, 0x02, 0x33, 0x0d, 0x7f, 0x5b,
	0xc5, 0xbb, 0xb0, 0x3e, 0xac, 0xcf, 0x1f, 0x9c, 0x3f, 0x8d, 0x6f, 0x2c, 0x57, 0x35, 0x7e, 0x2a,
	0x7f, 0x19, 0x86, 0xc4, 0xb8, 0x1c, 0xbd, 0x31, 0x2c, 0xf7, 0x28, 0xab, 0x6a, 0x04, 0x51, 0x5a,
	0x5e, 0xc1, 0x45, 0x4d, 0xc7, 0xe8, 0xfe, 0xc4, 0x03, 0x79, 0xc1, 0x0d, 0xd0, 0x34, 0xed, 0xd1,
	0xdb, 0xf8, 0xe3, 0xc9, 0xb7, 0xf1, 0x32, 0xe2, 0xf0, 0x55, 0x5c, 0x87, 0xa8, 0xec, 0xba, 0xb6,
	0xff, 0x20, 0xbe, 0x7d, 0x31, 0x1f, 0x8b, 0x15, 0xd7, 0xb5, 0x79, 0xc3, 0xb5, 0x4f, 0x31, 0x63,
	0x6f, 0x3e, 0x80, 0xd8, 0x50, 0x84, 0xd2, 0x10, 0x79, 0x46, 0x4e, 0xfd, 0x7b, 0x9d, 0x0e, 0xd1,
	0x86, 0xff, 0x4a, 0xf0, 0x7d, 0xf5, 0x26, 0x9f, 0x84, 0x3f, 0xe6, 0x0a, 0xb7, 0x20, 0x4a, 0xf7,
	0x33, 0xf3, 0x31, 0x90, 0x86, 0x88, 0x41, 0x5c, 0x9f, 0x43, 0x87, 0x85, 0x5f, 0x70, 0x90, 0xd8,
	0x56, 0x35, 0x82, 0x89, 0x63, 0xf6, 0xed, 0x2e, 0x41, 0x77, 0x61, 0xed, 0x48, 0xd5, 0x58, 0xdb,
	0xce, 0x39, 0x47, 0x60, 0x70, 0x96, 0x5b, 0xa5, 0x1c, 0xa1, 0x8e, 0x57, 0x29, 0x56, 0x50, 0xe8,
	0x9b, 0xc6, 0x51, 0xbf, 0x20, 0x52, 0xe7, 0xd4, 0x65, 0xd9, 0xa5, 0x19, 0x89, 0x51, 0x49, 0x95,
	0x0a, 0x50, 0x0e, 0xe2, 0xce, 0xb1, 0x5c, 0xbe, 0x77, 0x5f, 0x3a, 0x96, 0x9d, 0x63, 0x76, 0x1e,
	0xc4, 0x30, 0x78, 0xa2, 0x5d, 0xd9, 0x39, 0x2e, 0xfc, 0x9a, 0x83, 0x24, 0xff, 0x9c, 0x74, 0xfb,
	0xae, 0x6a, 0x1a, 0xac, 0x9c, 0xef, 0xc3, 0x4a, 0xcf, 0x96, 0xad, 0x63, 0x7f, 0x17, 0xf9, 0xe2,
	0xf0, 0x93, 0xad, 0x58, 0x1b, 0x7e, 0xa8, 0xed, 0x50, 0x44, 0xcd, 0x34, 0x8e, 0xd4, 0x1e, 0xf6,
	0xe0, 0xa8, 0x1a, 0x3c, 0xc5, 0x58, 0xcb, 0x86, 0x97, 0x7d, 0x14, 0xb1, 0x47, 0x1c, 0xeb, 0x53,
	0xef, 0xbd, 0x46, 0x87, 0x85, 0x5f, 0x45, 0x20, 0x36, 0x5c, 0x98, 0x19, 0xc8, 0x8f, 0x20, 0x69,
	0x1a, 0xc6, 0x73, 0xa9, 0xa3, 0x99, 0x1d, 0x89, 0xa6, 0x86, 0x85, 0xb4, 0x9a, 0x1a, 0x9c, 0xe5,
	0xe2, 0x0d, 0x51, 0x7c, 0x52, 0xd5, 0xcc, 0xce, 0x1e, 0x39, 0xc5, 0x71, 0x8a, 0xf2, 0x27, 0xe8,
	0x21, 0xc4, 0x18, 0x89, 0xc6, 0xcc, 0x3f, 0x13, 0x17, 0x74, 0xc0, 0x78, 0x56, 0xbc, 0xa3, 0x92,
	0x2a, 0x66, 0xd2, 0x75, 0xaa, 0x86, 0x8e, 0xe8, 0xa1, 0x65, 0xf7, 0x0d, 0xfa, 0xe1, 0x99, 0x29,
	0xb3, 0xed, 0x05, 0x53, 0xd4, 0x81, 0xa4, 0x4b, 0x0c, 0xc7, 0xb4, 0x6d, 0xd7, 0x0b, 0x85, 0xc2,
	0x0c, 0x7e, 0x30, 0xdf, 0x60, 0x9b, 0xc1, 0x71, 0x7b, 0xe8, 0x79, 0x35, 0x3d, 0x38, 0xcb, 0x25,
	0x02, 0x31, 0x0b, 0x52, 0x22, 0xd0, 0xc9, 0x22, 0xd3, 0x81, 0xa4, 0x69, 0x11, 0xe3, 0x44, 0x35,
	0x4c, 0xcf, 0x06, 0x59, 0x66, 0xa3, 0x61, 0x11, 0xe3, 0x91, 0x20, 0x36, 0x26, 0x6c, 0x04, 0x62,
	0xcf, 0x46, 0xa0, 0x93, 0xe5, 0xe2, 0xbf, 0x1c, 0x5c, 0x9a, 0xda, 0x19, 0x3a, 0x86, 0x0d, 0xd3,
	0x72, 0x55, 0x5d, 0xfd, 0x42, 0xa6, 0x15, 0x23, 0x59, 0xb6, 0xc9, 0xa2, 0xea, 0xbd, 0x14, 0xef,
	0x2d, 0x77, 0xb2, 0x31, 0xc6, 0x6e, 0x7a, 0x64, 0xfc, 0xa6, 0x39, 0x2d, 0x44, 0x37, 0x20, 0x45,
	0x8c, 0x1e, 0xbd, 0x27, 0xcf, 0xe7, 0x1a, 0x27, 0x3d, 0x71, 0x90, 0xdc, 0xc7, 0x90, 0xd2, 0x89,
	0x2e, 0x59, 0xf4, 0xf9, 0xab, 0xa9, 0xba, 0xca, 0x0e, 0x1c, 0x1a, 0x8d, 0xd2, 0x05, 0x22, 0x4e,
	0xf4, 0xa6, 0x69, 0x6a, 0xfb, 0x8c, 0x86, 0x93, 0xfa, 0xf8, 0xb4, 0xf0, 0x33, 0x78, 0x67, 0xc1,
	0xa6, 0xd1, 0x4f, 0x01, 0x79, 0x39, 0x91, 0x9c, 0x63, 0xd9, 0x22, 0x92, 0x2d, 0x1b, 0xbd, 0x20,
	0x0e, 0xe5, 0xe5, 0xa6, 0xbd, 0xdf, 0x16, 0xa5, 0x62, 0xca, 0xc4, 0x69, 0x77, 0x42, 0x52, 0x38,
	0x80, 0xcc, 0x3c, 0x34, 0x6d, 0x6c, 0xdf, 0xfa, 0x58, 0x8b, 0x80, 0x27, 0x12, 0xfd, 0x13, 0x47,
	0x51, 0x75, 0xd6, 0x87, 0x2b, 0x98, 0x0e, 0x0b, 0xf7, 0xe0, 0xf2, 0x4c, 0xbf, 0xd1, 0xf7, 0x20,
	0xf6, 0xb9, 0x69, 0x3f, 0x73, 0x2c, 0xb9, 0x1b, 0x7c, 0x83, 0x8d, 0x04, 0x85, 0xdf, 0x70, 0x70,
	0x69, 0xaa, 0x7a, 0xd0, 0x13, 0xfa, 0xe1, 0x42, 0xbf, 0x11, 0x99, 0xf3, 0xbe, 0xdb, 0x0f, 0x5e,
	0xa3, 0xfe, 0x8a, 0xe3, 0x2e, 0x01, 0xd3, 0xc5, 0xc6, 0x9b, 0x39, 0x88, 0x8f, 0x2d, 0x05, 0x7e,
	0x70, 0x43, 0x3f, 0xde, 0xff, 0x5d, 0x14, 0xde, 0x9a, 0xf3, 0xdf, 0x0c, 0xba, 0x01, 0x85, 0xfd,
	0xc6, 0x8e, 0x50, 0xab, 0xec, 0x4b, 0x4d, 0xa1, 0xc9, 0xef, 0x0b, 0x22, 0x2f, 0x89, 0x8d, 0x3a,
	0x2f, 0xed, 0x09, 0x62, 0x5d, 0x3a, 0x14, 0xf7, 0xc4, 0xc6, 0x63, 0x31, 0x1d, 0x42, 0xd7, 0x21,
	0xbf, 0x00, 0x27, 0x88, 0xcd, 0xc3, 0x76, 0x9a, 0x43, 0xef, 0xc1, 0xbb, 0x0b, 0x50, 0x8d, 0xc3,
	0x36, 0x85, 0x85, 0xd1, 0x2d, 0xd8, 0x5a, 0x00, 0xab, 0x55, 0x0e, 0x78, 0x5c, 0x91, 0x5a, 0x8d,
	0x43, 0x5c, 0xe3, 0xd3, 0x80, 0x6e, 0x2c, 0x54, 0x5a, 0xe7, 0xdb, 0x7c, 0xad, 0x9d, 0xfe, 0x7a,
	0x0d, 0x6d, 0xc1, 0xb5, 0x45, 0x5a, 0xf7, 0x2b, 0xad, 0x96, 0xb0, 0xfd, 0x34, 0xfd, 0xaf, 0x35,
	0x74, 0x0b, 0x6e, 0x2e, 0x40, 0x6e, 0x37, 0xb0, 0xc4, 0x57, 0x6a, 0xbb, 0x12, 0x6e, 0x08, 0xe9,
	0x7f, 0xc4, 0xd1, 0x1d, 0xb8, 0xb5, 0x00, 0xfd, 0x48, 0xa8, 0xf3, 0x0d, 0xa9, 0xd5, 0xc6, 0x7c,
	0xe5, 0x40, 0x6a, 0x09, 0xe2, 0x5e, 0xfa, 0x45, 0x0a, 0x3d, 0x80, 0xf2, 0xd2, 0x2d, 0x0b, 0x0d,
	0xb1, 0x25, 0x1d, 0xf0, 0x6d, 0x2c, 0xd4, 0x5a, 0x1e, 0xf1, 0x2f, 0x29, 0x74, 0x17, 0x4a, 0x0b,
	0x88, 0xfb, 0x95, 0x36, 0x2f, 0xd6, 0x9e, 0x9e, 0x67, 0xfd, 0x35, 0x85, 0xca, 0xf0, 0xe1, 0x22,
	0x7f, 0x70, 0xe5, 0x80, 0x3f, 0xcf, 0xf9, 0x5b, 0xea, 0xfd, 0xbf, 0x73, 0x90, 0x3c, 0xf7, 0x0a,
	0x42, 0x9b, 0x70, 0x65, 0xc8, 0x6e, 0xb5, 0x2b, 0x6d, 0x7e, 0x2c, 0xfd, 0xd3, 0x6b, 0x4d, 0x5e,
	0xac, 0x0b, 0xe2, 0x4e, 0x9a, 0x43, 0x19, 0xd8, 0x98, 0x58, 0xc3, 0x7c, 0xa5, 0xfe, 0x34, 0x1d,
	0x9e, 0xc1, 0xc2, 0x87, 0xa2, 0x48, 0x59, 0x11, 0x94, 0x85, 0xcd, 0x89, 0xb5, 0x36, 0x8f, 0x0f,
	0x04, 0xb1, 0xd2, 0xa6, 0xeb, 0x51, 0x74, 0x15, 0xde, 0x9e, 0xb3, 0xce, 0xd7, 0xd3, 0x2b, 0xe8,
	0x6d, 0xb8, 0x3c, 0xb1, 0xbc, 0x5d, 0x11, 0xf6, 0xf9, 0x7a, 0x7a, 0xb5, 0xda, 0x7d, 0xf1, 0x32,
	0x1b, 0xfa, 0xea, 0x65, 0x36, 0xf4, 0xcd, 0xcb, 0x2c, 0xf7, 0xf3, 0x41, 0x96, 0xfb, 0xc3, 0x20,
	0xcb, 0xfd, 0x69, 0x90, 0xe5, 0x5e, 0x0c, 0xb2, 0xdc, 0x3f, 0x07, 0x59, 0xee, 0xeb, 0x41, 0x36,
	0xf4, 0xcd, 0x20, 0xcb, 0xfd, 0xf6, 0x55, 0x36, 0xf4, 0xe2, 0x55, 0x36, 0xf4, 0xd5, 0xab, 0x6c,
	0xe8, 0x27, 0x1f, 0xf6, 0x54, 0x5d, 0x23, 0xae, 0x26, 0x77, 0x9c, 0xa2, 0xac, 0x96, 0xbc, 0x59,
	0x69, 0xea, 0x1f, 0xdd, 0x4f, 0xbd, 0x51, 0x67, 0x95, 0x3d, 0xd1, 0x3f, 0xfa, 0x5f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x83, 0xe7, 0x57, 0x2b, 0xf4, 0x15, 0x00, 0x00,
}

func (x LogicalPipelineNodeKind) String() string {
	s, ok := LogicalPipelineNodeKind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PipelineState) String() string {
	s, ok := PipelineState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Node) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Node)
	if !ok {
		that2, ok := that.(Node)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if len(this.Inputs) != len(that1.Inputs) {
		return false
	}
	for i := range this.Inputs {
		if !this.Inputs[i].Equal(that1.Inputs[i]) {
			return false
		}
	}
	if len(this.Outputs) != len(that1.Outputs) {
		return false
	}
	for i := range this.Outputs {
		if !this.Outputs[i].Equal(that1.Outputs[i]) {
			return false
		}
	}
	if len(this.InitArgs) != len(that1.InitArgs) {
		return false
	}
	for i := range this.InitArgs {
		if !this.InitArgs[i].Equal(that1.InitArgs[i]) {
			return false
		}
	}
	return true
}
func (this *NodeInitArgs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeInitArgs)
	if !ok {
		that2, ok := that.(NodeInitArgs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.DefaultValue == nil {
		if this.DefaultValue != nil {
			return false
		}
	} else if this.DefaultValue == nil {
		return false
	} else if !this.DefaultValue.Equal(that1.DefaultValue) {
		return false
	}
	return true
}
func (this *NodeInitArgs_StringValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeInitArgs_StringValue)
	if !ok {
		that2, ok := that.(NodeInitArgs_StringValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StringValue != that1.StringValue {
		return false
	}
	return true
}
func (this *NodeInitArgs_Int64Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeInitArgs_Int64Value)
	if !ok {
		that2, ok := that.(NodeInitArgs_Int64Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Int64Value != that1.Int64Value {
		return false
	}
	return true
}
func (this *NodeInitArgs_DoubleValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeInitArgs_DoubleValue)
	if !ok {
		that2, ok := that.(NodeInitArgs_DoubleValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DoubleValue != that1.DoubleValue {
		return false
	}
	return true
}
func (this *NodeInitArgs_BoolValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeInitArgs_BoolValue)
	if !ok {
		that2, ok := that.(NodeInitArgs_BoolValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BoolValue != that1.BoolValue {
		return false
	}
	return true
}
func (this *NodeInitArgs_LambdaValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeInitArgs_LambdaValue)
	if !ok {
		that2, ok := that.(NodeInitArgs_LambdaValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LambdaValue.Equal(that1.LambdaValue) {
		return false
	}
	return true
}
func (this *Lambda) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Lambda)
	if !ok {
		that2, ok := that.(Lambda)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	return true
}
func (this *NodeInput) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeInput)
	if !ok {
		that2, ok := that.(NodeInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *NodeInput_ParamValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeInput_ParamValue)
	if !ok {
		that2, ok := that.(NodeInput_ParamValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ParamValue.Equal(that1.ParamValue) {
		return false
	}
	return true
}
func (this *NodeInput_ModelValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeInput_ModelValue)
	if !ok {
		that2, ok := that.(NodeInput_ModelValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ModelValue.Equal(that1.ModelValue) {
		return false
	}
	return true
}
func (this *NodeInput_NodeOutputValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeInput_NodeOutputValue)
	if !ok {
		that2, ok := that.(NodeInput_NodeOutputValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NodeOutputValue.Equal(that1.NodeOutputValue) {
		return false
	}
	return true
}
func (this *NodeInput_NodeOutputRef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeInput_NodeOutputRef)
	if !ok {
		that2, ok := that.(NodeInput_NodeOutputRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeName != that1.NodeName {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *NodeInput_ModelInput) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeInput_ModelInput)
	if !ok {
		that2, ok := that.(NodeInput_ModelInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ModelName != that1.ModelName {
		return false
	}
	return true
}
func (this *NodeInput_ParamInput) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeInput_ParamInput)
	if !ok {
		that2, ok := that.(NodeInput_ParamInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ParamName != that1.ParamName {
		return false
	}
	return true
}
func (this *NodeOutput) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeOutput)
	if !ok {
		that2, ok := that.(NodeOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GlobalParam) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalParam)
	if !ok {
		that2, ok := that.(GlobalParam)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.DefaultValue == nil {
		if this.DefaultValue != nil {
			return false
		}
	} else if this.DefaultValue == nil {
		return false
	} else if !this.DefaultValue.Equal(that1.DefaultValue) {
		return false
	}
	return true
}
func (this *GlobalParam_StringValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalParam_StringValue)
	if !ok {
		that2, ok := that.(GlobalParam_StringValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StringValue != that1.StringValue {
		return false
	}
	return true
}
func (this *GlobalParam_Int64Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalParam_Int64Value)
	if !ok {
		that2, ok := that.(GlobalParam_Int64Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Int64Value != that1.Int64Value {
		return false
	}
	return true
}
func (this *GlobalParam_DoubleValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalParam_DoubleValue)
	if !ok {
		that2, ok := that.(GlobalParam_DoubleValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DoubleValue != that1.DoubleValue {
		return false
	}
	return true
}
func (this *GlobalParam_BoolValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalParam_BoolValue)
	if !ok {
		that2, ok := that.(GlobalParam_BoolValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BoolValue != that1.BoolValue {
		return false
	}
	return true
}
func (this *LogicalPipeline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogicalPipeline)
	if !ok {
		that2, ok := that.(LogicalPipeline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.GlobalParams) != len(that1.GlobalParams) {
		return false
	}
	for i := range this.GlobalParams {
		if !this.GlobalParams[i].Equal(that1.GlobalParams[i]) {
			return false
		}
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	return true
}
func (this *PipelineDeployment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PipelineDeployment)
	if !ok {
		that2, ok := that.(PipelineDeployment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.LogicalPipelineID.Equal(that1.LogicalPipelineID) {
		return false
	}
	if !this.FleetID.Equal(that1.FleetID) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !this.State.Equal(that1.State) {
		return false
	}
	return true
}
func (this *PipelineDeploymentSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PipelineDeploymentSpec)
	if !ok {
		that2, ok := that.(PipelineDeploymentSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *PipelineDeploymentState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PipelineDeploymentState)
	if !ok {
		that2, ok := that.(PipelineDeploymentState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *PhysicalPipeline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PhysicalPipeline)
	if !ok {
		that2, ok := that.(PhysicalPipeline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.PipelineDeploymentID.Equal(that1.PipelineDeploymentID) {
		return false
	}
	if !this.DeviceID.Equal(that1.DeviceID) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *PhysicalPipelineSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PhysicalPipelineSpec)
	if !ok {
		that2, ok := that.(PhysicalPipelineSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *PhysicalPipelineStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PhysicalPipelineStatus)
	if !ok {
		that2, ok := that.(PhysicalPipelineStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *Pipeline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pipeline)
	if !ok {
		that2, ok := that.(Pipeline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	return true
}
func (this *PipelineNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PipelineNode)
	if !ok {
		that2, ok := that.(PipelineNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Inputs) != len(that1.Inputs) {
		return false
	}
	for i := range this.Inputs {
		if !this.Inputs[i].Equal(that1.Inputs[i]) {
			return false
		}
	}
	if len(this.Outputs) != len(that1.Outputs) {
		return false
	}
	for i := range this.Outputs {
		if !this.Outputs[i].Equal(that1.Outputs[i]) {
			return false
		}
	}
	if len(this.Attr) != len(that1.Attr) {
		return false
	}
	for i := range this.Attr {
		if this.Attr[i] != that1.Attr[i] {
			return false
		}
	}
	return true
}
func (this *Port) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Port)
	if !ok {
		that2, ok := that.(Port)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Net != that1.Net {
		return false
	}
	return true
}
func (this *FileResource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileResource)
	if !ok {
		that2, ok := that.(FileResource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FileID.Equal(that1.FileID) {
		return false
	}
	if this.SizeBytes != that1.SizeBytes {
		return false
	}
	if this.Sha256Hash != that1.Sha256Hash {
		return false
	}
	return true
}
func (this *ExecutionSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionSpec)
	if !ok {
		that2, ok := that.(ExecutionSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Graph.Equal(that1.Graph) {
		return false
	}
	if len(this.ModelSpec) != len(that1.ModelSpec) {
		return false
	}
	for i := range this.ModelSpec {
		if !this.ModelSpec[i].Equal(that1.ModelSpec[i]) {
			return false
		}
	}
	return true
}
func (this *ModelSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ModelSpec)
	if !ok {
		that2, ok := that.(ModelSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ONNXBlobKey != that1.ONNXBlobKey {
		return false
	}
	if !this.ONNXFile.Equal(that1.ONNXFile) {
		return false
	}
	if this.Runtime != that1.Runtime {
		return false
	}
	if !this.TensorRTSpec.Equal(that1.TensorRTSpec) {
		return false
	}
	if !this.OpenVINOSpec.Equal(that1.OpenVINOSpec) {
		return false
	}
	return true
}
func (this *TensorRTModelSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TensorRTModelSpec)
	if !ok {
		that2, ok := that.(TensorRTModelSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OptimizationProfile) != len(that1.OptimizationProfile) {
		return false
	}
	for i := range this.OptimizationProfile {
		if !this.OptimizationProfile[i].Equal(that1.OptimizationProfile[i]) {
			return false
		}
	}
	if this.EngineBlobKey != that1.EngineBlobKey {
		return false
	}
	if !this.MemPoolLimits.Equal(that1.MemPoolLimits) {
		return false
	}
	return true
}
func (this *TensorRTOptimizationProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TensorRTOptimizationProfile)
	if !ok {
		that2, ok := that.(TensorRTOptimizationProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TensorShapeRange) != len(that1.TensorShapeRange) {
		return false
	}
	for i := range this.TensorShapeRange {
		if !this.TensorShapeRange[i].Equal(that1.TensorShapeRange[i]) {
			return false
		}
	}
	return true
}
func (this *TensorRTTensorShapeRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TensorRTTensorShapeRange)
	if !ok {
		that2, ok := that.(TensorRTTensorShapeRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TensorName != that1.TensorName {
		return false
	}
	if len(this.Dim) != len(that1.Dim) {
		return false
	}
	for i := range this.Dim {
		if this.Dim[i] != that1.Dim[i] {
			return false
		}
	}
	return true
}
func (this *TensorRTMemPoolLimits) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TensorRTMemPoolLimits)
	if !ok {
		that2, ok := that.(TensorRTMemPoolLimits)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Workspace != that1.Workspace {
		return false
	}
	return true
}
func (this *OpenVINOModelSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenVINOModelSpec)
	if !ok {
		that2, ok := that.(OpenVINOModelSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.InputShape) != len(that1.InputShape) {
		return false
	}
	for i := range this.InputShape {
		if !this.InputShape[i].Equal(that1.InputShape[i]) {
			return false
		}
	}
	return true
}
func (this *OpenVINOModelSpec_TensorShape) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenVINOModelSpec_TensorShape)
	if !ok {
		that2, ok := that.(OpenVINOModelSpec_TensorShape)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Dim) != len(that1.Dim) {
		return false
	}
	for i := range this.Dim {
		if this.Dim[i] != that1.Dim[i] {
			return false
		}
	}
	return true
}
func (this *Node) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&corepb.Node{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	if this.Inputs != nil {
		s = append(s, "Inputs: "+fmt.Sprintf("%#v", this.Inputs)+",\n")
	}
	if this.Outputs != nil {
		s = append(s, "Outputs: "+fmt.Sprintf("%#v", this.Outputs)+",\n")
	}
	if this.InitArgs != nil {
		s = append(s, "InitArgs: "+fmt.Sprintf("%#v", this.InitArgs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeInitArgs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&corepb.NodeInitArgs{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.DefaultValue != nil {
		s = append(s, "DefaultValue: "+fmt.Sprintf("%#v", this.DefaultValue)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeInitArgs_StringValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&corepb.NodeInitArgs_StringValue{` +
		`StringValue:` + fmt.Sprintf("%#v", this.StringValue) + `}`}, ", ")
	return s
}
func (this *NodeInitArgs_Int64Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&corepb.NodeInitArgs_Int64Value{` +
		`Int64Value:` + fmt.Sprintf("%#v", this.Int64Value) + `}`}, ", ")
	return s
}
func (this *NodeInitArgs_DoubleValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&corepb.NodeInitArgs_DoubleValue{` +
		`DoubleValue:` + fmt.Sprintf("%#v", this.DoubleValue) + `}`}, ", ")
	return s
}
func (this *NodeInitArgs_BoolValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&corepb.NodeInitArgs_BoolValue{` +
		`BoolValue:` + fmt.Sprintf("%#v", this.BoolValue) + `}`}, ", ")
	return s
}
func (this *NodeInitArgs_LambdaValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&corepb.NodeInitArgs_LambdaValue{` +
		`LambdaValue:` + fmt.Sprintf("%#v", this.LambdaValue) + `}`}, ", ")
	return s
}
func (this *Lambda) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.Lambda{")
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeInput) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&corepb.NodeInput{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeInput_ParamValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&corepb.NodeInput_ParamValue{` +
		`ParamValue:` + fmt.Sprintf("%#v", this.ParamValue) + `}`}, ", ")
	return s
}
func (this *NodeInput_ModelValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&corepb.NodeInput_ModelValue{` +
		`ModelValue:` + fmt.Sprintf("%#v", this.ModelValue) + `}`}, ", ")
	return s
}
func (this *NodeInput_NodeOutputValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&corepb.NodeInput_NodeOutputValue{` +
		`NodeOutputValue:` + fmt.Sprintf("%#v", this.NodeOutputValue) + `}`}, ", ")
	return s
}
func (this *NodeInput_NodeOutputRef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&corepb.NodeInput_NodeOutputRef{")
	s = append(s, "NodeName: "+fmt.Sprintf("%#v", this.NodeName)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeInput_ModelInput) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.NodeInput_ModelInput{")
	s = append(s, "ModelName: "+fmt.Sprintf("%#v", this.ModelName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeInput_ParamInput) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.NodeInput_ParamInput{")
	s = append(s, "ParamName: "+fmt.Sprintf("%#v", this.ParamName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeOutput) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.NodeOutput{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalParam) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&corepb.GlobalParam{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.DefaultValue != nil {
		s = append(s, "DefaultValue: "+fmt.Sprintf("%#v", this.DefaultValue)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalParam_StringValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&corepb.GlobalParam_StringValue{` +
		`StringValue:` + fmt.Sprintf("%#v", this.StringValue) + `}`}, ", ")
	return s
}
func (this *GlobalParam_Int64Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&corepb.GlobalParam_Int64Value{` +
		`Int64Value:` + fmt.Sprintf("%#v", this.Int64Value) + `}`}, ", ")
	return s
}
func (this *GlobalParam_DoubleValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&corepb.GlobalParam_DoubleValue{` +
		`DoubleValue:` + fmt.Sprintf("%#v", this.DoubleValue) + `}`}, ", ")
	return s
}
func (this *GlobalParam_BoolValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&corepb.GlobalParam_BoolValue{` +
		`BoolValue:` + fmt.Sprintf("%#v", this.BoolValue) + `}`}, ", ")
	return s
}
func (this *LogicalPipeline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&corepb.LogicalPipeline{")
	if this.GlobalParams != nil {
		s = append(s, "GlobalParams: "+fmt.Sprintf("%#v", this.GlobalParams)+",\n")
	}
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PipelineDeployment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&corepb.PipelineDeployment{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	if this.LogicalPipelineID != nil {
		s = append(s, "LogicalPipelineID: "+fmt.Sprintf("%#v", this.LogicalPipelineID)+",\n")
	}
	if this.FleetID != nil {
		s = append(s, "FleetID: "+fmt.Sprintf("%#v", this.FleetID)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	if this.State != nil {
		s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PipelineDeploymentSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.PipelineDeploymentSpec{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PipelineDeploymentState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.PipelineDeploymentState{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PhysicalPipeline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&corepb.PhysicalPipeline{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	if this.PipelineDeploymentID != nil {
		s = append(s, "PipelineDeploymentID: "+fmt.Sprintf("%#v", this.PipelineDeploymentID)+",\n")
	}
	if this.DeviceID != nil {
		s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PhysicalPipelineSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.PhysicalPipelineSpec{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PhysicalPipelineStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.PhysicalPipelineStatus{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Pipeline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.Pipeline{")
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PipelineNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&corepb.PipelineNode{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Inputs != nil {
		s = append(s, "Inputs: "+fmt.Sprintf("%#v", this.Inputs)+",\n")
	}
	if this.Outputs != nil {
		s = append(s, "Outputs: "+fmt.Sprintf("%#v", this.Outputs)+",\n")
	}
	keysForAttr := make([]string, 0, len(this.Attr))
	for k, _ := range this.Attr {
		keysForAttr = append(keysForAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttr)
	mapStringForAttr := "map[string]string{"
	for _, k := range keysForAttr {
		mapStringForAttr += fmt.Sprintf("%#v: %#v,", k, this.Attr[k])
	}
	mapStringForAttr += "}"
	if this.Attr != nil {
		s = append(s, "Attr: "+mapStringForAttr+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Port) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&corepb.Port{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Net: "+fmt.Sprintf("%#v", this.Net)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FileResource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&corepb.FileResource{")
	if this.FileID != nil {
		s = append(s, "FileID: "+fmt.Sprintf("%#v", this.FileID)+",\n")
	}
	s = append(s, "SizeBytes: "+fmt.Sprintf("%#v", this.SizeBytes)+",\n")
	s = append(s, "Sha256Hash: "+fmt.Sprintf("%#v", this.Sha256Hash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecutionSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&corepb.ExecutionSpec{")
	if this.Graph != nil {
		s = append(s, "Graph: "+fmt.Sprintf("%#v", this.Graph)+",\n")
	}
	if this.ModelSpec != nil {
		s = append(s, "ModelSpec: "+fmt.Sprintf("%#v", this.ModelSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&corepb.ModelSpec{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ONNXBlobKey: "+fmt.Sprintf("%#v", this.ONNXBlobKey)+",\n")
	if this.ONNXFile != nil {
		s = append(s, "ONNXFile: "+fmt.Sprintf("%#v", this.ONNXFile)+",\n")
	}
	s = append(s, "Runtime: "+fmt.Sprintf("%#v", this.Runtime)+",\n")
	if this.TensorRTSpec != nil {
		s = append(s, "TensorRTSpec: "+fmt.Sprintf("%#v", this.TensorRTSpec)+",\n")
	}
	if this.OpenVINOSpec != nil {
		s = append(s, "OpenVINOSpec: "+fmt.Sprintf("%#v", this.OpenVINOSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TensorRTModelSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&corepb.TensorRTModelSpec{")
	if this.OptimizationProfile != nil {
		s = append(s, "OptimizationProfile: "+fmt.Sprintf("%#v", this.OptimizationProfile)+",\n")
	}
	s = append(s, "EngineBlobKey: "+fmt.Sprintf("%#v", this.EngineBlobKey)+",\n")
	if this.MemPoolLimits != nil {
		s = append(s, "MemPoolLimits: "+fmt.Sprintf("%#v", this.MemPoolLimits)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TensorRTOptimizationProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.TensorRTOptimizationProfile{")
	if this.TensorShapeRange != nil {
		s = append(s, "TensorShapeRange: "+fmt.Sprintf("%#v", this.TensorShapeRange)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TensorRTTensorShapeRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&corepb.TensorRTTensorShapeRange{")
	s = append(s, "TensorName: "+fmt.Sprintf("%#v", this.TensorName)+",\n")
	s = append(s, "Dim: "+fmt.Sprintf("%#v", this.Dim)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TensorRTMemPoolLimits) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.TensorRTMemPoolLimits{")
	s = append(s, "Workspace: "+fmt.Sprintf("%#v", this.Workspace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenVINOModelSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.OpenVINOModelSpec{")
	if this.InputShape != nil {
		s = append(s, "InputShape: "+fmt.Sprintf("%#v", this.InputShape)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenVINOModelSpec_TensorShape) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&corepb.OpenVINOModelSpec_TensorShape{")
	s = append(s, "Dim: "+fmt.Sprintf("%#v", this.Dim)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringModelExec(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InitArgs) > 0 {
		for iNdEx := len(m.InitArgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InitArgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Outputs) > 0 {
		for iNdEx := len(m.Outputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Outputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Inputs) > 0 {
		for iNdEx := len(m.Inputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Kind != 0 {
		i = encodeVarintModelExec(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeInitArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInitArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInitArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultValue != nil {
		{
			size := m.DefaultValue.Size()
			i -= size
			if _, err := m.DefaultValue.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeInitArgs_StringValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInitArgs_StringValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.StringValue)
	copy(dAtA[i:], m.StringValue)
	i = encodeVarintModelExec(dAtA, i, uint64(len(m.StringValue)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *NodeInitArgs_Int64Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInitArgs_Int64Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintModelExec(dAtA, i, uint64(m.Int64Value))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *NodeInitArgs_DoubleValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInitArgs_DoubleValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DoubleValue))))
	i--
	dAtA[i] = 0x21
	return len(dAtA) - i, nil
}
func (m *NodeInitArgs_BoolValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInitArgs_BoolValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.BoolValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *NodeInitArgs_LambdaValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInitArgs_LambdaValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LambdaValue != nil {
		{
			size, err := m.LambdaValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Lambda) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lambda) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Lambda) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NodeInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeInput_ParamValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInput_ParamValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ParamValue != nil {
		{
			size, err := m.ParamValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *NodeInput_ModelValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInput_ModelValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModelValue != nil {
		{
			size, err := m.ModelValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *NodeInput_NodeOutputValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInput_NodeOutputValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NodeOutputValue != nil {
		{
			size, err := m.NodeOutputValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *NodeInput_NodeOutputRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInput_NodeOutputRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInput_NodeOutputRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.NodeName != 0 {
		i = encodeVarintModelExec(dAtA, i, uint64(m.NodeName))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeInput_ModelInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInput_ModelInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInput_ModelInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModelName) > 0 {
		i -= len(m.ModelName)
		copy(dAtA[i:], m.ModelName)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.ModelName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeInput_ParamInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInput_ParamInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInput_ParamInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParamName) > 0 {
		i -= len(m.ParamName)
		copy(dAtA[i:], m.ParamName)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.ParamName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultValue != nil {
		{
			size := m.DefaultValue.Size()
			i -= size
			if _, err := m.DefaultValue.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalParam_StringValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalParam_StringValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.StringValue)
	copy(dAtA[i:], m.StringValue)
	i = encodeVarintModelExec(dAtA, i, uint64(len(m.StringValue)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *GlobalParam_Int64Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalParam_Int64Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintModelExec(dAtA, i, uint64(m.Int64Value))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *GlobalParam_DoubleValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalParam_DoubleValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DoubleValue))))
	i--
	dAtA[i] = 0x21
	return len(dAtA) - i, nil
}
func (m *GlobalParam_BoolValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalParam_BoolValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.BoolValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *LogicalPipeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicalPipeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogicalPipeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GlobalParams) > 0 {
		for iNdEx := len(m.GlobalParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GlobalParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PipelineDeployment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipelineDeployment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PipelineDeployment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Version != 0 {
		i = encodeVarintModelExec(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x30
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.FleetID != nil {
		{
			size, err := m.FleetID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LogicalPipelineID != nil {
		{
			size, err := m.LogicalPipelineID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PipelineDeploymentSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipelineDeploymentSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PipelineDeploymentSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintModelExec(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PipelineDeploymentState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipelineDeploymentState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PipelineDeploymentState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintModelExec(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *PhysicalPipeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhysicalPipeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhysicalPipeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Version != 0 {
		i = encodeVarintModelExec(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x30
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DeviceID != nil {
		{
			size, err := m.DeviceID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PipelineDeploymentID != nil {
		{
			size, err := m.PipelineDeploymentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PhysicalPipelineSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhysicalPipelineSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhysicalPipelineSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintModelExec(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PhysicalPipelineStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhysicalPipelineStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhysicalPipelineStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintModelExec(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Pipeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pipeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pipeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *PipelineNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipelineNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PipelineNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attr) > 0 {
		for k := range m.Attr {
			v := m.Attr[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintModelExec(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintModelExec(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintModelExec(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Outputs) > 0 {
		for iNdEx := len(m.Outputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Outputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Inputs) > 0 {
		for iNdEx := len(m.Inputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintModelExec(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Port) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Port) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Port) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Net) > 0 {
		i -= len(m.Net)
		copy(dAtA[i:], m.Net)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.Net)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sha256Hash) > 0 {
		i -= len(m.Sha256Hash)
		copy(dAtA[i:], m.Sha256Hash)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.Sha256Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SizeBytes != 0 {
		i = encodeVarintModelExec(dAtA, i, uint64(m.SizeBytes))
		i--
		dAtA[i] = 0x10
	}
	if m.FileID != nil {
		{
			size, err := m.FileID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModelSpec) > 0 {
		for iNdEx := len(m.ModelSpec) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ModelSpec[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Graph != nil {
		{
			size, err := m.Graph.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModelSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OpenVINOSpec != nil {
		{
			size, err := m.OpenVINOSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.TensorRTSpec != nil {
		{
			size, err := m.TensorRTSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Runtime) > 0 {
		i -= len(m.Runtime)
		copy(dAtA[i:], m.Runtime)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.Runtime)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if m.ONNXFile != nil {
		{
			size, err := m.ONNXFile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ONNXBlobKey) > 0 {
		i -= len(m.ONNXBlobKey)
		copy(dAtA[i:], m.ONNXBlobKey)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.ONNXBlobKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TensorRTModelSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorRTModelSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TensorRTModelSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MemPoolLimits != nil {
		{
			size, err := m.MemPoolLimits.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EngineBlobKey) > 0 {
		i -= len(m.EngineBlobKey)
		copy(dAtA[i:], m.EngineBlobKey)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.EngineBlobKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OptimizationProfile) > 0 {
		for iNdEx := len(m.OptimizationProfile) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OptimizationProfile[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TensorRTOptimizationProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorRTOptimizationProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TensorRTOptimizationProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TensorShapeRange) > 0 {
		for iNdEx := len(m.TensorShapeRange) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TensorShapeRange[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TensorRTTensorShapeRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorRTTensorShapeRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TensorRTTensorShapeRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dim) > 0 {
		dAtA26 := make([]byte, len(m.Dim)*10)
		var j25 int
		for _, num1 := range m.Dim {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA26[j25] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j25++
			}
			dAtA26[j25] = uint8(num)
			j25++
		}
		i -= j25
		copy(dAtA[i:], dAtA26[:j25])
		i = encodeVarintModelExec(dAtA, i, uint64(j25))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TensorName) > 0 {
		i -= len(m.TensorName)
		copy(dAtA[i:], m.TensorName)
		i = encodeVarintModelExec(dAtA, i, uint64(len(m.TensorName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TensorRTMemPoolLimits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorRTMemPoolLimits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TensorRTMemPoolLimits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Workspace != 0 {
		i = encodeVarintModelExec(dAtA, i, uint64(m.Workspace))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OpenVINOModelSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenVINOModelSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenVINOModelSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InputShape) > 0 {
		for iNdEx := len(m.InputShape) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InputShape[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelExec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OpenVINOModelSpec_TensorShape) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenVINOModelSpec_TensorShape) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenVINOModelSpec_TensorShape) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dim) > 0 {
		dAtA28 := make([]byte, len(m.Dim)*10)
		var j27 int
		for _, num1 := range m.Dim {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			dAtA28[j27] = uint8(num)
			j27++
		}
		i -= j27
		copy(dAtA[i:], dAtA28[:j27])
		i = encodeVarintModelExec(dAtA, i, uint64(j27))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintModelExec(dAtA []byte, offset int, v uint64) int {
	offset -= sovModelExec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.Kind != 0 {
		n += 1 + sovModelExec(uint64(m.Kind))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	if len(m.InitArgs) > 0 {
		for _, e := range m.InitArgs {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	return n
}

func (m *NodeInitArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.DefaultValue != nil {
		n += m.DefaultValue.Size()
	}
	return n
}

func (m *NodeInitArgs_StringValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StringValue)
	n += 1 + l + sovModelExec(uint64(l))
	return n
}
func (m *NodeInitArgs_Int64Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovModelExec(uint64(m.Int64Value))
	return n
}
func (m *NodeInitArgs_DoubleValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *NodeInitArgs_BoolValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *NodeInitArgs_LambdaValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LambdaValue != nil {
		l = m.LambdaValue.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	return n
}
func (m *Lambda) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	return n
}

func (m *NodeInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *NodeInput_ParamValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParamValue != nil {
		l = m.ParamValue.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	return n
}
func (m *NodeInput_ModelValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModelValue != nil {
		l = m.ModelValue.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	return n
}
func (m *NodeInput_NodeOutputValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeOutputValue != nil {
		l = m.NodeOutputValue.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	return n
}
func (m *NodeInput_NodeOutputRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeName != 0 {
		n += 1 + sovModelExec(uint64(m.NodeName))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	return n
}

func (m *NodeInput_ModelInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	return n
}

func (m *NodeInput_ParamInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParamName)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	return n
}

func (m *NodeOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	return n
}

func (m *GlobalParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.DefaultValue != nil {
		n += m.DefaultValue.Size()
	}
	return n
}

func (m *GlobalParam_StringValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StringValue)
	n += 1 + l + sovModelExec(uint64(l))
	return n
}
func (m *GlobalParam_Int64Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovModelExec(uint64(m.Int64Value))
	return n
}
func (m *GlobalParam_DoubleValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *GlobalParam_BoolValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *LogicalPipeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GlobalParams) > 0 {
		for _, e := range m.GlobalParams {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	return n
}

func (m *PipelineDeployment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.LogicalPipelineID != nil {
		l = m.LogicalPipelineID.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.FleetID != nil {
		l = m.FleetID.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovModelExec(uint64(m.Version))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	return n
}

func (m *PipelineDeploymentSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovModelExec(uint64(m.State))
	}
	return n
}

func (m *PipelineDeploymentState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovModelExec(uint64(m.State))
	}
	return n
}

func (m *PhysicalPipeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.PipelineDeploymentID != nil {
		l = m.PipelineDeploymentID.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.DeviceID != nil {
		l = m.DeviceID.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovModelExec(uint64(m.Version))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	return n
}

func (m *PhysicalPipelineSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovModelExec(uint64(m.State))
	}
	return n
}

func (m *PhysicalPipelineStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovModelExec(uint64(m.State))
	}
	return n
}

func (m *Pipeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	return n
}

func (m *PipelineNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModelExec(uint64(m.Id))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	if len(m.Attr) > 0 {
		for k, v := range m.Attr {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovModelExec(uint64(len(k))) + 1 + len(v) + sovModelExec(uint64(len(v)))
			n += mapEntrySize + 1 + sovModelExec(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Port) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	l = len(m.Net)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	return n
}

func (m *FileResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileID != nil {
		l = m.FileID.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.SizeBytes != 0 {
		n += 1 + sovModelExec(uint64(m.SizeBytes))
	}
	l = len(m.Sha256Hash)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	return n
}

func (m *ExecutionSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Graph != nil {
		l = m.Graph.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	if len(m.ModelSpec) > 0 {
		for _, e := range m.ModelSpec {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	return n
}

func (m *ModelSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	l = len(m.ONNXBlobKey)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.ONNXFile != nil {
		l = m.ONNXFile.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	l = len(m.Runtime)
	if l > 0 {
		n += 2 + l + sovModelExec(uint64(l))
	}
	if m.TensorRTSpec != nil {
		l = m.TensorRTSpec.Size()
		n += 2 + l + sovModelExec(uint64(l))
	}
	if m.OpenVINOSpec != nil {
		l = m.OpenVINOSpec.Size()
		n += 2 + l + sovModelExec(uint64(l))
	}
	return n
}

func (m *TensorRTModelSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OptimizationProfile) > 0 {
		for _, e := range m.OptimizationProfile {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	l = len(m.EngineBlobKey)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	if m.MemPoolLimits != nil {
		l = m.MemPoolLimits.Size()
		n += 1 + l + sovModelExec(uint64(l))
	}
	return n
}

func (m *TensorRTOptimizationProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TensorShapeRange) > 0 {
		for _, e := range m.TensorShapeRange {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	return n
}

func (m *TensorRTTensorShapeRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TensorName)
	if l > 0 {
		n += 1 + l + sovModelExec(uint64(l))
	}
	if len(m.Dim) > 0 {
		l = 0
		for _, e := range m.Dim {
			l += sovModelExec(uint64(e))
		}
		n += 1 + sovModelExec(uint64(l)) + l
	}
	return n
}

func (m *TensorRTMemPoolLimits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Workspace != 0 {
		n += 1 + sovModelExec(uint64(m.Workspace))
	}
	return n
}

func (m *OpenVINOModelSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InputShape) > 0 {
		for _, e := range m.InputShape {
			l = e.Size()
			n += 1 + l + sovModelExec(uint64(l))
		}
	}
	return n
}

func (m *OpenVINOModelSpec_TensorShape) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dim) > 0 {
		l = 0
		for _, e := range m.Dim {
			l += sovModelExec(uint64(e))
		}
		n += 1 + sovModelExec(uint64(l)) + l
	}
	return n
}

func sovModelExec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModelExec(x uint64) (n int) {
	return sovModelExec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Node) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInputs := "[]*NodeInput{"
	for _, f := range this.Inputs {
		repeatedStringForInputs += strings.Replace(f.String(), "NodeInput", "NodeInput", 1) + ","
	}
	repeatedStringForInputs += "}"
	repeatedStringForOutputs := "[]*NodeOutput{"
	for _, f := range this.Outputs {
		repeatedStringForOutputs += strings.Replace(f.String(), "NodeOutput", "NodeOutput", 1) + ","
	}
	repeatedStringForOutputs += "}"
	repeatedStringForInitArgs := "[]*NodeInitArgs{"
	for _, f := range this.InitArgs {
		repeatedStringForInitArgs += strings.Replace(f.String(), "NodeInitArgs", "NodeInitArgs", 1) + ","
	}
	repeatedStringForInitArgs += "}"
	s := strings.Join([]string{`&Node{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Inputs:` + repeatedStringForInputs + `,`,
		`Outputs:` + repeatedStringForOutputs + `,`,
		`InitArgs:` + repeatedStringForInitArgs + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeInitArgs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeInitArgs{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DefaultValue:` + fmt.Sprintf("%v", this.DefaultValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeInitArgs_StringValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeInitArgs_StringValue{`,
		`StringValue:` + fmt.Sprintf("%v", this.StringValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeInitArgs_Int64Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeInitArgs_Int64Value{`,
		`Int64Value:` + fmt.Sprintf("%v", this.Int64Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeInitArgs_DoubleValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeInitArgs_DoubleValue{`,
		`DoubleValue:` + fmt.Sprintf("%v", this.DoubleValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeInitArgs_BoolValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeInitArgs_BoolValue{`,
		`BoolValue:` + fmt.Sprintf("%v", this.BoolValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeInitArgs_LambdaValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeInitArgs_LambdaValue{`,
		`LambdaValue:` + strings.Replace(fmt.Sprintf("%v", this.LambdaValue), "Lambda", "Lambda", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Lambda) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodes := "[]*Node{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(f.String(), "Node", "Node", 1) + ","
	}
	repeatedStringForNodes += "}"
	s := strings.Join([]string{`&Lambda{`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeInput) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeInput{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeInput_ParamValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeInput_ParamValue{`,
		`ParamValue:` + strings.Replace(fmt.Sprintf("%v", this.ParamValue), "NodeInput_ParamInput", "NodeInput_ParamInput", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeInput_ModelValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeInput_ModelValue{`,
		`ModelValue:` + strings.Replace(fmt.Sprintf("%v", this.ModelValue), "NodeInput_ModelInput", "NodeInput_ModelInput", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeInput_NodeOutputValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeInput_NodeOutputValue{`,
		`NodeOutputValue:` + strings.Replace(fmt.Sprintf("%v", this.NodeOutputValue), "NodeInput_NodeOutputRef", "NodeInput_NodeOutputRef", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeInput_NodeOutputRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeInput_NodeOutputRef{`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeInput_ModelInput) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeInput_ModelInput{`,
		`ModelName:` + fmt.Sprintf("%v", this.ModelName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeInput_ParamInput) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeInput_ParamInput{`,
		`ParamName:` + fmt.Sprintf("%v", this.ParamName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeOutput) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeOutput{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalParam) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalParam{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DefaultValue:` + fmt.Sprintf("%v", this.DefaultValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalParam_StringValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalParam_StringValue{`,
		`StringValue:` + fmt.Sprintf("%v", this.StringValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalParam_Int64Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalParam_Int64Value{`,
		`Int64Value:` + fmt.Sprintf("%v", this.Int64Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalParam_DoubleValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalParam_DoubleValue{`,
		`DoubleValue:` + fmt.Sprintf("%v", this.DoubleValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalParam_BoolValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalParam_BoolValue{`,
		`BoolValue:` + fmt.Sprintf("%v", this.BoolValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogicalPipeline) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGlobalParams := "[]*GlobalParam{"
	for _, f := range this.GlobalParams {
		repeatedStringForGlobalParams += strings.Replace(f.String(), "GlobalParam", "GlobalParam", 1) + ","
	}
	repeatedStringForGlobalParams += "}"
	repeatedStringForNodes := "[]*Node{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(f.String(), "Node", "Node", 1) + ","
	}
	repeatedStringForNodes += "}"
	s := strings.Join([]string{`&LogicalPipeline{`,
		`GlobalParams:` + repeatedStringForGlobalParams + `,`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *PipelineDeployment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PipelineDeployment{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`LogicalPipelineID:` + strings.Replace(fmt.Sprintf("%v", this.LogicalPipelineID), "UUID", "typespb.UUID", 1) + `,`,
		`FleetID:` + strings.Replace(fmt.Sprintf("%v", this.FleetID), "UUID", "typespb.UUID", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "PipelineDeploymentSpec", "PipelineDeploymentSpec", 1) + `,`,
		`State:` + strings.Replace(this.State.String(), "PipelineDeploymentState", "PipelineDeploymentState", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PipelineDeploymentSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PipelineDeploymentSpec{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PipelineDeploymentState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PipelineDeploymentState{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalPipeline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalPipeline{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`PipelineDeploymentID:` + strings.Replace(fmt.Sprintf("%v", this.PipelineDeploymentID), "UUID", "typespb.UUID", 1) + `,`,
		`DeviceID:` + strings.Replace(fmt.Sprintf("%v", this.DeviceID), "UUID", "typespb.UUID", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "PhysicalPipelineSpec", "PhysicalPipelineSpec", 1) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "PhysicalPipelineStatus", "PhysicalPipelineStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalPipelineSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalPipelineSpec{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalPipelineStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalPipelineStatus{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pipeline) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodes := "[]*PipelineNode{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(f.String(), "PipelineNode", "PipelineNode", 1) + ","
	}
	repeatedStringForNodes += "}"
	s := strings.Join([]string{`&Pipeline{`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *PipelineNode) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInputs := "[]*Port{"
	for _, f := range this.Inputs {
		repeatedStringForInputs += strings.Replace(f.String(), "Port", "Port", 1) + ","
	}
	repeatedStringForInputs += "}"
	repeatedStringForOutputs := "[]*Port{"
	for _, f := range this.Outputs {
		repeatedStringForOutputs += strings.Replace(f.String(), "Port", "Port", 1) + ","
	}
	repeatedStringForOutputs += "}"
	keysForAttr := make([]string, 0, len(this.Attr))
	for k, _ := range this.Attr {
		keysForAttr = append(keysForAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttr)
	mapStringForAttr := "map[string]string{"
	for _, k := range keysForAttr {
		mapStringForAttr += fmt.Sprintf("%v: %v,", k, this.Attr[k])
	}
	mapStringForAttr += "}"
	s := strings.Join([]string{`&PipelineNode{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Inputs:` + repeatedStringForInputs + `,`,
		`Outputs:` + repeatedStringForOutputs + `,`,
		`Attr:` + mapStringForAttr + `,`,
		`}`,
	}, "")
	return s
}
func (this *Port) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Port{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Net:` + fmt.Sprintf("%v", this.Net) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileResource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileResource{`,
		`FileID:` + strings.Replace(fmt.Sprintf("%v", this.FileID), "UUID", "typespb.UUID", 1) + `,`,
		`SizeBytes:` + fmt.Sprintf("%v", this.SizeBytes) + `,`,
		`Sha256Hash:` + fmt.Sprintf("%v", this.Sha256Hash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecutionSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForModelSpec := "[]*ModelSpec{"
	for _, f := range this.ModelSpec {
		repeatedStringForModelSpec += strings.Replace(f.String(), "ModelSpec", "ModelSpec", 1) + ","
	}
	repeatedStringForModelSpec += "}"
	s := strings.Join([]string{`&ExecutionSpec{`,
		`Graph:` + strings.Replace(fmt.Sprintf("%v", this.Graph), "CalculatorGraphConfig", "framework.CalculatorGraphConfig", 1) + `,`,
		`ModelSpec:` + repeatedStringForModelSpec + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelSpec{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ONNXBlobKey:` + fmt.Sprintf("%v", this.ONNXBlobKey) + `,`,
		`ONNXFile:` + strings.Replace(this.ONNXFile.String(), "FileResource", "FileResource", 1) + `,`,
		`Runtime:` + fmt.Sprintf("%v", this.Runtime) + `,`,
		`TensorRTSpec:` + strings.Replace(this.TensorRTSpec.String(), "TensorRTModelSpec", "TensorRTModelSpec", 1) + `,`,
		`OpenVINOSpec:` + strings.Replace(this.OpenVINOSpec.String(), "OpenVINOModelSpec", "OpenVINOModelSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TensorRTModelSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOptimizationProfile := "[]*TensorRTOptimizationProfile{"
	for _, f := range this.OptimizationProfile {
		repeatedStringForOptimizationProfile += strings.Replace(f.String(), "TensorRTOptimizationProfile", "TensorRTOptimizationProfile", 1) + ","
	}
	repeatedStringForOptimizationProfile += "}"
	s := strings.Join([]string{`&TensorRTModelSpec{`,
		`OptimizationProfile:` + repeatedStringForOptimizationProfile + `,`,
		`EngineBlobKey:` + fmt.Sprintf("%v", this.EngineBlobKey) + `,`,
		`MemPoolLimits:` + strings.Replace(this.MemPoolLimits.String(), "TensorRTMemPoolLimits", "TensorRTMemPoolLimits", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TensorRTOptimizationProfile) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTensorShapeRange := "[]*TensorRTTensorShapeRange{"
	for _, f := range this.TensorShapeRange {
		repeatedStringForTensorShapeRange += strings.Replace(f.String(), "TensorRTTensorShapeRange", "TensorRTTensorShapeRange", 1) + ","
	}
	repeatedStringForTensorShapeRange += "}"
	s := strings.Join([]string{`&TensorRTOptimizationProfile{`,
		`TensorShapeRange:` + repeatedStringForTensorShapeRange + `,`,
		`}`,
	}, "")
	return s
}
func (this *TensorRTTensorShapeRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TensorRTTensorShapeRange{`,
		`TensorName:` + fmt.Sprintf("%v", this.TensorName) + `,`,
		`Dim:` + fmt.Sprintf("%v", this.Dim) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TensorRTMemPoolLimits) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TensorRTMemPoolLimits{`,
		`Workspace:` + fmt.Sprintf("%v", this.Workspace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenVINOModelSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInputShape := "[]*OpenVINOModelSpec_TensorShape{"
	for _, f := range this.InputShape {
		repeatedStringForInputShape += strings.Replace(fmt.Sprintf("%v", f), "OpenVINOModelSpec_TensorShape", "OpenVINOModelSpec_TensorShape", 1) + ","
	}
	repeatedStringForInputShape += "}"
	s := strings.Join([]string{`&OpenVINOModelSpec{`,
		`InputShape:` + repeatedStringForInputShape + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenVINOModelSpec_TensorShape) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenVINOModelSpec_TensorShape{`,
		`Dim:` + fmt.Sprintf("%v", this.Dim) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringModelExec(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= LogicalPipelineNodeKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &NodeInput{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, &NodeOutput{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitArgs = append(m.InitArgs, &NodeInitArgs{})
			if err := m.InitArgs[len(m.InitArgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInitArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInitArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInitArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultValue = &NodeInitArgs_StringValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Value", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultValue = &NodeInitArgs_Int64Value{v}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DefaultValue = &NodeInitArgs_DoubleValue{float64(math.Float64frombits(v))}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.DefaultValue = &NodeInitArgs_BoolValue{b}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LambdaValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Lambda{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultValue = &NodeInitArgs_LambdaValue{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Lambda) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lambda: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lambda: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeInput_ParamInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &NodeInput_ParamValue{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeInput_ModelInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &NodeInput_ModelValue{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeOutputValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeInput_NodeOutputRef{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &NodeInput_NodeOutputValue{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInput_NodeOutputRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeOutputRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeOutputRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			m.NodeName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeName |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInput_ModelInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInput_ParamInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultValue = &GlobalParam_StringValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Value", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultValue = &GlobalParam_Int64Value{v}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DefaultValue = &GlobalParam_DoubleValue{float64(math.Float64frombits(v))}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.DefaultValue = &GlobalParam_BoolValue{b}
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicalPipeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicalPipeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicalPipeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalParams = append(m.GlobalParams, &GlobalParam{})
			if err := m.GlobalParams[len(m.GlobalParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PipelineDeployment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipelineDeployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipelineDeployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalPipelineID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogicalPipelineID == nil {
				m.LogicalPipelineID = &typespb.UUID{}
			}
			if err := m.LogicalPipelineID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FleetID == nil {
				m.FleetID = &typespb.UUID{}
			}
			if err := m.FleetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &PipelineDeploymentSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &PipelineDeploymentState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PipelineDeploymentSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipelineDeploymentSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipelineDeploymentSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PipelineState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PipelineDeploymentState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipelineDeploymentState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipelineDeploymentState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PipelineState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhysicalPipeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhysicalPipeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhysicalPipeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PipelineDeploymentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PipelineDeploymentID == nil {
				m.PipelineDeploymentID = &typespb.UUID{}
			}
			if err := m.PipelineDeploymentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceID == nil {
				m.DeviceID = &typespb.UUID{}
			}
			if err := m.DeviceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &PhysicalPipelineSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &PhysicalPipelineStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhysicalPipelineSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhysicalPipelineSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhysicalPipelineSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PipelineState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhysicalPipelineStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhysicalPipelineStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhysicalPipelineStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PipelineState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pipeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pipeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pipeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &PipelineNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PipelineNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipelineNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipelineNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &Port{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, &Port{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModelExec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModelExec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthModelExec
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthModelExec
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModelExec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthModelExec
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthModelExec
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipModelExec(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthModelExec
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attr[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Port) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Port: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Port: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Net", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Net = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileID == nil {
				m.FileID = &typespb.UUID{}
			}
			if err := m.FileID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeBytes", wireType)
			}
			m.SizeBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha256Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Graph", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Graph == nil {
				m.Graph = &framework.CalculatorGraphConfig{}
			}
			if err := m.Graph.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelSpec = append(m.ModelSpec, &ModelSpec{})
			if err := m.ModelSpec[len(m.ModelSpec)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ONNXBlobKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ONNXBlobKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ONNXFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ONNXFile == nil {
				m.ONNXFile = &FileResource{}
			}
			if err := m.ONNXFile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorRTSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TensorRTSpec == nil {
				m.TensorRTSpec = &TensorRTModelSpec{}
			}
			if err := m.TensorRTSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenVINOSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OpenVINOSpec == nil {
				m.OpenVINOSpec = &OpenVINOModelSpec{}
			}
			if err := m.OpenVINOSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TensorRTModelSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorRTModelSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorRTModelSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizationProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OptimizationProfile = append(m.OptimizationProfile, &TensorRTOptimizationProfile{})
			if err := m.OptimizationProfile[len(m.OptimizationProfile)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngineBlobKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EngineBlobKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemPoolLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemPoolLimits == nil {
				m.MemPoolLimits = &TensorRTMemPoolLimits{}
			}
			if err := m.MemPoolLimits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TensorRTOptimizationProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorRTOptimizationProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorRTOptimizationProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorShapeRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TensorShapeRange = append(m.TensorShapeRange, &TensorRTTensorShapeRange{})
			if err := m.TensorShapeRange[len(m.TensorShapeRange)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TensorRTTensorShapeRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorRTTensorShapeRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorRTTensorShapeRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TensorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModelExec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dim = append(m.Dim, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModelExec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModelExec
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModelExec
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Dim) == 0 {
					m.Dim = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModelExec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dim = append(m.Dim, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dim", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TensorRTMemPoolLimits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorRTMemPoolLimits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorRTMemPoolLimits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			m.Workspace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Workspace |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenVINOModelSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenVINOModelSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenVINOModelSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputShape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputShape = append(m.InputShape, &OpenVINOModelSpec_TensorShape{})
			if err := m.InputShape[len(m.InputShape)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenVINOModelSpec_TensorShape) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorShape: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorShape: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModelExec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dim = append(m.Dim, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModelExec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModelExec
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModelExec
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Dim) == 0 {
					m.Dim = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModelExec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dim = append(m.Dim, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dim", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModelExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModelExec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModelExec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModelExec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModelExec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModelExec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModelExec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModelExec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModelExec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModelExec = fmt.Errorf("proto: unexpected end of group")
)
