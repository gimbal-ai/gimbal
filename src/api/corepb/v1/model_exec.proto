/*
 * Copyright Â© 2023- Gimlet Labs, Inc.
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Gimlet Labs, Inc. and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Gimlet Labs, Inc. and its suppliers and
 * may be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law. Dissemination
 * of this information or reproduction of this material is strictly
 * forbidden unless prior written permission is obtained from
 * Gimlet Labs, Inc.
 *
 * SPDX-License-Identifier: Proprietary
 */

syntax = "proto3";

package gml.internal.api.core.v1;

option go_package = "gimletlabs.ai/gimlet/src/api/corepb/v1;corepb";

import "gogoproto/gogo.proto";
import "mediapipe/framework/calculator.proto";
import "src/common/typespb/uuid.proto";

// Pipeline is a high-level representation of an execution graph.
message Pipeline {
  // List of nodes in the pipeline.
  // Each node defines its input and output ports.
  // To connect nodes, the same net name should set for the relevant ports.
  repeated PipelineNode nodes = 2;
}

// PipelineNode is a node in an execution pipeline.
message PipelineNode {
  // A unique ID used to reference this node.
  uint64 id = 1;
  string type = 2;
  repeated Port inputs = 3;
  repeated Port outputs = 4;
}

// A port has a name, and a net.
// The port is a logical name for the input or output.
// The net defines how the port is connected to other ports of other nodes (common net names on
// ports throughout the graph are connected).
message Port {
  string name = 1;
  string net = 2;
}

// Should this be defined in a different proto file?
message FileResource {
  // The ID of the file to fetch.
  gml.types.UUID file_id = 1;
  // The size of the model, in bytes.
  uint64 size_bytes = 2;
  // The sha256hash of the model file.
  string sha256_hash = 3;
}

// ExecutionSpec represents a deployment that the GEM should execute.
message ExecutionSpec {
  mediapipe.CalculatorGraphConfig graph = 1;

  // Any models referenced by any nodes in the graph above need to have a model spec.
  repeated ModelSpec model_spec = 2;
}

// ModelSpec defines how to prepare the model.
// The current spec definitions are temporary and subject to change significantly.
message ModelSpec {
  // TODO(oazizi): onnx_blob_key is deprecated and to be replaced by onnx_file.
  string onnx_blob_key = 1 [ (gogoproto.customname) = "ONNXBlobKey" ];
  FileResource onnx_file = 2 [ (gogoproto.customname) = "ONNXFile" ];

  // The preferred runtime for the execution.
  string runtime = 50;

  // Plugin specs.
  // TensorRT specific specifications.
  TensorRTModelSpec tensorrt_spec = 100 [ (gogoproto.customname) = "TensorRTSpec" ];
  // OpenVINO specific specifications.
  OpenVINOModelSpec openvino_spec = 101 [ (gogoproto.customname) = "OpenVINOSpec" ];
}

// TensorRTModelSpec defines TensorRT specific parameters for building a TensorRT engine.
message TensorRTModelSpec {
  repeated TensorRTOptimizationProfile optimization_profile = 1;

  // BlobStore key for a cached version of the engine. If not empty, the model builder will attempt
  // to load the engine from the cached blob, if that fails it will build the engine and then insert
  // the built engine into the BlobStore with this key.
  string engine_blob_key = 2;
}

// TensorRTOptimizationProfile defines TensorRT specific parameters to aid TensorRT profiling based
// optimization.
message TensorRTOptimizationProfile {
  repeated TensorRTTensorShapeRange tensor_shape_range = 1;
}

// TensorRTTensorShapeRange represents the range of shapes that a tensor is allowed to take.
// TensorRT uses this to aid in optimization.
message TensorRTTensorShapeRange {
  // For now we explicitly set the tensor shape instead of specifying a min/opt/max range.
  string tensor_name = 1;
  repeated int32 dim = 2;
}

message OpenVINOModelSpec {
  message TensorShape {
    repeated int32 dim = 1;
  }
  repeated TensorShape input_shape = 1;
}
