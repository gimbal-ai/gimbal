/*
 * Copyright Â© 2023- Gimlet Labs, Inc.
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Gimlet Labs, Inc. and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Gimlet Labs, Inc. and its suppliers and
 * may be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law. Dissemination
 * of this information or reproduction of this material is strictly
 * forbidden unless prior written permission is obtained from
 * Gimlet Labs, Inc.
 *
 * SPDX-License-Identifier: Proprietary
 */

syntax = "proto3";

package gml.internal.api.core.v1;

option go_package = "gimletlabs.ai/gimlet/src/api/corepb/v1;corepb";

import "mediapipe/framework/calculator.proto";
import "src/common/typespb/dag.proto";
import "src/common/typespb/uuid.proto";

// Pipeline is a high-level representation of an execution graph.
message Pipeline {
  // The DAG which stores the connection information.
  gml.types.DAG dag = 1;

  // List of nodes referenced by the DAG.
  repeated PipelineNode nodes = 2;
}

// PipelineNode is a node in an execution pipeline.
message PipelineNode {
  // A unique ID used to reference this node.
  uint64 id = 1;

  oneof node {
    PipelineSource source = 100;
    PipelineSink sink = 101;
    PipelineModel model = 102;
  }
}

message PipelineSink {}

message PipelineSource {}

message PipelineModel {}

// ExecutionGraph represents a pipeline deployment that the GEM should execute.
message ExecutionGraph {
  ExecutionSpec execution_spec = 1;
  repeated ModelSpec model_specs = 2;
  message ModelMetadata {
    // The ID of the model file to fetch.
    gml.types.UUID model_file_id = 1;
    // The size of the model, in bytes.
    uint64 size_bytes = 2;
    // The sha256hash of the model file.
    string sha256_hash = 3;
  }
  repeated ModelMetadata model_metadata = 3;
  // The preferred runtime for the execution.
  string runtime = 4;
}

// ExecutionSpec defines what models/processing GEM should run, where to send the output, etc. The
// current spec definitions are temporary and subject to change significantly.
message ExecutionSpec {
  // Mediapipe graph to run.
  mediapipe.CalculatorGraphConfig graph = 1;
}

// ModelSpec defines how to prepare the model. The current spec definitions are temporary and
// subject to change significantly.
message ModelSpec {
  string onnx_blob_key = 1;

  // Plugin specs.
  // TensorRT specific specifications.
  TensorRTModelSpec tensorrt_spec = 100;
}

// TensorRTModelSpec defines TensorRT specific parameters for building a TensorRT engine.
message TensorRTModelSpec {
  repeated TensorRTOptimizationProfile optimization_profile = 1;

  // BlobStore key for a cached version of the engine. If not empty, the model builder will attempt
  // to load the engine from the cached blob, if that fails it will build the engine and then insert
  // the built engine into the BlobStore with this key.
  string engine_blob_key = 2;
}

// TensorRTOptimizationProfile defines TensorRT specific parameters to aid TensorRT profiling based
// optimization.
message TensorRTOptimizationProfile {
  repeated TensorRTTensorShapeRange tensor_shape_range = 1;
}

// TensorRTTensorShapeRange represents the range of shapes that a tensor is allowed to take.
// TensorRT uses this to aid in optimization.
message TensorRTTensorShapeRange {
  // For now we explicitly set the tensor shape instead of specifying a min/opt/max range.
  string tensor_name = 1;
  repeated int32 dim = 2;
}
