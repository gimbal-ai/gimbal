// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/common/typespb/status.proto

package typespb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Code int32

const (
	CODE_OK                   Code = 0
	CODE_CANCELLED            Code = 1
	CODE_UNKNOWN              Code = 2
	CODE_INVALID_ARGUMENT     Code = 3
	CODE_DEADLINE_EXCEEDED    Code = 4
	CODE_NOT_FOUND            Code = 5
	CODE_ALREADY_EXISTS       Code = 6
	CODE_PERMISSION_DENIED    Code = 7
	CODE_UNAUTHENTICATED      Code = 8
	CODE_INTERNAL             Code = 9
	CODE_UNIMPLEMENTED        Code = 10
	CODE_RESOURCE_UNAVAILABLE Code = 11
	CODE_SYSTEM               Code = 12
	CODE_FAILED_PRECONDITION  Code = 13
	CODE_DO_NOT_USE           Code = 100
)

var Code_name = map[int32]string{
	0:   "CODE_OK",
	1:   "CODE_CANCELLED",
	2:   "CODE_UNKNOWN",
	3:   "CODE_INVALID_ARGUMENT",
	4:   "CODE_DEADLINE_EXCEEDED",
	5:   "CODE_NOT_FOUND",
	6:   "CODE_ALREADY_EXISTS",
	7:   "CODE_PERMISSION_DENIED",
	8:   "CODE_UNAUTHENTICATED",
	9:   "CODE_INTERNAL",
	10:  "CODE_UNIMPLEMENTED",
	11:  "CODE_RESOURCE_UNAVAILABLE",
	12:  "CODE_SYSTEM",
	13:  "CODE_FAILED_PRECONDITION",
	100: "CODE_DO_NOT_USE",
}

var Code_value = map[string]int32{
	"CODE_OK":                   0,
	"CODE_CANCELLED":            1,
	"CODE_UNKNOWN":              2,
	"CODE_INVALID_ARGUMENT":     3,
	"CODE_DEADLINE_EXCEEDED":    4,
	"CODE_NOT_FOUND":            5,
	"CODE_ALREADY_EXISTS":       6,
	"CODE_PERMISSION_DENIED":    7,
	"CODE_UNAUTHENTICATED":      8,
	"CODE_INTERNAL":             9,
	"CODE_UNIMPLEMENTED":        10,
	"CODE_RESOURCE_UNAVAILABLE": 11,
	"CODE_SYSTEM":               12,
	"CODE_FAILED_PRECONDITION":  13,
	"CODE_DO_NOT_USE":           100,
}

func (Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_03f5080451374242, []int{0}
}

type Status struct {
	ErrCode Code       `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3,enum=gml.types.Code" json:"err_code,omitempty"`
	Msg     string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Context *types.Any `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *Status) Reset()      { *m = Status{} }
func (*Status) ProtoMessage() {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_03f5080451374242, []int{0}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetErrCode() Code {
	if m != nil {
		return m.ErrCode
	}
	return CODE_OK
}

func (m *Status) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Status) GetContext() *types.Any {
	if m != nil {
		return m.Context
	}
	return nil
}

func init() {
	proto.RegisterEnum("gml.types.Code", Code_name, Code_value)
	proto.RegisterType((*Status)(nil), "gml.types.Status")
}

func init() { proto.RegisterFile("src/common/typespb/status.proto", fileDescriptor_03f5080451374242) }

var fileDescriptor_03f5080451374242 = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0xbd, 0x6e, 0xdb, 0x3c,
	0x14, 0x15, 0x93, 0x7c, 0x76, 0x4c, 0x27, 0x31, 0x3f, 0x26, 0x4d, 0xed, 0xa0, 0x65, 0x8d, 0x4e,
	0x46, 0x06, 0x09, 0x48, 0xc7, 0x4e, 0x8c, 0x78, 0xd3, 0x12, 0x91, 0x29, 0x43, 0x3f, 0x69, 0xd2,
	0x45, 0xf0, 0x8f, 0x6a, 0x04, 0xb0, 0x2d, 0x43, 0x52, 0x8a, 0x7a, 0xeb, 0x23, 0xf4, 0x31, 0xfa,
	0x28, 0x1d, 0x3d, 0x66, 0xac, 0xe5, 0xa5, 0x63, 0x1e, 0xa1, 0x30, 0xed, 0x78, 0xe9, 0xc4, 0x7b,
	0xcf, 0x39, 0x3c, 0xf7, 0x5c, 0x90, 0xf8, 0x4d, 0x96, 0xf6, 0xad, 0x7e, 0x32, 0x1e, 0x27, 0x13,
	0x2b, 0x9f, 0x4d, 0xe3, 0x6c, 0xda, 0xb3, 0xb2, 0xbc, 0x9b, 0x3f, 0x64, 0xe6, 0x34, 0x4d, 0xf2,
	0x84, 0x56, 0x86, 0xe3, 0x91, 0xa9, 0x99, 0xb3, 0xc6, 0x30, 0x49, 0x86, 0xa3, 0xd8, 0xd2, 0x44,
	0xef, 0xe1, 0x8b, 0xd5, 0x9d, 0xcc, 0xd6, 0xaa, 0xb7, 0x5f, 0x71, 0xc9, 0xd7, 0xb7, 0xe8, 0x39,
	0xde, 0x8f, 0xd3, 0x34, 0xea, 0x27, 0x83, 0xb8, 0x8e, 0x9a, 0xa8, 0x75, 0x74, 0x51, 0x33, 0xb7,
	0x16, 0xa6, 0x9d, 0x0c, 0x62, 0xaf, 0x1c, 0xa7, 0xe9, 0xaa, 0xa0, 0x04, 0xef, 0x8e, 0xb3, 0x61,
	0x7d, 0xa7, 0x89, 0x5a, 0x15, 0x6f, 0x55, 0x52, 0x13, 0x97, 0xfb, 0xc9, 0x24, 0x8f, 0xbf, 0xe5,
	0xf5, 0xdd, 0x26, 0x6a, 0x55, 0x2f, 0x4e, 0xcc, 0xf5, 0x50, 0xf3, 0x79, 0xa8, 0xc9, 0x27, 0x33,
	0xef, 0x59, 0x74, 0xbe, 0xd8, 0xc1, 0x7b, 0xda, 0xaa, 0x8a, 0xcb, 0xb6, 0x2b, 0x20, 0x72, 0xaf,
	0x89, 0x41, 0x29, 0x3e, 0xd2, 0x8d, 0xcd, 0x95, 0x0d, 0x8e, 0x03, 0x82, 0x20, 0x4a, 0xf0, 0x81,
	0xc6, 0x42, 0x75, 0xad, 0xdc, 0x4f, 0x8a, 0xec, 0xd0, 0x06, 0x7e, 0xa1, 0x11, 0xa9, 0x6e, 0xb8,
	0x23, 0x45, 0xc4, 0xbd, 0x0f, 0x61, 0x1b, 0x54, 0x40, 0x76, 0xe9, 0x19, 0x3e, 0xd5, 0x94, 0x00,
	0x2e, 0x1c, 0xa9, 0x20, 0x82, 0x5b, 0x1b, 0x40, 0x80, 0x20, 0x7b, 0x5b, 0x73, 0xe5, 0x06, 0xd1,
	0x95, 0x1b, 0x2a, 0x41, 0xfe, 0xa3, 0x2f, 0xf1, 0xb1, 0xc6, 0xb8, 0xe3, 0x01, 0x17, 0x77, 0x11,
	0xdc, 0x4a, 0x3f, 0xf0, 0x49, 0x69, 0x6b, 0xd4, 0x01, 0xaf, 0x2d, 0x7d, 0x5f, 0xba, 0x2a, 0x12,
	0xa0, 0x24, 0x08, 0x52, 0xa6, 0x75, 0x7c, 0xb2, 0x49, 0xc4, 0xc3, 0xe0, 0x23, 0xa8, 0x40, 0xda,
	0x3c, 0x00, 0x41, 0xf6, 0xe9, 0xff, 0xf8, 0x70, 0x93, 0x2c, 0x00, 0x4f, 0x71, 0x87, 0x54, 0xe8,
	0x29, 0xa6, 0x1b, 0xb1, 0x6c, 0x77, 0x1c, 0x58, 0xe5, 0x04, 0x41, 0x30, 0x7d, 0x8d, 0x1b, 0x1a,
	0xf7, 0xc0, 0x77, 0x43, 0xcf, 0xd6, 0x6e, 0x37, 0x5c, 0x3a, 0xfc, 0xd2, 0x01, 0x52, 0xa5, 0x35,
	0x5c, 0xd5, 0xb4, 0x7f, 0xe7, 0x07, 0xd0, 0x26, 0x07, 0xf4, 0x15, 0xae, 0x6b, 0xe0, 0x8a, 0x4b,
	0x07, 0x44, 0xd4, 0xf1, 0xc0, 0x76, 0x95, 0x90, 0x81, 0x74, 0x15, 0x39, 0xa4, 0xc7, 0xb8, 0xb6,
	0xde, 0xdb, 0xd5, 0xeb, 0x85, 0x3e, 0x90, 0xc1, 0x65, 0x3c, 0x5f, 0x30, 0xe3, 0x71, 0xc1, 0x8c,
	0xa7, 0x05, 0x43, 0xdf, 0x0b, 0x86, 0x7e, 0x16, 0x0c, 0xfd, 0x2a, 0x18, 0x9a, 0x17, 0x0c, 0xfd,
	0x2e, 0x18, 0xfa, 0x53, 0x30, 0xe3, 0xa9, 0x60, 0xe8, 0xc7, 0x92, 0x19, 0xf3, 0x25, 0x33, 0x1e,
	0x97, 0xcc, 0xf8, 0x6c, 0x0d, 0xef, 0xc7, 0xa3, 0x38, 0x1f, 0x75, 0x7b, 0x99, 0xd9, 0xbd, 0xdf,
	0x74, 0xd6, 0xbf, 0xbf, 0xed, 0xfd, 0xe6, 0xec, 0x95, 0xf4, 0x0b, 0xbf, 0xfb, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x5b, 0x59, 0x78, 0x05, 0x92, 0x02, 0x00, 0x00,
}

func (x Code) String() string {
	s, ok := Code_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Status) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Status)
	if !ok {
		that2, ok := that.(Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ErrCode != that1.ErrCode {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if !this.Context.Equal(that1.Context) {
		return false
	}
	return true
}
func (this *Status) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&typespb.Status{")
	s = append(s, "ErrCode: "+fmt.Sprintf("%#v", this.ErrCode)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStatus(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Context != nil {
		{
			size, err := m.Context.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.ErrCode != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.ErrCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStatus(dAtA []byte, offset int, v uint64) int {
	offset -= sovStatus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovStatus(uint64(m.ErrCode))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.Context != nil {
		l = m.Context.Size()
		n += 1 + l + sovStatus(uint64(l))
	}
	return n
}

func sovStatus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStatus(x uint64) (n int) {
	return sovStatus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Status{`,
		`ErrCode:` + fmt.Sprintf("%v", this.ErrCode) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStatus(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Context == nil {
				m.Context = &types.Any{}
			}
			if err := m.Context.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStatus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStatus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStatus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStatus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStatus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStatus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStatus = fmt.Errorf("proto: unexpected end of group")
)
