// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/controlplane/directory/directorypb/v1/directory.proto

package directorypb

import (
	context "context"
	fmt "fmt"
	typespb "gimletlabs.ai/gimlet/src/common/typespb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserInfo struct {
	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	Email            string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty" db:"email"`
	DisplayPicture   string `protobuf:"bytes,3,opt,name=display_picture,json=displayPicture,proto3" json:"display_picture,omitempty"`
	IdentityProvider string `protobuf:"bytes,4,opt,name=identity_provider,json=identityProvider,proto3" json:"identity_provider,omitempty"`
	AuthProviderID   string `protobuf:"bytes,5,opt,name=auth_provider_id,json=authProviderId,proto3" json:"auth_provider_id,omitempty" db:"auth_provider_id"`
}

func (m *UserInfo) Reset()      { *m = UserInfo{} }
func (*UserInfo) ProtoMessage() {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{0}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserInfo) GetDisplayPicture() string {
	if m != nil {
		return m.DisplayPicture
	}
	return ""
}

func (m *UserInfo) GetIdentityProvider() string {
	if m != nil {
		return m.IdentityProvider
	}
	return ""
}

func (m *UserInfo) GetAuthProviderID() string {
	if m != nil {
		return m.AuthProviderID
	}
	return ""
}

type CreateUserRequest struct {
	UserInfo *UserInfo `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
}

func (m *CreateUserRequest) Reset()      { *m = CreateUserRequest{} }
func (*CreateUserRequest) ProtoMessage() {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{1}
}
func (m *CreateUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUserRequest.Merge(m, src)
}
func (m *CreateUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUserRequest proto.InternalMessageInfo

func (m *CreateUserRequest) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type CreateUserResponse struct {
	ID *typespb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CreateUserResponse) Reset()      { *m = CreateUserResponse{} }
func (*CreateUserResponse) ProtoMessage() {}
func (*CreateUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{2}
}
func (m *CreateUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUserResponse.Merge(m, src)
}
func (m *CreateUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUserResponse proto.InternalMessageInfo

func (m *CreateUserResponse) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

type GetUserRequest struct {
	ID *typespb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetUserRequest) Reset()      { *m = GetUserRequest{} }
func (*GetUserRequest) ProtoMessage() {}
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{3}
}
func (m *GetUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserRequest.Merge(m, src)
}
func (m *GetUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserRequest proto.InternalMessageInfo

func (m *GetUserRequest) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

type GetUserResponse struct {
	ID       *typespb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserInfo *UserInfo     `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
}

func (m *GetUserResponse) Reset()      { *m = GetUserResponse{} }
func (*GetUserResponse) ProtoMessage() {}
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{4}
}
func (m *GetUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserResponse.Merge(m, src)
}
func (m *GetUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserResponse proto.InternalMessageInfo

func (m *GetUserResponse) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *GetUserResponse) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type UpdateUserRequest struct {
	ID             *typespb.UUID      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayPicture *types.StringValue `protobuf:"bytes,2,opt,name=display_picture,json=displayPicture,proto3" json:"display_picture,omitempty"`
}

func (m *UpdateUserRequest) Reset()      { *m = UpdateUserRequest{} }
func (*UpdateUserRequest) ProtoMessage() {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{5}
}
func (m *UpdateUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserRequest.Merge(m, src)
}
func (m *UpdateUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserRequest proto.InternalMessageInfo

func (m *UpdateUserRequest) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *UpdateUserRequest) GetDisplayPicture() *types.StringValue {
	if m != nil {
		return m.DisplayPicture
	}
	return nil
}

type UpdateUserResponse struct {
}

func (m *UpdateUserResponse) Reset()      { *m = UpdateUserResponse{} }
func (*UpdateUserResponse) ProtoMessage() {}
func (*UpdateUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{6}
}
func (m *UpdateUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserResponse.Merge(m, src)
}
func (m *UpdateUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserResponse proto.InternalMessageInfo

type DeleteUserRequest struct {
	ID *typespb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteUserRequest) Reset()      { *m = DeleteUserRequest{} }
func (*DeleteUserRequest) ProtoMessage() {}
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{7}
}
func (m *DeleteUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteUserRequest.Merge(m, src)
}
func (m *DeleteUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteUserRequest proto.InternalMessageInfo

func (m *DeleteUserRequest) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

type DeleteUserResponse struct {
}

func (m *DeleteUserResponse) Reset()      { *m = DeleteUserResponse{} }
func (*DeleteUserResponse) ProtoMessage() {}
func (*DeleteUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{8}
}
func (m *DeleteUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteUserResponse.Merge(m, src)
}
func (m *DeleteUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteUserResponse proto.InternalMessageInfo

type CreateOrgRequest struct {
	OrgInfo *OrgInfo `protobuf:"bytes,1,opt,name=org_info,json=orgInfo,proto3" json:"org_info,omitempty"`
}

func (m *CreateOrgRequest) Reset()      { *m = CreateOrgRequest{} }
func (*CreateOrgRequest) ProtoMessage() {}
func (*CreateOrgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{9}
}
func (m *CreateOrgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrgRequest.Merge(m, src)
}
func (m *CreateOrgRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrgRequest proto.InternalMessageInfo

func (m *CreateOrgRequest) GetOrgInfo() *OrgInfo {
	if m != nil {
		return m.OrgInfo
	}
	return nil
}

type CreateOrgResponse struct {
	ID *typespb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CreateOrgResponse) Reset()      { *m = CreateOrgResponse{} }
func (*CreateOrgResponse) ProtoMessage() {}
func (*CreateOrgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{10}
}
func (m *CreateOrgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrgResponse.Merge(m, src)
}
func (m *CreateOrgResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrgResponse proto.InternalMessageInfo

func (m *CreateOrgResponse) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

type GetOrgRequest struct {
	ID *typespb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetOrgRequest) Reset()      { *m = GetOrgRequest{} }
func (*GetOrgRequest) ProtoMessage() {}
func (*GetOrgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{11}
}
func (m *GetOrgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrgRequest.Merge(m, src)
}
func (m *GetOrgRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrgRequest proto.InternalMessageInfo

func (m *GetOrgRequest) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

type OrgInfo struct {
	OrgName *typespb.UUID `protobuf:"bytes,1,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
}

func (m *OrgInfo) Reset()      { *m = OrgInfo{} }
func (*OrgInfo) ProtoMessage() {}
func (*OrgInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{12}
}
func (m *OrgInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrgInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrgInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrgInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrgInfo.Merge(m, src)
}
func (m *OrgInfo) XXX_Size() int {
	return m.Size()
}
func (m *OrgInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OrgInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OrgInfo proto.InternalMessageInfo

func (m *OrgInfo) GetOrgName() *typespb.UUID {
	if m != nil {
		return m.OrgName
	}
	return nil
}

type GetOrgResponse struct {
	ID      *typespb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgInfo *OrgInfo      `protobuf:"bytes,2,opt,name=org_info,json=orgInfo,proto3" json:"org_info,omitempty"`
}

func (m *GetOrgResponse) Reset()      { *m = GetOrgResponse{} }
func (*GetOrgResponse) ProtoMessage() {}
func (*GetOrgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{13}
}
func (m *GetOrgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrgResponse.Merge(m, src)
}
func (m *GetOrgResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOrgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrgResponse proto.InternalMessageInfo

func (m *GetOrgResponse) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *GetOrgResponse) GetOrgInfo() *OrgInfo {
	if m != nil {
		return m.OrgInfo
	}
	return nil
}

type DeleteOrgRequest struct {
	ID *typespb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteOrgRequest) Reset()      { *m = DeleteOrgRequest{} }
func (*DeleteOrgRequest) ProtoMessage() {}
func (*DeleteOrgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{14}
}
func (m *DeleteOrgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteOrgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteOrgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteOrgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOrgRequest.Merge(m, src)
}
func (m *DeleteOrgRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteOrgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOrgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOrgRequest proto.InternalMessageInfo

func (m *DeleteOrgRequest) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

type DeleteOrgResponse struct {
}

func (m *DeleteOrgResponse) Reset()      { *m = DeleteOrgResponse{} }
func (*DeleteOrgResponse) ProtoMessage() {}
func (*DeleteOrgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{15}
}
func (m *DeleteOrgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteOrgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteOrgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteOrgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOrgResponse.Merge(m, src)
}
func (m *DeleteOrgResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteOrgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOrgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOrgResponse proto.InternalMessageInfo

type AddUserToOrgRequest struct {
	UserID *typespb.UUID `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrgID  *typespb.UUID `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *AddUserToOrgRequest) Reset()      { *m = AddUserToOrgRequest{} }
func (*AddUserToOrgRequest) ProtoMessage() {}
func (*AddUserToOrgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{16}
}
func (m *AddUserToOrgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddUserToOrgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddUserToOrgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddUserToOrgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddUserToOrgRequest.Merge(m, src)
}
func (m *AddUserToOrgRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddUserToOrgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddUserToOrgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddUserToOrgRequest proto.InternalMessageInfo

func (m *AddUserToOrgRequest) GetUserID() *typespb.UUID {
	if m != nil {
		return m.UserID
	}
	return nil
}

func (m *AddUserToOrgRequest) GetOrgID() *typespb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type AddUserToOrgResponse struct {
}

func (m *AddUserToOrgResponse) Reset()      { *m = AddUserToOrgResponse{} }
func (*AddUserToOrgResponse) ProtoMessage() {}
func (*AddUserToOrgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{17}
}
func (m *AddUserToOrgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddUserToOrgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddUserToOrgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddUserToOrgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddUserToOrgResponse.Merge(m, src)
}
func (m *AddUserToOrgResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddUserToOrgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddUserToOrgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddUserToOrgResponse proto.InternalMessageInfo

type RemoveUserFromOrgRequest struct {
	UserID *typespb.UUID `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrgID  *typespb.UUID `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *RemoveUserFromOrgRequest) Reset()      { *m = RemoveUserFromOrgRequest{} }
func (*RemoveUserFromOrgRequest) ProtoMessage() {}
func (*RemoveUserFromOrgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{18}
}
func (m *RemoveUserFromOrgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveUserFromOrgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveUserFromOrgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveUserFromOrgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveUserFromOrgRequest.Merge(m, src)
}
func (m *RemoveUserFromOrgRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveUserFromOrgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveUserFromOrgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveUserFromOrgRequest proto.InternalMessageInfo

func (m *RemoveUserFromOrgRequest) GetUserID() *typespb.UUID {
	if m != nil {
		return m.UserID
	}
	return nil
}

func (m *RemoveUserFromOrgRequest) GetOrgID() *typespb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type RemoveUserFromOrgResponse struct {
}

func (m *RemoveUserFromOrgResponse) Reset()      { *m = RemoveUserFromOrgResponse{} }
func (*RemoveUserFromOrgResponse) ProtoMessage() {}
func (*RemoveUserFromOrgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{19}
}
func (m *RemoveUserFromOrgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveUserFromOrgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveUserFromOrgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveUserFromOrgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveUserFromOrgResponse.Merge(m, src)
}
func (m *RemoveUserFromOrgResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveUserFromOrgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveUserFromOrgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveUserFromOrgResponse proto.InternalMessageInfo

type GetOrgsForUserRequest struct {
	UserID *typespb.UUID `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *GetOrgsForUserRequest) Reset()      { *m = GetOrgsForUserRequest{} }
func (*GetOrgsForUserRequest) ProtoMessage() {}
func (*GetOrgsForUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{20}
}
func (m *GetOrgsForUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrgsForUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrgsForUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrgsForUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrgsForUserRequest.Merge(m, src)
}
func (m *GetOrgsForUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrgsForUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrgsForUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrgsForUserRequest proto.InternalMessageInfo

func (m *GetOrgsForUserRequest) GetUserID() *typespb.UUID {
	if m != nil {
		return m.UserID
	}
	return nil
}

type GetOrgsForUserResponse struct {
	OrgIDs []*typespb.UUID `protobuf:"bytes,1,rep,name=org_ids,json=orgIds,proto3" json:"org_ids,omitempty"`
}

func (m *GetOrgsForUserResponse) Reset()      { *m = GetOrgsForUserResponse{} }
func (*GetOrgsForUserResponse) ProtoMessage() {}
func (*GetOrgsForUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52976bd7ac62520b, []int{21}
}
func (m *GetOrgsForUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrgsForUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrgsForUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrgsForUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrgsForUserResponse.Merge(m, src)
}
func (m *GetOrgsForUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOrgsForUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrgsForUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrgsForUserResponse proto.InternalMessageInfo

func (m *GetOrgsForUserResponse) GetOrgIDs() []*typespb.UUID {
	if m != nil {
		return m.OrgIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*UserInfo)(nil), "gml.internal.controlplane.directory.v1.UserInfo")
	proto.RegisterType((*CreateUserRequest)(nil), "gml.internal.controlplane.directory.v1.CreateUserRequest")
	proto.RegisterType((*CreateUserResponse)(nil), "gml.internal.controlplane.directory.v1.CreateUserResponse")
	proto.RegisterType((*GetUserRequest)(nil), "gml.internal.controlplane.directory.v1.GetUserRequest")
	proto.RegisterType((*GetUserResponse)(nil), "gml.internal.controlplane.directory.v1.GetUserResponse")
	proto.RegisterType((*UpdateUserRequest)(nil), "gml.internal.controlplane.directory.v1.UpdateUserRequest")
	proto.RegisterType((*UpdateUserResponse)(nil), "gml.internal.controlplane.directory.v1.UpdateUserResponse")
	proto.RegisterType((*DeleteUserRequest)(nil), "gml.internal.controlplane.directory.v1.DeleteUserRequest")
	proto.RegisterType((*DeleteUserResponse)(nil), "gml.internal.controlplane.directory.v1.DeleteUserResponse")
	proto.RegisterType((*CreateOrgRequest)(nil), "gml.internal.controlplane.directory.v1.CreateOrgRequest")
	proto.RegisterType((*CreateOrgResponse)(nil), "gml.internal.controlplane.directory.v1.CreateOrgResponse")
	proto.RegisterType((*GetOrgRequest)(nil), "gml.internal.controlplane.directory.v1.GetOrgRequest")
	proto.RegisterType((*OrgInfo)(nil), "gml.internal.controlplane.directory.v1.OrgInfo")
	proto.RegisterType((*GetOrgResponse)(nil), "gml.internal.controlplane.directory.v1.GetOrgResponse")
	proto.RegisterType((*DeleteOrgRequest)(nil), "gml.internal.controlplane.directory.v1.DeleteOrgRequest")
	proto.RegisterType((*DeleteOrgResponse)(nil), "gml.internal.controlplane.directory.v1.DeleteOrgResponse")
	proto.RegisterType((*AddUserToOrgRequest)(nil), "gml.internal.controlplane.directory.v1.AddUserToOrgRequest")
	proto.RegisterType((*AddUserToOrgResponse)(nil), "gml.internal.controlplane.directory.v1.AddUserToOrgResponse")
	proto.RegisterType((*RemoveUserFromOrgRequest)(nil), "gml.internal.controlplane.directory.v1.RemoveUserFromOrgRequest")
	proto.RegisterType((*RemoveUserFromOrgResponse)(nil), "gml.internal.controlplane.directory.v1.RemoveUserFromOrgResponse")
	proto.RegisterType((*GetOrgsForUserRequest)(nil), "gml.internal.controlplane.directory.v1.GetOrgsForUserRequest")
	proto.RegisterType((*GetOrgsForUserResponse)(nil), "gml.internal.controlplane.directory.v1.GetOrgsForUserResponse")
}

func init() {
	proto.RegisterFile("src/controlplane/directory/directorypb/v1/directory.proto", fileDescriptor_52976bd7ac62520b)
}

var fileDescriptor_52976bd7ac62520b = []byte{
	// 1033 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0x3a, 0x8d, 0x13, 0x3f, 0xa8, 0x13, 0x4f, 0xd2, 0xca, 0x18, 0x58, 0x97, 0x15, 0xa2,
	0x88, 0x4a, 0xbb, 0x24, 0xb4, 0xa5, 0x6e, 0x5a, 0x44, 0x82, 0x69, 0x95, 0x4a, 0x69, 0xaa, 0x2d,
	0xe6, 0xc0, 0x81, 0x68, 0xed, 0x9d, 0x6c, 0x56, 0xda, 0xdd, 0x59, 0x66, 0x67, 0x5d, 0x99, 0x03,
	0x8a, 0x14, 0x71, 0xe8, 0x09, 0x0e, 0x1c, 0xf8, 0x01, 0x1c, 0xf8, 0x29, 0x1c, 0x23, 0x71, 0xe9,
	0xc9, 0x22, 0x9b, 0x0b, 0xc7, 0x2a, 0xbf, 0x00, 0xed, 0xec, 0xd8, 0xde, 0x78, 0x1b, 0x69, 0xed,
	0x1c, 0xb8, 0xed, 0xcc, 0xbc, 0xf7, 0xe6, 0x7b, 0xdf, 0x7b, 0xef, 0x1b, 0x1b, 0x9a, 0x01, 0xed,
	0x6a, 0x5d, 0xe2, 0x31, 0x4a, 0x1c, 0xdf, 0x31, 0x3c, 0xac, 0x99, 0x36, 0xc5, 0x5d, 0x46, 0x68,
	0x7f, 0xfc, 0xe5, 0x77, 0xb4, 0xde, 0xda, 0x78, 0xa9, 0xfa, 0x94, 0x30, 0x82, 0x3e, 0xb2, 0x5c,
	0x47, 0xb5, 0x3d, 0x86, 0xa9, 0x67, 0x38, 0x6a, 0x3a, 0x86, 0x3a, 0x36, 0xed, 0xad, 0xd5, 0x9b,
	0xec, 0xc0, 0xa6, 0xe6, 0x9e, 0x6f, 0x50, 0xd6, 0xd7, 0x2c, 0x9b, 0x1d, 0x84, 0x1d, 0xb5, 0x4b,
	0x5c, 0xcd, 0x22, 0x16, 0xd1, 0x78, 0xa8, 0x4e, 0xb8, 0xcf, 0x57, 0x7c, 0xc1, 0xbf, 0x92, 0x2b,
	0xea, 0xb2, 0x45, 0x88, 0xe5, 0xe0, 0xb1, 0xd5, 0x0b, 0x6a, 0xf8, 0x3e, 0xa6, 0x81, 0x38, 0x7f,
	0x3f, 0x41, 0xef, 0xba, 0xc4, 0xd3, 0x58, 0xdf, 0xc7, 0x81, 0xdf, 0xd1, 0xc2, 0xd0, 0x36, 0x93,
	0x63, 0xe5, 0xb0, 0x08, 0x8b, 0xed, 0x00, 0xd3, 0x6d, 0x6f, 0x9f, 0xa0, 0x0f, 0xe0, 0x8a, 0x67,
	0xb8, 0xb8, 0x26, 0xdd, 0x90, 0x3e, 0x2e, 0x6f, 0x5d, 0x3d, 0x1b, 0x34, 0xca, 0x66, 0xe7, 0xbe,
	0x12, 0xef, 0x29, 0x3a, 0x3f, 0x42, 0x1f, 0xc2, 0x3c, 0x76, 0x0d, 0xdb, 0xa9, 0x15, 0xb9, 0x4d,
	0xe5, 0x6c, 0xd0, 0x80, 0xd8, 0x86, 0x6f, 0x2a, 0x7a, 0x72, 0x88, 0x6e, 0xc2, 0x92, 0x69, 0x07,
	0xbe, 0x63, 0xf4, 0xf7, 0x7c, 0xbb, 0xcb, 0x42, 0x8a, 0x6b, 0x73, 0xb1, 0xbd, 0x5e, 0x11, 0xdb,
	0xcf, 0x92, 0x5d, 0x74, 0x0b, 0xaa, 0xb6, 0x89, 0x3d, 0x66, 0xb3, 0xfe, 0x9e, 0x4f, 0x49, 0xcf,
	0x36, 0x31, 0xad, 0x5d, 0xe1, 0xa6, 0xcb, 0xc3, 0x83, 0x67, 0x62, 0x1f, 0xb5, 0x61, 0xd9, 0x08,
	0xd9, 0xc1, 0xc8, 0x70, 0xcf, 0x36, 0x6b, 0xf3, 0x1c, 0xc6, 0xad, 0x68, 0xd0, 0xa8, 0x6c, 0x86,
	0xec, 0x60, 0x68, 0xbb, 0xdd, 0x3a, 0x1b, 0x34, 0xae, 0xc5, 0xc0, 0x26, 0x3d, 0x14, 0xbd, 0x62,
	0xa4, 0x0d, 0x4d, 0xa5, 0x03, 0xd5, 0xaf, 0x28, 0x36, 0x18, 0x8e, 0x79, 0xd0, 0xf1, 0x0f, 0x21,
	0x0e, 0x18, 0xda, 0x81, 0x72, 0x18, 0xc4, 0x0e, 0xde, 0x3e, 0xe1, 0x7c, 0xbc, 0xb5, 0xfe, 0xa9,
	0x9a, 0xaf, 0x9a, 0xea, 0x90, 0x4f, 0x7d, 0x31, 0x14, 0x5f, 0xca, 0x43, 0x40, 0xe9, 0x3b, 0x02,
	0x9f, 0x78, 0x01, 0x46, 0x37, 0xa1, 0x68, 0x9b, 0x22, 0xfa, 0x12, 0x8f, 0xce, 0x2b, 0xa4, 0xb6,
	0xdb, 0xdb, 0xad, 0xad, 0x52, 0x34, 0x68, 0x14, 0xb7, 0x5b, 0x7a, 0xd1, 0x36, 0x95, 0x26, 0x54,
	0x1e, 0x63, 0x96, 0xc6, 0x97, 0xdb, 0xf5, 0xa5, 0x04, 0x4b, 0x23, 0xdf, 0x29, 0xef, 0x3d, 0xcf,
	0x42, 0xf1, 0xd2, 0x2c, 0x1c, 0x49, 0x50, 0x6d, 0xfb, 0xe6, 0x04, 0xd5, 0xb9, 0xd1, 0x7c, 0x9d,
	0xed, 0xaa, 0x04, 0xd3, 0x7b, 0x6a, 0x32, 0x04, 0xea, 0x70, 0x08, 0xd4, 0xe7, 0x8c, 0xda, 0x9e,
	0xf5, 0xad, 0xe1, 0x84, 0x78, 0xb2, 0xe7, 0x94, 0x55, 0x40, 0x69, 0x10, 0x09, 0x27, 0xca, 0x03,
	0xa8, 0xb6, 0xb0, 0x83, 0x67, 0x83, 0x16, 0xc7, 0x4c, 0x7b, 0x8b, 0x98, 0xdf, 0xc3, 0x72, 0x52,
	0xf5, 0x5d, 0x6a, 0x0d, 0x43, 0x3e, 0x81, 0x45, 0x42, 0xad, 0x74, 0x5f, 0x69, 0x79, 0x19, 0xdd,
	0xa5, 0x16, 0x27, 0x74, 0x81, 0x24, 0x1f, 0x31, 0xe6, 0x54, 0xfc, 0x69, 0x9b, 0xea, 0x1e, 0x5c,
	0x7d, 0x8c, 0x59, 0x0a, 0x5a, 0x6e, 0xcf, 0x3b, 0xb0, 0x20, 0xb0, 0xa0, 0x4f, 0x92, 0x74, 0x46,
	0xb2, 0x91, 0xf5, 0xe4, 0x70, 0x9f, 0xc6, 0x12, 0xf2, 0xb3, 0xc4, 0xdb, 0x78, 0x16, 0xb0, 0xe7,
	0x68, 0x2b, 0x5e, 0x92, 0xb6, 0x0d, 0x58, 0x4e, 0x8a, 0x35, 0x4b, 0xee, 0x2b, 0xc3, 0x3e, 0x49,
	0xa5, 0xa1, 0xfc, 0x04, 0x2b, 0x9b, 0xa6, 0x19, 0xd7, 0xfe, 0x1b, 0x92, 0x0a, 0x7a, 0x1b, 0x16,
	0x92, 0xf1, 0xb9, 0x30, 0x32, 0x44, 0x83, 0x46, 0x89, 0x4f, 0x4a, 0x4b, 0x2f, 0xf1, 0x39, 0x31,
	0xd1, 0x1a, 0x94, 0x78, 0xaa, 0xa6, 0x48, 0x34, 0xe3, 0x54, 0x8e, 0x06, 0x8d, 0xf9, 0x38, 0xab,
	0x96, 0x3e, 0x1f, 0xe7, 0x64, 0x2a, 0xd7, 0x61, 0xf5, 0xfc, 0xfd, 0x02, 0xd7, 0x91, 0x04, 0x35,
	0x1d, 0xbb, 0xa4, 0xc7, 0xfb, 0xf2, 0x11, 0x25, 0xee, 0xff, 0x81, 0xee, 0x5d, 0x78, 0xe7, 0x0d,
	0x20, 0x04, 0xc4, 0x1d, 0xb8, 0x96, 0xf4, 0x44, 0xf0, 0x88, 0xd0, 0xf4, 0xec, 0xcd, 0x04, 0x4f,
	0x79, 0x0a, 0xd7, 0x27, 0xc3, 0x89, 0x56, 0xbb, 0x0d, 0x0b, 0x09, 0xf0, 0xa0, 0x26, 0xdd, 0x98,
	0xbb, 0x30, 0x1e, 0x47, 0x1e, 0xe8, 0x25, 0x0e, 0x3d, 0x58, 0xff, 0xe3, 0x0a, 0xac, 0xc6, 0x61,
	0x5a, 0xc3, 0x8e, 0x7a, 0x8e, 0x69, 0xcf, 0xee, 0x62, 0x74, 0x24, 0x01, 0x8c, 0x25, 0x1d, 0x35,
	0xf3, 0x76, 0x63, 0xe6, 0xa9, 0xa9, 0xdf, 0x9f, 0xc5, 0x55, 0x24, 0xf5, 0x23, 0x2c, 0x08, 0x71,
	0x47, 0x77, 0xf3, 0x86, 0x39, 0xff, 0x92, 0xd4, 0x3f, 0x9f, 0xda, 0x4f, 0xdc, 0x1d, 0x33, 0x30,
	0x16, 0xd2, 0xfc, 0x0c, 0x64, 0x5e, 0x80, 0xfc, 0x0c, 0x64, 0x75, 0x9b, 0xa3, 0x18, 0x4b, 0x6f,
	0x7e, 0x14, 0x19, 0xb1, 0xcf, 0x8f, 0x22, 0xab, 0xf4, 0xeb, 0xbf, 0xcd, 0xc1, 0xca, 0x2e, 0xb5,
	0x32, 0x5d, 0x72, 0x28, 0x41, 0x79, 0x24, 0xd1, 0xe8, 0xde, 0x74, 0x95, 0x1e, 0xcf, 0x6a, 0xbd,
	0x39, 0x83, 0xa7, 0x20, 0xe8, 0x05, 0x94, 0x92, 0x89, 0x40, 0x77, 0xa6, 0xa8, 0x74, 0xea, 0xee,
	0xbb, 0xd3, 0xba, 0x89, 0x8b, 0xe3, 0xdc, 0x47, 0x52, 0x99, 0x3f, 0xf7, 0x49, 0x69, 0xae, 0x37,
	0x67, 0xf0, 0x14, 0x65, 0xf9, 0x7b, 0x0e, 0x6a, 0xbb, 0xd4, 0x8a, 0x4b, 0xb5, 0x63, 0x78, 0x86,
	0x85, 0x5d, 0xec, 0xb1, 0x61, 0x6d, 0x5e, 0x4a, 0xf0, 0x76, 0x5a, 0x35, 0xd1, 0x46, 0xde, 0x8b,
	0xde, 0xa0, 0xf5, 0xf5, 0x07, 0xb3, 0x39, 0x0b, 0xae, 0x7e, 0x97, 0xa0, 0x9a, 0xd1, 0x48, 0xf4,
	0x65, 0xde, 0x98, 0x17, 0x69, 0x7c, 0x7d, 0xf3, 0x12, 0x11, 0x04, 0xb4, 0x5f, 0x46, 0xaf, 0xf6,
	0x50, 0x52, 0xd1, 0xc3, 0xe9, 0x3a, 0x62, 0x42, 0xd9, 0xeb, 0x5f, 0xcc, 0xea, 0x9e, 0x20, 0xda,
	0x3a, 0x94, 0x8e, 0x4f, 0xe4, 0xc2, 0xab, 0x13, 0xb9, 0xf0, 0xfa, 0x44, 0x96, 0x0e, 0x23, 0x59,
	0xfa, 0x33, 0x92, 0xa5, 0xbf, 0x22, 0x59, 0x3a, 0x8e, 0x64, 0xe9, 0x9f, 0x48, 0x96, 0xfe, 0x8d,
	0xe4, 0xc2, 0xeb, 0x48, 0x96, 0x7e, 0x3d, 0x95, 0x0b, 0xc7, 0xa7, 0x72, 0xe1, 0xd5, 0xa9, 0x5c,
	0xf8, 0xee, 0x89, 0x65, 0xbb, 0x0e, 0x66, 0x8e, 0xd1, 0x09, 0x54, 0xc3, 0xd6, 0x92, 0x95, 0x96,
	0xfb, 0xcf, 0xdd, 0x46, 0x6a, 0xd9, 0x29, 0xf1, 0x5f, 0x9a, 0x9f, 0xfd, 0x17, 0x00, 0x00, 0xff,
	0xff, 0x62, 0x6a, 0x8f, 0x79, 0x1c, 0x0e, 0x00, 0x00,
}

func (this *UserInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserInfo)
	if !ok {
		that2, ok := that.(UserInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.DisplayPicture != that1.DisplayPicture {
		return false
	}
	if this.IdentityProvider != that1.IdentityProvider {
		return false
	}
	if this.AuthProviderID != that1.AuthProviderID {
		return false
	}
	return true
}
func (this *CreateUserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateUserRequest)
	if !ok {
		that2, ok := that.(CreateUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserInfo.Equal(that1.UserInfo) {
		return false
	}
	return true
}
func (this *CreateUserResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateUserResponse)
	if !ok {
		that2, ok := that.(CreateUserResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *GetUserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUserRequest)
	if !ok {
		that2, ok := that.(GetUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *GetUserResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUserResponse)
	if !ok {
		that2, ok := that.(GetUserResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.UserInfo.Equal(that1.UserInfo) {
		return false
	}
	return true
}
func (this *UpdateUserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserRequest)
	if !ok {
		that2, ok := that.(UpdateUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.DisplayPicture.Equal(that1.DisplayPicture) {
		return false
	}
	return true
}
func (this *UpdateUserResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserResponse)
	if !ok {
		that2, ok := that.(UpdateUserResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeleteUserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteUserRequest)
	if !ok {
		that2, ok := that.(DeleteUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *DeleteUserResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteUserResponse)
	if !ok {
		that2, ok := that.(DeleteUserResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateOrgRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateOrgRequest)
	if !ok {
		that2, ok := that.(CreateOrgRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrgInfo.Equal(that1.OrgInfo) {
		return false
	}
	return true
}
func (this *CreateOrgResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateOrgResponse)
	if !ok {
		that2, ok := that.(CreateOrgResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *GetOrgRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrgRequest)
	if !ok {
		that2, ok := that.(GetOrgRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *OrgInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrgInfo)
	if !ok {
		that2, ok := that.(OrgInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrgName.Equal(that1.OrgName) {
		return false
	}
	return true
}
func (this *GetOrgResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrgResponse)
	if !ok {
		that2, ok := that.(GetOrgResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.OrgInfo.Equal(that1.OrgInfo) {
		return false
	}
	return true
}
func (this *DeleteOrgRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteOrgRequest)
	if !ok {
		that2, ok := that.(DeleteOrgRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *DeleteOrgResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteOrgResponse)
	if !ok {
		that2, ok := that.(DeleteOrgResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AddUserToOrgRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddUserToOrgRequest)
	if !ok {
		that2, ok := that.(AddUserToOrgRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserID.Equal(that1.UserID) {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *AddUserToOrgResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddUserToOrgResponse)
	if !ok {
		that2, ok := that.(AddUserToOrgResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RemoveUserFromOrgRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveUserFromOrgRequest)
	if !ok {
		that2, ok := that.(RemoveUserFromOrgRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserID.Equal(that1.UserID) {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *RemoveUserFromOrgResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveUserFromOrgResponse)
	if !ok {
		that2, ok := that.(RemoveUserFromOrgResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetOrgsForUserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrgsForUserRequest)
	if !ok {
		that2, ok := that.(GetOrgsForUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserID.Equal(that1.UserID) {
		return false
	}
	return true
}
func (this *GetOrgsForUserResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrgsForUserResponse)
	if !ok {
		that2, ok := that.(GetOrgsForUserResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OrgIDs) != len(that1.OrgIDs) {
		return false
	}
	for i := range this.OrgIDs {
		if !this.OrgIDs[i].Equal(that1.OrgIDs[i]) {
			return false
		}
	}
	return true
}
func (this *UserInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&directorypb.UserInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "DisplayPicture: "+fmt.Sprintf("%#v", this.DisplayPicture)+",\n")
	s = append(s, "IdentityProvider: "+fmt.Sprintf("%#v", this.IdentityProvider)+",\n")
	s = append(s, "AuthProviderID: "+fmt.Sprintf("%#v", this.AuthProviderID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateUserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directorypb.CreateUserRequest{")
	if this.UserInfo != nil {
		s = append(s, "UserInfo: "+fmt.Sprintf("%#v", this.UserInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateUserResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directorypb.CreateUserResponse{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directorypb.GetUserRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&directorypb.GetUserResponse{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	if this.UserInfo != nil {
		s = append(s, "UserInfo: "+fmt.Sprintf("%#v", this.UserInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&directorypb.UpdateUserRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	if this.DisplayPicture != nil {
		s = append(s, "DisplayPicture: "+fmt.Sprintf("%#v", this.DisplayPicture)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&directorypb.UpdateUserResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteUserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directorypb.DeleteUserRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteUserResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&directorypb.DeleteUserResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOrgRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directorypb.CreateOrgRequest{")
	if this.OrgInfo != nil {
		s = append(s, "OrgInfo: "+fmt.Sprintf("%#v", this.OrgInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOrgResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directorypb.CreateOrgResponse{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrgRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directorypb.GetOrgRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrgInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directorypb.OrgInfo{")
	if this.OrgName != nil {
		s = append(s, "OrgName: "+fmt.Sprintf("%#v", this.OrgName)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrgResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&directorypb.GetOrgResponse{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	if this.OrgInfo != nil {
		s = append(s, "OrgInfo: "+fmt.Sprintf("%#v", this.OrgInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteOrgRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directorypb.DeleteOrgRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteOrgResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&directorypb.DeleteOrgResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddUserToOrgRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&directorypb.AddUserToOrgRequest{")
	if this.UserID != nil {
		s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	}
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddUserToOrgResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&directorypb.AddUserToOrgResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveUserFromOrgRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&directorypb.RemoveUserFromOrgRequest{")
	if this.UserID != nil {
		s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	}
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveUserFromOrgResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&directorypb.RemoveUserFromOrgResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrgsForUserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directorypb.GetOrgsForUserRequest{")
	if this.UserID != nil {
		s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrgsForUserResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directorypb.GetOrgsForUserResponse{")
	if this.OrgIDs != nil {
		s = append(s, "OrgIDs: "+fmt.Sprintf("%#v", this.OrgIDs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDirectory(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserDirectoryServiceClient is the client API for UserDirectoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserDirectoryServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
}

type userDirectoryServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserDirectoryServiceClient(cc *grpc.ClientConn) UserDirectoryServiceClient {
	return &userDirectoryServiceClient{cc}
}

func (c *userDirectoryServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.directory.v1.UserDirectoryService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDirectoryServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.directory.v1.UserDirectoryService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDirectoryServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.directory.v1.UserDirectoryService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDirectoryServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.directory.v1.UserDirectoryService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDirectoryServiceServer is the server API for UserDirectoryService service.
type UserDirectoryServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
}

// UnimplementedUserDirectoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserDirectoryServiceServer struct {
}

func (*UnimplementedUserDirectoryServiceServer) CreateUser(ctx context.Context, req *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedUserDirectoryServiceServer) GetUser(ctx context.Context, req *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedUserDirectoryServiceServer) UpdateUser(ctx context.Context, req *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedUserDirectoryServiceServer) DeleteUser(ctx context.Context, req *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}

func RegisterUserDirectoryServiceServer(s *grpc.Server, srv UserDirectoryServiceServer) {
	s.RegisterService(&_UserDirectoryService_serviceDesc, srv)
}

func _UserDirectoryService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDirectoryServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.directory.v1.UserDirectoryService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDirectoryServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDirectoryService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDirectoryServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.directory.v1.UserDirectoryService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDirectoryServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDirectoryService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDirectoryServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.directory.v1.UserDirectoryService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDirectoryServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDirectoryService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDirectoryServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.directory.v1.UserDirectoryService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDirectoryServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserDirectoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gml.internal.controlplane.directory.v1.UserDirectoryService",
	HandlerType: (*UserDirectoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserDirectoryService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserDirectoryService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserDirectoryService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserDirectoryService_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/controlplane/directory/directorypb/v1/directory.proto",
}

// OrgDirectoryServiceClient is the client API for OrgDirectoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrgDirectoryServiceClient interface {
	CreateOrg(ctx context.Context, in *CreateOrgRequest, opts ...grpc.CallOption) (*CreateOrgResponse, error)
	GetOrg(ctx context.Context, in *GetOrgRequest, opts ...grpc.CallOption) (*GetOrgResponse, error)
	DeleteOrg(ctx context.Context, in *DeleteOrgRequest, opts ...grpc.CallOption) (*DeleteOrgResponse, error)
}

type orgDirectoryServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrgDirectoryServiceClient(cc *grpc.ClientConn) OrgDirectoryServiceClient {
	return &orgDirectoryServiceClient{cc}
}

func (c *orgDirectoryServiceClient) CreateOrg(ctx context.Context, in *CreateOrgRequest, opts ...grpc.CallOption) (*CreateOrgResponse, error) {
	out := new(CreateOrgResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.directory.v1.OrgDirectoryService/CreateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgDirectoryServiceClient) GetOrg(ctx context.Context, in *GetOrgRequest, opts ...grpc.CallOption) (*GetOrgResponse, error) {
	out := new(GetOrgResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.directory.v1.OrgDirectoryService/GetOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgDirectoryServiceClient) DeleteOrg(ctx context.Context, in *DeleteOrgRequest, opts ...grpc.CallOption) (*DeleteOrgResponse, error) {
	out := new(DeleteOrgResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.directory.v1.OrgDirectoryService/DeleteOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgDirectoryServiceServer is the server API for OrgDirectoryService service.
type OrgDirectoryServiceServer interface {
	CreateOrg(context.Context, *CreateOrgRequest) (*CreateOrgResponse, error)
	GetOrg(context.Context, *GetOrgRequest) (*GetOrgResponse, error)
	DeleteOrg(context.Context, *DeleteOrgRequest) (*DeleteOrgResponse, error)
}

// UnimplementedOrgDirectoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrgDirectoryServiceServer struct {
}

func (*UnimplementedOrgDirectoryServiceServer) CreateOrg(ctx context.Context, req *CreateOrgRequest) (*CreateOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrg not implemented")
}
func (*UnimplementedOrgDirectoryServiceServer) GetOrg(ctx context.Context, req *GetOrgRequest) (*GetOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrg not implemented")
}
func (*UnimplementedOrgDirectoryServiceServer) DeleteOrg(ctx context.Context, req *DeleteOrgRequest) (*DeleteOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrg not implemented")
}

func RegisterOrgDirectoryServiceServer(s *grpc.Server, srv OrgDirectoryServiceServer) {
	s.RegisterService(&_OrgDirectoryService_serviceDesc, srv)
}

func _OrgDirectoryService_CreateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgDirectoryServiceServer).CreateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.directory.v1.OrgDirectoryService/CreateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgDirectoryServiceServer).CreateOrg(ctx, req.(*CreateOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgDirectoryService_GetOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgDirectoryServiceServer).GetOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.directory.v1.OrgDirectoryService/GetOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgDirectoryServiceServer).GetOrg(ctx, req.(*GetOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgDirectoryService_DeleteOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgDirectoryServiceServer).DeleteOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.directory.v1.OrgDirectoryService/DeleteOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgDirectoryServiceServer).DeleteOrg(ctx, req.(*DeleteOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrgDirectoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gml.internal.controlplane.directory.v1.OrgDirectoryService",
	HandlerType: (*OrgDirectoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrg",
			Handler:    _OrgDirectoryService_CreateOrg_Handler,
		},
		{
			MethodName: "GetOrg",
			Handler:    _OrgDirectoryService_GetOrg_Handler,
		},
		{
			MethodName: "DeleteOrg",
			Handler:    _OrgDirectoryService_DeleteOrg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/controlplane/directory/directorypb/v1/directory.proto",
}

// OrgUserManagementServiceClient is the client API for OrgUserManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrgUserManagementServiceClient interface {
	AddUserToOrg(ctx context.Context, in *AddUserToOrgRequest, opts ...grpc.CallOption) (*AddUserToOrgResponse, error)
	RemoveUserFromOrg(ctx context.Context, in *RemoveUserFromOrgRequest, opts ...grpc.CallOption) (*RemoveUserFromOrgResponse, error)
	GetOrgsForUser(ctx context.Context, in *GetOrgsForUserRequest, opts ...grpc.CallOption) (*GetOrgsForUserResponse, error)
}

type orgUserManagementServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrgUserManagementServiceClient(cc *grpc.ClientConn) OrgUserManagementServiceClient {
	return &orgUserManagementServiceClient{cc}
}

func (c *orgUserManagementServiceClient) AddUserToOrg(ctx context.Context, in *AddUserToOrgRequest, opts ...grpc.CallOption) (*AddUserToOrgResponse, error) {
	out := new(AddUserToOrgResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.directory.v1.OrgUserManagementService/AddUserToOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgUserManagementServiceClient) RemoveUserFromOrg(ctx context.Context, in *RemoveUserFromOrgRequest, opts ...grpc.CallOption) (*RemoveUserFromOrgResponse, error) {
	out := new(RemoveUserFromOrgResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.directory.v1.OrgUserManagementService/RemoveUserFromOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgUserManagementServiceClient) GetOrgsForUser(ctx context.Context, in *GetOrgsForUserRequest, opts ...grpc.CallOption) (*GetOrgsForUserResponse, error) {
	out := new(GetOrgsForUserResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.directory.v1.OrgUserManagementService/GetOrgsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgUserManagementServiceServer is the server API for OrgUserManagementService service.
type OrgUserManagementServiceServer interface {
	AddUserToOrg(context.Context, *AddUserToOrgRequest) (*AddUserToOrgResponse, error)
	RemoveUserFromOrg(context.Context, *RemoveUserFromOrgRequest) (*RemoveUserFromOrgResponse, error)
	GetOrgsForUser(context.Context, *GetOrgsForUserRequest) (*GetOrgsForUserResponse, error)
}

// UnimplementedOrgUserManagementServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrgUserManagementServiceServer struct {
}

func (*UnimplementedOrgUserManagementServiceServer) AddUserToOrg(ctx context.Context, req *AddUserToOrgRequest) (*AddUserToOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToOrg not implemented")
}
func (*UnimplementedOrgUserManagementServiceServer) RemoveUserFromOrg(ctx context.Context, req *RemoveUserFromOrgRequest) (*RemoveUserFromOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromOrg not implemented")
}
func (*UnimplementedOrgUserManagementServiceServer) GetOrgsForUser(ctx context.Context, req *GetOrgsForUserRequest) (*GetOrgsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgsForUser not implemented")
}

func RegisterOrgUserManagementServiceServer(s *grpc.Server, srv OrgUserManagementServiceServer) {
	s.RegisterService(&_OrgUserManagementService_serviceDesc, srv)
}

func _OrgUserManagementService_AddUserToOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgUserManagementServiceServer).AddUserToOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.directory.v1.OrgUserManagementService/AddUserToOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgUserManagementServiceServer).AddUserToOrg(ctx, req.(*AddUserToOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgUserManagementService_RemoveUserFromOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgUserManagementServiceServer).RemoveUserFromOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.directory.v1.OrgUserManagementService/RemoveUserFromOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgUserManagementServiceServer).RemoveUserFromOrg(ctx, req.(*RemoveUserFromOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgUserManagementService_GetOrgsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgUserManagementServiceServer).GetOrgsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.directory.v1.OrgUserManagementService/GetOrgsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgUserManagementServiceServer).GetOrgsForUser(ctx, req.(*GetOrgsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrgUserManagementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gml.internal.controlplane.directory.v1.OrgUserManagementService",
	HandlerType: (*OrgUserManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserToOrg",
			Handler:    _OrgUserManagementService_AddUserToOrg_Handler,
		},
		{
			MethodName: "RemoveUserFromOrg",
			Handler:    _OrgUserManagementService_RemoveUserFromOrg_Handler,
		},
		{
			MethodName: "GetOrgsForUser",
			Handler:    _OrgUserManagementService_GetOrgsForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/controlplane/directory/directorypb/v1/directory.proto",
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthProviderID) > 0 {
		i -= len(m.AuthProviderID)
		copy(dAtA[i:], m.AuthProviderID)
		i = encodeVarintDirectory(dAtA, i, uint64(len(m.AuthProviderID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IdentityProvider) > 0 {
		i -= len(m.IdentityProvider)
		copy(dAtA[i:], m.IdentityProvider)
		i = encodeVarintDirectory(dAtA, i, uint64(len(m.IdentityProvider)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DisplayPicture) > 0 {
		i -= len(m.DisplayPicture)
		copy(dAtA[i:], m.DisplayPicture)
		i = encodeVarintDirectory(dAtA, i, uint64(len(m.DisplayPicture)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintDirectory(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDirectory(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		{
			size, err := m.UserInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		{
			size, err := m.UserInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisplayPicture != nil {
		{
			size, err := m.DisplayPicture.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CreateOrgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOrgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgInfo != nil {
		{
			size, err := m.OrgInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateOrgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOrgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOrgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrgInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrgInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrgInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgName != nil {
		{
			size, err := m.OrgName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOrgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgInfo != nil {
		{
			size, err := m.OrgInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteOrgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteOrgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteOrgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteOrgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteOrgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteOrgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AddUserToOrgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddUserToOrgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddUserToOrgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.UserID != nil {
		{
			size, err := m.UserID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddUserToOrgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddUserToOrgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddUserToOrgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemoveUserFromOrgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveUserFromOrgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveUserFromOrgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.UserID != nil {
		{
			size, err := m.UserID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveUserFromOrgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveUserFromOrgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveUserFromOrgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetOrgsForUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrgsForUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrgsForUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserID != nil {
		{
			size, err := m.UserID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOrgsForUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrgsForUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrgsForUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrgIDs) > 0 {
		for iNdEx := len(m.OrgIDs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrgIDs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDirectory(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDirectory(dAtA []byte, offset int, v uint64) int {
	offset -= sovDirectory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDirectory(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovDirectory(uint64(l))
	}
	l = len(m.DisplayPicture)
	if l > 0 {
		n += 1 + l + sovDirectory(uint64(l))
	}
	l = len(m.IdentityProvider)
	if l > 0 {
		n += 1 + l + sovDirectory(uint64(l))
	}
	l = len(m.AuthProviderID)
	if l > 0 {
		n += 1 + l + sovDirectory(uint64(l))
	}
	return n
}

func (m *CreateUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	return n
}

func (m *CreateUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	return n
}

func (m *GetUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	return n
}

func (m *GetUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	return n
}

func (m *UpdateUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	if m.DisplayPicture != nil {
		l = m.DisplayPicture.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	return n
}

func (m *UpdateUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	return n
}

func (m *DeleteUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateOrgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgInfo != nil {
		l = m.OrgInfo.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	return n
}

func (m *CreateOrgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	return n
}

func (m *GetOrgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	return n
}

func (m *OrgInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgName != nil {
		l = m.OrgName.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	return n
}

func (m *GetOrgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	if m.OrgInfo != nil {
		l = m.OrgInfo.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	return n
}

func (m *DeleteOrgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	return n
}

func (m *DeleteOrgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AddUserToOrgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != nil {
		l = m.UserID.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	return n
}

func (m *AddUserToOrgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemoveUserFromOrgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != nil {
		l = m.UserID.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	return n
}

func (m *RemoveUserFromOrgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetOrgsForUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != nil {
		l = m.UserID.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	return n
}

func (m *GetOrgsForUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrgIDs) > 0 {
		for _, e := range m.OrgIDs {
			l = e.Size()
			n += 1 + l + sovDirectory(uint64(l))
		}
	}
	return n
}

func sovDirectory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDirectory(x uint64) (n int) {
	return sovDirectory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UserInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`DisplayPicture:` + fmt.Sprintf("%v", this.DisplayPicture) + `,`,
		`IdentityProvider:` + fmt.Sprintf("%v", this.IdentityProvider) + `,`,
		`AuthProviderID:` + fmt.Sprintf("%v", this.AuthProviderID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateUserRequest{`,
		`UserInfo:` + strings.Replace(this.UserInfo.String(), "UserInfo", "UserInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateUserResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateUserResponse{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUserResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserResponse{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`UserInfo:` + strings.Replace(this.UserInfo.String(), "UserInfo", "UserInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`DisplayPicture:` + strings.Replace(fmt.Sprintf("%v", this.DisplayPicture), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DeleteUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteUserRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteUserResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteUserResponse{`,
		`}`,
	}, "")
	return s
}
func (this *CreateOrgRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOrgRequest{`,
		`OrgInfo:` + strings.Replace(this.OrgInfo.String(), "OrgInfo", "OrgInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateOrgResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOrgResponse{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrgRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrgRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrgInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrgInfo{`,
		`OrgName:` + strings.Replace(fmt.Sprintf("%v", this.OrgName), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrgResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrgResponse{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`OrgInfo:` + strings.Replace(this.OrgInfo.String(), "OrgInfo", "OrgInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteOrgRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteOrgRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteOrgResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteOrgResponse{`,
		`}`,
	}, "")
	return s
}
func (this *AddUserToOrgRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddUserToOrgRequest{`,
		`UserID:` + strings.Replace(fmt.Sprintf("%v", this.UserID), "UUID", "typespb.UUID", 1) + `,`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddUserToOrgResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddUserToOrgResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RemoveUserFromOrgRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveUserFromOrgRequest{`,
		`UserID:` + strings.Replace(fmt.Sprintf("%v", this.UserID), "UUID", "typespb.UUID", 1) + `,`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveUserFromOrgResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveUserFromOrgResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetOrgsForUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrgsForUserRequest{`,
		`UserID:` + strings.Replace(fmt.Sprintf("%v", this.UserID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrgsForUserResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOrgIDs := "[]*UUID{"
	for _, f := range this.OrgIDs {
		repeatedStringForOrgIDs += strings.Replace(fmt.Sprintf("%v", f), "UUID", "typespb.UUID", 1) + ","
	}
	repeatedStringForOrgIDs += "}"
	s := strings.Join([]string{`&GetOrgsForUserResponse{`,
		`OrgIDs:` + repeatedStringForOrgIDs + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDirectory(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayPicture", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayPicture = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthProviderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthProviderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &UserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &UserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayPicture", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisplayPicture == nil {
				m.DisplayPicture = &types.StringValue{}
			}
			if err := m.DisplayPicture.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgInfo == nil {
				m.OrgInfo = &OrgInfo{}
			}
			if err := m.OrgInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrgInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrgInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrgInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgName == nil {
				m.OrgName = &typespb.UUID{}
			}
			if err := m.OrgName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgInfo == nil {
				m.OrgInfo = &OrgInfo{}
			}
			if err := m.OrgInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteOrgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteOrgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteOrgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteOrgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteOrgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteOrgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddUserToOrgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddUserToOrgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddUserToOrgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserID == nil {
				m.UserID = &typespb.UUID{}
			}
			if err := m.UserID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &typespb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddUserToOrgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddUserToOrgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddUserToOrgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveUserFromOrgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveUserFromOrgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveUserFromOrgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserID == nil {
				m.UserID = &typespb.UUID{}
			}
			if err := m.UserID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &typespb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveUserFromOrgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveUserFromOrgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveUserFromOrgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrgsForUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrgsForUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrgsForUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserID == nil {
				m.UserID = &typespb.UUID{}
			}
			if err := m.UserID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrgsForUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrgsForUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrgsForUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgIDs = append(m.OrgIDs, &typespb.UUID{})
			if err := m.OrgIDs[len(m.OrgIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDirectory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDirectory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDirectory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDirectory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDirectory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDirectory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDirectory = fmt.Errorf("proto: unexpected end of group")
)
