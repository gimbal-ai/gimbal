/*
 * Copyright Â© 2023- Gimlet Labs, Inc.
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Gimlet Labs, Inc. and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Gimlet Labs, Inc. and its suppliers and
 * may be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law. Dissemination
 * of this information or reproduction of this material is strictly
 * forbidden unless prior written permission is obtained from
 * Gimlet Labs, Inc.
 *
 * SPDX-License-Identifier: Proprietary
 */

syntax = "proto3";

package gml.internal.controlplane.directory.v1;

option go_package = "gimletlabs.ai/gimlet/src/controlplane/directory/directorypb/v1;directorypb";

import "third_party/github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/wrappers.proto";

import "src/common/typespb/uuid.proto";

// Service for managing the user directory, including the user's profile information.
service UserDirectoryService {
  // Creates a new user in the system.
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  // Gets information about the user with the given ID.
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  // Updates a user's profile information, such as profile picture.
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  // Deletes the user with the given ID from the system.
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
}

// Service for managing the org directory.  including adding user management within an org.
service OrgDirectoryService {
  // Creates a new org in the system.
  rpc CreateOrg(CreateOrgRequest) returns (CreateOrgResponse);
  // Gets information about the org with the given ID.
  rpc GetOrg(GetOrgRequest) returns (GetOrgResponse);
  // Deletes the org with the given ID from the system.
  rpc DeleteOrg(DeleteOrgRequest) returns (DeleteOrgResponse);
}

// Service for managing users in an org.
service OrgUserManagementService {
  // Adds a user to an org.
  rpc AddUserToOrg(AddUserToOrgRequest) returns (AddUserToOrgResponse);
  // Removes a user from an org.
  rpc RemoveUserFromOrg(RemoveUserFromOrgRequest) returns (RemoveUserFromOrgResponse);
}

// UserInfo contains standard information about a user in the system.
message UserInfo {
  // The user's first name.
  string first_name = 1;
  // The user's last name.
  string last_name = 2;
  // The user's email.
  string email = 3;
  // The user's display picture.
  string display_picture = 4;
  // The identity provider which the user has used to sign up.
  string identity_provider = 5;
  // The auth_provider_id is the user ID that an auth_provider uses for an ID of the corresponding
  // user.
  string auth_provider_id = 6 [ (gogoproto.customname) = "AuthProviderID" ];
}

// Request to create a user in the system.
message CreateUserRequest {
  // The information of the user to create.
  UserInfo user_info = 1;
}

// Response for creating a user in the system.
message CreateUserResponse {
  // The ID of the user created.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
}

// Request to get a user's info, given their ID.
message GetUserRequest {
  // The ID of the user to fetch.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
}

// Response to get a user's info.
message GetUserResponse {
  // The ID of the user.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
  // The information about the user.
  UserInfo user_info = 2;
}

// Request to update a user's info.
message UpdateUserRequest {
  // The ID of the user to update.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
  // The display picture of the user.
  google.protobuf.StringValue display_picture = 2;
}

// Response for updating a user's info.
message UpdateUserResponse {}

// Request to delete a user from the system.
message DeleteUserRequest {
  // The ID of the user to delete.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
}

// Response to deleting a user from the system.
message DeleteUserResponse {}

// Request to create an org in the system.
message CreateOrgRequest {
  // Information about the org to create.
  OrgInfo org_info = 1;
}

// Response to creating an org in the system.
message CreateOrgResponse {
  // The ID of the org that has been created.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
}

// Request to fetch information about an org in the system.
message GetOrgRequest {
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
}

// OrgInfo contains standard information about an org in the system.
message OrgInfo {
  // The name of the org. This is globally unique across the whole system.
  gml.types.UUID org_name = 1;
}

// Response to getting information about an org in the system.
message GetOrgResponse {
  // The ID of the organization.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
  // Information about the org.
  OrgInfo org_info = 2;
}

// Request to delete an org.
message DeleteOrgRequest {
  // ID of the org to delete.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
}

// Response to deleting an org.
message DeleteOrgResponse {}

// Request to add a user to the org.
message AddUserToOrgRequest {
  // The ID of the user to add to the org.
  gml.types.UUID user_id = 1 [ (gogoproto.customname) = "UserID" ];
  // The ID of the org which the user should be added to.
  gml.types.UUID org_id = 2 [ (gogoproto.customname) = "OrgID" ];
}

// Response to adding a user to the org.
message AddUserToOrgResponse {}

// Request to remove a user from an org.
message RemoveUserFromOrgRequest {
  // The ID of the user to remove from the org.
  gml.types.UUID user_id = 1 [ (gogoproto.customname) = "UserID" ];
  // The ID of the org which the user should be removed from.
  gml.types.UUID org_id = 2 [ (gogoproto.customname) = "OrgID" ];
}

// Response to removing a user from an org.
message RemoveUserFromOrgResponse {}
