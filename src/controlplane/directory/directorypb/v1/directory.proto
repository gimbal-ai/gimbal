/*
 * Copyright Â© 2023- Gimlet Labs, Inc.
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Gimlet Labs, Inc. and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Gimlet Labs, Inc. and its suppliers and
 * may be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law. Dissemination
 * of this information or reproduction of this material is strictly
 * forbidden unless prior written permission is obtained from
 * Gimlet Labs, Inc.
 *
 * SPDX-License-Identifier: Proprietary
 */

syntax = "proto3";

package gml.internal.controlplane.directory.v1;

option go_package = "gimletlabs.ai/gimlet/src/controlplane/directory/directorypb/v1;directorypb";

import "third_party/github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/wrappers.proto";

import "src/common/typespb/uuid.proto";

// Service for managing the user directory, including the user's profile information.
service UserDirectoryService {
  // Gets information about the user with the given ID.
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  // Updates a user's profile information, such as profile picture.
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  // Deletes the user with the given ID from the system.
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  // UpsertUser creates or updates a user in the system.
  rpc UpsertUser(UpsertUserRequest) returns (UpsertUserResponse);
}

// Service for managing the org directory.  including adding user management within an org.
service OrgDirectoryService {
  // Creates a new org in the system.
  rpc CreateOrg(CreateOrgRequest) returns (CreateOrgResponse);
  // Gets information about the org with the given ID.
  rpc GetOrg(GetOrgRequest) returns (GetOrgResponse);
  // Deletes the org with the given ID from the system.
  rpc DeleteOrg(DeleteOrgRequest) returns (DeleteOrgResponse);
}

// Service for managing user<->org relationships.
service OrgUserManagementService {
  // Grants a user the given scopes on the given orgs.
  rpc GrantUserScopes(GrantUserScopesRequest) returns (GrantUserScopesResponse);
  // Revokes the given scopes for the given user and org.
  rpc RevokeUserScopes(RevokeUserScopesRequest) returns (RevokeUserScopesResponse);
  // List the orgs that a user has access to.
  rpc ListOrgs(ListOrgsRequest) returns (ListOrgsResponse);
}

// UserInfo contains standard information about a user in the system.
message UserInfo {
  // The ID of the user.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
  // The user's name.
  string name = 2 [ (gogoproto.moretags) = 'db:"name"' ];
  // The user's email.
  string email = 3 [ (gogoproto.moretags) = 'db:"email"' ];
  // The user's display picture.
  string display_picture = 4 [ (gogoproto.moretags) = 'db:"display_picture"' ];
  // The identity provider which the user has used to sign up.
  string identity_provider = 5;
  // The auth_provider_id is the user ID that an auth_provider uses for an ID of the corresponding
  // user.
  string auth_provider_id = 6
      [ (gogoproto.customname) = "AuthProviderID", (gogoproto.moretags) = 'db:"auth_provider_id"' ];
}

// Request to upsert a user in the system.
message UpsertUserRequest {
  // The information of the user to create.
  UserInfo user_info = 1;
}

// Response to upserting a user in the system.
message UpsertUserResponse {
  UserInfo user_info = 1;
  bool created = 2;
}

// Request to get a user's info, given their ID.
message GetUserRequest {
  // The ID of the user to fetch.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
}

// Response to get a user's info.
message GetUserResponse {
  // The information about the user.
  UserInfo user_info = 1;
}

// Request to update a user's info.
message UpdateUserRequest {
  // The ID of the user to update.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
  // The display picture of the user.
  google.protobuf.StringValue display_picture = 2;
}

// Response for updating a user's info.
message UpdateUserResponse {}

// Request to delete a user from the system.
message DeleteUserRequest {
  // The ID of the user to delete.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
}

// Response to deleting a user from the system.
message DeleteUserResponse {}

// OrgInfo contains standard information about an org in the system.
message OrgInfo {
  // The ID of the org.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
  // The name of the org. This is globally unique across the whole system.
  string org_name = 2 [ (gogoproto.moretags) = 'db:"org_name"' ];
}

// Request to create an org in the system.
message CreateOrgRequest {
  // Information about the org to create.
  OrgInfo org_info = 1;
  // Org creator ID is the ID of the user who is creating the org.
  gml.types.UUID creator_id = 2 [ (gogoproto.customname) = "CreatorID" ];
}

// Response to creating an org in the system.
message CreateOrgResponse {
  // The ID of the org that has been created.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
}

// Request to fetch information about an org in the system.
message GetOrgRequest {
  // Will use ID if supplied, else will try to lookup by name.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
  string org_name = 2;
}

// Response to getting information about an org in the system.
message GetOrgResponse {
  // Information about the org.
  OrgInfo org_info = 1;
}

// Request to delete an org.
message DeleteOrgRequest {
  // ID of the org to delete.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
}

// Response to deleting an org.
message DeleteOrgResponse {}

// Request to grant a user the given scopes on the given orgs.
message GrantUserScopesRequest {}

// Response to granting a user the given scopes on the given orgs.
message GrantUserScopesResponse {}

// Request to revoke a user's scopes on the given orgs.
message RevokeUserScopesRequest {}

// Response to revoking a user's scopes on the given orgs.
message RevokeUserScopesResponse {}

// Request to list a user's orgs.
message ListOrgsRequest {
  // The ID of the user to list the orgs of.
  gml.types.UUID user_id = 1 [ (gogoproto.customname) = "UserID" ];
}

// Response to list a user's org.
message ListOrgsResponse {
  // The IDs of the org which the user is in.
  repeated gml.types.UUID org_ids = 1 [ (gogoproto.customname) = "OrgIDs" ];
}
