// Code generated by MockGen. DO NOT EDIT.
// Source: directory.pb.go
//
// Generated by this command:
//
//	mockgen -source=directory.pb.go -destination=mock/directory_mock.gen.go UserDirectoryService,OrgDirectoryService,OrgUserManagementService
//
// Package mock_directorypb is a generated GoMock package.
package mock_directorypb

import (
	context "context"
	reflect "reflect"

	directorypb "gimletlabs.ai/gimlet/src/controlplane/directory/directorypb/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserDirectoryServiceClient is a mock of UserDirectoryServiceClient interface.
type MockUserDirectoryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserDirectoryServiceClientMockRecorder
}

// MockUserDirectoryServiceClientMockRecorder is the mock recorder for MockUserDirectoryServiceClient.
type MockUserDirectoryServiceClientMockRecorder struct {
	mock *MockUserDirectoryServiceClient
}

// NewMockUserDirectoryServiceClient creates a new mock instance.
func NewMockUserDirectoryServiceClient(ctrl *gomock.Controller) *MockUserDirectoryServiceClient {
	mock := &MockUserDirectoryServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserDirectoryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDirectoryServiceClient) EXPECT() *MockUserDirectoryServiceClientMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockUserDirectoryServiceClient) DeleteUser(ctx context.Context, in *directorypb.DeleteUserRequest, opts ...grpc.CallOption) (*directorypb.DeleteUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUser", varargs...)
	ret0, _ := ret[0].(*directorypb.DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserDirectoryServiceClientMockRecorder) DeleteUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserDirectoryServiceClient)(nil).DeleteUser), varargs...)
}

// GetUser mocks base method.
func (m *MockUserDirectoryServiceClient) GetUser(ctx context.Context, in *directorypb.GetUserRequest, opts ...grpc.CallOption) (*directorypb.GetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*directorypb.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserDirectoryServiceClientMockRecorder) GetUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserDirectoryServiceClient)(nil).GetUser), varargs...)
}

// UpdateUser mocks base method.
func (m *MockUserDirectoryServiceClient) UpdateUser(ctx context.Context, in *directorypb.UpdateUserRequest, opts ...grpc.CallOption) (*directorypb.UpdateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUser", varargs...)
	ret0, _ := ret[0].(*directorypb.UpdateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserDirectoryServiceClientMockRecorder) UpdateUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserDirectoryServiceClient)(nil).UpdateUser), varargs...)
}

// UpsertUser mocks base method.
func (m *MockUserDirectoryServiceClient) UpsertUser(ctx context.Context, in *directorypb.UpsertUserRequest, opts ...grpc.CallOption) (*directorypb.UpsertUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertUser", varargs...)
	ret0, _ := ret[0].(*directorypb.UpsertUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertUser indicates an expected call of UpsertUser.
func (mr *MockUserDirectoryServiceClientMockRecorder) UpsertUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUser", reflect.TypeOf((*MockUserDirectoryServiceClient)(nil).UpsertUser), varargs...)
}

// MockUserDirectoryServiceServer is a mock of UserDirectoryServiceServer interface.
type MockUserDirectoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserDirectoryServiceServerMockRecorder
}

// MockUserDirectoryServiceServerMockRecorder is the mock recorder for MockUserDirectoryServiceServer.
type MockUserDirectoryServiceServerMockRecorder struct {
	mock *MockUserDirectoryServiceServer
}

// NewMockUserDirectoryServiceServer creates a new mock instance.
func NewMockUserDirectoryServiceServer(ctrl *gomock.Controller) *MockUserDirectoryServiceServer {
	mock := &MockUserDirectoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockUserDirectoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDirectoryServiceServer) EXPECT() *MockUserDirectoryServiceServerMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockUserDirectoryServiceServer) DeleteUser(arg0 context.Context, arg1 *directorypb.DeleteUserRequest) (*directorypb.DeleteUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(*directorypb.DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserDirectoryServiceServerMockRecorder) DeleteUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserDirectoryServiceServer)(nil).DeleteUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockUserDirectoryServiceServer) GetUser(arg0 context.Context, arg1 *directorypb.GetUserRequest) (*directorypb.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*directorypb.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserDirectoryServiceServerMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserDirectoryServiceServer)(nil).GetUser), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockUserDirectoryServiceServer) UpdateUser(arg0 context.Context, arg1 *directorypb.UpdateUserRequest) (*directorypb.UpdateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*directorypb.UpdateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserDirectoryServiceServerMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserDirectoryServiceServer)(nil).UpdateUser), arg0, arg1)
}

// UpsertUser mocks base method.
func (m *MockUserDirectoryServiceServer) UpsertUser(arg0 context.Context, arg1 *directorypb.UpsertUserRequest) (*directorypb.UpsertUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUser", arg0, arg1)
	ret0, _ := ret[0].(*directorypb.UpsertUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertUser indicates an expected call of UpsertUser.
func (mr *MockUserDirectoryServiceServerMockRecorder) UpsertUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUser", reflect.TypeOf((*MockUserDirectoryServiceServer)(nil).UpsertUser), arg0, arg1)
}

// MockOrgDirectoryServiceClient is a mock of OrgDirectoryServiceClient interface.
type MockOrgDirectoryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrgDirectoryServiceClientMockRecorder
}

// MockOrgDirectoryServiceClientMockRecorder is the mock recorder for MockOrgDirectoryServiceClient.
type MockOrgDirectoryServiceClientMockRecorder struct {
	mock *MockOrgDirectoryServiceClient
}

// NewMockOrgDirectoryServiceClient creates a new mock instance.
func NewMockOrgDirectoryServiceClient(ctrl *gomock.Controller) *MockOrgDirectoryServiceClient {
	mock := &MockOrgDirectoryServiceClient{ctrl: ctrl}
	mock.recorder = &MockOrgDirectoryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrgDirectoryServiceClient) EXPECT() *MockOrgDirectoryServiceClientMockRecorder {
	return m.recorder
}

// CreateOrg mocks base method.
func (m *MockOrgDirectoryServiceClient) CreateOrg(ctx context.Context, in *directorypb.CreateOrgRequest, opts ...grpc.CallOption) (*directorypb.CreateOrgResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrg", varargs...)
	ret0, _ := ret[0].(*directorypb.CreateOrgResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrg indicates an expected call of CreateOrg.
func (mr *MockOrgDirectoryServiceClientMockRecorder) CreateOrg(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrg", reflect.TypeOf((*MockOrgDirectoryServiceClient)(nil).CreateOrg), varargs...)
}

// DeleteOrg mocks base method.
func (m *MockOrgDirectoryServiceClient) DeleteOrg(ctx context.Context, in *directorypb.DeleteOrgRequest, opts ...grpc.CallOption) (*directorypb.DeleteOrgResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOrg", varargs...)
	ret0, _ := ret[0].(*directorypb.DeleteOrgResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrg indicates an expected call of DeleteOrg.
func (mr *MockOrgDirectoryServiceClientMockRecorder) DeleteOrg(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrg", reflect.TypeOf((*MockOrgDirectoryServiceClient)(nil).DeleteOrg), varargs...)
}

// GetOrg mocks base method.
func (m *MockOrgDirectoryServiceClient) GetOrg(ctx context.Context, in *directorypb.GetOrgRequest, opts ...grpc.CallOption) (*directorypb.GetOrgResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrg", varargs...)
	ret0, _ := ret[0].(*directorypb.GetOrgResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrg indicates an expected call of GetOrg.
func (mr *MockOrgDirectoryServiceClientMockRecorder) GetOrg(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrg", reflect.TypeOf((*MockOrgDirectoryServiceClient)(nil).GetOrg), varargs...)
}

// MockOrgDirectoryServiceServer is a mock of OrgDirectoryServiceServer interface.
type MockOrgDirectoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockOrgDirectoryServiceServerMockRecorder
}

// MockOrgDirectoryServiceServerMockRecorder is the mock recorder for MockOrgDirectoryServiceServer.
type MockOrgDirectoryServiceServerMockRecorder struct {
	mock *MockOrgDirectoryServiceServer
}

// NewMockOrgDirectoryServiceServer creates a new mock instance.
func NewMockOrgDirectoryServiceServer(ctrl *gomock.Controller) *MockOrgDirectoryServiceServer {
	mock := &MockOrgDirectoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockOrgDirectoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrgDirectoryServiceServer) EXPECT() *MockOrgDirectoryServiceServerMockRecorder {
	return m.recorder
}

// CreateOrg mocks base method.
func (m *MockOrgDirectoryServiceServer) CreateOrg(arg0 context.Context, arg1 *directorypb.CreateOrgRequest) (*directorypb.CreateOrgResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrg", arg0, arg1)
	ret0, _ := ret[0].(*directorypb.CreateOrgResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrg indicates an expected call of CreateOrg.
func (mr *MockOrgDirectoryServiceServerMockRecorder) CreateOrg(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrg", reflect.TypeOf((*MockOrgDirectoryServiceServer)(nil).CreateOrg), arg0, arg1)
}

// DeleteOrg mocks base method.
func (m *MockOrgDirectoryServiceServer) DeleteOrg(arg0 context.Context, arg1 *directorypb.DeleteOrgRequest) (*directorypb.DeleteOrgResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrg", arg0, arg1)
	ret0, _ := ret[0].(*directorypb.DeleteOrgResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrg indicates an expected call of DeleteOrg.
func (mr *MockOrgDirectoryServiceServerMockRecorder) DeleteOrg(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrg", reflect.TypeOf((*MockOrgDirectoryServiceServer)(nil).DeleteOrg), arg0, arg1)
}

// GetOrg mocks base method.
func (m *MockOrgDirectoryServiceServer) GetOrg(arg0 context.Context, arg1 *directorypb.GetOrgRequest) (*directorypb.GetOrgResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrg", arg0, arg1)
	ret0, _ := ret[0].(*directorypb.GetOrgResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrg indicates an expected call of GetOrg.
func (mr *MockOrgDirectoryServiceServerMockRecorder) GetOrg(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrg", reflect.TypeOf((*MockOrgDirectoryServiceServer)(nil).GetOrg), arg0, arg1)
}

// MockOrgUserManagementServiceClient is a mock of OrgUserManagementServiceClient interface.
type MockOrgUserManagementServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrgUserManagementServiceClientMockRecorder
}

// MockOrgUserManagementServiceClientMockRecorder is the mock recorder for MockOrgUserManagementServiceClient.
type MockOrgUserManagementServiceClientMockRecorder struct {
	mock *MockOrgUserManagementServiceClient
}

// NewMockOrgUserManagementServiceClient creates a new mock instance.
func NewMockOrgUserManagementServiceClient(ctrl *gomock.Controller) *MockOrgUserManagementServiceClient {
	mock := &MockOrgUserManagementServiceClient{ctrl: ctrl}
	mock.recorder = &MockOrgUserManagementServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrgUserManagementServiceClient) EXPECT() *MockOrgUserManagementServiceClientMockRecorder {
	return m.recorder
}

// GetUsers mocks base method.
func (m *MockOrgUserManagementServiceClient) GetUsers(ctx context.Context, in *directorypb.GetUsersRequest, opts ...grpc.CallOption) (*directorypb.GetUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsers", varargs...)
	ret0, _ := ret[0].(*directorypb.GetUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockOrgUserManagementServiceClientMockRecorder) GetUsers(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockOrgUserManagementServiceClient)(nil).GetUsers), varargs...)
}

// GrantUserScopes mocks base method.
func (m *MockOrgUserManagementServiceClient) GrantUserScopes(ctx context.Context, in *directorypb.GrantUserScopesRequest, opts ...grpc.CallOption) (*directorypb.GrantUserScopesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GrantUserScopes", varargs...)
	ret0, _ := ret[0].(*directorypb.GrantUserScopesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantUserScopes indicates an expected call of GrantUserScopes.
func (mr *MockOrgUserManagementServiceClientMockRecorder) GrantUserScopes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantUserScopes", reflect.TypeOf((*MockOrgUserManagementServiceClient)(nil).GrantUserScopes), varargs...)
}

// ListOrgs mocks base method.
func (m *MockOrgUserManagementServiceClient) ListOrgs(ctx context.Context, in *directorypb.ListOrgsRequest, opts ...grpc.CallOption) (*directorypb.ListOrgsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrgs", varargs...)
	ret0, _ := ret[0].(*directorypb.ListOrgsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrgs indicates an expected call of ListOrgs.
func (mr *MockOrgUserManagementServiceClientMockRecorder) ListOrgs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgs", reflect.TypeOf((*MockOrgUserManagementServiceClient)(nil).ListOrgs), varargs...)
}

// RevokeUserScopes mocks base method.
func (m *MockOrgUserManagementServiceClient) RevokeUserScopes(ctx context.Context, in *directorypb.RevokeUserScopesRequest, opts ...grpc.CallOption) (*directorypb.RevokeUserScopesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeUserScopes", varargs...)
	ret0, _ := ret[0].(*directorypb.RevokeUserScopesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeUserScopes indicates an expected call of RevokeUserScopes.
func (mr *MockOrgUserManagementServiceClientMockRecorder) RevokeUserScopes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserScopes", reflect.TypeOf((*MockOrgUserManagementServiceClient)(nil).RevokeUserScopes), varargs...)
}

// MockOrgUserManagementServiceServer is a mock of OrgUserManagementServiceServer interface.
type MockOrgUserManagementServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockOrgUserManagementServiceServerMockRecorder
}

// MockOrgUserManagementServiceServerMockRecorder is the mock recorder for MockOrgUserManagementServiceServer.
type MockOrgUserManagementServiceServerMockRecorder struct {
	mock *MockOrgUserManagementServiceServer
}

// NewMockOrgUserManagementServiceServer creates a new mock instance.
func NewMockOrgUserManagementServiceServer(ctrl *gomock.Controller) *MockOrgUserManagementServiceServer {
	mock := &MockOrgUserManagementServiceServer{ctrl: ctrl}
	mock.recorder = &MockOrgUserManagementServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrgUserManagementServiceServer) EXPECT() *MockOrgUserManagementServiceServerMockRecorder {
	return m.recorder
}

// GetUsers mocks base method.
func (m *MockOrgUserManagementServiceServer) GetUsers(arg0 context.Context, arg1 *directorypb.GetUsersRequest) (*directorypb.GetUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].(*directorypb.GetUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockOrgUserManagementServiceServerMockRecorder) GetUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockOrgUserManagementServiceServer)(nil).GetUsers), arg0, arg1)
}

// GrantUserScopes mocks base method.
func (m *MockOrgUserManagementServiceServer) GrantUserScopes(arg0 context.Context, arg1 *directorypb.GrantUserScopesRequest) (*directorypb.GrantUserScopesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantUserScopes", arg0, arg1)
	ret0, _ := ret[0].(*directorypb.GrantUserScopesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantUserScopes indicates an expected call of GrantUserScopes.
func (mr *MockOrgUserManagementServiceServerMockRecorder) GrantUserScopes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantUserScopes", reflect.TypeOf((*MockOrgUserManagementServiceServer)(nil).GrantUserScopes), arg0, arg1)
}

// ListOrgs mocks base method.
func (m *MockOrgUserManagementServiceServer) ListOrgs(arg0 context.Context, arg1 *directorypb.ListOrgsRequest) (*directorypb.ListOrgsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgs", arg0, arg1)
	ret0, _ := ret[0].(*directorypb.ListOrgsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrgs indicates an expected call of ListOrgs.
func (mr *MockOrgUserManagementServiceServerMockRecorder) ListOrgs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgs", reflect.TypeOf((*MockOrgUserManagementServiceServer)(nil).ListOrgs), arg0, arg1)
}

// RevokeUserScopes mocks base method.
func (m *MockOrgUserManagementServiceServer) RevokeUserScopes(arg0 context.Context, arg1 *directorypb.RevokeUserScopesRequest) (*directorypb.RevokeUserScopesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeUserScopes", arg0, arg1)
	ret0, _ := ret[0].(*directorypb.RevokeUserScopesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeUserScopes indicates an expected call of RevokeUserScopes.
func (mr *MockOrgUserManagementServiceServerMockRecorder) RevokeUserScopes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserScopes", reflect.TypeOf((*MockOrgUserManagementServiceServer)(nil).RevokeUserScopes), arg0, arg1)
}
