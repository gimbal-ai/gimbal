// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/controlplane/egw/egwpb/v1/egwpb.proto

package egwpb

import (
	context "context"
	fmt "fmt"
	v1 "gimletlabs.ai/gimlet/src/api/corepb/v1"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BridgeRequest struct {
	Topic v1.EdgeCPTopic `protobuf:"varint,1,opt,name=topic,proto3,enum=gml.internal.api.core.v1.EdgeCPTopic" json:"topic,omitempty"`
	Msg   *types.Any     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *BridgeRequest) Reset()      { *m = BridgeRequest{} }
func (*BridgeRequest) ProtoMessage() {}
func (*BridgeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c5010ad21c5e933, []int{0}
}
func (m *BridgeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeRequest.Merge(m, src)
}
func (m *BridgeRequest) XXX_Size() int {
	return m.Size()
}
func (m *BridgeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeRequest proto.InternalMessageInfo

func (m *BridgeRequest) GetTopic() v1.EdgeCPTopic {
	if m != nil {
		return m.Topic
	}
	return v1.EDGE_CP_TOPIC_UNKNOWN
}

func (m *BridgeRequest) GetMsg() *types.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

type BridgeResponse struct {
	Topic v1.CPEdgeTopic `protobuf:"varint,1,opt,name=topic,proto3,enum=gml.internal.api.core.v1.CPEdgeTopic" json:"topic,omitempty"`
	Msg   *types.Any     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *BridgeResponse) Reset()      { *m = BridgeResponse{} }
func (*BridgeResponse) ProtoMessage() {}
func (*BridgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c5010ad21c5e933, []int{1}
}
func (m *BridgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeResponse.Merge(m, src)
}
func (m *BridgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *BridgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeResponse proto.InternalMessageInfo

func (m *BridgeResponse) GetTopic() v1.CPEdgeTopic {
	if m != nil {
		return m.Topic
	}
	return v1.CP_EDGE_TOPIC_UNKNOWN
}

func (m *BridgeResponse) GetMsg() *types.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

func init() {
	proto.RegisterType((*BridgeRequest)(nil), "gml.internal.controlplane.egw.v1.BridgeRequest")
	proto.RegisterType((*BridgeResponse)(nil), "gml.internal.controlplane.egw.v1.BridgeResponse")
}

func init() {
	proto.RegisterFile("src/controlplane/egw/egwpb/v1/egwpb.proto", fileDescriptor_9c5010ad21c5e933)
}

var fileDescriptor_9c5010ad21c5e933 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xbf, 0x6a, 0x2a, 0x41,
	0x14, 0xc6, 0x77, 0xee, 0xe5, 0x5a, 0xcc, 0x25, 0x16, 0x4b, 0x0a, 0x63, 0x31, 0x11, 0x21, 0xc1,
	0x34, 0x67, 0xd4, 0x34, 0x01, 0xab, 0x28, 0x92, 0x56, 0x4c, 0x20, 0x90, 0x26, 0xec, 0xae, 0x27,
	0xc3, 0xc0, 0x3a, 0x33, 0xd9, 0x5d, 0x57, 0x2c, 0x02, 0x79, 0x84, 0x3c, 0x46, 0x1e, 0x25, 0xa5,
	0xa5, 0x65, 0x1c, 0x9b, 0x94, 0x3e, 0x42, 0x58, 0x07, 0x21, 0x36, 0xf9, 0x57, 0x0c, 0x9c, 0x81,
	0xef, 0x3b, 0xbf, 0x6f, 0x3e, 0x86, 0x9e, 0xa4, 0x49, 0xc4, 0x23, 0xad, 0xb2, 0x44, 0xc7, 0x26,
	0x0e, 0x14, 0x72, 0x14, 0xd3, 0xe2, 0x98, 0x90, 0xe7, 0x2d, 0x37, 0x80, 0x49, 0x74, 0xa6, 0xfd,
	0x9a, 0x18, 0xc7, 0x20, 0x55, 0x86, 0x89, 0x0a, 0x62, 0xf8, 0xe8, 0x01, 0x14, 0x53, 0xc8, 0x5b,
	0xd5, 0x03, 0xa1, 0xb5, 0x88, 0x91, 0x6f, 0xf4, 0xe1, 0xe4, 0x8e, 0x07, 0x6a, 0xe6, 0xcc, 0xd5,
	0xc3, 0x82, 0x13, 0x18, 0xc9, 0x23, 0x9d, 0xa0, 0xdb, 0x1d, 0x99, 0x5b, 0x1c, 0x09, 0x74, 0x82,
	0x7a, 0x46, 0xf7, 0xba, 0x89, 0x1c, 0x09, 0x1c, 0xe2, 0xfd, 0x04, 0xd3, 0xcc, 0xef, 0xd0, 0x7f,
	0x99, 0x36, 0x32, 0xaa, 0x90, 0x1a, 0x69, 0x94, 0xdb, 0x47, 0xb0, 0x83, 0x0f, 0x8c, 0x84, 0x62,
	0x15, 0xe4, 0x2d, 0xe8, 0x8f, 0x04, 0xf6, 0x06, 0x57, 0x85, 0x78, 0xe8, 0x3c, 0xfe, 0x31, 0xfd,
	0x3b, 0x4e, 0x45, 0xe5, 0x4f, 0x8d, 0x34, 0xfe, 0xb7, 0xf7, 0xc1, 0xe5, 0x82, 0x6d, 0x2e, 0x38,
	0x57, 0xb3, 0x61, 0x21, 0xa8, 0x4f, 0x68, 0x79, 0x4b, 0x4d, 0x8d, 0x56, 0x29, 0xfe, 0x00, 0xdb,
	0x1b, 0x14, 0xe0, 0xdf, 0x60, 0xdb, 0x0f, 0x94, 0xf6, 0x2f, 0xae, 0x2f, 0x31, 0xc9, 0x65, 0x84,
	0xbe, 0xa6, 0x25, 0x17, 0xc2, 0xe7, 0xf0, 0x55, 0xc7, 0xb0, 0x53, 0x52, 0xb5, 0xf9, 0x7d, 0x83,
	0x7b, 0x5f, 0x83, 0x34, 0x49, 0x57, 0xcd, 0x97, 0xcc, 0x5b, 0x2c, 0x99, 0xb7, 0x5e, 0x32, 0xf2,
	0x68, 0x19, 0x79, 0xb6, 0x8c, 0xbc, 0x58, 0x46, 0xe6, 0x96, 0x91, 0x57, 0xcb, 0xc8, 0x9b, 0x65,
	0xde, 0xda, 0x32, 0xf2, 0xb4, 0x62, 0xde, 0x7c, 0xc5, 0xbc, 0xc5, 0x8a, 0x79, 0x37, 0x67, 0x42,
	0x8e, 0x63, 0xcc, 0xe2, 0x20, 0x4c, 0x21, 0x90, 0xdc, 0xdd, 0xf8, 0xa7, 0xff, 0xa7, 0xb3, 0x19,
	0xc2, 0xd2, 0xa6, 0x81, 0xd3, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9c, 0xba, 0x89, 0xa3, 0x6d,
	0x02, 0x00, 0x00,
}

func (this *BridgeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BridgeRequest)
	if !ok {
		that2, ok := that.(BridgeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *BridgeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BridgeResponse)
	if !ok {
		that2, ok := that.(BridgeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *BridgeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&egwpb.BridgeRequest{")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BridgeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&egwpb.BridgeResponse{")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEgwpb(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EGWServiceClient is the client API for EGWService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EGWServiceClient interface {
	Bridge(ctx context.Context, opts ...grpc.CallOption) (EGWService_BridgeClient, error)
}

type eGWServiceClient struct {
	cc *grpc.ClientConn
}

func NewEGWServiceClient(cc *grpc.ClientConn) EGWServiceClient {
	return &eGWServiceClient{cc}
}

func (c *eGWServiceClient) Bridge(ctx context.Context, opts ...grpc.CallOption) (EGWService_BridgeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EGWService_serviceDesc.Streams[0], "/gml.internal.controlplane.egw.v1.EGWService/Bridge", opts...)
	if err != nil {
		return nil, err
	}
	x := &eGWServiceBridgeClient{stream}
	return x, nil
}

type EGWService_BridgeClient interface {
	Send(*BridgeRequest) error
	Recv() (*BridgeResponse, error)
	grpc.ClientStream
}

type eGWServiceBridgeClient struct {
	grpc.ClientStream
}

func (x *eGWServiceBridgeClient) Send(m *BridgeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eGWServiceBridgeClient) Recv() (*BridgeResponse, error) {
	m := new(BridgeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EGWServiceServer is the server API for EGWService service.
type EGWServiceServer interface {
	Bridge(EGWService_BridgeServer) error
}

// UnimplementedEGWServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEGWServiceServer struct {
}

func (*UnimplementedEGWServiceServer) Bridge(srv EGWService_BridgeServer) error {
	return status.Errorf(codes.Unimplemented, "method Bridge not implemented")
}

func RegisterEGWServiceServer(s *grpc.Server, srv EGWServiceServer) {
	s.RegisterService(&_EGWService_serviceDesc, srv)
}

func _EGWService_Bridge_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EGWServiceServer).Bridge(&eGWServiceBridgeServer{stream})
}

type EGWService_BridgeServer interface {
	Send(*BridgeResponse) error
	Recv() (*BridgeRequest, error)
	grpc.ServerStream
}

type eGWServiceBridgeServer struct {
	grpc.ServerStream
}

func (x *eGWServiceBridgeServer) Send(m *BridgeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eGWServiceBridgeServer) Recv() (*BridgeRequest, error) {
	m := new(BridgeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EGWService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gml.internal.controlplane.egw.v1.EGWService",
	HandlerType: (*EGWServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Bridge",
			Handler:       _EGWService_Bridge_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/controlplane/egw/egwpb/v1/egwpb.proto",
}

func (m *BridgeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEgwpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Topic != 0 {
		i = encodeVarintEgwpb(dAtA, i, uint64(m.Topic))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BridgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEgwpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Topic != 0 {
		i = encodeVarintEgwpb(dAtA, i, uint64(m.Topic))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEgwpb(dAtA []byte, offset int, v uint64) int {
	offset -= sovEgwpb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BridgeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != 0 {
		n += 1 + sovEgwpb(uint64(m.Topic))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovEgwpb(uint64(l))
	}
	return n
}

func (m *BridgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != 0 {
		n += 1 + sovEgwpb(uint64(m.Topic))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovEgwpb(uint64(l))
	}
	return n
}

func sovEgwpb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEgwpb(x uint64) (n int) {
	return sovEgwpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BridgeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BridgeRequest{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BridgeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BridgeResponse{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEgwpb(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BridgeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEgwpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			m.Topic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEgwpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topic |= v1.EdgeCPTopic(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEgwpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEgwpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEgwpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEgwpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEgwpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEgwpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			m.Topic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEgwpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topic |= v1.CPEdgeTopic(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEgwpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEgwpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEgwpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEgwpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEgwpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEgwpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEgwpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEgwpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEgwpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEgwpb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEgwpb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEgwpb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEgwpb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEgwpb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEgwpb = fmt.Errorf("proto: unexpected end of group")
)
