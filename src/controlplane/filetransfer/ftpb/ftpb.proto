/*
 * Copyright Â© 2023- Gimlet Labs, Inc.
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Gimlet Labs, Inc. and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Gimlet Labs, Inc. and its suppliers and
 * may be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law. Dissemination
 * of this information or reproduction of this material is strictly
 * forbidden unless prior written permission is obtained from
 * Gimlet Labs, Inc.
 *
 * SPDX-License-Identifier: Proprietary
 */

syntax = "proto3";

package gml.internal.controlplane.filetransfer.v1;

option go_package = "gimletlabs.ai/gimlet/src/controlplane/filetransfer/ftpb/v1;ftpb";

import "gogoproto/gogo.proto";
import "src/common/typespb/uuid.proto";

// ================== File Transfer Service ==================
enum FileStatus {
  FILE_STATUS_UNKNOWN = 0;
  FILE_STATUS_CREATED = 10;
  FILE_STATUS_READY = 20;
}

message FileInfo {
  gml.types.UUID file_id = 1 [ (gogoproto.customname) = "FileID" ];
  FileStatus status = 2;
  string name = 3;
  uint64 size_bytes = 4;
  string sha256sum = 5;
}

message CreateFileInfoRequest {
  string name = 1;
}

message CreateFileInfoResponse {
  FileInfo info = 1;
}

message GetFileInfoRequest {
  gml.types.UUID file_id = 1 [ (gogoproto.customname) = "FileID" ];
}

message GetFileInfoResponse {
  FileInfo info = 1;
}

message UploadFileRequest {
  // file_id should be in at least the first UploadRequestMessage.
  gml.types.UUID file_id = 1 [ (gogoproto.customname) = "FileID" ];
  // The sha256sum of the file. Needs to be in at-least the first message.
  string sha256sum = 2;
  // Chunk of the file.
  bytes chunk = 3;
}

message UploadFileResponse {
  // The file id to reference this file
  gml.types.UUID file_id = 1 [ (gogoproto.customname) = "FileID" ];
  // The size of the file.
  uint64 size_bytes = 2;
}

message DownloadFileRequest {
  gml.types.UUID file_id = 1 [ (gogoproto.customname) = "FileID" ];
}

message DownloadFileResponse {
  bytes chunk = 1;
}

message DeleteFileRequest {
  gml.types.UUID file_id = 1 [ (gogoproto.customname) = "FileID" ];
}

message DeleteFileResponse {}

// FileTransferService is responsible to holding and transferring files.
service FileTransferService {
  rpc CreateFileInfo(CreateFileInfoRequest) returns (CreateFileInfoResponse);
  rpc GetFileInfo(GetFileInfoRequest) returns (GetFileInfoResponse);

  rpc UploadFile(stream UploadFileRequest) returns (UploadFileResponse);
  rpc DownloadFile(DownloadFileRequest) returns (stream DownloadFileResponse);
  rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse);
}
