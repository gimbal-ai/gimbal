// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/controlplane/filetransfer/ftpb/v1/ftpb.proto

package ftpb

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	typespb "gimletlabs.ai/gimlet/src/common/typespb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FileStatus int32

const (
	FILE_STATUS_UNKNOWN FileStatus = 0
	FILE_STATUS_CREATED FileStatus = 10
	FILE_STATUS_READY   FileStatus = 20
	FILE_STATUS_DELETED FileStatus = 30
)

var FileStatus_name = map[int32]string{
	0:  "FILE_STATUS_UNKNOWN",
	10: "FILE_STATUS_CREATED",
	20: "FILE_STATUS_READY",
	30: "FILE_STATUS_DELETED",
}

var FileStatus_value = map[string]int32{
	"FILE_STATUS_UNKNOWN": 0,
	"FILE_STATUS_CREATED": 10,
	"FILE_STATUS_READY":   20,
	"FILE_STATUS_DELETED": 30,
}

func (FileStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3021a3ff6bdd3aaf, []int{0}
}

type FileInfo struct {
	FileID    *typespb.UUID `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty" db:"id"`
	Status    FileStatus    `protobuf:"varint,2,opt,name=status,proto3,enum=gml.internal.controlplane.filetransfer.v1.FileStatus" json:"status,omitempty"`
	Name      string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	SizeBytes uint64        `protobuf:"varint,4,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty" db:"size_bytes"`
	Sha256Sum string        `protobuf:"bytes,5,opt,name=sha256sum,proto3" json:"sha256sum,omitempty" db:"sha256sum"`
}

func (m *FileInfo) Reset()      { *m = FileInfo{} }
func (*FileInfo) ProtoMessage() {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3021a3ff6bdd3aaf, []int{0}
}
func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(m, src)
}
func (m *FileInfo) XXX_Size() int {
	return m.Size()
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetFileID() *typespb.UUID {
	if m != nil {
		return m.FileID
	}
	return nil
}

func (m *FileInfo) GetStatus() FileStatus {
	if m != nil {
		return m.Status
	}
	return FILE_STATUS_UNKNOWN
}

func (m *FileInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileInfo) GetSizeBytes() uint64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

func (m *FileInfo) GetSha256Sum() string {
	if m != nil {
		return m.Sha256Sum
	}
	return ""
}

type CreateFileInfoRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CreateFileInfoRequest) Reset()      { *m = CreateFileInfoRequest{} }
func (*CreateFileInfoRequest) ProtoMessage() {}
func (*CreateFileInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3021a3ff6bdd3aaf, []int{1}
}
func (m *CreateFileInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateFileInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateFileInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateFileInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFileInfoRequest.Merge(m, src)
}
func (m *CreateFileInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateFileInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFileInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFileInfoRequest proto.InternalMessageInfo

func (m *CreateFileInfoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateFileInfoResponse struct {
	Info *FileInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *CreateFileInfoResponse) Reset()      { *m = CreateFileInfoResponse{} }
func (*CreateFileInfoResponse) ProtoMessage() {}
func (*CreateFileInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3021a3ff6bdd3aaf, []int{2}
}
func (m *CreateFileInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateFileInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateFileInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateFileInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFileInfoResponse.Merge(m, src)
}
func (m *CreateFileInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateFileInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFileInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFileInfoResponse proto.InternalMessageInfo

func (m *CreateFileInfoResponse) GetInfo() *FileInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type GetFileInfoRequest struct {
	FileID *typespb.UUID `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
}

func (m *GetFileInfoRequest) Reset()      { *m = GetFileInfoRequest{} }
func (*GetFileInfoRequest) ProtoMessage() {}
func (*GetFileInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3021a3ff6bdd3aaf, []int{3}
}
func (m *GetFileInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFileInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFileInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFileInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFileInfoRequest.Merge(m, src)
}
func (m *GetFileInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFileInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFileInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFileInfoRequest proto.InternalMessageInfo

func (m *GetFileInfoRequest) GetFileID() *typespb.UUID {
	if m != nil {
		return m.FileID
	}
	return nil
}

type GetFileInfoResponse struct {
	Info *FileInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *GetFileInfoResponse) Reset()      { *m = GetFileInfoResponse{} }
func (*GetFileInfoResponse) ProtoMessage() {}
func (*GetFileInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3021a3ff6bdd3aaf, []int{4}
}
func (m *GetFileInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFileInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFileInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFileInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFileInfoResponse.Merge(m, src)
}
func (m *GetFileInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFileInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFileInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFileInfoResponse proto.InternalMessageInfo

func (m *GetFileInfoResponse) GetInfo() *FileInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type GetFileInfoByNameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetFileInfoByNameRequest) Reset()      { *m = GetFileInfoByNameRequest{} }
func (*GetFileInfoByNameRequest) ProtoMessage() {}
func (*GetFileInfoByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3021a3ff6bdd3aaf, []int{5}
}
func (m *GetFileInfoByNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFileInfoByNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFileInfoByNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFileInfoByNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFileInfoByNameRequest.Merge(m, src)
}
func (m *GetFileInfoByNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFileInfoByNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFileInfoByNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFileInfoByNameRequest proto.InternalMessageInfo

func (m *GetFileInfoByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetFileInfoByNameResponse struct {
	Info *FileInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *GetFileInfoByNameResponse) Reset()      { *m = GetFileInfoByNameResponse{} }
func (*GetFileInfoByNameResponse) ProtoMessage() {}
func (*GetFileInfoByNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3021a3ff6bdd3aaf, []int{6}
}
func (m *GetFileInfoByNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFileInfoByNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFileInfoByNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFileInfoByNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFileInfoByNameResponse.Merge(m, src)
}
func (m *GetFileInfoByNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFileInfoByNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFileInfoByNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFileInfoByNameResponse proto.InternalMessageInfo

func (m *GetFileInfoByNameResponse) GetInfo() *FileInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type UploadFileRequest struct {
	FileID    *typespb.UUID `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Sha256Sum string        `protobuf:"bytes,2,opt,name=sha256sum,proto3" json:"sha256sum,omitempty"`
	Chunk     []byte        `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (m *UploadFileRequest) Reset()      { *m = UploadFileRequest{} }
func (*UploadFileRequest) ProtoMessage() {}
func (*UploadFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3021a3ff6bdd3aaf, []int{7}
}
func (m *UploadFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileRequest.Merge(m, src)
}
func (m *UploadFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *UploadFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileRequest proto.InternalMessageInfo

func (m *UploadFileRequest) GetFileID() *typespb.UUID {
	if m != nil {
		return m.FileID
	}
	return nil
}

func (m *UploadFileRequest) GetSha256Sum() string {
	if m != nil {
		return m.Sha256Sum
	}
	return ""
}

func (m *UploadFileRequest) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

type UploadFileResponse struct {
	FileID    *typespb.UUID `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	SizeBytes uint64        `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
}

func (m *UploadFileResponse) Reset()      { *m = UploadFileResponse{} }
func (*UploadFileResponse) ProtoMessage() {}
func (*UploadFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3021a3ff6bdd3aaf, []int{8}
}
func (m *UploadFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileResponse.Merge(m, src)
}
func (m *UploadFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *UploadFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileResponse proto.InternalMessageInfo

func (m *UploadFileResponse) GetFileID() *typespb.UUID {
	if m != nil {
		return m.FileID
	}
	return nil
}

func (m *UploadFileResponse) GetSizeBytes() uint64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

type DownloadFileRequest struct {
	FileID *typespb.UUID `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
}

func (m *DownloadFileRequest) Reset()      { *m = DownloadFileRequest{} }
func (*DownloadFileRequest) ProtoMessage() {}
func (*DownloadFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3021a3ff6bdd3aaf, []int{9}
}
func (m *DownloadFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownloadFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownloadFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownloadFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadFileRequest.Merge(m, src)
}
func (m *DownloadFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *DownloadFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadFileRequest proto.InternalMessageInfo

func (m *DownloadFileRequest) GetFileID() *typespb.UUID {
	if m != nil {
		return m.FileID
	}
	return nil
}

type DownloadFileResponse struct {
	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (m *DownloadFileResponse) Reset()      { *m = DownloadFileResponse{} }
func (*DownloadFileResponse) ProtoMessage() {}
func (*DownloadFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3021a3ff6bdd3aaf, []int{10}
}
func (m *DownloadFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownloadFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownloadFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownloadFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadFileResponse.Merge(m, src)
}
func (m *DownloadFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *DownloadFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadFileResponse proto.InternalMessageInfo

func (m *DownloadFileResponse) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

type DeleteFileRequest struct {
	FileID *typespb.UUID `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Purge  bool          `protobuf:"varint,2,opt,name=purge,proto3" json:"purge,omitempty"`
}

func (m *DeleteFileRequest) Reset()      { *m = DeleteFileRequest{} }
func (*DeleteFileRequest) ProtoMessage() {}
func (*DeleteFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3021a3ff6bdd3aaf, []int{11}
}
func (m *DeleteFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFileRequest.Merge(m, src)
}
func (m *DeleteFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFileRequest proto.InternalMessageInfo

func (m *DeleteFileRequest) GetFileID() *typespb.UUID {
	if m != nil {
		return m.FileID
	}
	return nil
}

func (m *DeleteFileRequest) GetPurge() bool {
	if m != nil {
		return m.Purge
	}
	return false
}

type DeleteFileResponse struct {
}

func (m *DeleteFileResponse) Reset()      { *m = DeleteFileResponse{} }
func (*DeleteFileResponse) ProtoMessage() {}
func (*DeleteFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3021a3ff6bdd3aaf, []int{12}
}
func (m *DeleteFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFileResponse.Merge(m, src)
}
func (m *DeleteFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFileResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("gml.internal.controlplane.filetransfer.v1.FileStatus", FileStatus_name, FileStatus_value)
	proto.RegisterType((*FileInfo)(nil), "gml.internal.controlplane.filetransfer.v1.FileInfo")
	proto.RegisterType((*CreateFileInfoRequest)(nil), "gml.internal.controlplane.filetransfer.v1.CreateFileInfoRequest")
	proto.RegisterType((*CreateFileInfoResponse)(nil), "gml.internal.controlplane.filetransfer.v1.CreateFileInfoResponse")
	proto.RegisterType((*GetFileInfoRequest)(nil), "gml.internal.controlplane.filetransfer.v1.GetFileInfoRequest")
	proto.RegisterType((*GetFileInfoResponse)(nil), "gml.internal.controlplane.filetransfer.v1.GetFileInfoResponse")
	proto.RegisterType((*GetFileInfoByNameRequest)(nil), "gml.internal.controlplane.filetransfer.v1.GetFileInfoByNameRequest")
	proto.RegisterType((*GetFileInfoByNameResponse)(nil), "gml.internal.controlplane.filetransfer.v1.GetFileInfoByNameResponse")
	proto.RegisterType((*UploadFileRequest)(nil), "gml.internal.controlplane.filetransfer.v1.UploadFileRequest")
	proto.RegisterType((*UploadFileResponse)(nil), "gml.internal.controlplane.filetransfer.v1.UploadFileResponse")
	proto.RegisterType((*DownloadFileRequest)(nil), "gml.internal.controlplane.filetransfer.v1.DownloadFileRequest")
	proto.RegisterType((*DownloadFileResponse)(nil), "gml.internal.controlplane.filetransfer.v1.DownloadFileResponse")
	proto.RegisterType((*DeleteFileRequest)(nil), "gml.internal.controlplane.filetransfer.v1.DeleteFileRequest")
	proto.RegisterType((*DeleteFileResponse)(nil), "gml.internal.controlplane.filetransfer.v1.DeleteFileResponse")
}

func init() {
	proto.RegisterFile("src/controlplane/filetransfer/ftpb/v1/ftpb.proto", fileDescriptor_3021a3ff6bdd3aaf)
}

var fileDescriptor_3021a3ff6bdd3aaf = []byte{
	// 813 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6f, 0xe2, 0x46,
	0x14, 0x66, 0x52, 0x42, 0xc2, 0x4b, 0x9a, 0x84, 0x81, 0xb4, 0x14, 0x35, 0x86, 0xfa, 0x44, 0x7f,
	0xc8, 0x4e, 0x48, 0xd3, 0x43, 0xdb, 0x34, 0x85, 0x98, 0x44, 0x34, 0x29, 0x95, 0x0c, 0xa8, 0x6a,
	0x0f, 0x45, 0x06, 0x06, 0x62, 0xd5, 0xd8, 0xae, 0x7f, 0xa4, 0x4a, 0xa5, 0x4a, 0xbd, 0x56, 0xe9,
	0xa1, 0x7b, 0xd8, 0xeb, 0x5e, 0xf6, 0xb2, 0x7f, 0xca, 0x1e, 0x73, 0xcc, 0x09, 0x6d, 0x9c, 0xcb,
	0x1e, 0x23, 0xfe, 0x82, 0xd5, 0xd8, 0x4e, 0x30, 0x10, 0xed, 0x06, 0xc8, 0xc9, 0x33, 0xf3, 0xde,
	0xf7, 0xbd, 0xef, 0xbd, 0x99, 0xf7, 0x64, 0xd8, 0x34, 0x8d, 0x26, 0xdf, 0xd4, 0x54, 0xcb, 0xd0,
	0x14, 0x5d, 0x91, 0x54, 0xc2, 0xb7, 0x65, 0x85, 0x58, 0x86, 0xa4, 0x9a, 0x6d, 0x62, 0xf0, 0x6d,
	0x4b, 0x6f, 0xf0, 0xa7, 0x5b, 0xee, 0x97, 0xd3, 0x0d, 0xcd, 0xd2, 0xf0, 0xa7, 0x9d, 0xae, 0xc2,
	0xc9, 0xaa, 0x45, 0x0c, 0x55, 0x52, 0xb8, 0x20, 0x94, 0x0b, 0x42, 0xb9, 0xd3, 0xad, 0x54, 0xa2,
	0xa3, 0x75, 0x34, 0x17, 0xc5, 0xd3, 0x95, 0x47, 0x90, 0xda, 0xf0, 0x42, 0x76, 0xbb, 0x9a, 0xca,
	0x5b, 0x67, 0x3a, 0x31, 0xf5, 0x06, 0x6f, 0xdb, 0x72, 0xcb, 0x33, 0xb3, 0xcf, 0xe7, 0x60, 0xf1,
	0x40, 0x56, 0x48, 0x49, 0x6d, 0x6b, 0x78, 0x0f, 0x16, 0x28, 0x69, 0x5d, 0x6e, 0x25, 0x51, 0x06,
	0x65, 0x97, 0x72, 0xab, 0x1c, 0x0d, 0xef, 0xc2, 0xb8, 0x5a, 0xad, 0x24, 0x14, 0xd6, 0x9d, 0x5e,
	0x3a, 0xe2, 0xfa, 0x0b, 0xfd, 0x5e, 0x7a, 0xa1, 0xd5, 0xf8, 0x9a, 0x95, 0x5b, 0xac, 0x18, 0xa1,
	0xb0, 0x52, 0x0b, 0xff, 0x08, 0x11, 0xd3, 0x92, 0x2c, 0xdb, 0x4c, 0xce, 0x65, 0x50, 0x76, 0x25,
	0xb7, 0xc3, 0x3d, 0x58, 0x3e, 0x47, 0x59, 0x2b, 0x2e, 0x58, 0xf4, 0x49, 0xf0, 0x27, 0x10, 0x56,
	0xa5, 0x2e, 0x49, 0xbe, 0x97, 0x41, 0xd9, 0x68, 0xe1, 0xfd, 0x7e, 0x2f, 0x1d, 0xa5, 0x11, 0xe9,
	0x19, 0x2b, 0xba, 0x26, 0x9c, 0x03, 0x30, 0xe5, 0xbf, 0x48, 0xbd, 0x71, 0x66, 0x11, 0x33, 0x19,
	0xce, 0xa0, 0x6c, 0xb8, 0x10, 0xef, 0xf7, 0xd2, 0xab, 0xd4, 0x71, 0x60, 0x61, 0xc5, 0x28, 0xdd,
	0x14, 0xe8, 0x1a, 0x6f, 0x42, 0xd4, 0x3c, 0x91, 0x72, 0x3b, 0x5f, 0x99, 0x76, 0x37, 0x39, 0xef,
	0x72, 0xe3, 0x7e, 0x2f, 0xbd, 0xe2, 0x42, 0x6e, 0x0d, 0x14, 0x71, 0xb7, 0xfe, 0x1c, 0xd6, 0xf7,
	0x0d, 0x22, 0x59, 0xe4, 0xb6, 0x54, 0x22, 0xf9, 0xc3, 0x26, 0xa6, 0x85, 0xb1, 0xaf, 0x90, 0x96,
	0x2b, 0xea, 0x49, 0x62, 0x25, 0xf8, 0x60, 0xd4, 0xd9, 0xd4, 0x35, 0xd5, 0x24, 0xf8, 0x10, 0xc2,
	0xb2, 0xda, 0xd6, 0xfc, 0xe2, 0x6e, 0x4f, 0x58, 0x1c, 0x97, 0xca, 0x25, 0x60, 0x7f, 0x00, 0x7c,
	0x48, 0xac, 0x51, 0x31, 0x5f, 0xbe, 0xf3, 0xfa, 0x60, 0x70, 0x7d, 0xb7, 0x77, 0xc6, 0xfe, 0x06,
	0xf1, 0x21, 0xae, 0xc7, 0xd6, 0xca, 0x41, 0x32, 0xc0, 0x5f, 0x38, 0x2b, 0x4b, 0x5d, 0xf2, 0xb6,
	0xf2, 0xb5, 0xe0, 0xa3, 0x7b, 0xfc, 0x1f, 0x5b, 0xd5, 0xdf, 0x10, 0xab, 0xe9, 0x8a, 0x26, 0xb5,
	0xe8, 0xf9, 0x4c, 0x05, 0xc4, 0x1f, 0x07, 0x9f, 0xd3, 0x9c, 0x9b, 0xc9, 0xe0, 0x00, 0x27, 0x60,
	0xbe, 0x79, 0x62, 0xab, 0xbf, 0xbb, 0x8f, 0x78, 0x59, 0xf4, 0x36, 0xac, 0x0c, 0x38, 0x18, 0xde,
	0xcf, 0x6e, 0xba, 0xf8, 0x1b, 0x43, 0x2d, 0x40, 0x05, 0x84, 0x03, 0xaf, 0x9d, 0x3d, 0x82, 0xb8,
	0xa0, 0xfd, 0xa9, 0x3e, 0x4a, 0xae, 0xec, 0x17, 0x90, 0x18, 0x26, 0xf3, 0x95, 0xdf, 0x65, 0x89,
	0x82, 0x59, 0xd6, 0x21, 0x26, 0x10, 0x85, 0x78, 0x9d, 0x30, 0x5b, 0x91, 0x13, 0x30, 0xaf, 0xdb,
	0x46, 0x87, 0xb8, 0xf9, 0x2d, 0x8a, 0xde, 0x86, 0x4d, 0x00, 0x0e, 0x06, 0xf0, 0xc4, 0x7c, 0xa6,
	0x02, 0x0c, 0x86, 0x09, 0xfe, 0x10, 0xe2, 0x07, 0xa5, 0xe3, 0x62, 0xbd, 0x52, 0xcd, 0x57, 0x6b,
	0x95, 0x7a, 0xad, 0x7c, 0x54, 0xfe, 0xe9, 0xe7, 0xf2, 0x5a, 0x68, 0xd4, 0xb0, 0x2f, 0x16, 0xf3,
	0xd5, 0xa2, 0xb0, 0x06, 0x78, 0x1d, 0x62, 0x41, 0x83, 0x58, 0xcc, 0x0b, 0xbf, 0xac, 0x25, 0x46,
	0xfd, 0x85, 0xe2, 0x71, 0x91, 0xfa, 0x33, 0xb9, 0xf3, 0x05, 0x88, 0xd3, 0x80, 0x55, 0xff, 0xb9,
	0x55, 0x88, 0x71, 0x2a, 0x37, 0x09, 0x7e, 0x8a, 0x60, 0x65, 0x78, 0x12, 0xe0, 0xef, 0x27, 0x78,
	0xb1, 0xf7, 0x4e, 0x9c, 0x54, 0x7e, 0x06, 0x06, 0xff, 0xb2, 0xfe, 0x43, 0xb0, 0x14, 0x68, 0x31,
	0xbc, 0x3b, 0x01, 0xe5, 0xf8, 0xd8, 0x49, 0x7d, 0x37, 0x2d, 0xdc, 0x97, 0xf3, 0x0c, 0x41, 0x6c,
	0xac, 0xe3, 0xf1, 0xfe, 0x74, 0xac, 0x43, 0xf3, 0x25, 0x25, 0xcc, 0x46, 0xe2, 0x0b, 0x3c, 0x47,
	0x00, 0x83, 0x6e, 0xc5, 0xdf, 0x4e, 0x40, 0x3a, 0x36, 0x63, 0x52, 0xbb, 0x53, 0xa2, 0x3d, 0x2d,
	0x59, 0x84, 0x9f, 0x20, 0x58, 0x0e, 0xf6, 0x20, 0x9e, 0xa4, 0xfe, 0xf7, 0x4c, 0x82, 0xd4, 0xde,
	0xd4, 0x78, 0x4f, 0xd3, 0x26, 0xc2, 0xff, 0x22, 0x80, 0x41, 0x23, 0x4e, 0x54, 0xa1, 0xb1, 0x01,
	0x31, 0x51, 0x85, 0xc6, 0xbb, 0xbf, 0x60, 0x5f, 0x5c, 0x31, 0xa1, 0xcb, 0x2b, 0x26, 0x74, 0x73,
	0xc5, 0xa0, 0x7f, 0x1c, 0x06, 0xbd, 0x70, 0x18, 0xf4, 0xd2, 0x61, 0xd0, 0x85, 0xc3, 0xa0, 0x57,
	0x0e, 0x83, 0x5e, 0x3b, 0x4c, 0xe8, 0xc6, 0x61, 0xd0, 0xff, 0xd7, 0x4c, 0xe8, 0xe2, 0x9a, 0x09,
	0x5d, 0x5e, 0x33, 0xa1, 0x5f, 0xf7, 0x3a, 0x72, 0x57, 0x21, 0x96, 0x22, 0x35, 0x4c, 0x4e, 0x92,
	0x79, 0x6f, 0xc7, 0x3f, 0xe8, 0x77, 0xed, 0x1b, 0xfa, 0x6d, 0x44, 0xdc, 0xff, 0xa9, 0xed, 0x37,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xf7, 0xab, 0xa0, 0xe3, 0x09, 0x00, 0x00,
}

func (x FileStatus) String() string {
	s, ok := FileStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *FileInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileInfo)
	if !ok {
		that2, ok := that.(FileInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FileID.Equal(that1.FileID) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.SizeBytes != that1.SizeBytes {
		return false
	}
	if this.Sha256Sum != that1.Sha256Sum {
		return false
	}
	return true
}
func (this *CreateFileInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateFileInfoRequest)
	if !ok {
		that2, ok := that.(CreateFileInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *CreateFileInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateFileInfoResponse)
	if !ok {
		that2, ok := that.(CreateFileInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *GetFileInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFileInfoRequest)
	if !ok {
		that2, ok := that.(GetFileInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FileID.Equal(that1.FileID) {
		return false
	}
	return true
}
func (this *GetFileInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFileInfoResponse)
	if !ok {
		that2, ok := that.(GetFileInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *GetFileInfoByNameRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFileInfoByNameRequest)
	if !ok {
		that2, ok := that.(GetFileInfoByNameRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetFileInfoByNameResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFileInfoByNameResponse)
	if !ok {
		that2, ok := that.(GetFileInfoByNameResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *UploadFileRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UploadFileRequest)
	if !ok {
		that2, ok := that.(UploadFileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FileID.Equal(that1.FileID) {
		return false
	}
	if this.Sha256Sum != that1.Sha256Sum {
		return false
	}
	if !bytes.Equal(this.Chunk, that1.Chunk) {
		return false
	}
	return true
}
func (this *UploadFileResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UploadFileResponse)
	if !ok {
		that2, ok := that.(UploadFileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FileID.Equal(that1.FileID) {
		return false
	}
	if this.SizeBytes != that1.SizeBytes {
		return false
	}
	return true
}
func (this *DownloadFileRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownloadFileRequest)
	if !ok {
		that2, ok := that.(DownloadFileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FileID.Equal(that1.FileID) {
		return false
	}
	return true
}
func (this *DownloadFileResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownloadFileResponse)
	if !ok {
		that2, ok := that.(DownloadFileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Chunk, that1.Chunk) {
		return false
	}
	return true
}
func (this *DeleteFileRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteFileRequest)
	if !ok {
		that2, ok := that.(DeleteFileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FileID.Equal(that1.FileID) {
		return false
	}
	if this.Purge != that1.Purge {
		return false
	}
	return true
}
func (this *DeleteFileResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteFileResponse)
	if !ok {
		that2, ok := that.(DeleteFileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *FileInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ftpb.FileInfo{")
	if this.FileID != nil {
		s = append(s, "FileID: "+fmt.Sprintf("%#v", this.FileID)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "SizeBytes: "+fmt.Sprintf("%#v", this.SizeBytes)+",\n")
	s = append(s, "Sha256Sum: "+fmt.Sprintf("%#v", this.Sha256Sum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateFileInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ftpb.CreateFileInfoRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateFileInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ftpb.CreateFileInfoResponse{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFileInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ftpb.GetFileInfoRequest{")
	if this.FileID != nil {
		s = append(s, "FileID: "+fmt.Sprintf("%#v", this.FileID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFileInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ftpb.GetFileInfoResponse{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFileInfoByNameRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ftpb.GetFileInfoByNameRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFileInfoByNameResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ftpb.GetFileInfoByNameResponse{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UploadFileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ftpb.UploadFileRequest{")
	if this.FileID != nil {
		s = append(s, "FileID: "+fmt.Sprintf("%#v", this.FileID)+",\n")
	}
	s = append(s, "Sha256Sum: "+fmt.Sprintf("%#v", this.Sha256Sum)+",\n")
	s = append(s, "Chunk: "+fmt.Sprintf("%#v", this.Chunk)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UploadFileResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ftpb.UploadFileResponse{")
	if this.FileID != nil {
		s = append(s, "FileID: "+fmt.Sprintf("%#v", this.FileID)+",\n")
	}
	s = append(s, "SizeBytes: "+fmt.Sprintf("%#v", this.SizeBytes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DownloadFileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ftpb.DownloadFileRequest{")
	if this.FileID != nil {
		s = append(s, "FileID: "+fmt.Sprintf("%#v", this.FileID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DownloadFileResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ftpb.DownloadFileResponse{")
	s = append(s, "Chunk: "+fmt.Sprintf("%#v", this.Chunk)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteFileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ftpb.DeleteFileRequest{")
	if this.FileID != nil {
		s = append(s, "FileID: "+fmt.Sprintf("%#v", this.FileID)+",\n")
	}
	s = append(s, "Purge: "+fmt.Sprintf("%#v", this.Purge)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteFileResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&ftpb.DeleteFileResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFtpb(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FileTransferServiceClient is the client API for FileTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileTransferServiceClient interface {
	CreateFileInfo(ctx context.Context, in *CreateFileInfoRequest, opts ...grpc.CallOption) (*CreateFileInfoResponse, error)
	GetFileInfo(ctx context.Context, in *GetFileInfoRequest, opts ...grpc.CallOption) (*GetFileInfoResponse, error)
	GetFileInfoByName(ctx context.Context, in *GetFileInfoByNameRequest, opts ...grpc.CallOption) (*GetFileInfoByNameResponse, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileTransferService_UploadFileClient, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FileTransferService_DownloadFileClient, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
}

type fileTransferServiceClient struct {
	cc *grpc.ClientConn
}

func NewFileTransferServiceClient(cc *grpc.ClientConn) FileTransferServiceClient {
	return &fileTransferServiceClient{cc}
}

func (c *fileTransferServiceClient) CreateFileInfo(ctx context.Context, in *CreateFileInfoRequest, opts ...grpc.CallOption) (*CreateFileInfoResponse, error) {
	out := new(CreateFileInfoResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.filetransfer.v1.FileTransferService/CreateFileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) GetFileInfo(ctx context.Context, in *GetFileInfoRequest, opts ...grpc.CallOption) (*GetFileInfoResponse, error) {
	out := new(GetFileInfoResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.filetransfer.v1.FileTransferService/GetFileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) GetFileInfoByName(ctx context.Context, in *GetFileInfoByNameRequest, opts ...grpc.CallOption) (*GetFileInfoByNameResponse, error) {
	out := new(GetFileInfoByNameResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.filetransfer.v1.FileTransferService/GetFileInfoByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileTransferService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileTransferService_serviceDesc.Streams[0], "/gml.internal.controlplane.filetransfer.v1.FileTransferService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferServiceUploadFileClient{stream}
	return x, nil
}

type FileTransferService_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type fileTransferServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *fileTransferServiceUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileTransferServiceUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileTransferServiceClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FileTransferService_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileTransferService_serviceDesc.Streams[1], "/gml.internal.controlplane.filetransfer.v1.FileTransferService/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferServiceDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileTransferService_DownloadFileClient interface {
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type fileTransferServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *fileTransferServiceDownloadFileClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileTransferServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.filetransfer.v1.FileTransferService/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileTransferServiceServer is the server API for FileTransferService service.
type FileTransferServiceServer interface {
	CreateFileInfo(context.Context, *CreateFileInfoRequest) (*CreateFileInfoResponse, error)
	GetFileInfo(context.Context, *GetFileInfoRequest) (*GetFileInfoResponse, error)
	GetFileInfoByName(context.Context, *GetFileInfoByNameRequest) (*GetFileInfoByNameResponse, error)
	UploadFile(FileTransferService_UploadFileServer) error
	DownloadFile(*DownloadFileRequest, FileTransferService_DownloadFileServer) error
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
}

// UnimplementedFileTransferServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFileTransferServiceServer struct {
}

func (*UnimplementedFileTransferServiceServer) CreateFileInfo(ctx context.Context, req *CreateFileInfoRequest) (*CreateFileInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFileInfo not implemented")
}
func (*UnimplementedFileTransferServiceServer) GetFileInfo(ctx context.Context, req *GetFileInfoRequest) (*GetFileInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfo not implemented")
}
func (*UnimplementedFileTransferServiceServer) GetFileInfoByName(ctx context.Context, req *GetFileInfoByNameRequest) (*GetFileInfoByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfoByName not implemented")
}
func (*UnimplementedFileTransferServiceServer) UploadFile(srv FileTransferService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (*UnimplementedFileTransferServiceServer) DownloadFile(req *DownloadFileRequest, srv FileTransferService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (*UnimplementedFileTransferServiceServer) DeleteFile(ctx context.Context, req *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}

func RegisterFileTransferServiceServer(s *grpc.Server, srv FileTransferServiceServer) {
	s.RegisterService(&_FileTransferService_serviceDesc, srv)
}

func _FileTransferService_CreateFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).CreateFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.filetransfer.v1.FileTransferService/CreateFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).CreateFileInfo(ctx, req.(*CreateFileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.filetransfer.v1.FileTransferService/GetFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).GetFileInfo(ctx, req.(*GetFileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_GetFileInfoByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileInfoByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).GetFileInfoByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.filetransfer.v1.FileTransferService/GetFileInfoByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).GetFileInfoByName(ctx, req.(*GetFileInfoByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileTransferServiceServer).UploadFile(&fileTransferServiceUploadFileServer{stream})
}

type FileTransferService_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type fileTransferServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *fileTransferServiceUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileTransferServiceUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileTransferService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransferServiceServer).DownloadFile(m, &fileTransferServiceDownloadFileServer{stream})
}

type FileTransferService_DownloadFileServer interface {
	Send(*DownloadFileResponse) error
	grpc.ServerStream
}

type fileTransferServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *fileTransferServiceDownloadFileServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FileTransferService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.filetransfer.v1.FileTransferService/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileTransferService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gml.internal.controlplane.filetransfer.v1.FileTransferService",
	HandlerType: (*FileTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFileInfo",
			Handler:    _FileTransferService_CreateFileInfo_Handler,
		},
		{
			MethodName: "GetFileInfo",
			Handler:    _FileTransferService_GetFileInfo_Handler,
		},
		{
			MethodName: "GetFileInfoByName",
			Handler:    _FileTransferService_GetFileInfoByName_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FileTransferService_DeleteFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FileTransferService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _FileTransferService_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/controlplane/filetransfer/ftpb/v1/ftpb.proto",
}

func (m *FileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sha256Sum) > 0 {
		i -= len(m.Sha256Sum)
		copy(dAtA[i:], m.Sha256Sum)
		i = encodeVarintFtpb(dAtA, i, uint64(len(m.Sha256Sum)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SizeBytes != 0 {
		i = encodeVarintFtpb(dAtA, i, uint64(m.SizeBytes))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFtpb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintFtpb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.FileID != nil {
		{
			size, err := m.FileID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFtpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateFileInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateFileInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateFileInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFtpb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateFileInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateFileInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateFileInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFtpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFileInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFileInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFileInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FileID != nil {
		{
			size, err := m.FileID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFtpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFileInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFileInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFileInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFtpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFileInfoByNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFileInfoByNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFileInfoByNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFtpb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFileInfoByNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFileInfoByNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFileInfoByNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFtpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chunk) > 0 {
		i -= len(m.Chunk)
		copy(dAtA[i:], m.Chunk)
		i = encodeVarintFtpb(dAtA, i, uint64(len(m.Chunk)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sha256Sum) > 0 {
		i -= len(m.Sha256Sum)
		copy(dAtA[i:], m.Sha256Sum)
		i = encodeVarintFtpb(dAtA, i, uint64(len(m.Sha256Sum)))
		i--
		dAtA[i] = 0x12
	}
	if m.FileID != nil {
		{
			size, err := m.FileID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFtpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SizeBytes != 0 {
		i = encodeVarintFtpb(dAtA, i, uint64(m.SizeBytes))
		i--
		dAtA[i] = 0x10
	}
	if m.FileID != nil {
		{
			size, err := m.FileID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFtpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownloadFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FileID != nil {
		{
			size, err := m.FileID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFtpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownloadFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chunk) > 0 {
		i -= len(m.Chunk)
		copy(dAtA[i:], m.Chunk)
		i = encodeVarintFtpb(dAtA, i, uint64(len(m.Chunk)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Purge {
		i--
		if m.Purge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.FileID != nil {
		{
			size, err := m.FileID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFtpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintFtpb(dAtA []byte, offset int, v uint64) int {
	offset -= sovFtpb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FileInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileID != nil {
		l = m.FileID.Size()
		n += 1 + l + sovFtpb(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovFtpb(uint64(m.Status))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFtpb(uint64(l))
	}
	if m.SizeBytes != 0 {
		n += 1 + sovFtpb(uint64(m.SizeBytes))
	}
	l = len(m.Sha256Sum)
	if l > 0 {
		n += 1 + l + sovFtpb(uint64(l))
	}
	return n
}

func (m *CreateFileInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFtpb(uint64(l))
	}
	return n
}

func (m *CreateFileInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovFtpb(uint64(l))
	}
	return n
}

func (m *GetFileInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileID != nil {
		l = m.FileID.Size()
		n += 1 + l + sovFtpb(uint64(l))
	}
	return n
}

func (m *GetFileInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovFtpb(uint64(l))
	}
	return n
}

func (m *GetFileInfoByNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFtpb(uint64(l))
	}
	return n
}

func (m *GetFileInfoByNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovFtpb(uint64(l))
	}
	return n
}

func (m *UploadFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileID != nil {
		l = m.FileID.Size()
		n += 1 + l + sovFtpb(uint64(l))
	}
	l = len(m.Sha256Sum)
	if l > 0 {
		n += 1 + l + sovFtpb(uint64(l))
	}
	l = len(m.Chunk)
	if l > 0 {
		n += 1 + l + sovFtpb(uint64(l))
	}
	return n
}

func (m *UploadFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileID != nil {
		l = m.FileID.Size()
		n += 1 + l + sovFtpb(uint64(l))
	}
	if m.SizeBytes != 0 {
		n += 1 + sovFtpb(uint64(m.SizeBytes))
	}
	return n
}

func (m *DownloadFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileID != nil {
		l = m.FileID.Size()
		n += 1 + l + sovFtpb(uint64(l))
	}
	return n
}

func (m *DownloadFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chunk)
	if l > 0 {
		n += 1 + l + sovFtpb(uint64(l))
	}
	return n
}

func (m *DeleteFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileID != nil {
		l = m.FileID.Size()
		n += 1 + l + sovFtpb(uint64(l))
	}
	if m.Purge {
		n += 2
	}
	return n
}

func (m *DeleteFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovFtpb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFtpb(x uint64) (n int) {
	return sovFtpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FileInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileInfo{`,
		`FileID:` + strings.Replace(fmt.Sprintf("%v", this.FileID), "UUID", "typespb.UUID", 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`SizeBytes:` + fmt.Sprintf("%v", this.SizeBytes) + `,`,
		`Sha256Sum:` + fmt.Sprintf("%v", this.Sha256Sum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateFileInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateFileInfoRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateFileInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateFileInfoResponse{`,
		`Info:` + strings.Replace(this.Info.String(), "FileInfo", "FileInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFileInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFileInfoRequest{`,
		`FileID:` + strings.Replace(fmt.Sprintf("%v", this.FileID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFileInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFileInfoResponse{`,
		`Info:` + strings.Replace(this.Info.String(), "FileInfo", "FileInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFileInfoByNameRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFileInfoByNameRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFileInfoByNameResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFileInfoByNameResponse{`,
		`Info:` + strings.Replace(this.Info.String(), "FileInfo", "FileInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UploadFileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UploadFileRequest{`,
		`FileID:` + strings.Replace(fmt.Sprintf("%v", this.FileID), "UUID", "typespb.UUID", 1) + `,`,
		`Sha256Sum:` + fmt.Sprintf("%v", this.Sha256Sum) + `,`,
		`Chunk:` + fmt.Sprintf("%v", this.Chunk) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UploadFileResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UploadFileResponse{`,
		`FileID:` + strings.Replace(fmt.Sprintf("%v", this.FileID), "UUID", "typespb.UUID", 1) + `,`,
		`SizeBytes:` + fmt.Sprintf("%v", this.SizeBytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownloadFileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownloadFileRequest{`,
		`FileID:` + strings.Replace(fmt.Sprintf("%v", this.FileID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownloadFileResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownloadFileResponse{`,
		`Chunk:` + fmt.Sprintf("%v", this.Chunk) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteFileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteFileRequest{`,
		`FileID:` + strings.Replace(fmt.Sprintf("%v", this.FileID), "UUID", "typespb.UUID", 1) + `,`,
		`Purge:` + fmt.Sprintf("%v", this.Purge) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteFileResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteFileResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringFtpb(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFtpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFtpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFtpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileID == nil {
				m.FileID = &typespb.UUID{}
			}
			if err := m.FileID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= FileStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFtpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFtpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeBytes", wireType)
			}
			m.SizeBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFtpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFtpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha256Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFtpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFtpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateFileInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFtpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateFileInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateFileInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFtpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFtpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFtpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFtpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateFileInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFtpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateFileInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateFileInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFtpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFtpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &FileInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFtpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFtpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFileInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFtpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFileInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFileInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFtpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFtpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileID == nil {
				m.FileID = &typespb.UUID{}
			}
			if err := m.FileID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFtpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFtpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFileInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFtpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFileInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFileInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFtpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFtpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &FileInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFtpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFtpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFileInfoByNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFtpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFileInfoByNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFileInfoByNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFtpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFtpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFtpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFtpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFileInfoByNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFtpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFileInfoByNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFileInfoByNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFtpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFtpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &FileInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFtpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFtpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFtpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFtpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFtpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileID == nil {
				m.FileID = &typespb.UUID{}
			}
			if err := m.FileID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFtpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFtpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha256Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFtpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFtpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunk = append(m.Chunk[:0], dAtA[iNdEx:postIndex]...)
			if m.Chunk == nil {
				m.Chunk = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFtpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFtpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFtpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFtpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFtpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileID == nil {
				m.FileID = &typespb.UUID{}
			}
			if err := m.FileID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeBytes", wireType)
			}
			m.SizeBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFtpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFtpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFtpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFtpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFtpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileID == nil {
				m.FileID = &typespb.UUID{}
			}
			if err := m.FileID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFtpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFtpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFtpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFtpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFtpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunk = append(m.Chunk[:0], dAtA[iNdEx:postIndex]...)
			if m.Chunk == nil {
				m.Chunk = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFtpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFtpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFtpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFtpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFtpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileID == nil {
				m.FileID = &typespb.UUID{}
			}
			if err := m.FileID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Purge = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFtpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFtpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFtpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFtpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFtpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFtpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFtpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFtpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFtpb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFtpb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFtpb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFtpb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFtpb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFtpb = fmt.Errorf("proto: unexpected end of group")
)
