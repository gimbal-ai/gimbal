// Code generated by MockGen. DO NOT EDIT.
// Source: ftpb.pb.go
//
// Generated by this command:
//
//	mockgen -source=ftpb.pb.go -destination=mock/ftpb_mock.gen.go FileTransferService
//
// Package mock_ftpb is a generated GoMock package.
package mock_ftpb

import (
	context "context"
	reflect "reflect"

	ftpb "gimletlabs.ai/gimlet/src/controlplane/filetransfer/ftpb/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockFileTransferServiceClient is a mock of FileTransferServiceClient interface.
type MockFileTransferServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileTransferServiceClientMockRecorder
}

// MockFileTransferServiceClientMockRecorder is the mock recorder for MockFileTransferServiceClient.
type MockFileTransferServiceClientMockRecorder struct {
	mock *MockFileTransferServiceClient
}

// NewMockFileTransferServiceClient creates a new mock instance.
func NewMockFileTransferServiceClient(ctrl *gomock.Controller) *MockFileTransferServiceClient {
	mock := &MockFileTransferServiceClient{ctrl: ctrl}
	mock.recorder = &MockFileTransferServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileTransferServiceClient) EXPECT() *MockFileTransferServiceClientMockRecorder {
	return m.recorder
}

// CreateFileInfo mocks base method.
func (m *MockFileTransferServiceClient) CreateFileInfo(ctx context.Context, in *ftpb.CreateFileInfoRequest, opts ...grpc.CallOption) (*ftpb.CreateFileInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFileInfo", varargs...)
	ret0, _ := ret[0].(*ftpb.CreateFileInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileInfo indicates an expected call of CreateFileInfo.
func (mr *MockFileTransferServiceClientMockRecorder) CreateFileInfo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileInfo", reflect.TypeOf((*MockFileTransferServiceClient)(nil).CreateFileInfo), varargs...)
}

// DeleteFile mocks base method.
func (m *MockFileTransferServiceClient) DeleteFile(ctx context.Context, in *ftpb.DeleteFileRequest, opts ...grpc.CallOption) (*ftpb.DeleteFileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFile", varargs...)
	ret0, _ := ret[0].(*ftpb.DeleteFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileTransferServiceClientMockRecorder) DeleteFile(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileTransferServiceClient)(nil).DeleteFile), varargs...)
}

// DownloadFile mocks base method.
func (m *MockFileTransferServiceClient) DownloadFile(ctx context.Context, in *ftpb.DownloadFileRequest, opts ...grpc.CallOption) (ftpb.FileTransferService_DownloadFileClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadFile", varargs...)
	ret0, _ := ret[0].(ftpb.FileTransferService_DownloadFileClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockFileTransferServiceClientMockRecorder) DownloadFile(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFileTransferServiceClient)(nil).DownloadFile), varargs...)
}

// GetFileInfo mocks base method.
func (m *MockFileTransferServiceClient) GetFileInfo(ctx context.Context, in *ftpb.GetFileInfoRequest, opts ...grpc.CallOption) (*ftpb.GetFileInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFileInfo", varargs...)
	ret0, _ := ret[0].(*ftpb.GetFileInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo.
func (mr *MockFileTransferServiceClientMockRecorder) GetFileInfo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockFileTransferServiceClient)(nil).GetFileInfo), varargs...)
}

// GetFileInfoByName mocks base method.
func (m *MockFileTransferServiceClient) GetFileInfoByName(ctx context.Context, in *ftpb.GetFileInfoByNameRequest, opts ...grpc.CallOption) (*ftpb.GetFileInfoByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFileInfoByName", varargs...)
	ret0, _ := ret[0].(*ftpb.GetFileInfoByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfoByName indicates an expected call of GetFileInfoByName.
func (mr *MockFileTransferServiceClientMockRecorder) GetFileInfoByName(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfoByName", reflect.TypeOf((*MockFileTransferServiceClient)(nil).GetFileInfoByName), varargs...)
}

// UploadFile mocks base method.
func (m *MockFileTransferServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (ftpb.FileTransferService_UploadFileClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadFile", varargs...)
	ret0, _ := ret[0].(ftpb.FileTransferService_UploadFileClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFileTransferServiceClientMockRecorder) UploadFile(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileTransferServiceClient)(nil).UploadFile), varargs...)
}

// MockFileTransferService_UploadFileClient is a mock of FileTransferService_UploadFileClient interface.
type MockFileTransferService_UploadFileClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileTransferService_UploadFileClientMockRecorder
}

// MockFileTransferService_UploadFileClientMockRecorder is the mock recorder for MockFileTransferService_UploadFileClient.
type MockFileTransferService_UploadFileClientMockRecorder struct {
	mock *MockFileTransferService_UploadFileClient
}

// NewMockFileTransferService_UploadFileClient creates a new mock instance.
func NewMockFileTransferService_UploadFileClient(ctrl *gomock.Controller) *MockFileTransferService_UploadFileClient {
	mock := &MockFileTransferService_UploadFileClient{ctrl: ctrl}
	mock.recorder = &MockFileTransferService_UploadFileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileTransferService_UploadFileClient) EXPECT() *MockFileTransferService_UploadFileClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockFileTransferService_UploadFileClient) CloseAndRecv() (*ftpb.UploadFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*ftpb.UploadFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockFileTransferService_UploadFileClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockFileTransferService_UploadFileClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockFileTransferService_UploadFileClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockFileTransferService_UploadFileClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFileTransferService_UploadFileClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockFileTransferService_UploadFileClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFileTransferService_UploadFileClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFileTransferService_UploadFileClient)(nil).Context))
}

// Header mocks base method.
func (m *MockFileTransferService_UploadFileClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockFileTransferService_UploadFileClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFileTransferService_UploadFileClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockFileTransferService_UploadFileClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFileTransferService_UploadFileClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFileTransferService_UploadFileClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockFileTransferService_UploadFileClient) Send(arg0 *ftpb.UploadFileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFileTransferService_UploadFileClientMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFileTransferService_UploadFileClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFileTransferService_UploadFileClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFileTransferService_UploadFileClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFileTransferService_UploadFileClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockFileTransferService_UploadFileClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockFileTransferService_UploadFileClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFileTransferService_UploadFileClient)(nil).Trailer))
}

// MockFileTransferService_DownloadFileClient is a mock of FileTransferService_DownloadFileClient interface.
type MockFileTransferService_DownloadFileClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileTransferService_DownloadFileClientMockRecorder
}

// MockFileTransferService_DownloadFileClientMockRecorder is the mock recorder for MockFileTransferService_DownloadFileClient.
type MockFileTransferService_DownloadFileClientMockRecorder struct {
	mock *MockFileTransferService_DownloadFileClient
}

// NewMockFileTransferService_DownloadFileClient creates a new mock instance.
func NewMockFileTransferService_DownloadFileClient(ctrl *gomock.Controller) *MockFileTransferService_DownloadFileClient {
	mock := &MockFileTransferService_DownloadFileClient{ctrl: ctrl}
	mock.recorder = &MockFileTransferService_DownloadFileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileTransferService_DownloadFileClient) EXPECT() *MockFileTransferService_DownloadFileClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockFileTransferService_DownloadFileClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockFileTransferService_DownloadFileClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFileTransferService_DownloadFileClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockFileTransferService_DownloadFileClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFileTransferService_DownloadFileClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFileTransferService_DownloadFileClient)(nil).Context))
}

// Header mocks base method.
func (m *MockFileTransferService_DownloadFileClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockFileTransferService_DownloadFileClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFileTransferService_DownloadFileClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockFileTransferService_DownloadFileClient) Recv() (*ftpb.DownloadFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ftpb.DownloadFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFileTransferService_DownloadFileClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFileTransferService_DownloadFileClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockFileTransferService_DownloadFileClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFileTransferService_DownloadFileClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFileTransferService_DownloadFileClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockFileTransferService_DownloadFileClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFileTransferService_DownloadFileClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFileTransferService_DownloadFileClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockFileTransferService_DownloadFileClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockFileTransferService_DownloadFileClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFileTransferService_DownloadFileClient)(nil).Trailer))
}

// MockFileTransferServiceServer is a mock of FileTransferServiceServer interface.
type MockFileTransferServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFileTransferServiceServerMockRecorder
}

// MockFileTransferServiceServerMockRecorder is the mock recorder for MockFileTransferServiceServer.
type MockFileTransferServiceServerMockRecorder struct {
	mock *MockFileTransferServiceServer
}

// NewMockFileTransferServiceServer creates a new mock instance.
func NewMockFileTransferServiceServer(ctrl *gomock.Controller) *MockFileTransferServiceServer {
	mock := &MockFileTransferServiceServer{ctrl: ctrl}
	mock.recorder = &MockFileTransferServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileTransferServiceServer) EXPECT() *MockFileTransferServiceServerMockRecorder {
	return m.recorder
}

// CreateFileInfo mocks base method.
func (m *MockFileTransferServiceServer) CreateFileInfo(arg0 context.Context, arg1 *ftpb.CreateFileInfoRequest) (*ftpb.CreateFileInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileInfo", arg0, arg1)
	ret0, _ := ret[0].(*ftpb.CreateFileInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileInfo indicates an expected call of CreateFileInfo.
func (mr *MockFileTransferServiceServerMockRecorder) CreateFileInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileInfo", reflect.TypeOf((*MockFileTransferServiceServer)(nil).CreateFileInfo), arg0, arg1)
}

// DeleteFile mocks base method.
func (m *MockFileTransferServiceServer) DeleteFile(arg0 context.Context, arg1 *ftpb.DeleteFileRequest) (*ftpb.DeleteFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0, arg1)
	ret0, _ := ret[0].(*ftpb.DeleteFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileTransferServiceServerMockRecorder) DeleteFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileTransferServiceServer)(nil).DeleteFile), arg0, arg1)
}

// DownloadFile mocks base method.
func (m *MockFileTransferServiceServer) DownloadFile(arg0 *ftpb.DownloadFileRequest, arg1 ftpb.FileTransferService_DownloadFileServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockFileTransferServiceServerMockRecorder) DownloadFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFileTransferServiceServer)(nil).DownloadFile), arg0, arg1)
}

// GetFileInfo mocks base method.
func (m *MockFileTransferServiceServer) GetFileInfo(arg0 context.Context, arg1 *ftpb.GetFileInfoRequest) (*ftpb.GetFileInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfo", arg0, arg1)
	ret0, _ := ret[0].(*ftpb.GetFileInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo.
func (mr *MockFileTransferServiceServerMockRecorder) GetFileInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockFileTransferServiceServer)(nil).GetFileInfo), arg0, arg1)
}

// GetFileInfoByName mocks base method.
func (m *MockFileTransferServiceServer) GetFileInfoByName(arg0 context.Context, arg1 *ftpb.GetFileInfoByNameRequest) (*ftpb.GetFileInfoByNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfoByName", arg0, arg1)
	ret0, _ := ret[0].(*ftpb.GetFileInfoByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfoByName indicates an expected call of GetFileInfoByName.
func (mr *MockFileTransferServiceServerMockRecorder) GetFileInfoByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfoByName", reflect.TypeOf((*MockFileTransferServiceServer)(nil).GetFileInfoByName), arg0, arg1)
}

// UploadFile mocks base method.
func (m *MockFileTransferServiceServer) UploadFile(arg0 ftpb.FileTransferService_UploadFileServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFileTransferServiceServerMockRecorder) UploadFile(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileTransferServiceServer)(nil).UploadFile), arg0)
}

// MockFileTransferService_UploadFileServer is a mock of FileTransferService_UploadFileServer interface.
type MockFileTransferService_UploadFileServer struct {
	ctrl     *gomock.Controller
	recorder *MockFileTransferService_UploadFileServerMockRecorder
}

// MockFileTransferService_UploadFileServerMockRecorder is the mock recorder for MockFileTransferService_UploadFileServer.
type MockFileTransferService_UploadFileServerMockRecorder struct {
	mock *MockFileTransferService_UploadFileServer
}

// NewMockFileTransferService_UploadFileServer creates a new mock instance.
func NewMockFileTransferService_UploadFileServer(ctrl *gomock.Controller) *MockFileTransferService_UploadFileServer {
	mock := &MockFileTransferService_UploadFileServer{ctrl: ctrl}
	mock.recorder = &MockFileTransferService_UploadFileServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileTransferService_UploadFileServer) EXPECT() *MockFileTransferService_UploadFileServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFileTransferService_UploadFileServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFileTransferService_UploadFileServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFileTransferService_UploadFileServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockFileTransferService_UploadFileServer) Recv() (*ftpb.UploadFileRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ftpb.UploadFileRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFileTransferService_UploadFileServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFileTransferService_UploadFileServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockFileTransferService_UploadFileServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFileTransferService_UploadFileServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFileTransferService_UploadFileServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockFileTransferService_UploadFileServer) SendAndClose(arg0 *ftpb.UploadFileResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockFileTransferService_UploadFileServerMockRecorder) SendAndClose(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockFileTransferService_UploadFileServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockFileTransferService_UploadFileServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockFileTransferService_UploadFileServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFileTransferService_UploadFileServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFileTransferService_UploadFileServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFileTransferService_UploadFileServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFileTransferService_UploadFileServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockFileTransferService_UploadFileServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockFileTransferService_UploadFileServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFileTransferService_UploadFileServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockFileTransferService_UploadFileServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockFileTransferService_UploadFileServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFileTransferService_UploadFileServer)(nil).SetTrailer), arg0)
}

// MockFileTransferService_DownloadFileServer is a mock of FileTransferService_DownloadFileServer interface.
type MockFileTransferService_DownloadFileServer struct {
	ctrl     *gomock.Controller
	recorder *MockFileTransferService_DownloadFileServerMockRecorder
}

// MockFileTransferService_DownloadFileServerMockRecorder is the mock recorder for MockFileTransferService_DownloadFileServer.
type MockFileTransferService_DownloadFileServerMockRecorder struct {
	mock *MockFileTransferService_DownloadFileServer
}

// NewMockFileTransferService_DownloadFileServer creates a new mock instance.
func NewMockFileTransferService_DownloadFileServer(ctrl *gomock.Controller) *MockFileTransferService_DownloadFileServer {
	mock := &MockFileTransferService_DownloadFileServer{ctrl: ctrl}
	mock.recorder = &MockFileTransferService_DownloadFileServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileTransferService_DownloadFileServer) EXPECT() *MockFileTransferService_DownloadFileServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFileTransferService_DownloadFileServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFileTransferService_DownloadFileServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFileTransferService_DownloadFileServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockFileTransferService_DownloadFileServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFileTransferService_DownloadFileServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFileTransferService_DownloadFileServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockFileTransferService_DownloadFileServer) Send(arg0 *ftpb.DownloadFileResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFileTransferService_DownloadFileServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFileTransferService_DownloadFileServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockFileTransferService_DownloadFileServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockFileTransferService_DownloadFileServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFileTransferService_DownloadFileServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFileTransferService_DownloadFileServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFileTransferService_DownloadFileServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFileTransferService_DownloadFileServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockFileTransferService_DownloadFileServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockFileTransferService_DownloadFileServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFileTransferService_DownloadFileServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockFileTransferService_DownloadFileServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockFileTransferService_DownloadFileServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFileTransferService_DownloadFileServer)(nil).SetTrailer), arg0)
}
