// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/controlplane/fleetmgr/fmpb/v1/fmpb.proto

package fmpb

import (
	context "context"
	fmt "fmt"
	v1 "gimletlabs.ai/gimlet/src/api/corepb/v1"
	typespb "gimletlabs.ai/gimlet/src/common/typespb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeviceStatus int32

const (
	DEVICE_STATUS_UNKNOWN      DeviceStatus = 0
	DEVICE_STATUS_HEALTHY      DeviceStatus = 1
	DEVICE_STATUS_UNHEALTHY    DeviceStatus = 2
	DEVICE_STATUS_DISCONNECTED DeviceStatus = 3
)

var DeviceStatus_name = map[int32]string{
	0: "DEVICE_STATUS_UNKNOWN",
	1: "DEVICE_STATUS_HEALTHY",
	2: "DEVICE_STATUS_UNHEALTHY",
	3: "DEVICE_STATUS_DISCONNECTED",
}

var DeviceStatus_value = map[string]int32{
	"DEVICE_STATUS_UNKNOWN":      0,
	"DEVICE_STATUS_HEALTHY":      1,
	"DEVICE_STATUS_UNHEALTHY":    2,
	"DEVICE_STATUS_DISCONNECTED": 3,
}

func (DeviceStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{0}
}

type FleetInfo struct {
	ID          *typespb.UUID    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	OrgID       *typespb.UUID    `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty" db:"org_id"`
	Name        string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	Description string           `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" db:"description"`
	CreatedAt   *types.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" db:"created_at"`
	Tags        map[string]*Tag  `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FleetInfo) Reset()      { *m = FleetInfo{} }
func (*FleetInfo) ProtoMessage() {}
func (*FleetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{0}
}
func (m *FleetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FleetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FleetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FleetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FleetInfo.Merge(m, src)
}
func (m *FleetInfo) XXX_Size() int {
	return m.Size()
}
func (m *FleetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FleetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FleetInfo proto.InternalMessageInfo

func (m *FleetInfo) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *FleetInfo) GetOrgID() *typespb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

func (m *FleetInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FleetInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FleetInfo) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *FleetInfo) GetTags() map[string]*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type CreateFleetRequest struct {
	Fleet *FleetInfo `protobuf:"bytes,1,opt,name=fleet,proto3" json:"fleet,omitempty"`
}

func (m *CreateFleetRequest) Reset()      { *m = CreateFleetRequest{} }
func (*CreateFleetRequest) ProtoMessage() {}
func (*CreateFleetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{1}
}
func (m *CreateFleetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateFleetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateFleetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateFleetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFleetRequest.Merge(m, src)
}
func (m *CreateFleetRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateFleetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFleetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFleetRequest proto.InternalMessageInfo

func (m *CreateFleetRequest) GetFleet() *FleetInfo {
	if m != nil {
		return m.Fleet
	}
	return nil
}

type CreateFleetResponse struct {
	Fleet *FleetInfo `protobuf:"bytes,1,opt,name=fleet,proto3" json:"fleet,omitempty"`
}

func (m *CreateFleetResponse) Reset()      { *m = CreateFleetResponse{} }
func (*CreateFleetResponse) ProtoMessage() {}
func (*CreateFleetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{2}
}
func (m *CreateFleetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateFleetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateFleetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateFleetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFleetResponse.Merge(m, src)
}
func (m *CreateFleetResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateFleetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFleetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFleetResponse proto.InternalMessageInfo

func (m *CreateFleetResponse) GetFleet() *FleetInfo {
	if m != nil {
		return m.Fleet
	}
	return nil
}

type GetFleetRequest struct {
	ID   *typespb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // Deprecated: Do not use.
}

func (m *GetFleetRequest) Reset()      { *m = GetFleetRequest{} }
func (*GetFleetRequest) ProtoMessage() {}
func (*GetFleetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{3}
}
func (m *GetFleetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFleetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFleetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFleetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFleetRequest.Merge(m, src)
}
func (m *GetFleetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFleetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFleetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFleetRequest proto.InternalMessageInfo

func (m *GetFleetRequest) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

// Deprecated: Do not use.
func (m *GetFleetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetFleetResponse struct {
	Fleet *FleetInfo `protobuf:"bytes,1,opt,name=fleet,proto3" json:"fleet,omitempty"`
}

func (m *GetFleetResponse) Reset()      { *m = GetFleetResponse{} }
func (*GetFleetResponse) ProtoMessage() {}
func (*GetFleetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{4}
}
func (m *GetFleetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFleetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFleetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFleetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFleetResponse.Merge(m, src)
}
func (m *GetFleetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFleetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFleetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFleetResponse proto.InternalMessageInfo

func (m *GetFleetResponse) GetFleet() *FleetInfo {
	if m != nil {
		return m.Fleet
	}
	return nil
}

type GetFleetByNameRequest struct {
	Name  string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrgID *typespb.UUID `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *GetFleetByNameRequest) Reset()      { *m = GetFleetByNameRequest{} }
func (*GetFleetByNameRequest) ProtoMessage() {}
func (*GetFleetByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{5}
}
func (m *GetFleetByNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFleetByNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFleetByNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFleetByNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFleetByNameRequest.Merge(m, src)
}
func (m *GetFleetByNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFleetByNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFleetByNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFleetByNameRequest proto.InternalMessageInfo

func (m *GetFleetByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetFleetByNameRequest) GetOrgID() *typespb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type GetFleetByNameResponse struct {
	Fleet *FleetInfo `protobuf:"bytes,1,opt,name=fleet,proto3" json:"fleet,omitempty"`
}

func (m *GetFleetByNameResponse) Reset()      { *m = GetFleetByNameResponse{} }
func (*GetFleetByNameResponse) ProtoMessage() {}
func (*GetFleetByNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{6}
}
func (m *GetFleetByNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFleetByNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFleetByNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFleetByNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFleetByNameResponse.Merge(m, src)
}
func (m *GetFleetByNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFleetByNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFleetByNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFleetByNameResponse proto.InternalMessageInfo

func (m *GetFleetByNameResponse) GetFleet() *FleetInfo {
	if m != nil {
		return m.Fleet
	}
	return nil
}

type ListFleetsRequest struct {
	OrgID *typespb.UUID `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *ListFleetsRequest) Reset()      { *m = ListFleetsRequest{} }
func (*ListFleetsRequest) ProtoMessage() {}
func (*ListFleetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{7}
}
func (m *ListFleetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFleetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFleetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFleetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFleetsRequest.Merge(m, src)
}
func (m *ListFleetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListFleetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFleetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListFleetsRequest proto.InternalMessageInfo

func (m *ListFleetsRequest) GetOrgID() *typespb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type ListFleetsResponse struct {
	Fleets []*FleetInfo `protobuf:"bytes,1,rep,name=fleets,proto3" json:"fleets,omitempty"`
}

func (m *ListFleetsResponse) Reset()      { *m = ListFleetsResponse{} }
func (*ListFleetsResponse) ProtoMessage() {}
func (*ListFleetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{8}
}
func (m *ListFleetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFleetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFleetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFleetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFleetsResponse.Merge(m, src)
}
func (m *ListFleetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListFleetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFleetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListFleetsResponse proto.InternalMessageInfo

func (m *ListFleetsResponse) GetFleets() []*FleetInfo {
	if m != nil {
		return m.Fleets
	}
	return nil
}

type UpdateFleetRequest struct {
	Fleet          *FleetInfo `protobuf:"bytes,1,opt,name=fleet,proto3" json:"fleet,omitempty"`
	DeletedTagKeys []string   `protobuf:"bytes,2,rep,name=deleted_tag_keys,json=deletedTagKeys,proto3" json:"deleted_tag_keys,omitempty"`
}

func (m *UpdateFleetRequest) Reset()      { *m = UpdateFleetRequest{} }
func (*UpdateFleetRequest) ProtoMessage() {}
func (*UpdateFleetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{9}
}
func (m *UpdateFleetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateFleetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateFleetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateFleetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFleetRequest.Merge(m, src)
}
func (m *UpdateFleetRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateFleetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFleetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFleetRequest proto.InternalMessageInfo

func (m *UpdateFleetRequest) GetFleet() *FleetInfo {
	if m != nil {
		return m.Fleet
	}
	return nil
}

func (m *UpdateFleetRequest) GetDeletedTagKeys() []string {
	if m != nil {
		return m.DeletedTagKeys
	}
	return nil
}

type UpdateFleetResponse struct {
	Fleet *FleetInfo `protobuf:"bytes,1,opt,name=fleet,proto3" json:"fleet,omitempty"`
}

func (m *UpdateFleetResponse) Reset()      { *m = UpdateFleetResponse{} }
func (*UpdateFleetResponse) ProtoMessage() {}
func (*UpdateFleetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{10}
}
func (m *UpdateFleetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateFleetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateFleetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateFleetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFleetResponse.Merge(m, src)
}
func (m *UpdateFleetResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateFleetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFleetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFleetResponse proto.InternalMessageInfo

func (m *UpdateFleetResponse) GetFleet() *FleetInfo {
	if m != nil {
		return m.Fleet
	}
	return nil
}

type Tag struct {
	Key      string       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value    string       `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Metadata *TagMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *Tag) Reset()      { *m = Tag{} }
func (*Tag) ProtoMessage() {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{11}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(m, src)
}
func (m *Tag) XXX_Size() int {
	return m.Size()
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Tag) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Tag) GetMetadata() *TagMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type TagMetadata struct {
	IsInherited bool             `protobuf:"varint,1,opt,name=is_inherited,json=isInherited,proto3" json:"is_inherited,omitempty"`
	UpdatedAt   *types.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" db:"updated_at"`
	CreatedAt   *types.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" db:"created_at"`
}

func (m *TagMetadata) Reset()      { *m = TagMetadata{} }
func (*TagMetadata) ProtoMessage() {}
func (*TagMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{12}
}
func (m *TagMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagMetadata.Merge(m, src)
}
func (m *TagMetadata) XXX_Size() int {
	return m.Size()
}
func (m *TagMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TagMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TagMetadata proto.InternalMessageInfo

func (m *TagMetadata) GetIsInherited() bool {
	if m != nil {
		return m.IsInherited
	}
	return false
}

func (m *TagMetadata) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *TagMetadata) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type GetDefaultTagsRequest struct {
	FleetID *typespb.UUID `protobuf:"bytes,1,opt,name=fleet_id,json=fleetId,proto3" json:"fleet_id,omitempty"`
}

func (m *GetDefaultTagsRequest) Reset()      { *m = GetDefaultTagsRequest{} }
func (*GetDefaultTagsRequest) ProtoMessage() {}
func (*GetDefaultTagsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{13}
}
func (m *GetDefaultTagsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDefaultTagsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDefaultTagsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDefaultTagsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDefaultTagsRequest.Merge(m, src)
}
func (m *GetDefaultTagsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDefaultTagsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDefaultTagsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDefaultTagsRequest proto.InternalMessageInfo

func (m *GetDefaultTagsRequest) GetFleetID() *typespb.UUID {
	if m != nil {
		return m.FleetID
	}
	return nil
}

type GetDefaultTagsResponse struct {
	Tags map[string]*Tag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GetDefaultTagsResponse) Reset()      { *m = GetDefaultTagsResponse{} }
func (*GetDefaultTagsResponse) ProtoMessage() {}
func (*GetDefaultTagsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{14}
}
func (m *GetDefaultTagsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDefaultTagsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDefaultTagsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDefaultTagsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDefaultTagsResponse.Merge(m, src)
}
func (m *GetDefaultTagsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDefaultTagsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDefaultTagsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDefaultTagsResponse proto.InternalMessageInfo

func (m *GetDefaultTagsResponse) GetTags() map[string]*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type UpsertDefaultTagRequest struct {
	FleetID *typespb.UUID `protobuf:"bytes,1,opt,name=fleet_id,json=fleetId,proto3" json:"fleet_id,omitempty"`
	Tag     *Tag          `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (m *UpsertDefaultTagRequest) Reset()      { *m = UpsertDefaultTagRequest{} }
func (*UpsertDefaultTagRequest) ProtoMessage() {}
func (*UpsertDefaultTagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{15}
}
func (m *UpsertDefaultTagRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertDefaultTagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertDefaultTagRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertDefaultTagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertDefaultTagRequest.Merge(m, src)
}
func (m *UpsertDefaultTagRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertDefaultTagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertDefaultTagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertDefaultTagRequest proto.InternalMessageInfo

func (m *UpsertDefaultTagRequest) GetFleetID() *typespb.UUID {
	if m != nil {
		return m.FleetID
	}
	return nil
}

func (m *UpsertDefaultTagRequest) GetTag() *Tag {
	if m != nil {
		return m.Tag
	}
	return nil
}

type UpsertDefaultTagResponse struct {
}

func (m *UpsertDefaultTagResponse) Reset()      { *m = UpsertDefaultTagResponse{} }
func (*UpsertDefaultTagResponse) ProtoMessage() {}
func (*UpsertDefaultTagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{16}
}
func (m *UpsertDefaultTagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertDefaultTagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertDefaultTagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertDefaultTagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertDefaultTagResponse.Merge(m, src)
}
func (m *UpsertDefaultTagResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpsertDefaultTagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertDefaultTagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertDefaultTagResponse proto.InternalMessageInfo

type DeleteDefaultTagRequest struct {
	FleetID *typespb.UUID `protobuf:"bytes,1,opt,name=fleet_id,json=fleetId,proto3" json:"fleet_id,omitempty"`
	Key     string        `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *DeleteDefaultTagRequest) Reset()      { *m = DeleteDefaultTagRequest{} }
func (*DeleteDefaultTagRequest) ProtoMessage() {}
func (*DeleteDefaultTagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{17}
}
func (m *DeleteDefaultTagRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteDefaultTagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteDefaultTagRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteDefaultTagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDefaultTagRequest.Merge(m, src)
}
func (m *DeleteDefaultTagRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteDefaultTagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDefaultTagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDefaultTagRequest proto.InternalMessageInfo

func (m *DeleteDefaultTagRequest) GetFleetID() *typespb.UUID {
	if m != nil {
		return m.FleetID
	}
	return nil
}

func (m *DeleteDefaultTagRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DeleteDefaultTagResponse struct {
}

func (m *DeleteDefaultTagResponse) Reset()      { *m = DeleteDefaultTagResponse{} }
func (*DeleteDefaultTagResponse) ProtoMessage() {}
func (*DeleteDefaultTagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{18}
}
func (m *DeleteDefaultTagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteDefaultTagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteDefaultTagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteDefaultTagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDefaultTagResponse.Merge(m, src)
}
func (m *DeleteDefaultTagResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteDefaultTagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDefaultTagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDefaultTagResponse proto.InternalMessageInfo

type DeviceInfo struct {
	ID              *typespb.UUID          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	Serial          string                 `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial,omitempty"`
	Hostname        string                 `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	FleetID         *typespb.UUID          `protobuf:"bytes,4,opt,name=fleet_id,json=fleetId,proto3" json:"fleet_id,omitempty" db:"fleet_id"`
	LastHeartbeatNS int64                  `protobuf:"varint,5,opt,name=last_heartbeat_ns,json=lastHeartbeatNs,proto3" json:"last_heartbeat_ns,omitempty" db:"last_heartbeat_ns"`
	Status          DeviceStatus           `protobuf:"varint,6,opt,name=status,proto3,enum=gml.internal.controlplane.fleetmgr.v1.DeviceStatus" json:"status,omitempty"`
	Capabilities    *v1.DeviceCapabilities `protobuf:"bytes,8,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	Tags            map[string]*Tag        `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DeviceInfo) Reset()      { *m = DeviceInfo{} }
func (*DeviceInfo) ProtoMessage() {}
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{19}
}
func (m *DeviceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceInfo.Merge(m, src)
}
func (m *DeviceInfo) XXX_Size() int {
	return m.Size()
}
func (m *DeviceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceInfo proto.InternalMessageInfo

func (m *DeviceInfo) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *DeviceInfo) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *DeviceInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *DeviceInfo) GetFleetID() *typespb.UUID {
	if m != nil {
		return m.FleetID
	}
	return nil
}

func (m *DeviceInfo) GetLastHeartbeatNS() int64 {
	if m != nil {
		return m.LastHeartbeatNS
	}
	return 0
}

func (m *DeviceInfo) GetStatus() DeviceStatus {
	if m != nil {
		return m.Status
	}
	return DEVICE_STATUS_UNKNOWN
}

func (m *DeviceInfo) GetCapabilities() *v1.DeviceCapabilities {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *DeviceInfo) GetTags() map[string]*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type RegisterRequest struct {
	DeviceSerial string `protobuf:"bytes,1,opt,name=device_serial,json=deviceSerial,proto3" json:"device_serial,omitempty"`
	Hostname     string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (m *RegisterRequest) Reset()      { *m = RegisterRequest{} }
func (*RegisterRequest) ProtoMessage() {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{20}
}
func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetDeviceSerial() string {
	if m != nil {
		return m.DeviceSerial
	}
	return ""
}

func (m *RegisterRequest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type RegisterResponse struct {
	DeviceID *typespb.UUID `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (m *RegisterResponse) Reset()      { *m = RegisterResponse{} }
func (*RegisterResponse) ProtoMessage() {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{21}
}
func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(m, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

func (m *RegisterResponse) GetDeviceID() *typespb.UUID {
	if m != nil {
		return m.DeviceID
	}
	return nil
}

type UpdateStatusRequest struct {
	DeviceID *typespb.UUID `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (m *UpdateStatusRequest) Reset()      { *m = UpdateStatusRequest{} }
func (*UpdateStatusRequest) ProtoMessage() {}
func (*UpdateStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{22}
}
func (m *UpdateStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStatusRequest.Merge(m, src)
}
func (m *UpdateStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStatusRequest proto.InternalMessageInfo

func (m *UpdateStatusRequest) GetDeviceID() *typespb.UUID {
	if m != nil {
		return m.DeviceID
	}
	return nil
}

type UpdateStatusResponse struct {
}

func (m *UpdateStatusResponse) Reset()      { *m = UpdateStatusResponse{} }
func (*UpdateStatusResponse) ProtoMessage() {}
func (*UpdateStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{23}
}
func (m *UpdateStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStatusResponse.Merge(m, src)
}
func (m *UpdateStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStatusResponse proto.InternalMessageInfo

type GetDeviceRequest struct {
	ID *typespb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetDeviceRequest) Reset()      { *m = GetDeviceRequest{} }
func (*GetDeviceRequest) ProtoMessage() {}
func (*GetDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{24}
}
func (m *GetDeviceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceRequest.Merge(m, src)
}
func (m *GetDeviceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceRequest proto.InternalMessageInfo

func (m *GetDeviceRequest) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

type GetDeviceResponse struct {
	Device *DeviceInfo `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (m *GetDeviceResponse) Reset()      { *m = GetDeviceResponse{} }
func (*GetDeviceResponse) ProtoMessage() {}
func (*GetDeviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{25}
}
func (m *GetDeviceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceResponse.Merge(m, src)
}
func (m *GetDeviceResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceResponse proto.InternalMessageInfo

func (m *GetDeviceResponse) GetDevice() *DeviceInfo {
	if m != nil {
		return m.Device
	}
	return nil
}

type ListDevicesRequest struct {
	FleetID *typespb.UUID `protobuf:"bytes,1,opt,name=fleet_id,json=fleetId,proto3" json:"fleet_id,omitempty"`
}

func (m *ListDevicesRequest) Reset()      { *m = ListDevicesRequest{} }
func (*ListDevicesRequest) ProtoMessage() {}
func (*ListDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{26}
}
func (m *ListDevicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDevicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDevicesRequest.Merge(m, src)
}
func (m *ListDevicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDevicesRequest proto.InternalMessageInfo

func (m *ListDevicesRequest) GetFleetID() *typespb.UUID {
	if m != nil {
		return m.FleetID
	}
	return nil
}

type ListDevicesResponse struct {
	Devices []*DeviceInfo `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (m *ListDevicesResponse) Reset()      { *m = ListDevicesResponse{} }
func (*ListDevicesResponse) ProtoMessage() {}
func (*ListDevicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{27}
}
func (m *ListDevicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDevicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDevicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDevicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDevicesResponse.Merge(m, src)
}
func (m *ListDevicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListDevicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDevicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDevicesResponse proto.InternalMessageInfo

func (m *ListDevicesResponse) GetDevices() []*DeviceInfo {
	if m != nil {
		return m.Devices
	}
	return nil
}

type UpdateDeviceRequest struct {
	Device         *DeviceInfo `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	DeletedTagKeys []string    `protobuf:"bytes,2,rep,name=deleted_tag_keys,json=deletedTagKeys,proto3" json:"deleted_tag_keys,omitempty"`
}

func (m *UpdateDeviceRequest) Reset()      { *m = UpdateDeviceRequest{} }
func (*UpdateDeviceRequest) ProtoMessage() {}
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{28}
}
func (m *UpdateDeviceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDeviceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDeviceRequest.Merge(m, src)
}
func (m *UpdateDeviceRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDeviceRequest proto.InternalMessageInfo

func (m *UpdateDeviceRequest) GetDevice() *DeviceInfo {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *UpdateDeviceRequest) GetDeletedTagKeys() []string {
	if m != nil {
		return m.DeletedTagKeys
	}
	return nil
}

type UpdateDeviceResponse struct {
	Device *DeviceInfo `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (m *UpdateDeviceResponse) Reset()      { *m = UpdateDeviceResponse{} }
func (*UpdateDeviceResponse) ProtoMessage() {}
func (*UpdateDeviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{29}
}
func (m *UpdateDeviceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDeviceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDeviceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDeviceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDeviceResponse.Merge(m, src)
}
func (m *UpdateDeviceResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDeviceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDeviceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDeviceResponse proto.InternalMessageInfo

func (m *UpdateDeviceResponse) GetDevice() *DeviceInfo {
	if m != nil {
		return m.Device
	}
	return nil
}

type SetDeviceCapabilitiesRequest struct {
	DeviceID     *typespb.UUID          `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Capabilities *v1.DeviceCapabilities `protobuf:"bytes,2,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (m *SetDeviceCapabilitiesRequest) Reset()      { *m = SetDeviceCapabilitiesRequest{} }
func (*SetDeviceCapabilitiesRequest) ProtoMessage() {}
func (*SetDeviceCapabilitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{30}
}
func (m *SetDeviceCapabilitiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDeviceCapabilitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDeviceCapabilitiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDeviceCapabilitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDeviceCapabilitiesRequest.Merge(m, src)
}
func (m *SetDeviceCapabilitiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetDeviceCapabilitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDeviceCapabilitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetDeviceCapabilitiesRequest proto.InternalMessageInfo

func (m *SetDeviceCapabilitiesRequest) GetDeviceID() *typespb.UUID {
	if m != nil {
		return m.DeviceID
	}
	return nil
}

func (m *SetDeviceCapabilitiesRequest) GetCapabilities() *v1.DeviceCapabilities {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

type SetDeviceCapabilitiesResponse struct {
}

func (m *SetDeviceCapabilitiesResponse) Reset()      { *m = SetDeviceCapabilitiesResponse{} }
func (*SetDeviceCapabilitiesResponse) ProtoMessage() {}
func (*SetDeviceCapabilitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{31}
}
func (m *SetDeviceCapabilitiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDeviceCapabilitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDeviceCapabilitiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDeviceCapabilitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDeviceCapabilitiesResponse.Merge(m, src)
}
func (m *SetDeviceCapabilitiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetDeviceCapabilitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDeviceCapabilitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetDeviceCapabilitiesResponse proto.InternalMessageInfo

type GetTagsRequest struct {
	DeviceID *typespb.UUID `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (m *GetTagsRequest) Reset()      { *m = GetTagsRequest{} }
func (*GetTagsRequest) ProtoMessage() {}
func (*GetTagsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{32}
}
func (m *GetTagsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTagsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTagsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTagsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTagsRequest.Merge(m, src)
}
func (m *GetTagsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTagsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTagsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTagsRequest proto.InternalMessageInfo

func (m *GetTagsRequest) GetDeviceID() *typespb.UUID {
	if m != nil {
		return m.DeviceID
	}
	return nil
}

type GetTagsResponse struct {
	Tags map[string]*Tag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GetTagsResponse) Reset()      { *m = GetTagsResponse{} }
func (*GetTagsResponse) ProtoMessage() {}
func (*GetTagsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{33}
}
func (m *GetTagsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTagsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTagsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTagsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTagsResponse.Merge(m, src)
}
func (m *GetTagsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTagsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTagsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTagsResponse proto.InternalMessageInfo

func (m *GetTagsResponse) GetTags() map[string]*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type UpsertTagRequest struct {
	DeviceID *typespb.UUID `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Tag      *Tag          `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (m *UpsertTagRequest) Reset()      { *m = UpsertTagRequest{} }
func (*UpsertTagRequest) ProtoMessage() {}
func (*UpsertTagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{34}
}
func (m *UpsertTagRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertTagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertTagRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertTagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertTagRequest.Merge(m, src)
}
func (m *UpsertTagRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertTagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertTagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertTagRequest proto.InternalMessageInfo

func (m *UpsertTagRequest) GetDeviceID() *typespb.UUID {
	if m != nil {
		return m.DeviceID
	}
	return nil
}

func (m *UpsertTagRequest) GetTag() *Tag {
	if m != nil {
		return m.Tag
	}
	return nil
}

type UpsertTagResponse struct {
}

func (m *UpsertTagResponse) Reset()      { *m = UpsertTagResponse{} }
func (*UpsertTagResponse) ProtoMessage() {}
func (*UpsertTagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{35}
}
func (m *UpsertTagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertTagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertTagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertTagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertTagResponse.Merge(m, src)
}
func (m *UpsertTagResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpsertTagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertTagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertTagResponse proto.InternalMessageInfo

type DeleteTagRequest struct {
	DeviceID *typespb.UUID `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Key      string        `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *DeleteTagRequest) Reset()      { *m = DeleteTagRequest{} }
func (*DeleteTagRequest) ProtoMessage() {}
func (*DeleteTagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{36}
}
func (m *DeleteTagRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTagRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteTagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTagRequest.Merge(m, src)
}
func (m *DeleteTagRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTagRequest proto.InternalMessageInfo

func (m *DeleteTagRequest) GetDeviceID() *typespb.UUID {
	if m != nil {
		return m.DeviceID
	}
	return nil
}

func (m *DeleteTagRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DeleteTagResponse struct {
}

func (m *DeleteTagResponse) Reset()      { *m = DeleteTagResponse{} }
func (*DeleteTagResponse) ProtoMessage() {}
func (*DeleteTagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{37}
}
func (m *DeleteTagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteTagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTagResponse.Merge(m, src)
}
func (m *DeleteTagResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTagResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("gml.internal.controlplane.fleetmgr.v1.DeviceStatus", DeviceStatus_name, DeviceStatus_value)
	proto.RegisterType((*FleetInfo)(nil), "gml.internal.controlplane.fleetmgr.v1.FleetInfo")
	proto.RegisterMapType((map[string]*Tag)(nil), "gml.internal.controlplane.fleetmgr.v1.FleetInfo.TagsEntry")
	proto.RegisterType((*CreateFleetRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.CreateFleetRequest")
	proto.RegisterType((*CreateFleetResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.CreateFleetResponse")
	proto.RegisterType((*GetFleetRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.GetFleetRequest")
	proto.RegisterType((*GetFleetResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.GetFleetResponse")
	proto.RegisterType((*GetFleetByNameRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.GetFleetByNameRequest")
	proto.RegisterType((*GetFleetByNameResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.GetFleetByNameResponse")
	proto.RegisterType((*ListFleetsRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.ListFleetsRequest")
	proto.RegisterType((*ListFleetsResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.ListFleetsResponse")
	proto.RegisterType((*UpdateFleetRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.UpdateFleetRequest")
	proto.RegisterType((*UpdateFleetResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.UpdateFleetResponse")
	proto.RegisterType((*Tag)(nil), "gml.internal.controlplane.fleetmgr.v1.Tag")
	proto.RegisterType((*TagMetadata)(nil), "gml.internal.controlplane.fleetmgr.v1.TagMetadata")
	proto.RegisterType((*GetDefaultTagsRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.GetDefaultTagsRequest")
	proto.RegisterType((*GetDefaultTagsResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.GetDefaultTagsResponse")
	proto.RegisterMapType((map[string]*Tag)(nil), "gml.internal.controlplane.fleetmgr.v1.GetDefaultTagsResponse.TagsEntry")
	proto.RegisterType((*UpsertDefaultTagRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.UpsertDefaultTagRequest")
	proto.RegisterType((*UpsertDefaultTagResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.UpsertDefaultTagResponse")
	proto.RegisterType((*DeleteDefaultTagRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.DeleteDefaultTagRequest")
	proto.RegisterType((*DeleteDefaultTagResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.DeleteDefaultTagResponse")
	proto.RegisterType((*DeviceInfo)(nil), "gml.internal.controlplane.fleetmgr.v1.DeviceInfo")
	proto.RegisterMapType((map[string]*Tag)(nil), "gml.internal.controlplane.fleetmgr.v1.DeviceInfo.TagsEntry")
	proto.RegisterType((*RegisterRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.RegisterResponse")
	proto.RegisterType((*UpdateStatusRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.UpdateStatusRequest")
	proto.RegisterType((*UpdateStatusResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.UpdateStatusResponse")
	proto.RegisterType((*GetDeviceRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.GetDeviceRequest")
	proto.RegisterType((*GetDeviceResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.GetDeviceResponse")
	proto.RegisterType((*ListDevicesRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.ListDevicesRequest")
	proto.RegisterType((*ListDevicesResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.ListDevicesResponse")
	proto.RegisterType((*UpdateDeviceRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.UpdateDeviceRequest")
	proto.RegisterType((*UpdateDeviceResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.UpdateDeviceResponse")
	proto.RegisterType((*SetDeviceCapabilitiesRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.SetDeviceCapabilitiesRequest")
	proto.RegisterType((*SetDeviceCapabilitiesResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.SetDeviceCapabilitiesResponse")
	proto.RegisterType((*GetTagsRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.GetTagsRequest")
	proto.RegisterType((*GetTagsResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.GetTagsResponse")
	proto.RegisterMapType((map[string]*Tag)(nil), "gml.internal.controlplane.fleetmgr.v1.GetTagsResponse.TagsEntry")
	proto.RegisterType((*UpsertTagRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.UpsertTagRequest")
	proto.RegisterType((*UpsertTagResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.UpsertTagResponse")
	proto.RegisterType((*DeleteTagRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.DeleteTagRequest")
	proto.RegisterType((*DeleteTagResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.DeleteTagResponse")
}

func init() {
	proto.RegisterFile("src/controlplane/fleetmgr/fmpb/v1/fmpb.proto", fileDescriptor_e8daa588779d869f)
}

var fileDescriptor_e8daa588779d869f = []byte{
	// 1760 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0x5f, 0x6f, 0xdb, 0xd6,
	0x15, 0x37, 0x25, 0x5b, 0x96, 0x8e, 0x9c, 0x58, 0xbe, 0x76, 0x1c, 0x4d, 0x4b, 0x24, 0x8f, 0xc3,
	0x30, 0x23, 0xc8, 0xa4, 0x59, 0xc1, 0xf2, 0xc7, 0xce, 0xb6, 0xc4, 0x96, 0x13, 0x6b, 0x76, 0xe4,
	0x8c, 0x92, 0x37, 0x24, 0xdb, 0xa2, 0x5c, 0x89, 0xd7, 0x0c, 0x11, 0x49, 0x54, 0x48, 0xca, 0x98,
	0x11, 0x6c, 0x68, 0x80, 0xa2, 0x05, 0x8a, 0x16, 0x08, 0xd0, 0x6f, 0xd0, 0xa7, 0x3e, 0xf4, 0x83,
	0xf4, 0x21, 0x0f, 0x79, 0x0c, 0xfa, 0x20, 0xd4, 0xca, 0x43, 0xfb, 0xd0, 0x87, 0xc0, 0xe8, 0x07,
	0x28, 0x78, 0xef, 0xa5, 0x44, 0x5a, 0x72, 0x42, 0x4a, 0x0e, 0xf2, 0x64, 0x91, 0xf7, 0x9e, 0x73,
	0x7e, 0x3c, 0xe7, 0x77, 0x0e, 0x7f, 0x97, 0x86, 0x8b, 0x86, 0x5e, 0xcd, 0x54, 0xb5, 0x86, 0xa9,
	0x6b, 0xb5, 0x66, 0x0d, 0x37, 0x48, 0x66, 0xb7, 0x46, 0x88, 0x59, 0x57, 0xf4, 0xcc, 0x6e, 0xbd,
	0x59, 0xc9, 0xec, 0x2d, 0xd1, 0xbf, 0xe9, 0xa6, 0xae, 0x99, 0x1a, 0xfa, 0x9d, 0x52, 0xaf, 0xa5,
	0xd5, 0x86, 0x49, 0xf4, 0x06, 0xae, 0xa5, 0x9d, 0x66, 0x69, 0xdb, 0x2c, 0xbd, 0xb7, 0x94, 0x98,
	0x53, 0x34, 0x45, 0xa3, 0x16, 0x19, 0xeb, 0x17, 0x33, 0x4e, 0xa4, 0x14, 0x4d, 0x53, 0x6a, 0x24,
	0x43, 0xaf, 0x2a, 0xad, 0xdd, 0x8c, 0xa9, 0xd6, 0x89, 0x61, 0xe2, 0x7a, 0xd3, 0xde, 0x60, 0x61,
	0xc1, 0x4d, 0x35, 0x53, 0xd5, 0x74, 0xc2, 0x62, 0x57, 0x9b, 0x65, 0x22, 0x2b, 0x84, 0x6f, 0x38,
	0xcf, 0xc0, 0xd6, 0xeb, 0x5a, 0x23, 0x63, 0xee, 0x37, 0x89, 0xd1, 0xac, 0x64, 0x5a, 0x2d, 0x55,
	0x66, 0xcb, 0xe2, 0x0f, 0x41, 0x88, 0xdc, 0xb2, 0x60, 0xe4, 0x1b, 0xbb, 0x1a, 0xca, 0x42, 0x40,
	0x95, 0xe3, 0xc2, 0x82, 0xb0, 0x18, 0xcd, 0x4e, 0xa7, 0x2d, 0xe0, 0xd4, 0x24, 0xbd, 0xb3, 0x93,
	0xcf, 0xad, 0xce, 0x74, 0xda, 0xa9, 0x40, 0x3e, 0x77, 0xd8, 0x4e, 0x4d, 0xca, 0x95, 0x65, 0x51,
	0x95, 0x45, 0x29, 0xa0, 0xca, 0xe8, 0x06, 0x84, 0x34, 0x5d, 0x29, 0xab, 0x72, 0x3c, 0x30, 0xd8,
	0x2e, 0xde, 0x69, 0xa7, 0x26, 0xb6, 0x75, 0x85, 0x9a, 0x46, 0x2d, 0x53, 0xb6, 0x5f, 0x94, 0x26,
	0x34, 0x5d, 0xc9, 0xcb, 0xe8, 0x37, 0x30, 0xde, 0xc0, 0x75, 0x12, 0x0f, 0x2e, 0x08, 0x8b, 0x91,
	0xd5, 0x53, 0x87, 0xed, 0x54, 0xc4, 0xda, 0x65, 0xdd, 0x13, 0x25, 0xba, 0x84, 0x2e, 0x43, 0x54,
	0x26, 0x46, 0x55, 0x57, 0x9b, 0xa6, 0xaa, 0x35, 0xe2, 0x13, 0x74, 0xe7, 0xdc, 0x61, 0x3b, 0x15,
	0xb3, 0x76, 0x3a, 0x96, 0x44, 0xc9, 0xb9, 0x11, 0x15, 0x00, 0xaa, 0x3a, 0xc1, 0x26, 0x91, 0xcb,
	0xd8, 0x8c, 0x87, 0x28, 0xc0, 0x44, 0x9a, 0x25, 0x35, 0x6d, 0x27, 0x35, 0x5d, 0xb2, 0x93, 0xba,
	0x3a, 0x7b, 0xd8, 0x4e, 0x4d, 0x5b, 0x2e, 0x7b, 0x56, 0xa2, 0x14, 0xe1, 0x17, 0x37, 0x4d, 0x54,
	0x80, 0x71, 0x13, 0x2b, 0x46, 0x7c, 0x72, 0x21, 0xb8, 0x18, 0xcd, 0x2e, 0xa7, 0x3d, 0xd5, 0x36,
	0xdd, 0x4d, 0x70, 0xba, 0x84, 0x15, 0x63, 0xbd, 0x61, 0xea, 0xfb, 0x12, 0xf5, 0x93, 0xa8, 0x42,
	0xa4, 0x7b, 0x0b, 0xc5, 0x20, 0xf8, 0x98, 0xec, 0xd3, 0xf4, 0x47, 0x24, 0xeb, 0x27, 0xba, 0x01,
	0x13, 0x7b, 0xb8, 0xd6, 0x22, 0x3c, 0xb5, 0x17, 0x3c, 0xc6, 0x2b, 0x61, 0x45, 0x62, 0x86, 0xcb,
	0x81, 0xab, 0xc2, 0xdf, 0xc6, 0xc3, 0xe3, 0xb1, 0x09, 0xf1, 0xdf, 0x80, 0xd6, 0xe8, 0x73, 0x50,
	0x34, 0x12, 0x79, 0xd2, 0x22, 0x86, 0x89, 0x6e, 0xc1, 0x04, 0xb5, 0xe4, 0x45, 0xff, 0xa3, 0xdf,
	0x27, 0x92, 0x98, 0xb9, 0xf8, 0x1f, 0x98, 0x75, 0x79, 0x37, 0x9a, 0x5a, 0xc3, 0x20, 0x27, 0xe6,
	0x5e, 0x82, 0xe9, 0xdb, 0xc4, 0x74, 0x21, 0xff, 0xfd, 0xdb, 0xb8, 0x1a, 0x62, 0x5c, 0xa5, 0x04,
	0x9d, 0xe7, 0xf4, 0x0a, 0x50, 0xd2, 0x04, 0xe2, 0x02, 0xe3, 0x94, 0x78, 0x1f, 0x62, 0x3d, 0x9f,
	0x27, 0x8c, 0xf7, 0x01, 0x9c, 0xb1, 0x7d, 0xaf, 0xee, 0x17, 0x70, 0x9d, 0xd8, 0xa8, 0x11, 0x07,
	0xc3, 0x8a, 0xcc, 0xc8, 0xbd, 0xf4, 0xae, 0x0e, 0x8a, 0x74, 0x3b, 0x88, 0xb7, 0x8c, 0xf8, 0x10,
	0xe6, 0x8f, 0xfa, 0x3f, 0xe1, 0x27, 0xb8, 0x05, 0x33, 0x5b, 0xaa, 0xc1, 0x42, 0x18, 0x36, 0xfa,
	0x1e, 0x52, 0xc1, 0x2b, 0xd2, 0x07, 0x80, 0x9c, 0x7e, 0x38, 0xca, 0x0d, 0x08, 0xd1, 0x30, 0x46,
	0x5c, 0xa0, 0x9d, 0xe4, 0x1f, 0x26, 0xb7, 0x17, 0x3f, 0x11, 0x00, 0xed, 0x34, 0xe5, 0xf7, 0xc4,
	0x6b, 0xb4, 0x08, 0x31, 0x99, 0xd4, 0x88, 0x35, 0x0a, 0x4c, 0xac, 0x94, 0x1f, 0x93, 0x7d, 0x23,
	0x1e, 0x58, 0x08, 0x2e, 0x46, 0xa4, 0xd3, 0xfc, 0x7e, 0x09, 0x2b, 0x9b, 0x64, 0xdf, 0xb0, 0x3a,
	0xc0, 0x85, 0xe3, 0x84, 0xeb, 0xf1, 0x3f, 0x08, 0x96, 0xb0, 0x32, 0x60, 0x46, 0xcc, 0x39, 0x67,
	0x44, 0x84, 0xf7, 0x3d, 0x2a, 0x40, 0xb8, 0x4e, 0x4c, 0x2c, 0x63, 0x13, 0xd3, 0xb9, 0x1a, 0xcd,
	0x66, 0xbd, 0x0f, 0x8f, 0x3b, 0xdc, 0x52, 0xea, 0xfa, 0x10, 0x0f, 0x04, 0x88, 0x3a, 0x56, 0x50,
	0x16, 0xa6, 0x54, 0xa3, 0xac, 0x36, 0x1e, 0x11, 0x5d, 0x35, 0x09, 0xe3, 0x43, 0x78, 0x75, 0xba,
	0xd3, 0x4e, 0x45, 0xf3, 0x46, 0xde, 0xbe, 0x2d, 0x45, 0xd5, 0xde, 0x85, 0x35, 0x8c, 0x5b, 0x34,
	0x43, 0x74, 0x18, 0x07, 0xbc, 0x0f, 0xe3, 0x9e, 0x95, 0x28, 0x45, 0xf8, 0x05, 0x1d, 0xc6, 0xce,
	0xe1, 0x1e, 0x1c, 0x75, 0xb8, 0x8b, 0x77, 0x69, 0xd3, 0xe6, 0xc8, 0x2e, 0x6e, 0xd5, 0x4c, 0x6b,
	0x2c, 0xdb, 0x64, 0xba, 0x02, 0x61, 0x9a, 0xa1, 0xb7, 0x10, 0x3f, 0xda, 0x69, 0xa7, 0x26, 0x59,
	0xd1, 0x72, 0xd2, 0x24, 0xdd, 0x9d, 0x97, 0xc5, 0xef, 0x04, 0xda, 0xa7, 0x2e, 0x97, 0x9c, 0x17,
	0xff, 0xe2, 0x6f, 0x12, 0xc6, 0xff, 0xdb, 0x1e, 0x8b, 0x33, 0xd8, 0xd9, 0x07, 0x79, 0xad, 0x88,
	0xcf, 0x05, 0x38, 0xbb, 0xd3, 0x34, 0x88, 0xee, 0x80, 0x34, 0x6a, 0xc6, 0xd0, 0x75, 0x08, 0x9a,
	0x58, 0x19, 0x02, 0x98, 0x65, 0x26, 0x26, 0x20, 0xde, 0x8f, 0x88, 0xe5, 0x48, 0x94, 0xe1, 0x6c,
	0x8e, 0x76, 0xec, 0x09, 0xa2, 0xe5, 0xa9, 0x0d, 0x74, 0x53, 0x6b, 0x21, 0xe8, 0x8f, 0xc2, 0x11,
	0xfc, 0x3c, 0x0e, 0x90, 0x23, 0x7b, 0x6a, 0x95, 0x0c, 0x2d, 0xb6, 0xe6, 0x21, 0x64, 0x10, 0x5d,
	0xc5, 0x35, 0x1e, 0x93, 0x5f, 0xa1, 0x04, 0x84, 0x1f, 0x69, 0x86, 0xd9, 0x93, 0x51, 0x52, 0xf7,
	0x1a, 0x6d, 0x38, 0x9e, 0x6e, 0x7c, 0x70, 0xb4, 0x73, 0x8e, 0xa7, 0x3b, 0x6c, 0xa7, 0x4e, 0x59,
	0x21, 0x6d, 0x1b, 0xb1, 0xf7, 0xb8, 0xf7, 0x60, 0xa6, 0x86, 0x0d, 0xb3, 0xfc, 0x88, 0x60, 0xdd,
	0xac, 0x10, 0x6c, 0x96, 0x1b, 0x06, 0xd5, 0x62, 0xc1, 0xd5, 0x3f, 0x74, 0xda, 0xa9, 0xe9, 0x2d,
	0x6c, 0x98, 0x1b, 0xf6, 0x5a, 0xa1, 0x78, 0xd8, 0x4e, 0xcd, 0x5b, 0x9e, 0xfa, 0x6c, 0x44, 0x69,
	0xba, 0xe6, 0xda, 0x6a, 0xa0, 0x4d, 0x08, 0x19, 0x26, 0x36, 0x5b, 0x06, 0x15, 0x69, 0xa7, 0xb3,
	0x97, 0x3c, 0x96, 0x9e, 0xe5, 0xb3, 0x48, 0x4d, 0x25, 0xee, 0x02, 0xdd, 0x85, 0xa9, 0x2a, 0x6e,
	0xe2, 0x8a, 0x5a, 0x53, 0x4d, 0x95, 0x18, 0xf1, 0x30, 0x7d, 0xea, 0x8b, 0x6e, 0x97, 0xb8, 0xa9,
	0xa6, 0x2d, 0xd1, 0xdc, 0xf3, 0xb2, 0xe6, 0xb0, 0x91, 0x5c, 0x1e, 0xd0, 0x36, 0xef, 0xd6, 0x08,
	0xed, 0xd6, 0x15, 0x5f, 0xe0, 0x3e, 0xa4, 0xf0, 0x9b, 0x8c, 0x85, 0x2d, 0xed, 0x24, 0x11, 0x45,
	0x35, 0x4c, 0xa2, 0xdb, 0x84, 0xff, 0x2d, 0x9c, 0x92, 0x29, 0xb6, 0x32, 0x67, 0x13, 0x0b, 0x3d,
	0xc5, 0x6e, 0x16, 0xfb, 0x39, 0x15, 0x70, 0x73, 0x4a, 0x2c, 0x40, 0xac, 0xe7, 0x93, 0x4f, 0xb4,
	0x65, 0x88, 0x70, 0xa7, 0xc7, 0xd3, 0x7a, 0xaa, 0xd3, 0x4e, 0x85, 0x79, 0x5a, 0x72, 0x52, 0x98,
	0xed, 0xcf, 0xcb, 0xe2, 0xdf, 0xed, 0x97, 0x27, 0xaf, 0x24, 0xc7, 0x39, 0x8a, 0xcb, 0x79, 0x98,
	0x73, 0xbb, 0xe4, 0x5d, 0xb8, 0x42, 0x65, 0x1f, 0x33, 0xf0, 0xab, 0x25, 0xc5, 0x07, 0x30, 0xe3,
	0x30, 0xe6, 0x0f, 0x9e, 0x87, 0x10, 0x8b, 0xca, 0x3d, 0x2c, 0xf9, 0xa6, 0x87, 0xc4, 0x1d, 0x88,
	0x77, 0x98, 0x5a, 0x62, 0x2b, 0xa3, 0xbf, 0x7f, 0x2a, 0x30, 0xeb, 0x72, 0xc7, 0x01, 0x6f, 0xc2,
	0x24, 0x8b, 0x67, 0xbf, 0x7e, 0x86, 0x40, 0x6c, 0x7b, 0x10, 0x3f, 0x13, 0xec, 0xda, 0xb9, 0x73,
	0x7a, 0x72, 0x59, 0xf1, 0x21, 0xc2, 0xb0, 0x5d, 0xf4, 0xf7, 0x57, 0xa2, 0x6f, 0x04, 0x38, 0x57,
	0xb4, 0x39, 0xe0, 0x1a, 0x19, 0xa3, 0x93, 0xb6, 0x6f, 0x72, 0x05, 0x46, 0x9d, 0x5c, 0x62, 0x0a,
	0xce, 0x1f, 0x83, 0x96, 0xf7, 0xc3, 0x16, 0x9c, 0xbe, 0x4d, 0x5c, 0x72, 0x67, 0x94, 0xae, 0x7b,
	0x21, 0xd0, 0x93, 0x9a, 0x4b, 0xea, 0x94, 0x5c, 0x52, 0xe7, 0x86, 0x77, 0xa9, 0xf3, 0xe1, 0x35,
	0xce, 0xe7, 0x02, 0xc4, 0x98, 0xa2, 0x70, 0xc8, 0x85, 0x51, 0x0a, 0x3c, 0x9a, 0xbe, 0x99, 0x85,
	0x19, 0x07, 0x1a, 0x5e, 0xc0, 0x87, 0x10, 0x63, 0x92, 0xe3, 0x84, 0x20, 0xf6, 0x8b, 0x9a, 0x59,
	0x98, 0x71, 0x44, 0x60, 0x61, 0x2f, 0x3c, 0x13, 0x60, 0xca, 0xf9, 0xf6, 0x45, 0xbf, 0x82, 0x33,
	0xb9, 0xf5, 0x7f, 0xe4, 0xd7, 0xd6, 0xcb, 0xc5, 0xd2, 0xcd, 0xd2, 0x4e, 0xb1, 0xbc, 0x53, 0xd8,
	0x2c, 0x6c, 0xff, 0xb3, 0x10, 0x1b, 0xeb, 0x5f, 0xda, 0x58, 0xbf, 0xb9, 0x55, 0xda, 0xb8, 0x17,
	0x13, 0xd0, 0xaf, 0xe1, 0xec, 0x51, 0x2b, 0x7b, 0x31, 0x80, 0x92, 0x90, 0x70, 0x2f, 0xe6, 0xf2,
	0xc5, 0xb5, 0xed, 0x42, 0x61, 0x7d, 0xad, 0xb4, 0x9e, 0x8b, 0x05, 0xb3, 0x3f, 0x85, 0x61, 0x9a,
	0x0e, 0xbd, 0x3b, 0x8a, 0x5e, 0x24, 0x3a, 0x1d, 0x16, 0x1f, 0x0b, 0x10, 0x75, 0x7c, 0x8a, 0x40,
	0xd7, 0x3c, 0x26, 0xb9, 0xff, 0xe3, 0x48, 0x62, 0x79, 0x18, 0x53, 0x4e, 0xfa, 0xa7, 0x10, 0xb6,
	0x4f, 0xe8, 0xe8, 0xb2, 0x77, 0xca, 0xbb, 0xe2, 0x5f, 0xf1, 0x6d, 0xc7, 0x83, 0x7f, 0x21, 0xd0,
	0xa6, 0x76, 0x7c, 0x1f, 0x40, 0xd7, 0x7d, 0xfa, 0x72, 0x7d, 0xb6, 0x48, 0xfc, 0x79, 0x48, 0x6b,
	0x8e, 0xe7, 0x99, 0x00, 0xd0, 0xfb, 0x0a, 0x80, 0xae, 0x7a, 0xf4, 0xd6, 0xf7, 0x01, 0x22, 0x71,
	0x6d, 0x08, 0x4b, 0x8e, 0xc1, 0xe2, 0x85, 0xe3, 0x80, 0xee, 0x99, 0x17, 0xfd, 0x1f, 0x17, 0x3c,
	0xf3, 0x62, 0xd0, 0xf7, 0x00, 0x5e, 0x1a, 0xc7, 0x29, 0xce, 0x4f, 0x69, 0xfa, 0x0f, 0xa7, 0x7e,
	0x4a, 0x33, 0xe8, 0x1c, 0xfa, 0x65, 0x77, 0xc2, 0xf5, 0x56, 0xd1, 0x5f, 0x3c, 0x3f, 0xe0, 0xc0,
	0xe3, 0x5f, 0xe2, 0xaf, 0x43, 0xdb, 0x3b, 0x50, 0x1d, 0x3d, 0x47, 0x79, 0x46, 0x75, 0xcc, 0x31,
	0xcf, 0x33, 0xaa, 0xe3, 0x0e, 0x70, 0xd9, 0x17, 0x11, 0x98, 0xb5, 0xc7, 0xcd, 0xba, 0xac, 0x10,
	0x7b, 0xe4, 0x3c, 0x85, 0xb0, 0xad, 0x86, 0x3d, 0xf7, 0xfa, 0x11, 0x49, 0xee, 0xb9, 0xd7, 0xfb,
	0x64, 0xf7, 0xa7, 0x02, 0x4c, 0x39, 0x85, 0x2e, 0xf2, 0xc7, 0x4e, 0x97, 0xe0, 0x4e, 0xac, 0x0c,
	0x65, 0xcb, 0x91, 0xfc, 0x1f, 0x22, 0x5d, 0x71, 0x8c, 0xae, 0xf8, 0xa1, 0xa5, 0x43, 0x37, 0x26,
	0xae, 0xfa, 0x37, 0x74, 0x74, 0xb8, 0x43, 0xee, 0x22, 0x3f, 0xc3, 0xc2, 0xad, 0xb8, 0x3d, 0x77,
	0xf8, 0x20, 0x75, 0xdd, 0x2b, 0x08, 0x4f, 0x85, 0xbf, 0x82, 0xb8, 0xb3, 0xb1, 0x32, 0x94, 0x2d,
	0x47, 0xf2, 0x95, 0x00, 0x67, 0x06, 0x8a, 0x3f, 0xb4, 0xe6, 0xd1, 0xed, 0xdb, 0x84, 0x6e, 0x22,
	0x37, 0x9a, 0x13, 0x0e, 0xf2, 0xbf, 0x30, 0xc9, 0xa5, 0x1e, 0xfa, 0x93, 0x5f, 0x69, 0xc8, 0x70,
	0x5c, 0x1e, 0x4e, 0x51, 0x5a, 0x7c, 0xed, 0xaa, 0x29, 0xcf, 0x7c, 0x3d, 0xaa, 0x06, 0x3d, 0xf3,
	0xb5, 0x4f, 0xb8, 0x59, 0xf1, 0xbb, 0xb2, 0xca, 0x73, 0xfc, 0xa3, 0x52, 0xcf, 0x73, 0xfc, 0x3e,
	0x05, 0xb7, 0xfa, 0xe4, 0xe5, 0x41, 0x72, 0xec, 0xd5, 0x41, 0x72, 0xec, 0xcd, 0x41, 0x52, 0xf8,
	0xa8, 0x93, 0x14, 0xbe, 0xee, 0x24, 0x85, 0x6f, 0x3b, 0x49, 0xe1, 0x65, 0x27, 0x29, 0x7c, 0xdf,
	0x49, 0x0a, 0x3f, 0x76, 0x92, 0x63, 0x6f, 0x3a, 0x49, 0xe1, 0xf9, 0xeb, 0xe4, 0xd8, 0xcb, 0xd7,
	0xc9, 0xb1, 0x57, 0xaf, 0x93, 0x63, 0xf7, 0x57, 0x14, 0xb5, 0x5e, 0x23, 0x66, 0x0d, 0x57, 0x8c,
	0x34, 0x56, 0x33, 0xec, 0x2a, 0xf3, 0xce, 0x7f, 0x89, 0xae, 0x58, 0x7f, 0x2b, 0x21, 0xfa, 0x59,
	0xf6, 0xd2, 0x2f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x14, 0xd6, 0x1c, 0x43, 0x1d, 0x00, 0x00,
}

func (x DeviceStatus) String() string {
	s, ok := DeviceStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *FleetInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FleetInfo)
	if !ok {
		that2, ok := that.(FleetInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	return true
}
func (this *CreateFleetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateFleetRequest)
	if !ok {
		that2, ok := that.(CreateFleetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fleet.Equal(that1.Fleet) {
		return false
	}
	return true
}
func (this *CreateFleetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateFleetResponse)
	if !ok {
		that2, ok := that.(CreateFleetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fleet.Equal(that1.Fleet) {
		return false
	}
	return true
}
func (this *GetFleetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFleetRequest)
	if !ok {
		that2, ok := that.(GetFleetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetFleetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFleetResponse)
	if !ok {
		that2, ok := that.(GetFleetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fleet.Equal(that1.Fleet) {
		return false
	}
	return true
}
func (this *GetFleetByNameRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFleetByNameRequest)
	if !ok {
		that2, ok := that.(GetFleetByNameRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *GetFleetByNameResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFleetByNameResponse)
	if !ok {
		that2, ok := that.(GetFleetByNameResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fleet.Equal(that1.Fleet) {
		return false
	}
	return true
}
func (this *ListFleetsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListFleetsRequest)
	if !ok {
		that2, ok := that.(ListFleetsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *ListFleetsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListFleetsResponse)
	if !ok {
		that2, ok := that.(ListFleetsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Fleets) != len(that1.Fleets) {
		return false
	}
	for i := range this.Fleets {
		if !this.Fleets[i].Equal(that1.Fleets[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateFleetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateFleetRequest)
	if !ok {
		that2, ok := that.(UpdateFleetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fleet.Equal(that1.Fleet) {
		return false
	}
	if len(this.DeletedTagKeys) != len(that1.DeletedTagKeys) {
		return false
	}
	for i := range this.DeletedTagKeys {
		if this.DeletedTagKeys[i] != that1.DeletedTagKeys[i] {
			return false
		}
	}
	return true
}
func (this *UpdateFleetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateFleetResponse)
	if !ok {
		that2, ok := that.(UpdateFleetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fleet.Equal(that1.Fleet) {
		return false
	}
	return true
}
func (this *Tag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tag)
	if !ok {
		that2, ok := that.(Tag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (this *TagMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TagMetadata)
	if !ok {
		that2, ok := that.(TagMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsInherited != that1.IsInherited {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	return true
}
func (this *GetDefaultTagsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDefaultTagsRequest)
	if !ok {
		that2, ok := that.(GetDefaultTagsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FleetID.Equal(that1.FleetID) {
		return false
	}
	return true
}
func (this *GetDefaultTagsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDefaultTagsResponse)
	if !ok {
		that2, ok := that.(GetDefaultTagsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	return true
}
func (this *UpsertDefaultTagRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertDefaultTagRequest)
	if !ok {
		that2, ok := that.(UpsertDefaultTagRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FleetID.Equal(that1.FleetID) {
		return false
	}
	if !this.Tag.Equal(that1.Tag) {
		return false
	}
	return true
}
func (this *UpsertDefaultTagResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertDefaultTagResponse)
	if !ok {
		that2, ok := that.(UpsertDefaultTagResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeleteDefaultTagRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteDefaultTagRequest)
	if !ok {
		that2, ok := that.(DeleteDefaultTagRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FleetID.Equal(that1.FleetID) {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *DeleteDefaultTagResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteDefaultTagResponse)
	if !ok {
		that2, ok := that.(DeleteDefaultTagResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeviceInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceInfo)
	if !ok {
		that2, ok := that.(DeviceInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Serial != that1.Serial {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	if !this.FleetID.Equal(that1.FleetID) {
		return false
	}
	if this.LastHeartbeatNS != that1.LastHeartbeatNS {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.Capabilities.Equal(that1.Capabilities) {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	return true
}
func (this *RegisterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterRequest)
	if !ok {
		that2, ok := that.(RegisterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DeviceSerial != that1.DeviceSerial {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	return true
}
func (this *RegisterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterResponse)
	if !ok {
		that2, ok := that.(RegisterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeviceID.Equal(that1.DeviceID) {
		return false
	}
	return true
}
func (this *UpdateStatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateStatusRequest)
	if !ok {
		that2, ok := that.(UpdateStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeviceID.Equal(that1.DeviceID) {
		return false
	}
	return true
}
func (this *UpdateStatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateStatusResponse)
	if !ok {
		that2, ok := that.(UpdateStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetDeviceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDeviceRequest)
	if !ok {
		that2, ok := that.(GetDeviceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *GetDeviceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDeviceResponse)
	if !ok {
		that2, ok := that.(GetDeviceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Device.Equal(that1.Device) {
		return false
	}
	return true
}
func (this *ListDevicesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDevicesRequest)
	if !ok {
		that2, ok := that.(ListDevicesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FleetID.Equal(that1.FleetID) {
		return false
	}
	return true
}
func (this *ListDevicesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDevicesResponse)
	if !ok {
		that2, ok := that.(ListDevicesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Devices) != len(that1.Devices) {
		return false
	}
	for i := range this.Devices {
		if !this.Devices[i].Equal(that1.Devices[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateDeviceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateDeviceRequest)
	if !ok {
		that2, ok := that.(UpdateDeviceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Device.Equal(that1.Device) {
		return false
	}
	if len(this.DeletedTagKeys) != len(that1.DeletedTagKeys) {
		return false
	}
	for i := range this.DeletedTagKeys {
		if this.DeletedTagKeys[i] != that1.DeletedTagKeys[i] {
			return false
		}
	}
	return true
}
func (this *UpdateDeviceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateDeviceResponse)
	if !ok {
		that2, ok := that.(UpdateDeviceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Device.Equal(that1.Device) {
		return false
	}
	return true
}
func (this *SetDeviceCapabilitiesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetDeviceCapabilitiesRequest)
	if !ok {
		that2, ok := that.(SetDeviceCapabilitiesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeviceID.Equal(that1.DeviceID) {
		return false
	}
	if !this.Capabilities.Equal(that1.Capabilities) {
		return false
	}
	return true
}
func (this *SetDeviceCapabilitiesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetDeviceCapabilitiesResponse)
	if !ok {
		that2, ok := that.(SetDeviceCapabilitiesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetTagsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTagsRequest)
	if !ok {
		that2, ok := that.(GetTagsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeviceID.Equal(that1.DeviceID) {
		return false
	}
	return true
}
func (this *GetTagsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTagsResponse)
	if !ok {
		that2, ok := that.(GetTagsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	return true
}
func (this *UpsertTagRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertTagRequest)
	if !ok {
		that2, ok := that.(UpsertTagRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeviceID.Equal(that1.DeviceID) {
		return false
	}
	if !this.Tag.Equal(that1.Tag) {
		return false
	}
	return true
}
func (this *UpsertTagResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertTagResponse)
	if !ok {
		that2, ok := that.(UpsertTagResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeleteTagRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteTagRequest)
	if !ok {
		that2, ok := that.(DeleteTagRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeviceID.Equal(that1.DeviceID) {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *DeleteTagResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteTagResponse)
	if !ok {
		that2, ok := that.(DeleteTagResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *FleetInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&fmpb.FleetInfo{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]*Tag{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateFleetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.CreateFleetRequest{")
	if this.Fleet != nil {
		s = append(s, "Fleet: "+fmt.Sprintf("%#v", this.Fleet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateFleetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.CreateFleetResponse{")
	if this.Fleet != nil {
		s = append(s, "Fleet: "+fmt.Sprintf("%#v", this.Fleet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFleetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&fmpb.GetFleetRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFleetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.GetFleetResponse{")
	if this.Fleet != nil {
		s = append(s, "Fleet: "+fmt.Sprintf("%#v", this.Fleet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFleetByNameRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&fmpb.GetFleetByNameRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFleetByNameResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.GetFleetByNameResponse{")
	if this.Fleet != nil {
		s = append(s, "Fleet: "+fmt.Sprintf("%#v", this.Fleet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListFleetsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.ListFleetsRequest{")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListFleetsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.ListFleetsResponse{")
	if this.Fleets != nil {
		s = append(s, "Fleets: "+fmt.Sprintf("%#v", this.Fleets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateFleetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&fmpb.UpdateFleetRequest{")
	if this.Fleet != nil {
		s = append(s, "Fleet: "+fmt.Sprintf("%#v", this.Fleet)+",\n")
	}
	s = append(s, "DeletedTagKeys: "+fmt.Sprintf("%#v", this.DeletedTagKeys)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateFleetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.UpdateFleetResponse{")
	if this.Fleet != nil {
		s = append(s, "Fleet: "+fmt.Sprintf("%#v", this.Fleet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tag) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&fmpb.Tag{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&fmpb.TagMetadata{")
	s = append(s, "IsInherited: "+fmt.Sprintf("%#v", this.IsInherited)+",\n")
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDefaultTagsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.GetDefaultTagsRequest{")
	if this.FleetID != nil {
		s = append(s, "FleetID: "+fmt.Sprintf("%#v", this.FleetID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDefaultTagsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.GetDefaultTagsResponse{")
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]*Tag{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertDefaultTagRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&fmpb.UpsertDefaultTagRequest{")
	if this.FleetID != nil {
		s = append(s, "FleetID: "+fmt.Sprintf("%#v", this.FleetID)+",\n")
	}
	if this.Tag != nil {
		s = append(s, "Tag: "+fmt.Sprintf("%#v", this.Tag)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertDefaultTagResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&fmpb.UpsertDefaultTagResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteDefaultTagRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&fmpb.DeleteDefaultTagRequest{")
	if this.FleetID != nil {
		s = append(s, "FleetID: "+fmt.Sprintf("%#v", this.FleetID)+",\n")
	}
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteDefaultTagResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&fmpb.DeleteDefaultTagResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&fmpb.DeviceInfo{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "Serial: "+fmt.Sprintf("%#v", this.Serial)+",\n")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	if this.FleetID != nil {
		s = append(s, "FleetID: "+fmt.Sprintf("%#v", this.FleetID)+",\n")
	}
	s = append(s, "LastHeartbeatNS: "+fmt.Sprintf("%#v", this.LastHeartbeatNS)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.Capabilities != nil {
		s = append(s, "Capabilities: "+fmt.Sprintf("%#v", this.Capabilities)+",\n")
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]*Tag{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&fmpb.RegisterRequest{")
	s = append(s, "DeviceSerial: "+fmt.Sprintf("%#v", this.DeviceSerial)+",\n")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.RegisterResponse{")
	if this.DeviceID != nil {
		s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateStatusRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.UpdateStatusRequest{")
	if this.DeviceID != nil {
		s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateStatusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&fmpb.UpdateStatusResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDeviceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.GetDeviceRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDeviceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.GetDeviceResponse{")
	if this.Device != nil {
		s = append(s, "Device: "+fmt.Sprintf("%#v", this.Device)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListDevicesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.ListDevicesRequest{")
	if this.FleetID != nil {
		s = append(s, "FleetID: "+fmt.Sprintf("%#v", this.FleetID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListDevicesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.ListDevicesResponse{")
	if this.Devices != nil {
		s = append(s, "Devices: "+fmt.Sprintf("%#v", this.Devices)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateDeviceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&fmpb.UpdateDeviceRequest{")
	if this.Device != nil {
		s = append(s, "Device: "+fmt.Sprintf("%#v", this.Device)+",\n")
	}
	s = append(s, "DeletedTagKeys: "+fmt.Sprintf("%#v", this.DeletedTagKeys)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateDeviceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.UpdateDeviceResponse{")
	if this.Device != nil {
		s = append(s, "Device: "+fmt.Sprintf("%#v", this.Device)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetDeviceCapabilitiesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&fmpb.SetDeviceCapabilitiesRequest{")
	if this.DeviceID != nil {
		s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	}
	if this.Capabilities != nil {
		s = append(s, "Capabilities: "+fmt.Sprintf("%#v", this.Capabilities)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetDeviceCapabilitiesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&fmpb.SetDeviceCapabilitiesResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTagsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.GetTagsRequest{")
	if this.DeviceID != nil {
		s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTagsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.GetTagsResponse{")
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]*Tag{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertTagRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&fmpb.UpsertTagRequest{")
	if this.DeviceID != nil {
		s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	}
	if this.Tag != nil {
		s = append(s, "Tag: "+fmt.Sprintf("%#v", this.Tag)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertTagResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&fmpb.UpsertTagResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteTagRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&fmpb.DeleteTagRequest{")
	if this.DeviceID != nil {
		s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	}
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteTagResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&fmpb.DeleteTagResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFmpb(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FleetMgrServiceClient is the client API for FleetMgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FleetMgrServiceClient interface {
	CreateFleet(ctx context.Context, in *CreateFleetRequest, opts ...grpc.CallOption) (*CreateFleetResponse, error)
	GetFleet(ctx context.Context, in *GetFleetRequest, opts ...grpc.CallOption) (*GetFleetResponse, error)
	GetFleetByName(ctx context.Context, in *GetFleetByNameRequest, opts ...grpc.CallOption) (*GetFleetByNameResponse, error)
	ListFleets(ctx context.Context, in *ListFleetsRequest, opts ...grpc.CallOption) (*ListFleetsResponse, error)
	UpdateFleet(ctx context.Context, in *UpdateFleetRequest, opts ...grpc.CallOption) (*UpdateFleetResponse, error)
	GetDefaultTags(ctx context.Context, in *GetDefaultTagsRequest, opts ...grpc.CallOption) (*GetDefaultTagsResponse, error)
	UpsertDefaultTag(ctx context.Context, in *UpsertDefaultTagRequest, opts ...grpc.CallOption) (*UpsertDefaultTagResponse, error)
	DeleteDefaultTag(ctx context.Context, in *DeleteDefaultTagRequest, opts ...grpc.CallOption) (*DeleteDefaultTagResponse, error)
}

type fleetMgrServiceClient struct {
	cc *grpc.ClientConn
}

func NewFleetMgrServiceClient(cc *grpc.ClientConn) FleetMgrServiceClient {
	return &fleetMgrServiceClient{cc}
}

func (c *fleetMgrServiceClient) CreateFleet(ctx context.Context, in *CreateFleetRequest, opts ...grpc.CallOption) (*CreateFleetResponse, error) {
	out := new(CreateFleetResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/CreateFleet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrServiceClient) GetFleet(ctx context.Context, in *GetFleetRequest, opts ...grpc.CallOption) (*GetFleetResponse, error) {
	out := new(GetFleetResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/GetFleet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrServiceClient) GetFleetByName(ctx context.Context, in *GetFleetByNameRequest, opts ...grpc.CallOption) (*GetFleetByNameResponse, error) {
	out := new(GetFleetByNameResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/GetFleetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrServiceClient) ListFleets(ctx context.Context, in *ListFleetsRequest, opts ...grpc.CallOption) (*ListFleetsResponse, error) {
	out := new(ListFleetsResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/ListFleets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrServiceClient) UpdateFleet(ctx context.Context, in *UpdateFleetRequest, opts ...grpc.CallOption) (*UpdateFleetResponse, error) {
	out := new(UpdateFleetResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/UpdateFleet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrServiceClient) GetDefaultTags(ctx context.Context, in *GetDefaultTagsRequest, opts ...grpc.CallOption) (*GetDefaultTagsResponse, error) {
	out := new(GetDefaultTagsResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/GetDefaultTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrServiceClient) UpsertDefaultTag(ctx context.Context, in *UpsertDefaultTagRequest, opts ...grpc.CallOption) (*UpsertDefaultTagResponse, error) {
	out := new(UpsertDefaultTagResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/UpsertDefaultTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrServiceClient) DeleteDefaultTag(ctx context.Context, in *DeleteDefaultTagRequest, opts ...grpc.CallOption) (*DeleteDefaultTagResponse, error) {
	out := new(DeleteDefaultTagResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/DeleteDefaultTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetMgrServiceServer is the server API for FleetMgrService service.
type FleetMgrServiceServer interface {
	CreateFleet(context.Context, *CreateFleetRequest) (*CreateFleetResponse, error)
	GetFleet(context.Context, *GetFleetRequest) (*GetFleetResponse, error)
	GetFleetByName(context.Context, *GetFleetByNameRequest) (*GetFleetByNameResponse, error)
	ListFleets(context.Context, *ListFleetsRequest) (*ListFleetsResponse, error)
	UpdateFleet(context.Context, *UpdateFleetRequest) (*UpdateFleetResponse, error)
	GetDefaultTags(context.Context, *GetDefaultTagsRequest) (*GetDefaultTagsResponse, error)
	UpsertDefaultTag(context.Context, *UpsertDefaultTagRequest) (*UpsertDefaultTagResponse, error)
	DeleteDefaultTag(context.Context, *DeleteDefaultTagRequest) (*DeleteDefaultTagResponse, error)
}

// UnimplementedFleetMgrServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFleetMgrServiceServer struct {
}

func (*UnimplementedFleetMgrServiceServer) CreateFleet(ctx context.Context, req *CreateFleetRequest) (*CreateFleetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFleet not implemented")
}
func (*UnimplementedFleetMgrServiceServer) GetFleet(ctx context.Context, req *GetFleetRequest) (*GetFleetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFleet not implemented")
}
func (*UnimplementedFleetMgrServiceServer) GetFleetByName(ctx context.Context, req *GetFleetByNameRequest) (*GetFleetByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFleetByName not implemented")
}
func (*UnimplementedFleetMgrServiceServer) ListFleets(ctx context.Context, req *ListFleetsRequest) (*ListFleetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFleets not implemented")
}
func (*UnimplementedFleetMgrServiceServer) UpdateFleet(ctx context.Context, req *UpdateFleetRequest) (*UpdateFleetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFleet not implemented")
}
func (*UnimplementedFleetMgrServiceServer) GetDefaultTags(ctx context.Context, req *GetDefaultTagsRequest) (*GetDefaultTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultTags not implemented")
}
func (*UnimplementedFleetMgrServiceServer) UpsertDefaultTag(ctx context.Context, req *UpsertDefaultTagRequest) (*UpsertDefaultTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDefaultTag not implemented")
}
func (*UnimplementedFleetMgrServiceServer) DeleteDefaultTag(ctx context.Context, req *DeleteDefaultTagRequest) (*DeleteDefaultTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDefaultTag not implemented")
}

func RegisterFleetMgrServiceServer(s *grpc.Server, srv FleetMgrServiceServer) {
	s.RegisterService(&_FleetMgrService_serviceDesc, srv)
}

func _FleetMgrService_CreateFleet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFleetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrServiceServer).CreateFleet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/CreateFleet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrServiceServer).CreateFleet(ctx, req.(*CreateFleetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrService_GetFleet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFleetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrServiceServer).GetFleet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/GetFleet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrServiceServer).GetFleet(ctx, req.(*GetFleetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrService_GetFleetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFleetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrServiceServer).GetFleetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/GetFleetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrServiceServer).GetFleetByName(ctx, req.(*GetFleetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrService_ListFleets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFleetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrServiceServer).ListFleets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/ListFleets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrServiceServer).ListFleets(ctx, req.(*ListFleetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrService_UpdateFleet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFleetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrServiceServer).UpdateFleet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/UpdateFleet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrServiceServer).UpdateFleet(ctx, req.(*UpdateFleetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrService_GetDefaultTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrServiceServer).GetDefaultTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/GetDefaultTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrServiceServer).GetDefaultTags(ctx, req.(*GetDefaultTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrService_UpsertDefaultTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDefaultTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrServiceServer).UpsertDefaultTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/UpsertDefaultTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrServiceServer).UpsertDefaultTag(ctx, req.(*UpsertDefaultTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrService_DeleteDefaultTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDefaultTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrServiceServer).DeleteDefaultTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/DeleteDefaultTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrServiceServer).DeleteDefaultTag(ctx, req.(*DeleteDefaultTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FleetMgrService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gml.internal.controlplane.fleetmgr.v1.FleetMgrService",
	HandlerType: (*FleetMgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFleet",
			Handler:    _FleetMgrService_CreateFleet_Handler,
		},
		{
			MethodName: "GetFleet",
			Handler:    _FleetMgrService_GetFleet_Handler,
		},
		{
			MethodName: "GetFleetByName",
			Handler:    _FleetMgrService_GetFleetByName_Handler,
		},
		{
			MethodName: "ListFleets",
			Handler:    _FleetMgrService_ListFleets_Handler,
		},
		{
			MethodName: "UpdateFleet",
			Handler:    _FleetMgrService_UpdateFleet_Handler,
		},
		{
			MethodName: "GetDefaultTags",
			Handler:    _FleetMgrService_GetDefaultTags_Handler,
		},
		{
			MethodName: "UpsertDefaultTag",
			Handler:    _FleetMgrService_UpsertDefaultTag_Handler,
		},
		{
			MethodName: "DeleteDefaultTag",
			Handler:    _FleetMgrService_DeleteDefaultTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/controlplane/fleetmgr/fmpb/v1/fmpb.proto",
}

// FleetMgrEdgeServiceClient is the client API for FleetMgrEdgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FleetMgrEdgeServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error)
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error)
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error)
	SetDeviceCapabilities(ctx context.Context, in *SetDeviceCapabilitiesRequest, opts ...grpc.CallOption) (*SetDeviceCapabilitiesResponse, error)
	GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error)
	UpsertTag(ctx context.Context, in *UpsertTagRequest, opts ...grpc.CallOption) (*UpsertTagResponse, error)
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error)
}

type fleetMgrEdgeServiceClient struct {
	cc *grpc.ClientConn
}

func NewFleetMgrEdgeServiceClient(cc *grpc.ClientConn) FleetMgrEdgeServiceClient {
	return &fleetMgrEdgeServiceClient{cc}
}

func (c *fleetMgrEdgeServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrEdgeServiceClient) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error) {
	out := new(UpdateStatusResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrEdgeServiceClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error) {
	out := new(GetDeviceResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrEdgeServiceClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrEdgeServiceClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error) {
	out := new(UpdateDeviceResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrEdgeServiceClient) SetDeviceCapabilities(ctx context.Context, in *SetDeviceCapabilitiesRequest, opts ...grpc.CallOption) (*SetDeviceCapabilitiesResponse, error) {
	out := new(SetDeviceCapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/SetDeviceCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrEdgeServiceClient) GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error) {
	out := new(GetTagsResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrEdgeServiceClient) UpsertTag(ctx context.Context, in *UpsertTagRequest, opts ...grpc.CallOption) (*UpsertTagResponse, error) {
	out := new(UpsertTagResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/UpsertTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrEdgeServiceClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error) {
	out := new(DeleteTagResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetMgrEdgeServiceServer is the server API for FleetMgrEdgeService service.
type FleetMgrEdgeServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error)
	GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error)
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResponse, error)
	SetDeviceCapabilities(context.Context, *SetDeviceCapabilitiesRequest) (*SetDeviceCapabilitiesResponse, error)
	GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error)
	UpsertTag(context.Context, *UpsertTagRequest) (*UpsertTagResponse, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error)
}

// UnimplementedFleetMgrEdgeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFleetMgrEdgeServiceServer struct {
}

func (*UnimplementedFleetMgrEdgeServiceServer) Register(ctx context.Context, req *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedFleetMgrEdgeServiceServer) UpdateStatus(ctx context.Context, req *UpdateStatusRequest) (*UpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (*UnimplementedFleetMgrEdgeServiceServer) GetDevice(ctx context.Context, req *GetDeviceRequest) (*GetDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (*UnimplementedFleetMgrEdgeServiceServer) ListDevices(ctx context.Context, req *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (*UnimplementedFleetMgrEdgeServiceServer) UpdateDevice(ctx context.Context, req *UpdateDeviceRequest) (*UpdateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (*UnimplementedFleetMgrEdgeServiceServer) SetDeviceCapabilities(ctx context.Context, req *SetDeviceCapabilitiesRequest) (*SetDeviceCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceCapabilities not implemented")
}
func (*UnimplementedFleetMgrEdgeServiceServer) GetTags(ctx context.Context, req *GetTagsRequest) (*GetTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (*UnimplementedFleetMgrEdgeServiceServer) UpsertTag(ctx context.Context, req *UpsertTagRequest) (*UpsertTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTag not implemented")
}
func (*UnimplementedFleetMgrEdgeServiceServer) DeleteTag(ctx context.Context, req *DeleteTagRequest) (*DeleteTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}

func RegisterFleetMgrEdgeServiceServer(s *grpc.Server, srv FleetMgrEdgeServiceServer) {
	s.RegisterService(&_FleetMgrEdgeService_serviceDesc, srv)
}

func _FleetMgrEdgeService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrEdgeServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrEdgeServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrEdgeService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrEdgeServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrEdgeServiceServer).UpdateStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrEdgeService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrEdgeServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrEdgeServiceServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrEdgeService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrEdgeServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrEdgeServiceServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrEdgeService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrEdgeServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrEdgeServiceServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrEdgeService_SetDeviceCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrEdgeServiceServer).SetDeviceCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/SetDeviceCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrEdgeServiceServer).SetDeviceCapabilities(ctx, req.(*SetDeviceCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrEdgeService_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrEdgeServiceServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrEdgeServiceServer).GetTags(ctx, req.(*GetTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrEdgeService_UpsertTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrEdgeServiceServer).UpsertTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/UpsertTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrEdgeServiceServer).UpsertTag(ctx, req.(*UpsertTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrEdgeService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrEdgeServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrEdgeServiceServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FleetMgrEdgeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService",
	HandlerType: (*FleetMgrEdgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _FleetMgrEdgeService_Register_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _FleetMgrEdgeService_UpdateStatus_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _FleetMgrEdgeService_GetDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _FleetMgrEdgeService_ListDevices_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _FleetMgrEdgeService_UpdateDevice_Handler,
		},
		{
			MethodName: "SetDeviceCapabilities",
			Handler:    _FleetMgrEdgeService_SetDeviceCapabilities_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _FleetMgrEdgeService_GetTags_Handler,
		},
		{
			MethodName: "UpsertTag",
			Handler:    _FleetMgrEdgeService_UpsertTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _FleetMgrEdgeService_DeleteTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/controlplane/fleetmgr/fmpb/v1/fmpb.proto",
}

func (m *FleetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FleetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FleetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k := range m.Tags {
			v := m.Tags[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFmpb(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFmpb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFmpb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFmpb(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFmpb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateFleetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateFleetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateFleetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fleet != nil {
		{
			size, err := m.Fleet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateFleetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateFleetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateFleetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fleet != nil {
		{
			size, err := m.Fleet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFleetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFleetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFleetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFmpb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFleetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFleetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFleetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fleet != nil {
		{
			size, err := m.Fleet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFleetByNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFleetByNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFleetByNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFmpb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFleetByNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFleetByNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFleetByNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fleet != nil {
		{
			size, err := m.Fleet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListFleetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFleetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFleetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListFleetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFleetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFleetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fleets) > 0 {
		for iNdEx := len(m.Fleets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fleets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFmpb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateFleetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFleetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateFleetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeletedTagKeys) > 0 {
		for iNdEx := len(m.DeletedTagKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeletedTagKeys[iNdEx])
			copy(dAtA[i:], m.DeletedTagKeys[iNdEx])
			i = encodeVarintFmpb(dAtA, i, uint64(len(m.DeletedTagKeys[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Fleet != nil {
		{
			size, err := m.Fleet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateFleetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFleetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateFleetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fleet != nil {
		{
			size, err := m.Fleet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintFmpb(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintFmpb(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TagMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TagMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IsInherited {
		i--
		if m.IsInherited {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDefaultTagsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDefaultTagsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDefaultTagsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FleetID != nil {
		{
			size, err := m.FleetID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDefaultTagsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDefaultTagsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDefaultTagsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k := range m.Tags {
			v := m.Tags[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFmpb(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFmpb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFmpb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpsertDefaultTagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertDefaultTagRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertDefaultTagRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tag != nil {
		{
			size, err := m.Tag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FleetID != nil {
		{
			size, err := m.FleetID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertDefaultTagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertDefaultTagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertDefaultTagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteDefaultTagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDefaultTagRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteDefaultTagRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintFmpb(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if m.FleetID != nil {
		{
			size, err := m.FleetID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteDefaultTagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDefaultTagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteDefaultTagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeviceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k := range m.Tags {
			v := m.Tags[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFmpb(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFmpb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFmpb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Capabilities != nil {
		{
			size, err := m.Capabilities.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Status != 0 {
		i = encodeVarintFmpb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.LastHeartbeatNS != 0 {
		i = encodeVarintFmpb(dAtA, i, uint64(m.LastHeartbeatNS))
		i--
		dAtA[i] = 0x28
	}
	if m.FleetID != nil {
		{
			size, err := m.FleetID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintFmpb(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Serial) > 0 {
		i -= len(m.Serial)
		copy(dAtA[i:], m.Serial)
		i = encodeVarintFmpb(dAtA, i, uint64(len(m.Serial)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintFmpb(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceSerial) > 0 {
		i -= len(m.DeviceSerial)
		copy(dAtA[i:], m.DeviceSerial)
		i = encodeVarintFmpb(dAtA, i, uint64(len(m.DeviceSerial)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviceID != nil {
		{
			size, err := m.DeviceID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviceID != nil {
		{
			size, err := m.DeviceID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Device != nil {
		{
			size, err := m.Device.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListDevicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDevicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDevicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FleetID != nil {
		{
			size, err := m.FleetID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListDevicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDevicesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDevicesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Devices) > 0 {
		for iNdEx := len(m.Devices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Devices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFmpb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDeviceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeletedTagKeys) > 0 {
		for iNdEx := len(m.DeletedTagKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeletedTagKeys[iNdEx])
			copy(dAtA[i:], m.DeletedTagKeys[iNdEx])
			i = encodeVarintFmpb(dAtA, i, uint64(len(m.DeletedTagKeys[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Device != nil {
		{
			size, err := m.Device.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDeviceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDeviceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDeviceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Device != nil {
		{
			size, err := m.Device.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetDeviceCapabilitiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDeviceCapabilitiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDeviceCapabilitiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Capabilities != nil {
		{
			size, err := m.Capabilities.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DeviceID != nil {
		{
			size, err := m.DeviceID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetDeviceCapabilitiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDeviceCapabilitiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDeviceCapabilitiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetTagsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTagsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTagsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviceID != nil {
		{
			size, err := m.DeviceID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTagsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTagsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTagsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k := range m.Tags {
			v := m.Tags[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFmpb(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFmpb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFmpb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpsertTagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertTagRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertTagRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tag != nil {
		{
			size, err := m.Tag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DeviceID != nil {
		{
			size, err := m.DeviceID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertTagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertTagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertTagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteTagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTagRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteTagRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintFmpb(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if m.DeviceID != nil {
		{
			size, err := m.DeviceID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteTagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteTagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintFmpb(dAtA []byte, offset int, v uint64) int {
	offset -= sovFmpb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FleetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFmpb(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFmpb(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFmpb(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFmpb(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFmpb(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CreateFleetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fleet != nil {
		l = m.Fleet.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *CreateFleetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fleet != nil {
		l = m.Fleet.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *GetFleetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *GetFleetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fleet != nil {
		l = m.Fleet.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *GetFleetByNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFmpb(uint64(l))
	}
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *GetFleetByNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fleet != nil {
		l = m.Fleet.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *ListFleetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *ListFleetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fleets) > 0 {
		for _, e := range m.Fleets {
			l = e.Size()
			n += 1 + l + sovFmpb(uint64(l))
		}
	}
	return n
}

func (m *UpdateFleetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fleet != nil {
		l = m.Fleet.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	if len(m.DeletedTagKeys) > 0 {
		for _, s := range m.DeletedTagKeys {
			l = len(s)
			n += 1 + l + sovFmpb(uint64(l))
		}
	}
	return n
}

func (m *UpdateFleetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fleet != nil {
		l = m.Fleet.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *Tag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovFmpb(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovFmpb(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *TagMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsInherited {
		n += 2
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *GetDefaultTagsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FleetID != nil {
		l = m.FleetID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *GetDefaultTagsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFmpb(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFmpb(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFmpb(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UpsertDefaultTagRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FleetID != nil {
		l = m.FleetID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *UpsertDefaultTagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteDefaultTagRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FleetID != nil {
		l = m.FleetID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *DeleteDefaultTagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeviceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	l = len(m.Serial)
	if l > 0 {
		n += 1 + l + sovFmpb(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovFmpb(uint64(l))
	}
	if m.FleetID != nil {
		l = m.FleetID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	if m.LastHeartbeatNS != 0 {
		n += 1 + sovFmpb(uint64(m.LastHeartbeatNS))
	}
	if m.Status != 0 {
		n += 1 + sovFmpb(uint64(m.Status))
	}
	if m.Capabilities != nil {
		l = m.Capabilities.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFmpb(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFmpb(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFmpb(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RegisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceSerial)
	if l > 0 {
		n += 1 + l + sovFmpb(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *RegisterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceID != nil {
		l = m.DeviceID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *UpdateStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceID != nil {
		l = m.DeviceID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *UpdateStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetDeviceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *GetDeviceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *ListDevicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FleetID != nil {
		l = m.FleetID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *ListDevicesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Devices) > 0 {
		for _, e := range m.Devices {
			l = e.Size()
			n += 1 + l + sovFmpb(uint64(l))
		}
	}
	return n
}

func (m *UpdateDeviceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	if len(m.DeletedTagKeys) > 0 {
		for _, s := range m.DeletedTagKeys {
			l = len(s)
			n += 1 + l + sovFmpb(uint64(l))
		}
	}
	return n
}

func (m *UpdateDeviceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *SetDeviceCapabilitiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceID != nil {
		l = m.DeviceID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	if m.Capabilities != nil {
		l = m.Capabilities.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *SetDeviceCapabilitiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetTagsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceID != nil {
		l = m.DeviceID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *GetTagsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFmpb(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFmpb(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFmpb(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UpsertTagRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceID != nil {
		l = m.DeviceID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *UpsertTagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteTagRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceID != nil {
		l = m.DeviceID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *DeleteTagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovFmpb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFmpb(x uint64) (n int) {
	return sovFmpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FleetInfo) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]*Tag{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&FleetInfo{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "typespb.UUID", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateFleetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateFleetRequest{`,
		`Fleet:` + strings.Replace(this.Fleet.String(), "FleetInfo", "FleetInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateFleetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateFleetResponse{`,
		`Fleet:` + strings.Replace(this.Fleet.String(), "FleetInfo", "FleetInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFleetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFleetRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFleetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFleetResponse{`,
		`Fleet:` + strings.Replace(this.Fleet.String(), "FleetInfo", "FleetInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFleetByNameRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFleetByNameRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFleetByNameResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFleetByNameResponse{`,
		`Fleet:` + strings.Replace(this.Fleet.String(), "FleetInfo", "FleetInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListFleetsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListFleetsRequest{`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListFleetsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFleets := "[]*FleetInfo{"
	for _, f := range this.Fleets {
		repeatedStringForFleets += strings.Replace(f.String(), "FleetInfo", "FleetInfo", 1) + ","
	}
	repeatedStringForFleets += "}"
	s := strings.Join([]string{`&ListFleetsResponse{`,
		`Fleets:` + repeatedStringForFleets + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateFleetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateFleetRequest{`,
		`Fleet:` + strings.Replace(this.Fleet.String(), "FleetInfo", "FleetInfo", 1) + `,`,
		`DeletedTagKeys:` + fmt.Sprintf("%v", this.DeletedTagKeys) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateFleetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateFleetResponse{`,
		`Fleet:` + strings.Replace(this.Fleet.String(), "FleetInfo", "FleetInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Tag{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Metadata:` + strings.Replace(this.Metadata.String(), "TagMetadata", "TagMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TagMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagMetadata{`,
		`IsInherited:` + fmt.Sprintf("%v", this.IsInherited) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDefaultTagsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDefaultTagsRequest{`,
		`FleetID:` + strings.Replace(fmt.Sprintf("%v", this.FleetID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDefaultTagsResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]*Tag{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&GetDefaultTagsResponse{`,
		`Tags:` + mapStringForTags + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertDefaultTagRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertDefaultTagRequest{`,
		`FleetID:` + strings.Replace(fmt.Sprintf("%v", this.FleetID), "UUID", "typespb.UUID", 1) + `,`,
		`Tag:` + strings.Replace(this.Tag.String(), "Tag", "Tag", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertDefaultTagResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertDefaultTagResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DeleteDefaultTagRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteDefaultTagRequest{`,
		`FleetID:` + strings.Replace(fmt.Sprintf("%v", this.FleetID), "UUID", "typespb.UUID", 1) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteDefaultTagResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteDefaultTagResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DeviceInfo) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]*Tag{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&DeviceInfo{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`Serial:` + fmt.Sprintf("%v", this.Serial) + `,`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`FleetID:` + strings.Replace(fmt.Sprintf("%v", this.FleetID), "UUID", "typespb.UUID", 1) + `,`,
		`LastHeartbeatNS:` + fmt.Sprintf("%v", this.LastHeartbeatNS) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Capabilities:` + strings.Replace(fmt.Sprintf("%v", this.Capabilities), "DeviceCapabilities", "v1.DeviceCapabilities", 1) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterRequest{`,
		`DeviceSerial:` + fmt.Sprintf("%v", this.DeviceSerial) + `,`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterResponse{`,
		`DeviceID:` + strings.Replace(fmt.Sprintf("%v", this.DeviceID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateStatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateStatusRequest{`,
		`DeviceID:` + strings.Replace(fmt.Sprintf("%v", this.DeviceID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateStatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateStatusResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetDeviceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDeviceRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDeviceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDeviceResponse{`,
		`Device:` + strings.Replace(this.Device.String(), "DeviceInfo", "DeviceInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListDevicesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListDevicesRequest{`,
		`FleetID:` + strings.Replace(fmt.Sprintf("%v", this.FleetID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListDevicesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDevices := "[]*DeviceInfo{"
	for _, f := range this.Devices {
		repeatedStringForDevices += strings.Replace(f.String(), "DeviceInfo", "DeviceInfo", 1) + ","
	}
	repeatedStringForDevices += "}"
	s := strings.Join([]string{`&ListDevicesResponse{`,
		`Devices:` + repeatedStringForDevices + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateDeviceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateDeviceRequest{`,
		`Device:` + strings.Replace(this.Device.String(), "DeviceInfo", "DeviceInfo", 1) + `,`,
		`DeletedTagKeys:` + fmt.Sprintf("%v", this.DeletedTagKeys) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateDeviceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateDeviceResponse{`,
		`Device:` + strings.Replace(this.Device.String(), "DeviceInfo", "DeviceInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetDeviceCapabilitiesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetDeviceCapabilitiesRequest{`,
		`DeviceID:` + strings.Replace(fmt.Sprintf("%v", this.DeviceID), "UUID", "typespb.UUID", 1) + `,`,
		`Capabilities:` + strings.Replace(fmt.Sprintf("%v", this.Capabilities), "DeviceCapabilities", "v1.DeviceCapabilities", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetDeviceCapabilitiesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetDeviceCapabilitiesResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetTagsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTagsRequest{`,
		`DeviceID:` + strings.Replace(fmt.Sprintf("%v", this.DeviceID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTagsResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]*Tag{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&GetTagsResponse{`,
		`Tags:` + mapStringForTags + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertTagRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertTagRequest{`,
		`DeviceID:` + strings.Replace(fmt.Sprintf("%v", this.DeviceID), "UUID", "typespb.UUID", 1) + `,`,
		`Tag:` + strings.Replace(this.Tag.String(), "Tag", "Tag", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertTagResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertTagResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DeleteTagRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteTagRequest{`,
		`DeviceID:` + strings.Replace(fmt.Sprintf("%v", this.DeviceID), "UUID", "typespb.UUID", 1) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteTagResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteTagResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringFmpb(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FleetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FleetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FleetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &typespb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]*Tag)
			}
			var mapkey string
			var mapvalue *Tag
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFmpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFmpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFmpb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFmpb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFmpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFmpb
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFmpb
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Tag{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFmpb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFmpb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateFleetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateFleetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateFleetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fleet == nil {
				m.Fleet = &FleetInfo{}
			}
			if err := m.Fleet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateFleetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateFleetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateFleetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fleet == nil {
				m.Fleet = &FleetInfo{}
			}
			if err := m.Fleet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFleetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFleetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFleetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFleetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFleetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFleetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fleet == nil {
				m.Fleet = &FleetInfo{}
			}
			if err := m.Fleet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFleetByNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFleetByNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFleetByNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &typespb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFleetByNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFleetByNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFleetByNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fleet == nil {
				m.Fleet = &FleetInfo{}
			}
			if err := m.Fleet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFleetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFleetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFleetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &typespb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFleetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFleetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFleetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fleets = append(m.Fleets, &FleetInfo{})
			if err := m.Fleets[len(m.Fleets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFleetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFleetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFleetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fleet == nil {
				m.Fleet = &FleetInfo{}
			}
			if err := m.Fleet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedTagKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedTagKeys = append(m.DeletedTagKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFleetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFleetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFleetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fleet == nil {
				m.Fleet = &FleetInfo{}
			}
			if err := m.Fleet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &TagMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInherited", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInherited = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDefaultTagsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDefaultTagsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDefaultTagsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FleetID == nil {
				m.FleetID = &typespb.UUID{}
			}
			if err := m.FleetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDefaultTagsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDefaultTagsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDefaultTagsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]*Tag)
			}
			var mapkey string
			var mapvalue *Tag
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFmpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFmpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFmpb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFmpb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFmpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFmpb
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFmpb
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Tag{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFmpb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFmpb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertDefaultTagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertDefaultTagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertDefaultTagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FleetID == nil {
				m.FleetID = &typespb.UUID{}
			}
			if err := m.FleetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &Tag{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertDefaultTagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertDefaultTagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertDefaultTagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDefaultTagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDefaultTagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDefaultTagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FleetID == nil {
				m.FleetID = &typespb.UUID{}
			}
			if err := m.FleetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDefaultTagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDefaultTagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDefaultTagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serial", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Serial = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FleetID == nil {
				m.FleetID = &typespb.UUID{}
			}
			if err := m.FleetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatNS", wireType)
			}
			m.LastHeartbeatNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeartbeatNS |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DeviceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Capabilities == nil {
				m.Capabilities = &v1.DeviceCapabilities{}
			}
			if err := m.Capabilities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]*Tag)
			}
			var mapkey string
			var mapvalue *Tag
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFmpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFmpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFmpb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFmpb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFmpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFmpb
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFmpb
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Tag{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFmpb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFmpb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceSerial", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceSerial = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceID == nil {
				m.DeviceID = &typespb.UUID{}
			}
			if err := m.DeviceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceID == nil {
				m.DeviceID = &typespb.UUID{}
			}
			if err := m.DeviceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &DeviceInfo{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDevicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDevicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDevicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FleetID == nil {
				m.FleetID = &typespb.UUID{}
			}
			if err := m.FleetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDevicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDevicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDevicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devices = append(m.Devices, &DeviceInfo{})
			if err := m.Devices[len(m.Devices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &DeviceInfo{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedTagKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedTagKeys = append(m.DeletedTagKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDeviceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDeviceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDeviceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &DeviceInfo{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDeviceCapabilitiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDeviceCapabilitiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDeviceCapabilitiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceID == nil {
				m.DeviceID = &typespb.UUID{}
			}
			if err := m.DeviceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Capabilities == nil {
				m.Capabilities = &v1.DeviceCapabilities{}
			}
			if err := m.Capabilities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDeviceCapabilitiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDeviceCapabilitiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDeviceCapabilitiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTagsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTagsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTagsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceID == nil {
				m.DeviceID = &typespb.UUID{}
			}
			if err := m.DeviceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTagsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTagsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTagsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]*Tag)
			}
			var mapkey string
			var mapvalue *Tag
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFmpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFmpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFmpb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFmpb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFmpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFmpb
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFmpb
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Tag{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFmpb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFmpb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertTagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertTagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertTagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceID == nil {
				m.DeviceID = &typespb.UUID{}
			}
			if err := m.DeviceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &Tag{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertTagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertTagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertTagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceID == nil {
				m.DeviceID = &typespb.UUID{}
			}
			if err := m.DeviceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFmpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFmpb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFmpb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFmpb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFmpb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFmpb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFmpb = fmt.Errorf("proto: unexpected end of group")
)
