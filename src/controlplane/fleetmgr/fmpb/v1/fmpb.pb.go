// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/controlplane/fleetmgr/fmpb/v1/fmpb.proto

package fmpb

import (
	context "context"
	fmt "fmt"
	typespb "gimletlabs.ai/gimlet/src/common/typespb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeviceStatus int32

const (
	DEVICE_STATUS_UNKNOWN      DeviceStatus = 0
	DEVICE_STATUS_HEALTHY      DeviceStatus = 1
	DEVICE_STATUS_UNHEALTHY    DeviceStatus = 2
	DEVICE_STATUS_DISCONNECTED DeviceStatus = 3
)

var DeviceStatus_name = map[int32]string{
	0: "DEVICE_STATUS_UNKNOWN",
	1: "DEVICE_STATUS_HEALTHY",
	2: "DEVICE_STATUS_UNHEALTHY",
	3: "DEVICE_STATUS_DISCONNECTED",
}

var DeviceStatus_value = map[string]int32{
	"DEVICE_STATUS_UNKNOWN":      0,
	"DEVICE_STATUS_HEALTHY":      1,
	"DEVICE_STATUS_UNHEALTHY":    2,
	"DEVICE_STATUS_DISCONNECTED": 3,
}

func (DeviceStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{0}
}

type FleetInfo struct {
	ID    *typespb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	OrgID *typespb.UUID `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty" db:"org_id"`
	Name  string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	Tags  []string      `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" db:"tags"`
}

func (m *FleetInfo) Reset()      { *m = FleetInfo{} }
func (*FleetInfo) ProtoMessage() {}
func (*FleetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{0}
}
func (m *FleetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FleetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FleetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FleetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FleetInfo.Merge(m, src)
}
func (m *FleetInfo) XXX_Size() int {
	return m.Size()
}
func (m *FleetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FleetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FleetInfo proto.InternalMessageInfo

func (m *FleetInfo) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *FleetInfo) GetOrgID() *typespb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

func (m *FleetInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FleetInfo) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type DeviceInfo struct {
	ID              *typespb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	Serial          string        `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial,omitempty"`
	Hostname        string        `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	FleetID         *typespb.UUID `protobuf:"bytes,4,opt,name=fleet_id,json=fleetId,proto3" json:"fleet_id,omitempty" db:"fleet_id"`
	LastHeartbeatNS int64         `protobuf:"varint,5,opt,name=last_heartbeat_ns,json=lastHeartbeatNs,proto3" json:"last_heartbeat_ns,omitempty" db:"last_heartbeat_ns"`
	Status          DeviceStatus  `protobuf:"varint,6,opt,name=status,proto3,enum=gml.internal.controlplane.fleetmgr.v1.DeviceStatus" json:"status,omitempty"`
}

func (m *DeviceInfo) Reset()      { *m = DeviceInfo{} }
func (*DeviceInfo) ProtoMessage() {}
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{1}
}
func (m *DeviceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceInfo.Merge(m, src)
}
func (m *DeviceInfo) XXX_Size() int {
	return m.Size()
}
func (m *DeviceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceInfo proto.InternalMessageInfo

func (m *DeviceInfo) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *DeviceInfo) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *DeviceInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *DeviceInfo) GetFleetID() *typespb.UUID {
	if m != nil {
		return m.FleetID
	}
	return nil
}

func (m *DeviceInfo) GetLastHeartbeatNS() int64 {
	if m != nil {
		return m.LastHeartbeatNS
	}
	return 0
}

func (m *DeviceInfo) GetStatus() DeviceStatus {
	if m != nil {
		return m.Status
	}
	return DEVICE_STATUS_UNKNOWN
}

type CreateFleetRequest struct {
	Fleet *FleetInfo `protobuf:"bytes,1,opt,name=fleet,proto3" json:"fleet,omitempty"`
}

func (m *CreateFleetRequest) Reset()      { *m = CreateFleetRequest{} }
func (*CreateFleetRequest) ProtoMessage() {}
func (*CreateFleetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{2}
}
func (m *CreateFleetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateFleetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateFleetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateFleetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFleetRequest.Merge(m, src)
}
func (m *CreateFleetRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateFleetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFleetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFleetRequest proto.InternalMessageInfo

func (m *CreateFleetRequest) GetFleet() *FleetInfo {
	if m != nil {
		return m.Fleet
	}
	return nil
}

type CreateFleetResponse struct {
	Fleet *FleetInfo `protobuf:"bytes,1,opt,name=fleet,proto3" json:"fleet,omitempty"`
}

func (m *CreateFleetResponse) Reset()      { *m = CreateFleetResponse{} }
func (*CreateFleetResponse) ProtoMessage() {}
func (*CreateFleetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{3}
}
func (m *CreateFleetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateFleetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateFleetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateFleetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFleetResponse.Merge(m, src)
}
func (m *CreateFleetResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateFleetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFleetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFleetResponse proto.InternalMessageInfo

func (m *CreateFleetResponse) GetFleet() *FleetInfo {
	if m != nil {
		return m.Fleet
	}
	return nil
}

type RegisterRequest struct {
	DeviceSerial string `protobuf:"bytes,1,opt,name=device_serial,json=deviceSerial,proto3" json:"device_serial,omitempty"`
	Hostname     string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (m *RegisterRequest) Reset()      { *m = RegisterRequest{} }
func (*RegisterRequest) ProtoMessage() {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{4}
}
func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetDeviceSerial() string {
	if m != nil {
		return m.DeviceSerial
	}
	return ""
}

func (m *RegisterRequest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type RegisterResponse struct {
	DeviceID *typespb.UUID `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (m *RegisterResponse) Reset()      { *m = RegisterResponse{} }
func (*RegisterResponse) ProtoMessage() {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{5}
}
func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(m, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

func (m *RegisterResponse) GetDeviceID() *typespb.UUID {
	if m != nil {
		return m.DeviceID
	}
	return nil
}

type GetFleetRequest struct {
	ID   *typespb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetFleetRequest) Reset()      { *m = GetFleetRequest{} }
func (*GetFleetRequest) ProtoMessage() {}
func (*GetFleetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{6}
}
func (m *GetFleetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFleetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFleetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFleetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFleetRequest.Merge(m, src)
}
func (m *GetFleetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFleetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFleetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFleetRequest proto.InternalMessageInfo

func (m *GetFleetRequest) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *GetFleetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetFleetResponse struct {
	Fleet *FleetInfo `protobuf:"bytes,1,opt,name=fleet,proto3" json:"fleet,omitempty"`
}

func (m *GetFleetResponse) Reset()      { *m = GetFleetResponse{} }
func (*GetFleetResponse) ProtoMessage() {}
func (*GetFleetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{7}
}
func (m *GetFleetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFleetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFleetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFleetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFleetResponse.Merge(m, src)
}
func (m *GetFleetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFleetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFleetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFleetResponse proto.InternalMessageInfo

func (m *GetFleetResponse) GetFleet() *FleetInfo {
	if m != nil {
		return m.Fleet
	}
	return nil
}

type UpdateStatusRequest struct {
	DeviceID *typespb.UUID `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (m *UpdateStatusRequest) Reset()      { *m = UpdateStatusRequest{} }
func (*UpdateStatusRequest) ProtoMessage() {}
func (*UpdateStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{8}
}
func (m *UpdateStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStatusRequest.Merge(m, src)
}
func (m *UpdateStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStatusRequest proto.InternalMessageInfo

func (m *UpdateStatusRequest) GetDeviceID() *typespb.UUID {
	if m != nil {
		return m.DeviceID
	}
	return nil
}

type UpdateStatusResponse struct {
}

func (m *UpdateStatusResponse) Reset()      { *m = UpdateStatusResponse{} }
func (*UpdateStatusResponse) ProtoMessage() {}
func (*UpdateStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{9}
}
func (m *UpdateStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStatusResponse.Merge(m, src)
}
func (m *UpdateStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStatusResponse proto.InternalMessageInfo

type ListFleetsRequest struct {
	OrgID *typespb.UUID `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *ListFleetsRequest) Reset()      { *m = ListFleetsRequest{} }
func (*ListFleetsRequest) ProtoMessage() {}
func (*ListFleetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{10}
}
func (m *ListFleetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFleetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFleetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFleetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFleetsRequest.Merge(m, src)
}
func (m *ListFleetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListFleetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFleetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListFleetsRequest proto.InternalMessageInfo

func (m *ListFleetsRequest) GetOrgID() *typespb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type ListFleetsResponse struct {
	Fleets []*FleetInfo `protobuf:"bytes,1,rep,name=fleets,proto3" json:"fleets,omitempty"`
}

func (m *ListFleetsResponse) Reset()      { *m = ListFleetsResponse{} }
func (*ListFleetsResponse) ProtoMessage() {}
func (*ListFleetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{11}
}
func (m *ListFleetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFleetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFleetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFleetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFleetsResponse.Merge(m, src)
}
func (m *ListFleetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListFleetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFleetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListFleetsResponse proto.InternalMessageInfo

func (m *ListFleetsResponse) GetFleets() []*FleetInfo {
	if m != nil {
		return m.Fleets
	}
	return nil
}

type ListDevicesRequest struct {
	FleetID *typespb.UUID `protobuf:"bytes,1,opt,name=fleet_id,json=fleetId,proto3" json:"fleet_id,omitempty"`
}

func (m *ListDevicesRequest) Reset()      { *m = ListDevicesRequest{} }
func (*ListDevicesRequest) ProtoMessage() {}
func (*ListDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{12}
}
func (m *ListDevicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDevicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDevicesRequest.Merge(m, src)
}
func (m *ListDevicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDevicesRequest proto.InternalMessageInfo

func (m *ListDevicesRequest) GetFleetID() *typespb.UUID {
	if m != nil {
		return m.FleetID
	}
	return nil
}

type ListDevicesResponse struct {
	Devices []*DeviceInfo `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (m *ListDevicesResponse) Reset()      { *m = ListDevicesResponse{} }
func (*ListDevicesResponse) ProtoMessage() {}
func (*ListDevicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8daa588779d869f, []int{13}
}
func (m *ListDevicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDevicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDevicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDevicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDevicesResponse.Merge(m, src)
}
func (m *ListDevicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListDevicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDevicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDevicesResponse proto.InternalMessageInfo

func (m *ListDevicesResponse) GetDevices() []*DeviceInfo {
	if m != nil {
		return m.Devices
	}
	return nil
}

func init() {
	proto.RegisterEnum("gml.internal.controlplane.fleetmgr.v1.DeviceStatus", DeviceStatus_name, DeviceStatus_value)
	proto.RegisterType((*FleetInfo)(nil), "gml.internal.controlplane.fleetmgr.v1.FleetInfo")
	proto.RegisterType((*DeviceInfo)(nil), "gml.internal.controlplane.fleetmgr.v1.DeviceInfo")
	proto.RegisterType((*CreateFleetRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.CreateFleetRequest")
	proto.RegisterType((*CreateFleetResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.CreateFleetResponse")
	proto.RegisterType((*RegisterRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.RegisterResponse")
	proto.RegisterType((*GetFleetRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.GetFleetRequest")
	proto.RegisterType((*GetFleetResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.GetFleetResponse")
	proto.RegisterType((*UpdateStatusRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.UpdateStatusRequest")
	proto.RegisterType((*UpdateStatusResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.UpdateStatusResponse")
	proto.RegisterType((*ListFleetsRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.ListFleetsRequest")
	proto.RegisterType((*ListFleetsResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.ListFleetsResponse")
	proto.RegisterType((*ListDevicesRequest)(nil), "gml.internal.controlplane.fleetmgr.v1.ListDevicesRequest")
	proto.RegisterType((*ListDevicesResponse)(nil), "gml.internal.controlplane.fleetmgr.v1.ListDevicesResponse")
}

func init() {
	proto.RegisterFile("src/controlplane/fleetmgr/fmpb/v1/fmpb.proto", fileDescriptor_e8daa588779d869f)
}

var fileDescriptor_e8daa588779d869f = []byte{
	// 980 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xce, 0x24, 0x6d, 0x9a, 0xbc, 0xb6, 0xa4, 0x9d, 0x42, 0x09, 0x01, 0x9c, 0x30, 0x08, 0x51,
	0x21, 0xb0, 0x69, 0x56, 0x62, 0x69, 0x7b, 0x61, 0xdb, 0xa4, 0x24, 0x6a, 0x37, 0x15, 0x4e, 0x03,
	0xda, 0x15, 0x10, 0x39, 0xf5, 0xd4, 0xb5, 0xe4, 0xc4, 0x59, 0xcf, 0xa4, 0xd2, 0x6a, 0x2f, 0xac,
	0x84, 0xc4, 0x95, 0x2b, 0x67, 0x2e, 0xfc, 0x13, 0x38, 0xf6, 0xb8, 0xa7, 0x88, 0xba, 0x12, 0xe2,
	0xb8, 0xea, 0x2f, 0x40, 0x9e, 0xb1, 0xd3, 0xa4, 0x69, 0x21, 0x0d, 0x7b, 0xb2, 0xc7, 0x33, 0xdf,
	0xf7, 0xbe, 0xf7, 0xe6, 0xbd, 0x4f, 0x86, 0x8f, 0x99, 0x77, 0xa4, 0x1d, 0xb9, 0x1d, 0xee, 0xb9,
	0x4e, 0xd7, 0x31, 0x3a, 0x54, 0x3b, 0x76, 0x28, 0xe5, 0x6d, 0xcb, 0xd3, 0x8e, 0xdb, 0xdd, 0x96,
	0x76, 0xba, 0x2e, 0x9e, 0x6a, 0xd7, 0x73, 0xb9, 0x8b, 0x3f, 0xb0, 0xda, 0x8e, 0x6a, 0x77, 0x38,
	0xf5, 0x3a, 0x86, 0xa3, 0x0e, 0xc3, 0xd4, 0x08, 0xa6, 0x9e, 0xae, 0xe7, 0x36, 0xf8, 0x89, 0xed,
	0x99, 0xcd, 0xae, 0xe1, 0xf1, 0xa7, 0x9a, 0x65, 0xf3, 0x93, 0x5e, 0x4b, 0x3d, 0x72, 0xdb, 0x9a,
	0xe5, 0x5a, 0xae, 0x26, 0x98, 0x5a, 0xbd, 0x63, 0xb1, 0x12, 0x0b, 0xf1, 0x26, 0x23, 0xe4, 0xde,
	0x95, 0x7a, 0xda, 0x6d, 0xb7, 0xa3, 0xf1, 0xa7, 0x5d, 0xca, 0xba, 0x2d, 0xad, 0xd7, 0xb3, 0x4d,
	0xb9, 0x4d, 0x7e, 0x47, 0x90, 0xde, 0x0d, 0x22, 0x55, 0x3b, 0xc7, 0x2e, 0x2e, 0x42, 0xdc, 0x36,
	0xb3, 0xa8, 0x80, 0xd6, 0xe6, 0x8b, 0x19, 0x35, 0xd0, 0x26, 0x20, 0x6a, 0xa3, 0x51, 0x2d, 0x6d,
	0x2f, 0xfb, 0xfd, 0x7c, 0xbc, 0x5a, 0xba, 0xec, 0xe7, 0xe7, 0xcc, 0xd6, 0x26, 0xb1, 0x4d, 0xa2,
	0xc7, 0x6d, 0x13, 0x7f, 0x01, 0x49, 0xd7, 0xb3, 0x9a, 0xb6, 0x99, 0x8d, 0xdf, 0x8c, 0xcb, 0xfa,
	0xfd, 0xfc, 0xec, 0x81, 0x67, 0x09, 0xe8, 0x7c, 0x00, 0x95, 0xe7, 0x89, 0x3e, 0xeb, 0x7a, 0x56,
	0xd5, 0xc4, 0xef, 0xc1, 0x4c, 0xc7, 0x68, 0xd3, 0x6c, 0xa2, 0x80, 0xd6, 0xd2, 0xdb, 0x8b, 0x97,
	0xfd, 0x7c, 0x3a, 0x38, 0x15, 0x7c, 0x23, 0xba, 0xd8, 0x0a, 0x8e, 0x70, 0xc3, 0x62, 0xd9, 0x99,
	0x42, 0x62, 0xf8, 0x48, 0xf0, 0x8d, 0xe8, 0x62, 0x8b, 0xfc, 0x15, 0x07, 0x28, 0xd1, 0x53, 0xfb,
	0x88, 0x4e, 0x9d, 0xca, 0x2a, 0x24, 0x19, 0xf5, 0x6c, 0xc3, 0x11, 0xa9, 0xa4, 0xf5, 0x70, 0x85,
	0x73, 0x90, 0x3a, 0x71, 0x19, 0xbf, 0x12, 0xa9, 0x0f, 0xd6, 0xb8, 0x02, 0x29, 0x71, 0x53, 0x41,
	0x01, 0x66, 0x6e, 0x8e, 0xf6, 0x8e, 0xdf, 0xcf, 0xcf, 0xc9, 0x22, 0x07, 0x21, 0x17, 0x83, 0x90,
	0x11, 0x86, 0xe8, 0x73, 0xe2, 0xb5, 0x6a, 0xe2, 0x47, 0xb0, 0xec, 0x18, 0x8c, 0x37, 0x4f, 0xa8,
	0xe1, 0xf1, 0x16, 0x35, 0x78, 0xb3, 0xc3, 0xb2, 0xb3, 0x05, 0xb4, 0x96, 0xd8, 0xfe, 0xc4, 0xef,
	0xe7, 0x33, 0xfb, 0x06, 0xe3, 0x95, 0x68, 0xaf, 0x56, 0xbf, 0xec, 0xe7, 0x57, 0x03, 0xa6, 0x31,
	0x0c, 0xd1, 0x33, 0xce, 0xc8, 0x51, 0x86, 0xf7, 0x20, 0xc9, 0xb8, 0xc1, 0x7b, 0x2c, 0x9b, 0x2c,
	0xa0, 0xb5, 0xd7, 0x8a, 0xf7, 0xd4, 0x89, 0xfa, 0x4e, 0x95, 0xf5, 0xac, 0x0b, 0xa8, 0x1e, 0x52,
	0x90, 0x6f, 0x01, 0xef, 0x78, 0xd4, 0xe0, 0x54, 0xa4, 0xa4, 0xd3, 0x27, 0x3d, 0xca, 0x38, 0xde,
	0x85, 0x59, 0x81, 0x0c, 0x4b, 0xfe, 0xe9, 0x84, 0x11, 0x06, 0xbd, 0xa7, 0x4b, 0x38, 0xf9, 0x0e,
	0x56, 0x46, 0xd8, 0x59, 0xd7, 0xed, 0x30, 0xfa, 0xca, 0xe8, 0x75, 0xc8, 0xe8, 0xd4, 0xb2, 0x19,
	0xa7, 0x5e, 0xa4, 0xfc, 0x7d, 0x58, 0x34, 0x45, 0x9e, 0xcd, 0xf0, 0xf2, 0x91, 0xb8, 0xe2, 0x05,
	0xf9, 0xb1, 0x3e, 0xde, 0x02, 0xf1, 0xd1, 0x16, 0x20, 0x35, 0x58, 0xba, 0xe2, 0x0c, 0xf5, 0x6e,
	0x42, 0x3a, 0x24, 0xbd, 0xbd, 0x0b, 0x17, 0xfc, 0x7e, 0x3e, 0x15, 0xb6, 0x6c, 0x49, 0x4f, 0xc9,
	0xf3, 0x55, 0x93, 0xd4, 0x20, 0xf3, 0x25, 0xe5, 0x23, 0xd5, 0xfd, 0xf0, 0xdf, 0xba, 0x39, 0x29,
	0xbb, 0x59, 0xb4, 0x30, 0x0e, 0x67, 0x49, 0x6a, 0x14, 0xef, 0xe4, 0x31, 0x2c, 0x5d, 0xf1, 0xbd,
	0xe2, 0x7a, 0x7e, 0x05, 0x2b, 0x8d, 0xae, 0x69, 0xf0, 0xa8, 0x49, 0x42, 0xbd, 0xff, 0x27, 0xfd,
	0x55, 0x78, 0x7d, 0x94, 0x52, 0x4a, 0x26, 0xbb, 0xb0, 0xbc, 0x6f, 0x33, 0x99, 0xc7, 0x20, 0xd0,
	0xfa, 0xc0, 0x7d, 0x6e, 0x89, 0x92, 0x1e, 0xb8, 0x4f, 0x68, 0x37, 0xe4, 0x7b, 0xc0, 0xc3, 0x3c,
	0x61, 0x41, 0x2a, 0x90, 0x14, 0x19, 0xb1, 0x2c, 0x2a, 0x24, 0xa6, 0xaa, 0x48, 0x88, 0x27, 0x0f,
	0x25, 0xbf, 0xcc, 0x6c, 0x20, 0xf4, 0xfe, 0x90, 0x4f, 0xdc, 0x22, 0x75, 0x7e, 0xc8, 0x27, 0x06,
	0xb6, 0x40, 0x5a, 0xb0, 0x32, 0x42, 0x17, 0xea, 0xdd, 0x83, 0x39, 0x59, 0xb1, 0x48, 0xf0, 0xfa,
	0x9d, 0x66, 0x5a, 0x28, 0x8e, 0x18, 0x3e, 0x7a, 0x8e, 0x60, 0x61, 0x78, 0xd6, 0xf1, 0x5b, 0xf0,
	0x46, 0xa9, 0xfc, 0x75, 0x75, 0xa7, 0xdc, 0xac, 0x1f, 0x3e, 0x38, 0x6c, 0xd4, 0x9b, 0x8d, 0xda,
	0x5e, 0xed, 0xe0, 0x9b, 0xda, 0x52, 0x6c, 0x7c, 0xab, 0x52, 0x7e, 0xb0, 0x7f, 0x58, 0x79, 0xb4,
	0x84, 0xf0, 0xdb, 0xf0, 0xe6, 0x75, 0x54, 0xb4, 0x19, 0xc7, 0x0a, 0xe4, 0x46, 0x37, 0x4b, 0xd5,
	0xfa, 0xce, 0x41, 0xad, 0x56, 0xde, 0x39, 0x2c, 0x97, 0x96, 0x12, 0xc5, 0x5f, 0x12, 0x90, 0x11,
	0xc9, 0x3f, 0xb4, 0xbc, 0x3a, 0xf5, 0x02, 0x31, 0xf8, 0x47, 0x04, 0xf3, 0x43, 0x6e, 0x80, 0x37,
	0x26, 0xcc, 0x71, 0xdc, 0x9f, 0x72, 0x9b, 0xd3, 0x40, 0xc3, 0x5a, 0x3f, 0x83, 0x54, 0x34, 0x40,
	0xf8, 0xb3, 0x09, 0x79, 0xae, 0x4d, 0x70, 0xee, 0xfe, 0x9d, 0x71, 0x61, 0xf0, 0xe7, 0x08, 0xe0,
	0xaa, 0x5f, 0xf1, 0xe7, 0x13, 0xf2, 0x8c, 0x8d, 0x4a, 0x6e, 0x63, 0x0a, 0xa4, 0xd4, 0x50, 0xfc,
	0x35, 0x01, 0x2b, 0xd1, 0xdd, 0x94, 0x4d, 0x8b, 0x46, 0xf7, 0xf3, 0x0c, 0x52, 0x91, 0xf3, 0x4d,
	0x5c, 0x98, 0x6b, 0xf6, 0x3b, 0x71, 0x61, 0xc6, 0x2c, 0xf6, 0x27, 0x04, 0x0b, 0xc3, 0x46, 0x81,
	0x27, 0xbd, 0xe2, 0x1b, 0x0c, 0x2b, 0xb7, 0x35, 0x15, 0x36, 0x54, 0x12, 0xb4, 0xe9, 0xd0, 0x8c,
	0xe2, 0xbb, 0x54, 0x7a, 0xd4, 0x26, 0x26, 0x6e, 0xd3, 0x1b, 0x2c, 0x61, 0xfb, 0xc9, 0xd9, 0xb9,
	0x12, 0x7b, 0x71, 0xae, 0xc4, 0x5e, 0x9e, 0x2b, 0xe8, 0x07, 0x5f, 0x41, 0xbf, 0xf9, 0x0a, 0xfa,
	0xc3, 0x57, 0xd0, 0x99, 0xaf, 0xa0, 0x3f, 0x7d, 0x05, 0xfd, 0xed, 0x2b, 0xb1, 0x97, 0xbe, 0x82,
	0x7e, 0xbe, 0x50, 0x62, 0x67, 0x17, 0x4a, 0xec, 0xc5, 0x85, 0x12, 0x7b, 0xbc, 0x65, 0xd9, 0x6d,
	0x87, 0x72, 0xc7, 0x68, 0x31, 0xd5, 0xb0, 0x35, 0xb9, 0xd2, 0xfe, 0xf3, 0x2f, 0x76, 0x2b, 0x78,
	0xb6, 0x92, 0xe2, 0x2f, 0xf2, 0xde, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x88, 0x8c, 0xa6, 0xf7,
	0xf6, 0x0a, 0x00, 0x00,
}

func (x DeviceStatus) String() string {
	s, ok := DeviceStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *FleetInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FleetInfo)
	if !ok {
		that2, ok := that.(FleetInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	return true
}
func (this *DeviceInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceInfo)
	if !ok {
		that2, ok := that.(DeviceInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Serial != that1.Serial {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	if !this.FleetID.Equal(that1.FleetID) {
		return false
	}
	if this.LastHeartbeatNS != that1.LastHeartbeatNS {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *CreateFleetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateFleetRequest)
	if !ok {
		that2, ok := that.(CreateFleetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fleet.Equal(that1.Fleet) {
		return false
	}
	return true
}
func (this *CreateFleetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateFleetResponse)
	if !ok {
		that2, ok := that.(CreateFleetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fleet.Equal(that1.Fleet) {
		return false
	}
	return true
}
func (this *RegisterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterRequest)
	if !ok {
		that2, ok := that.(RegisterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DeviceSerial != that1.DeviceSerial {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	return true
}
func (this *RegisterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterResponse)
	if !ok {
		that2, ok := that.(RegisterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeviceID.Equal(that1.DeviceID) {
		return false
	}
	return true
}
func (this *GetFleetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFleetRequest)
	if !ok {
		that2, ok := that.(GetFleetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetFleetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFleetResponse)
	if !ok {
		that2, ok := that.(GetFleetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fleet.Equal(that1.Fleet) {
		return false
	}
	return true
}
func (this *UpdateStatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateStatusRequest)
	if !ok {
		that2, ok := that.(UpdateStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeviceID.Equal(that1.DeviceID) {
		return false
	}
	return true
}
func (this *UpdateStatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateStatusResponse)
	if !ok {
		that2, ok := that.(UpdateStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListFleetsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListFleetsRequest)
	if !ok {
		that2, ok := that.(ListFleetsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *ListFleetsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListFleetsResponse)
	if !ok {
		that2, ok := that.(ListFleetsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Fleets) != len(that1.Fleets) {
		return false
	}
	for i := range this.Fleets {
		if !this.Fleets[i].Equal(that1.Fleets[i]) {
			return false
		}
	}
	return true
}
func (this *ListDevicesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDevicesRequest)
	if !ok {
		that2, ok := that.(ListDevicesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FleetID.Equal(that1.FleetID) {
		return false
	}
	return true
}
func (this *ListDevicesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDevicesResponse)
	if !ok {
		that2, ok := that.(ListDevicesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Devices) != len(that1.Devices) {
		return false
	}
	for i := range this.Devices {
		if !this.Devices[i].Equal(that1.Devices[i]) {
			return false
		}
	}
	return true
}
func (this *FleetInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&fmpb.FleetInfo{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&fmpb.DeviceInfo{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "Serial: "+fmt.Sprintf("%#v", this.Serial)+",\n")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	if this.FleetID != nil {
		s = append(s, "FleetID: "+fmt.Sprintf("%#v", this.FleetID)+",\n")
	}
	s = append(s, "LastHeartbeatNS: "+fmt.Sprintf("%#v", this.LastHeartbeatNS)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateFleetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.CreateFleetRequest{")
	if this.Fleet != nil {
		s = append(s, "Fleet: "+fmt.Sprintf("%#v", this.Fleet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateFleetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.CreateFleetResponse{")
	if this.Fleet != nil {
		s = append(s, "Fleet: "+fmt.Sprintf("%#v", this.Fleet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&fmpb.RegisterRequest{")
	s = append(s, "DeviceSerial: "+fmt.Sprintf("%#v", this.DeviceSerial)+",\n")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.RegisterResponse{")
	if this.DeviceID != nil {
		s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFleetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&fmpb.GetFleetRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFleetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.GetFleetResponse{")
	if this.Fleet != nil {
		s = append(s, "Fleet: "+fmt.Sprintf("%#v", this.Fleet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateStatusRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.UpdateStatusRequest{")
	if this.DeviceID != nil {
		s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateStatusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&fmpb.UpdateStatusResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListFleetsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.ListFleetsRequest{")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListFleetsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.ListFleetsResponse{")
	if this.Fleets != nil {
		s = append(s, "Fleets: "+fmt.Sprintf("%#v", this.Fleets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListDevicesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.ListDevicesRequest{")
	if this.FleetID != nil {
		s = append(s, "FleetID: "+fmt.Sprintf("%#v", this.FleetID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListDevicesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fmpb.ListDevicesResponse{")
	if this.Devices != nil {
		s = append(s, "Devices: "+fmt.Sprintf("%#v", this.Devices)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFmpb(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FleetMgrServiceClient is the client API for FleetMgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FleetMgrServiceClient interface {
	CreateFleet(ctx context.Context, in *CreateFleetRequest, opts ...grpc.CallOption) (*CreateFleetResponse, error)
	GetFleet(ctx context.Context, in *GetFleetRequest, opts ...grpc.CallOption) (*GetFleetResponse, error)
	ListFleets(ctx context.Context, in *ListFleetsRequest, opts ...grpc.CallOption) (*ListFleetsResponse, error)
}

type fleetMgrServiceClient struct {
	cc *grpc.ClientConn
}

func NewFleetMgrServiceClient(cc *grpc.ClientConn) FleetMgrServiceClient {
	return &fleetMgrServiceClient{cc}
}

func (c *fleetMgrServiceClient) CreateFleet(ctx context.Context, in *CreateFleetRequest, opts ...grpc.CallOption) (*CreateFleetResponse, error) {
	out := new(CreateFleetResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/CreateFleet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrServiceClient) GetFleet(ctx context.Context, in *GetFleetRequest, opts ...grpc.CallOption) (*GetFleetResponse, error) {
	out := new(GetFleetResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/GetFleet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrServiceClient) ListFleets(ctx context.Context, in *ListFleetsRequest, opts ...grpc.CallOption) (*ListFleetsResponse, error) {
	out := new(ListFleetsResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/ListFleets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetMgrServiceServer is the server API for FleetMgrService service.
type FleetMgrServiceServer interface {
	CreateFleet(context.Context, *CreateFleetRequest) (*CreateFleetResponse, error)
	GetFleet(context.Context, *GetFleetRequest) (*GetFleetResponse, error)
	ListFleets(context.Context, *ListFleetsRequest) (*ListFleetsResponse, error)
}

// UnimplementedFleetMgrServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFleetMgrServiceServer struct {
}

func (*UnimplementedFleetMgrServiceServer) CreateFleet(ctx context.Context, req *CreateFleetRequest) (*CreateFleetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFleet not implemented")
}
func (*UnimplementedFleetMgrServiceServer) GetFleet(ctx context.Context, req *GetFleetRequest) (*GetFleetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFleet not implemented")
}
func (*UnimplementedFleetMgrServiceServer) ListFleets(ctx context.Context, req *ListFleetsRequest) (*ListFleetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFleets not implemented")
}

func RegisterFleetMgrServiceServer(s *grpc.Server, srv FleetMgrServiceServer) {
	s.RegisterService(&_FleetMgrService_serviceDesc, srv)
}

func _FleetMgrService_CreateFleet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFleetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrServiceServer).CreateFleet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/CreateFleet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrServiceServer).CreateFleet(ctx, req.(*CreateFleetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrService_GetFleet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFleetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrServiceServer).GetFleet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/GetFleet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrServiceServer).GetFleet(ctx, req.(*GetFleetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrService_ListFleets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFleetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrServiceServer).ListFleets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrService/ListFleets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrServiceServer).ListFleets(ctx, req.(*ListFleetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FleetMgrService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gml.internal.controlplane.fleetmgr.v1.FleetMgrService",
	HandlerType: (*FleetMgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFleet",
			Handler:    _FleetMgrService_CreateFleet_Handler,
		},
		{
			MethodName: "GetFleet",
			Handler:    _FleetMgrService_GetFleet_Handler,
		},
		{
			MethodName: "ListFleets",
			Handler:    _FleetMgrService_ListFleets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/controlplane/fleetmgr/fmpb/v1/fmpb.proto",
}

// FleetMgrEdgeServiceClient is the client API for FleetMgrEdgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FleetMgrEdgeServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error)
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
}

type fleetMgrEdgeServiceClient struct {
	cc *grpc.ClientConn
}

func NewFleetMgrEdgeServiceClient(cc *grpc.ClientConn) FleetMgrEdgeServiceClient {
	return &fleetMgrEdgeServiceClient{cc}
}

func (c *fleetMgrEdgeServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrEdgeServiceClient) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error) {
	out := new(UpdateStatusResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetMgrEdgeServiceClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetMgrEdgeServiceServer is the server API for FleetMgrEdgeService service.
type FleetMgrEdgeServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error)
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
}

// UnimplementedFleetMgrEdgeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFleetMgrEdgeServiceServer struct {
}

func (*UnimplementedFleetMgrEdgeServiceServer) Register(ctx context.Context, req *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedFleetMgrEdgeServiceServer) UpdateStatus(ctx context.Context, req *UpdateStatusRequest) (*UpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (*UnimplementedFleetMgrEdgeServiceServer) ListDevices(ctx context.Context, req *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}

func RegisterFleetMgrEdgeServiceServer(s *grpc.Server, srv FleetMgrEdgeServiceServer) {
	s.RegisterService(&_FleetMgrEdgeService_serviceDesc, srv)
}

func _FleetMgrEdgeService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrEdgeServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrEdgeServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrEdgeService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrEdgeServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrEdgeServiceServer).UpdateStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetMgrEdgeService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetMgrEdgeServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetMgrEdgeServiceServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FleetMgrEdgeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gml.internal.controlplane.fleetmgr.v1.FleetMgrEdgeService",
	HandlerType: (*FleetMgrEdgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _FleetMgrEdgeService_Register_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _FleetMgrEdgeService_UpdateStatus_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _FleetMgrEdgeService_ListDevices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/controlplane/fleetmgr/fmpb/v1/fmpb.proto",
}

func (m *FleetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FleetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FleetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintFmpb(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFmpb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintFmpb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.LastHeartbeatNS != 0 {
		i = encodeVarintFmpb(dAtA, i, uint64(m.LastHeartbeatNS))
		i--
		dAtA[i] = 0x28
	}
	if m.FleetID != nil {
		{
			size, err := m.FleetID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintFmpb(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Serial) > 0 {
		i -= len(m.Serial)
		copy(dAtA[i:], m.Serial)
		i = encodeVarintFmpb(dAtA, i, uint64(len(m.Serial)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateFleetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateFleetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateFleetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fleet != nil {
		{
			size, err := m.Fleet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateFleetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateFleetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateFleetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fleet != nil {
		{
			size, err := m.Fleet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintFmpb(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceSerial) > 0 {
		i -= len(m.DeviceSerial)
		copy(dAtA[i:], m.DeviceSerial)
		i = encodeVarintFmpb(dAtA, i, uint64(len(m.DeviceSerial)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviceID != nil {
		{
			size, err := m.DeviceID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFleetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFleetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFleetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFmpb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFleetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFleetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFleetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fleet != nil {
		{
			size, err := m.Fleet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviceID != nil {
		{
			size, err := m.DeviceID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListFleetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFleetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFleetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListFleetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFleetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFleetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fleets) > 0 {
		for iNdEx := len(m.Fleets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fleets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFmpb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListDevicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDevicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDevicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FleetID != nil {
		{
			size, err := m.FleetID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFmpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListDevicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDevicesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDevicesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Devices) > 0 {
		for iNdEx := len(m.Devices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Devices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFmpb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintFmpb(dAtA []byte, offset int, v uint64) int {
	offset -= sovFmpb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FleetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFmpb(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovFmpb(uint64(l))
		}
	}
	return n
}

func (m *DeviceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	l = len(m.Serial)
	if l > 0 {
		n += 1 + l + sovFmpb(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovFmpb(uint64(l))
	}
	if m.FleetID != nil {
		l = m.FleetID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	if m.LastHeartbeatNS != 0 {
		n += 1 + sovFmpb(uint64(m.LastHeartbeatNS))
	}
	if m.Status != 0 {
		n += 1 + sovFmpb(uint64(m.Status))
	}
	return n
}

func (m *CreateFleetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fleet != nil {
		l = m.Fleet.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *CreateFleetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fleet != nil {
		l = m.Fleet.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *RegisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceSerial)
	if l > 0 {
		n += 1 + l + sovFmpb(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *RegisterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceID != nil {
		l = m.DeviceID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *GetFleetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *GetFleetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fleet != nil {
		l = m.Fleet.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *UpdateStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceID != nil {
		l = m.DeviceID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *UpdateStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListFleetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *ListFleetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fleets) > 0 {
		for _, e := range m.Fleets {
			l = e.Size()
			n += 1 + l + sovFmpb(uint64(l))
		}
	}
	return n
}

func (m *ListDevicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FleetID != nil {
		l = m.FleetID.Size()
		n += 1 + l + sovFmpb(uint64(l))
	}
	return n
}

func (m *ListDevicesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Devices) > 0 {
		for _, e := range m.Devices {
			l = e.Size()
			n += 1 + l + sovFmpb(uint64(l))
		}
	}
	return n
}

func sovFmpb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFmpb(x uint64) (n int) {
	return sovFmpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FleetInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FleetInfo{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "typespb.UUID", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Tags:` + fmt.Sprintf("%v", this.Tags) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceInfo{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`Serial:` + fmt.Sprintf("%v", this.Serial) + `,`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`FleetID:` + strings.Replace(fmt.Sprintf("%v", this.FleetID), "UUID", "typespb.UUID", 1) + `,`,
		`LastHeartbeatNS:` + fmt.Sprintf("%v", this.LastHeartbeatNS) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateFleetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateFleetRequest{`,
		`Fleet:` + strings.Replace(this.Fleet.String(), "FleetInfo", "FleetInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateFleetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateFleetResponse{`,
		`Fleet:` + strings.Replace(this.Fleet.String(), "FleetInfo", "FleetInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterRequest{`,
		`DeviceSerial:` + fmt.Sprintf("%v", this.DeviceSerial) + `,`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterResponse{`,
		`DeviceID:` + strings.Replace(fmt.Sprintf("%v", this.DeviceID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFleetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFleetRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFleetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFleetResponse{`,
		`Fleet:` + strings.Replace(this.Fleet.String(), "FleetInfo", "FleetInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateStatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateStatusRequest{`,
		`DeviceID:` + strings.Replace(fmt.Sprintf("%v", this.DeviceID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateStatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateStatusResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ListFleetsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListFleetsRequest{`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListFleetsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFleets := "[]*FleetInfo{"
	for _, f := range this.Fleets {
		repeatedStringForFleets += strings.Replace(f.String(), "FleetInfo", "FleetInfo", 1) + ","
	}
	repeatedStringForFleets += "}"
	s := strings.Join([]string{`&ListFleetsResponse{`,
		`Fleets:` + repeatedStringForFleets + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListDevicesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListDevicesRequest{`,
		`FleetID:` + strings.Replace(fmt.Sprintf("%v", this.FleetID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListDevicesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDevices := "[]*DeviceInfo{"
	for _, f := range this.Devices {
		repeatedStringForDevices += strings.Replace(f.String(), "DeviceInfo", "DeviceInfo", 1) + ","
	}
	repeatedStringForDevices += "}"
	s := strings.Join([]string{`&ListDevicesResponse{`,
		`Devices:` + repeatedStringForDevices + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFmpb(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FleetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FleetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FleetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &typespb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serial", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Serial = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FleetID == nil {
				m.FleetID = &typespb.UUID{}
			}
			if err := m.FleetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatNS", wireType)
			}
			m.LastHeartbeatNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeartbeatNS |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DeviceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateFleetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateFleetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateFleetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fleet == nil {
				m.Fleet = &FleetInfo{}
			}
			if err := m.Fleet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateFleetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateFleetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateFleetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fleet == nil {
				m.Fleet = &FleetInfo{}
			}
			if err := m.Fleet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceSerial", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceSerial = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceID == nil {
				m.DeviceID = &typespb.UUID{}
			}
			if err := m.DeviceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFleetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFleetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFleetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFleetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFleetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFleetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fleet == nil {
				m.Fleet = &FleetInfo{}
			}
			if err := m.Fleet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceID == nil {
				m.DeviceID = &typespb.UUID{}
			}
			if err := m.DeviceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFleetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFleetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFleetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &typespb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFleetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFleetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFleetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fleets = append(m.Fleets, &FleetInfo{})
			if err := m.Fleets[len(m.Fleets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDevicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDevicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDevicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FleetID == nil {
				m.FleetID = &typespb.UUID{}
			}
			if err := m.FleetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDevicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDevicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDevicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFmpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFmpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devices = append(m.Devices, &DeviceInfo{})
			if err := m.Devices[len(m.Devices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFmpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFmpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFmpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFmpb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFmpb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFmpb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFmpb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFmpb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFmpb = fmt.Errorf("proto: unexpected end of group")
)
