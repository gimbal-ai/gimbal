/*
 * Copyright Â© 2023- Gimlet Labs, Inc.
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Gimlet Labs, Inc. and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Gimlet Labs, Inc. and its suppliers and
 * may be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law. Dissemination
 * of this information or reproduction of this material is strictly
 * forbidden unless prior written permission is obtained from
 * Gimlet Labs, Inc.
 *
 * SPDX-License-Identifier: Proprietary
 */

syntax = "proto3";

package gml.internal.controlplane.fleetmgr.v1;

option go_package = "gimletlabs.ai/gimlet/src/controlplane/fleetmgr/fmpb/v1;fmpb";

import "third_party/github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/common/typespb/uuid.proto";

message FleetInfo {
  // The ID of the fleet. Not filled in for create requests.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
  // The Org owning the fleet.
  gml.types.UUID org_id = 2 [ (gogoproto.customname) = "OrgID" ];
  // The name of the fleet.
  string name = 3;
  // Tags associated with the fleet.
  repeated string tags = 4;
}

message DeployKey {
  // The ID of the deploy key. Not filled in for create requests.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
  // The fleet for this particular deploy key.
  gml.types.UUID fleet_id = 2 [ (gogoproto.customname) = "FleetID" ];
  // The description of this deploy key.
  string description = 3;
}

message CreateFleetRequest {
  FleetInfo fleet = 1;
}

message CreateFleetResponse {
  FleetInfo fleet = 1;
}

message CreateDeployKeyRequest {
  DeployKey key = 1;
}

message CreateDeployKeyResponse {
  DeployKey key = 1;
}

message RegisterRequest {
  // This is an opaque device serial for the device. It's nominally the MAC-address, GUID, or some
  // other serial number that is deemed to be globally unique. It must be at-least 32 characters. On
  // collision the request to register device will be rejected.
  string device_serial = 1;
  // The hostname of the device.
  string hostname = 2;
  // TODO(zasgar): Pass the device's public key here so that we can encrypt the request.
}

message RegisterResponse {
  // This is the Gimlet assigned device ID for this device.
  gml.types.UUID device_id = 1 [ (gogoproto.customname) = "DeviceID" ];
  // TODO(zasgar): Pass encryption information here.
}

service FleetMgrService {
  // Creates a new fleet for the org.
  rpc CreateFleet(CreateFleetRequest) returns (CreateFleetResponse);
}

service FleetMgrDeployKeyService {
  // Creates a deploy key that can be used to deploy new devices as part of the fleet.
  rpc CreateDeployKey(CreateDeployKeyRequest) returns (CreateDeployKeyResponse);
}

service FleetMgrEdgeService {
  // Register adds a device as part of the fleet. If the device has already been registered it
  // simply returns with the existing config.
  rpc Register(RegisterRequest) returns (RegisterResponse);
}
