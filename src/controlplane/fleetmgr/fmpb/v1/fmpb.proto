/*
 * Copyright Â© 2023- Gimlet Labs, Inc.
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Gimlet Labs, Inc. and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Gimlet Labs, Inc. and its suppliers and
 * may be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law. Dissemination
 * of this information or reproduction of this material is strictly
 * forbidden unless prior written permission is obtained from
 * Gimlet Labs, Inc.
 *
 * SPDX-License-Identifier: Proprietary
 */

syntax = "proto3";

package gml.internal.controlplane.fleetmgr.v1;

option go_package = "gimletlabs.ai/gimlet/src/controlplane/fleetmgr/fmpb/v1;fmpb";

import "third_party/github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/common/typespb/uuid.proto";

message FleetInfo {
  // The ID of the fleet. Not filled in for create requests.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID", (gogoproto.moretags) = 'db:"id"' ];
  // The Org owning the fleet.
  gml.types.UUID org_id = 2
      [ (gogoproto.customname) = "OrgID", (gogoproto.moretags) = 'db:"org_id"' ];
  // The name of the fleet.
  string name = 3 [ (gogoproto.moretags) = 'db:"name"' ];
  // Tags associated with the fleet.
  repeated string tags = 4 [ (gogoproto.moretags) = 'db:"tags"' ];
}

message DeviceInfo {
  // The ID of the device. Not filled in for create requests.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID", (gogoproto.moretags) = 'db:"id"' ];
  // The serial for the device.
  string serial = 2;
  // The hostname of the device.
  string hostname = 3;
  // The fleet that the device is in.
  gml.types.UUID fleet_id = 4
      [ (gogoproto.customname) = "FleetID", (gogoproto.moretags) = 'db:"fleet_id"' ];
  // The last time the controlplane has heard from the device.
  int64 last_heartbeat_ns = 5 [
    (gogoproto.customname) = "LastHeartbeatNS",
    (gogoproto.moretags) = 'db:"last_heartbeat_ns"'
  ];
}

message CreateFleetRequest {
  FleetInfo fleet = 1;
}

message CreateFleetResponse {
  FleetInfo fleet = 1;
}

message RegisterRequest {
  // This is an opaque device serial for the device. It's nominally the MAC-address, GUID, or some
  // other serial number that is deemed to be globally unique. It must be at-least 32 characters. On
  // collision the request to register device will be rejected.
  string device_serial = 1;
  // The hostname of the device.
  string hostname = 2;
  // TODO(zasgar): Pass the device's public key here so that we can encrypt the request.
}

message RegisterResponse {
  // This is the Gimlet assigned device ID for this device.
  gml.types.UUID device_id = 1 [ (gogoproto.customname) = "DeviceID" ];
  // TODO(zasgar): Pass encryption information here.
}

message GetFleetRequest {
  // Will use ID if supplied, else will try to lookup by name.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
  string name = 2;
}

message GetFleetResponse {
  FleetInfo fleet = 1;
}

message UpdateStatusRequest {
  // This is the Gimlet assigned device ID for this device.
  gml.types.UUID device_id = 1 [ (gogoproto.customname) = "DeviceID" ];
}

message UpdateStatusResponse {}

message ListFleetsRequest {
  // The orgID of the org to get fleets from.
  gml.types.UUID org_id = 1 [ (gogoproto.customname) = "OrgID" ];
}

message ListFleetsResponse {
  repeated FleetInfo fleets = 1;
}

message ListDevicesRequest {
  // The fleetID of the fleet to get the devices of.
  gml.types.UUID fleet_id = 1 [ (gogoproto.customname) = "FleetID" ];
}

message ListDevicesResponse {
  // The fleetID of the fleet to get the devices of.
  repeated DeviceInfo devices = 1;
}

service FleetMgrService {
  // Creates a new fleet for the org.
  rpc CreateFleet(CreateFleetRequest) returns (CreateFleetResponse);
  // Gets info about the fleet with the given ID.
  rpc GetFleet(GetFleetRequest) returns (GetFleetResponse);
  // List all fleets in the org.
  rpc ListFleets(ListFleetsRequest) returns (ListFleetsResponse);
}

service FleetMgrEdgeService {
  // Register adds a device as part of the fleet. If the device has already been registered it
  // simply returns with the existing config.
  rpc Register(RegisterRequest) returns (RegisterResponse);
  // UpdateStatus is used to update a devices's status, such as its last hearbeat.
  rpc UpdateStatus(UpdateStatusRequest) returns (UpdateStatusResponse);
  // ListDevices lists the edge devices in a fleet.
  rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse);
}
