/*
 * Copyright Â© 2023- Gimlet Labs, Inc.
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Gimlet Labs, Inc. and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Gimlet Labs, Inc. and its suppliers and
 * may be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law. Dissemination
 * of this information or reproduction of this material is strictly
 * forbidden unless prior written permission is obtained from
 * Gimlet Labs, Inc.
 *
 * SPDX-License-Identifier: Proprietary
 */

syntax = "proto3";

package gml.internal.controlplane.fleetmgr.v1;

option go_package = "gimletlabs.ai/gimlet/src/controlplane/fleetmgr/fmpb/v1;fmpb";

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "src/api/corepb/v1/cp_edge.proto";
import "src/api/corepb/v1/gem_config.proto";
import "src/common/typespb/uuid.proto";

// ================== Fleet Manager Service ==================

message FleetInfo {
  // The ID of the fleet. Not filled in for create requests.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
  // The Org owning the fleet.
  gml.types.UUID org_id = 2
      [ (gogoproto.customname) = "OrgID", (gogoproto.moretags) = 'db:"org_id"' ];
  // The name of the fleet.
  string name = 3;
  // The description of the fleet.
  string description = 5;
  // The timestamp when the fleet was created.
  google.protobuf.Timestamp created_at = 6 [ (gogoproto.moretags) = 'db:"created_at"' ];
  // A map of the default device tags associated with the fleet.
  map<string, Tag> tags = 7;

  reserved 4;
}

message CreateFleetRequest {
  FleetInfo fleet = 1;
}

message CreateFleetResponse {
  FleetInfo fleet = 1;
}

message GetFleetRequest {
  // Will use ID if supplied, else will try to lookup by name.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
  reserved 2;
}

message GetFleetResponse {
  FleetInfo fleet = 1;
}

message GetFleetByNameRequest {
  string name = 1;
  // Fleet names are only unique across orgs, so we need to specify the org
  // which this fleet is in.
  gml.types.UUID org_id = 2 [ (gogoproto.customname) = "OrgID" ];
}

message GetFleetByNameResponse {
  FleetInfo fleet = 1;
}

message ListFleetsRequest {
  // The orgID of the org to get fleets from.
  gml.types.UUID org_id = 1 [ (gogoproto.customname) = "OrgID" ];
}

message ListFleetsResponse {
  repeated FleetInfo fleets = 1;
}

message UpdateFleetRequest {
  FleetInfo fleet = 1;
  // List of tag keys to delete. Tags to upsert are included in the FleetInfo.
  repeated string deleted_tag_keys = 2;
}

message UpdateFleetResponse {
  FleetInfo fleet = 1;
}

message Tag {
  // The key part of the tag.
  string key = 1;
  // The value part of the tag.
  string value = 2;
  // The metadata associated with the tag.
  TagMetadata metadata = 3;
}

message TagMetadata {
  // Whether or not the tag is a default tag (inherited).
  bool is_inherited = 1 [ (gogoproto.customname) = "IsInherited" ];
  // The timestamp when the tag was last updated.
  google.protobuf.Timestamp updated_at = 2 [ (gogoproto.moretags) = 'db:"updated_at"' ];
  // The timestamp when the tag was created.
  google.protobuf.Timestamp created_at = 3 [ (gogoproto.moretags) = 'db:"created_at"' ];
}

message GetDefaultTagsRequest {
  // The fleetID of the fleet to fetch the tags from.
  gml.types.UUID fleet_id = 1 [ (gogoproto.customname) = "FleetID" ];
}

message GetDefaultTagsResponse {
  // A map of the default tags associated with the fleet in the <key, Tag> format.
  map<string, Tag> tags = 1;
}

message UpsertDefaultTagRequest {
  // The fleetID of the fleet.
  gml.types.UUID fleet_id = 1 [ (gogoproto.customname) = "FleetID" ];
  // The tag to upsert.
  Tag tag = 2;
}

message UpsertDefaultTagResponse {}

message DeleteDefaultTagRequest {
  // The fleetID of the fleet.
  gml.types.UUID fleet_id = 1 [ (gogoproto.customname) = "FleetID" ];
  // The key of the Tag to be deleted.
  string key = 2;
}

message DeleteDefaultTagResponse {}

// ================== Fleet Manager Edge Service ==================

// DeviceStatus has all of the possible statuses a device can be in.
enum DeviceStatus {
  DEVICE_STATUS_UNKNOWN = 0;
  DEVICE_STATUS_HEALTHY = 1;
  DEVICE_STATUS_UNHEALTHY = 2;
  DEVICE_STATUS_DISCONNECTED = 3;
}

enum OSKind {
  OS_KIND_UNKNOWN = 0;
  OS_KIND_LINUX = 1;
  OS_KIND_WINDOWS = 2;
  OS_KIND_MACOS = 3;
  OS_KIND_IOS = 4;
  OS_KIND_ANDROID = 5;
  OS_KIND_OTHER = 6;
}

message OSInfo {
  OSKind kind = 1;
  // The version of the OS.
  string version = 2;
}

message DeviceInfo {
  // The ID of the device. Not filled in for create requests.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
  // The serial for the device.
  string serial = 2;
  // The hostname of the device.
  string hostname = 3;
  // An optional user set display name for the device.
  // This should be preferentially used when referring to the device in the UI,
  // with the hostname as a fallback.
  string display_name = 11;
  // The fleet that the device is in.
  gml.types.UUID fleet_id = 4
      [ (gogoproto.customname) = "FleetID", (gogoproto.moretags) = 'db:"fleet_id"' ];
  // The timestamp when the device was created.
  google.protobuf.Timestamp created_at = 12 [ (gogoproto.moretags) = 'db:"created_at"' ];
  // The last time the controlplane has heard from the device.
  int64 last_heartbeat_ns = 5 [
    (gogoproto.customname) = "LastHeartbeatNS",
    (gogoproto.moretags) = 'db:"last_heartbeat_ns"'
  ];
  DeviceStatus status = 6;
  // Capabilities of the device, including info like about drivers, model runtimes, etc.
  gml.internal.api.core.v1.DeviceCapabilities capabilities = 8;
  // A map of the tags associated with the device in the <key, Tag> format.
  map<string, Tag> tags = 9;
  OSInfo os = 10 [ (gogoproto.customname) = "OS" ];

  // The semver compatible version of the GEM running on the device.
  string version = 13;
  reserved 7;
}

message RegisterRequest {
  // This is an opaque device serial for the device. It's nominally the MAC-address, GUID, or some
  // other serial number that is deemed to be globally unique. It must be at-least 32 characters. On
  // collision the request to register device will be rejected.
  string device_serial = 1;
  // The hostname of the device.
  string hostname = 2;
  OSInfo os = 3 [ (gogoproto.customname) = "OS" ];
  // TODO(zasgar): Pass the device's public key here so that we can encrypt the request.

  // The version of the GEM running on the device.
  string version = 4;
}

message RegisterResponse {
  // This is the Gimlet assigned device ID for this device.
  gml.types.UUID device_id = 1 [ (gogoproto.customname) = "DeviceID" ];
  // TODO(zasgar): Pass encryption information here.
}

message UpdateStatusRequest {
  // This is the Gimlet assigned device ID for this device.
  gml.types.UUID device_id = 1 [ (gogoproto.customname) = "DeviceID" ];
}

message UpdateStatusResponse {}

message GetDeviceRequest {
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
}

message GetDeviceResponse {
  DeviceInfo device = 1;
}

message ListDevicesRequest {
  // The fleetID of the fleet to get the devices of.
  gml.types.UUID fleet_id = 1 [ (gogoproto.customname) = "FleetID" ];
}

message ListDevicesResponse {
  repeated DeviceInfo devices = 1;
}

message UpdateDeviceRequest {
  DeviceInfo device = 1;
  // List of tag keys to delete. Tags to upsert are included in the DeviceInfo.
  repeated string deleted_tag_keys = 2;
}

message UpdateDeviceResponse {
  DeviceInfo device = 1;
}

message DeleteDevicesRequest {
  // List of IDs associated with devices to delete.
  repeated gml.types.UUID ids = 1 [ (gogoproto.customname) = "IDs" ];
}

message DeleteDevicesResponse {}

message SetDeviceCapabilitiesRequest {
  // The deviceID of the device.
  gml.types.UUID device_id = 1 [ (gogoproto.customname) = "DeviceID" ];
  // Capabilities of the device, including info like about drivers, model runtimes, etc.
  gml.internal.api.core.v1.DeviceCapabilities capabilities = 2;
}

message SetDeviceCapabilitiesResponse {}

// ================== Fleet Manager Device Tags Service ==================

message GetTagsRequest {
  // The deviceID of the device to fetch the tags from.
  gml.types.UUID device_id = 1 [ (gogoproto.customname) = "DeviceID" ];
}

message GetTagsResponse {
  // A map of the tags associated with the device in the <key, Tag> format.
  map<string, Tag> tags = 1;
}

message UpsertTagRequest {
  // The deviceID of the device.
  gml.types.UUID device_id = 1 [ (gogoproto.customname) = "DeviceID" ];
  // The tag to upsert.
  Tag tag = 2;
}

message UpsertTagResponse {}

message DeleteTagRequest {
  // The deviceID of the device.
  gml.types.UUID device_id = 1 [ (gogoproto.customname) = "DeviceID" ];
  // The key of the Tag to be deleted.
  string key = 2;
}

message DeleteTagResponse {}

message UnassociateTagsWithDeployKeyRequest {
  // The deploy key ID.
  gml.types.UUID deploy_key_id = 1 [ (gogoproto.customname) = "DeployKeyID" ];
}

message UnassociateTagsWithDeployKeyResponse {}

message AssociateTagsWithDeployKeyRequest {
  // The deploy key ID.
  gml.types.UUID deploy_key_id = 1 [ (gogoproto.customname) = "DeployKeyID" ];
  // A map of the tags associated with the deploy key ID in the <key, value> format.
  map<string, string> tags = 2;
  // The fleet ID associated with the deploy key.
  gml.types.UUID fleet_id = 3 [ (gogoproto.customname) = "FleetID" ];
}

message AssociateTagsWithDeployKeyResponse {
  // The deploy key ID.
  gml.types.UUID deploy_key_id = 1 [ (gogoproto.customname) = "DeployKeyID" ];
  // A map of the tags associated with the deploy key ID in the <key, Tag> format.
  map<string, Tag> tags = 2;
}

message ListTagsAssociatedWithDeployKeyRequest {
  // The deploy key ID.
  gml.types.UUID deploy_key_id = 1 [ (gogoproto.customname) = "DeployKeyID" ];
}

message ListTagsAssociatedWithDeployKeyResponse {
  // The deploy key ID.
  gml.types.UUID deploy_key_id = 1 [ (gogoproto.customname) = "DeployKeyID" ];
  // A map of the tags associated with the deploy key ID in the <key, Tag> format.
  map<string, Tag> tags = 2;
}

// ================== Fleet Manager Config Service ==================

enum SelectorType {
  SELECTOR_TYPE_UNKNOWN = 0;
  SELECTOR_TYPE_EXISTS = 1;
  SELECTOR_TYPE_NOT_EXISTS = 2;
  SELECTOR_TYPE_IN = 3;
  SELECTOR_TYPE_NOT_IN = 4;
}

message Selector {
  string key = 1;
  SelectorType operator = 2;
  repeated string values = 3;
}

message ConfigRule {
  // The tag selectors for the config rule. These are ANDed.
  repeated Selector tag_selectors = 1;
  // The config which should be applied for devices matching the selector.
  // Not all values need to be filled in, only the ones which should be applied.
  gml.internal.api.core.v1.GEMConfig config = 2;
}

// BaseConfig is the base config for a fleet which defines all the config selectors and
// rules that should be applied to the devices in the fleet.
message BaseConfig {
  repeated ConfigRule rules = 1;
}

message GetBaseConfigRequest {
  // The fleetID of the fleet to fetch the base config for.
  gml.types.UUID fleet_id = 1 [ (gogoproto.customname) = "FleetID" ];
}

message GetBaseConfigResponse {
  // The base config for the fleet.
  BaseConfig base_config = 1;
  int64 version = 2;
}

message GetDeviceConfigStateRequest {
  // The ID of the device to fetch the config state from.
  gml.types.UUID device_id = 1 [ (gogoproto.customname) = "DeviceID" ];
}

message GetDeviceConfigStateResponse {
  // The config which the device is actually running.
  gml.internal.api.core.v1.GEMConfig state = 1;
  int64 version = 2;
}

message UpdateBaseConfigRequest {
  // The fleetID of the fleet to update the base config for.
  gml.types.UUID fleet_id = 1 [ (gogoproto.customname) = "FleetID" ];
  // The base config to update.
  BaseConfig base_config = 2;
}

message UpdateBaseConfigResponse {}

// ================== Service Definitions ==================

// FleetMgrService is responsible for communicating with the API service about fleets.
service FleetMgrService {
  // Creates a new fleet for the org.
  rpc CreateFleet(CreateFleetRequest) returns (CreateFleetResponse);
  // Gets info about the fleet with the given ID.
  rpc GetFleet(GetFleetRequest) returns (GetFleetResponse);
  // Gets info about the fleet with the given name and org.
  rpc GetFleetByName(GetFleetByNameRequest) returns (GetFleetByNameResponse);
  // List all fleets in the org.
  rpc ListFleets(ListFleetsRequest) returns (ListFleetsResponse);
  // UpdateFleet updates information about a fleet, such as its name, description and tags.
  rpc UpdateFleet(UpdateFleetRequest) returns (UpdateFleetResponse);
  // GetDefaultTags gets the default tags for a fleet.
  rpc GetDefaultTags(GetDefaultTagsRequest) returns (GetDefaultTagsResponse);
  // UpsertDefaultTag creates or updates a tag for a fleet.
  rpc UpsertDefaultTag(UpsertDefaultTagRequest) returns (UpsertDefaultTagResponse);
  // DeleteDefaultTag deletes a tag from a fleet.
  rpc DeleteDefaultTag(DeleteDefaultTagRequest) returns (DeleteDefaultTagResponse);
}

// FleetMgrEdgeService is responsible for communicating with the devices about their state.
service FleetMgrEdgeService {
  // Register adds a device as part of the fleet. If the device has already been registered it
  // simply returns with the existing config.
  rpc Register(RegisterRequest) returns (RegisterResponse);
}

// FleetMgrDeviceService is responsible for management of devices.
service FleetMgrDeviceService {
  // UpdateStatus is used to update a device's status, such as its last heartbeat.
  rpc UpdateStatus(UpdateStatusRequest) returns (UpdateStatusResponse);
  // GetDevice gets the information about a particular device.
  rpc GetDevice(GetDeviceRequest) returns (GetDeviceResponse);
  // ListDevices lists the edge devices in a fleet.
  rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse);
  // UpdateDevice updates information about a device, such as its tags.
  rpc UpdateDevice(UpdateDeviceRequest) returns (UpdateDeviceResponse);
  // DeleteDevices deletes one or more devices from a fleet.
  rpc DeleteDevices(DeleteDevicesRequest) returns (DeleteDevicesResponse);
  // SetDeviceCapabilities sets the capabilities of a device.
  rpc SetDeviceCapabilities(SetDeviceCapabilitiesRequest) returns (SetDeviceCapabilitiesResponse);
}

// FleetMgrDeviceTagsService is responsible for managing device tags.
service FleetMgrDeviceTagsService {
  // GetTags gets the tags for a device.
  rpc GetTags(GetTagsRequest) returns (GetTagsResponse);
  // UpsertTag creates or updates a tag for a device.
  rpc UpsertTag(UpsertTagRequest) returns (UpsertTagResponse);
  // DeleteTag deletes a tag from a device.
  rpc DeleteTag(DeleteTagRequest) returns (DeleteTagResponse);
  // AssociateTagsWithDeployKey stores tags associated with a deploy key. These
  // tags will be converted to device tags during device registration.
  rpc AssociateTagsWithDeployKey(AssociateTagsWithDeployKeyRequest)
      returns (AssociateTagsWithDeployKeyResponse);
  // UnassociateTagsWithDeployKey removes tags associated with a deploy key.
  rpc UnassociateTagsWithDeployKey(UnassociateTagsWithDeployKeyRequest)
      returns (UnassociateTagsWithDeployKeyResponse);
  // ListTagsAssociatedWithDeployKey returns the tags associated with a deploy key.
  rpc ListTagsAssociatedWithDeployKey(ListTagsAssociatedWithDeployKeyRequest)
      returns (ListTagsAssociatedWithDeployKeyResponse);
}

// FleetMgrConfigService is responsible for managing configs for the devices in a fleet.
service FleetMgrConfigService {
  // GetBaseConfig gets the base config for a fleet. This is the specification of config
  // rules/selectors which should be applied to the devices in the fleet.
  rpc GetBaseConfig(GetBaseConfigRequest) returns (GetBaseConfigResponse);
  // GetDeviceConfigState gets the config which is actually applied to a device.
  rpc GetDeviceConfigState(GetDeviceConfigStateRequest) returns (GetDeviceConfigStateResponse);
  // UpdateBaseConfig updates the base config for a fleet.
  rpc UpdateBaseConfig(UpdateBaseConfigRequest) returns (UpdateBaseConfigResponse);
}
