// Code generated by MockGen. DO NOT EDIT.
// Source: fmpb.pb.go
//
// Generated by this command:
//
//	mockgen -source=fmpb.pb.go -destination=mock/fmpb_mock.gen.go FleetMgrService,FleetMgrEdgeService
//
// Package mock_fmpb is a generated GoMock package.
package mock_fmpb

import (
	context "context"
	reflect "reflect"

	fmpb "gimletlabs.ai/gimlet/src/controlplane/fleetmgr/fmpb/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFleetMgrServiceClient is a mock of FleetMgrServiceClient interface.
type MockFleetMgrServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFleetMgrServiceClientMockRecorder
}

// MockFleetMgrServiceClientMockRecorder is the mock recorder for MockFleetMgrServiceClient.
type MockFleetMgrServiceClientMockRecorder struct {
	mock *MockFleetMgrServiceClient
}

// NewMockFleetMgrServiceClient creates a new mock instance.
func NewMockFleetMgrServiceClient(ctrl *gomock.Controller) *MockFleetMgrServiceClient {
	mock := &MockFleetMgrServiceClient{ctrl: ctrl}
	mock.recorder = &MockFleetMgrServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFleetMgrServiceClient) EXPECT() *MockFleetMgrServiceClientMockRecorder {
	return m.recorder
}

// CreateFleet mocks base method.
func (m *MockFleetMgrServiceClient) CreateFleet(ctx context.Context, in *fmpb.CreateFleetRequest, opts ...grpc.CallOption) (*fmpb.CreateFleetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFleet", varargs...)
	ret0, _ := ret[0].(*fmpb.CreateFleetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFleet indicates an expected call of CreateFleet.
func (mr *MockFleetMgrServiceClientMockRecorder) CreateFleet(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFleet", reflect.TypeOf((*MockFleetMgrServiceClient)(nil).CreateFleet), varargs...)
}

// DeleteDefaultTag mocks base method.
func (m *MockFleetMgrServiceClient) DeleteDefaultTag(ctx context.Context, in *fmpb.DeleteDefaultTagRequest, opts ...grpc.CallOption) (*fmpb.DeleteDefaultTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDefaultTag", varargs...)
	ret0, _ := ret[0].(*fmpb.DeleteDefaultTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDefaultTag indicates an expected call of DeleteDefaultTag.
func (mr *MockFleetMgrServiceClientMockRecorder) DeleteDefaultTag(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDefaultTag", reflect.TypeOf((*MockFleetMgrServiceClient)(nil).DeleteDefaultTag), varargs...)
}

// GetDefaultTags mocks base method.
func (m *MockFleetMgrServiceClient) GetDefaultTags(ctx context.Context, in *fmpb.GetDefaultTagsRequest, opts ...grpc.CallOption) (*fmpb.GetDefaultTagsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDefaultTags", varargs...)
	ret0, _ := ret[0].(*fmpb.GetDefaultTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultTags indicates an expected call of GetDefaultTags.
func (mr *MockFleetMgrServiceClientMockRecorder) GetDefaultTags(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultTags", reflect.TypeOf((*MockFleetMgrServiceClient)(nil).GetDefaultTags), varargs...)
}

// GetFleet mocks base method.
func (m *MockFleetMgrServiceClient) GetFleet(ctx context.Context, in *fmpb.GetFleetRequest, opts ...grpc.CallOption) (*fmpb.GetFleetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFleet", varargs...)
	ret0, _ := ret[0].(*fmpb.GetFleetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFleet indicates an expected call of GetFleet.
func (mr *MockFleetMgrServiceClientMockRecorder) GetFleet(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFleet", reflect.TypeOf((*MockFleetMgrServiceClient)(nil).GetFleet), varargs...)
}

// GetFleetByName mocks base method.
func (m *MockFleetMgrServiceClient) GetFleetByName(ctx context.Context, in *fmpb.GetFleetByNameRequest, opts ...grpc.CallOption) (*fmpb.GetFleetByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFleetByName", varargs...)
	ret0, _ := ret[0].(*fmpb.GetFleetByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFleetByName indicates an expected call of GetFleetByName.
func (mr *MockFleetMgrServiceClientMockRecorder) GetFleetByName(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFleetByName", reflect.TypeOf((*MockFleetMgrServiceClient)(nil).GetFleetByName), varargs...)
}

// ListFleets mocks base method.
func (m *MockFleetMgrServiceClient) ListFleets(ctx context.Context, in *fmpb.ListFleetsRequest, opts ...grpc.CallOption) (*fmpb.ListFleetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFleets", varargs...)
	ret0, _ := ret[0].(*fmpb.ListFleetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFleets indicates an expected call of ListFleets.
func (mr *MockFleetMgrServiceClientMockRecorder) ListFleets(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleets", reflect.TypeOf((*MockFleetMgrServiceClient)(nil).ListFleets), varargs...)
}

// UpdateFleet mocks base method.
func (m *MockFleetMgrServiceClient) UpdateFleet(ctx context.Context, in *fmpb.UpdateFleetRequest, opts ...grpc.CallOption) (*fmpb.UpdateFleetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFleet", varargs...)
	ret0, _ := ret[0].(*fmpb.UpdateFleetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFleet indicates an expected call of UpdateFleet.
func (mr *MockFleetMgrServiceClientMockRecorder) UpdateFleet(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFleet", reflect.TypeOf((*MockFleetMgrServiceClient)(nil).UpdateFleet), varargs...)
}

// UpsertDefaultTag mocks base method.
func (m *MockFleetMgrServiceClient) UpsertDefaultTag(ctx context.Context, in *fmpb.UpsertDefaultTagRequest, opts ...grpc.CallOption) (*fmpb.UpsertDefaultTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertDefaultTag", varargs...)
	ret0, _ := ret[0].(*fmpb.UpsertDefaultTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertDefaultTag indicates an expected call of UpsertDefaultTag.
func (mr *MockFleetMgrServiceClientMockRecorder) UpsertDefaultTag(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertDefaultTag", reflect.TypeOf((*MockFleetMgrServiceClient)(nil).UpsertDefaultTag), varargs...)
}

// MockFleetMgrServiceServer is a mock of FleetMgrServiceServer interface.
type MockFleetMgrServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFleetMgrServiceServerMockRecorder
}

// MockFleetMgrServiceServerMockRecorder is the mock recorder for MockFleetMgrServiceServer.
type MockFleetMgrServiceServerMockRecorder struct {
	mock *MockFleetMgrServiceServer
}

// NewMockFleetMgrServiceServer creates a new mock instance.
func NewMockFleetMgrServiceServer(ctrl *gomock.Controller) *MockFleetMgrServiceServer {
	mock := &MockFleetMgrServiceServer{ctrl: ctrl}
	mock.recorder = &MockFleetMgrServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFleetMgrServiceServer) EXPECT() *MockFleetMgrServiceServerMockRecorder {
	return m.recorder
}

// CreateFleet mocks base method.
func (m *MockFleetMgrServiceServer) CreateFleet(arg0 context.Context, arg1 *fmpb.CreateFleetRequest) (*fmpb.CreateFleetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFleet", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.CreateFleetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFleet indicates an expected call of CreateFleet.
func (mr *MockFleetMgrServiceServerMockRecorder) CreateFleet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFleet", reflect.TypeOf((*MockFleetMgrServiceServer)(nil).CreateFleet), arg0, arg1)
}

// DeleteDefaultTag mocks base method.
func (m *MockFleetMgrServiceServer) DeleteDefaultTag(arg0 context.Context, arg1 *fmpb.DeleteDefaultTagRequest) (*fmpb.DeleteDefaultTagResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDefaultTag", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.DeleteDefaultTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDefaultTag indicates an expected call of DeleteDefaultTag.
func (mr *MockFleetMgrServiceServerMockRecorder) DeleteDefaultTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDefaultTag", reflect.TypeOf((*MockFleetMgrServiceServer)(nil).DeleteDefaultTag), arg0, arg1)
}

// GetDefaultTags mocks base method.
func (m *MockFleetMgrServiceServer) GetDefaultTags(arg0 context.Context, arg1 *fmpb.GetDefaultTagsRequest) (*fmpb.GetDefaultTagsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultTags", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.GetDefaultTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultTags indicates an expected call of GetDefaultTags.
func (mr *MockFleetMgrServiceServerMockRecorder) GetDefaultTags(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultTags", reflect.TypeOf((*MockFleetMgrServiceServer)(nil).GetDefaultTags), arg0, arg1)
}

// GetFleet mocks base method.
func (m *MockFleetMgrServiceServer) GetFleet(arg0 context.Context, arg1 *fmpb.GetFleetRequest) (*fmpb.GetFleetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFleet", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.GetFleetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFleet indicates an expected call of GetFleet.
func (mr *MockFleetMgrServiceServerMockRecorder) GetFleet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFleet", reflect.TypeOf((*MockFleetMgrServiceServer)(nil).GetFleet), arg0, arg1)
}

// GetFleetByName mocks base method.
func (m *MockFleetMgrServiceServer) GetFleetByName(arg0 context.Context, arg1 *fmpb.GetFleetByNameRequest) (*fmpb.GetFleetByNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFleetByName", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.GetFleetByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFleetByName indicates an expected call of GetFleetByName.
func (mr *MockFleetMgrServiceServerMockRecorder) GetFleetByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFleetByName", reflect.TypeOf((*MockFleetMgrServiceServer)(nil).GetFleetByName), arg0, arg1)
}

// ListFleets mocks base method.
func (m *MockFleetMgrServiceServer) ListFleets(arg0 context.Context, arg1 *fmpb.ListFleetsRequest) (*fmpb.ListFleetsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleets", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.ListFleetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFleets indicates an expected call of ListFleets.
func (mr *MockFleetMgrServiceServerMockRecorder) ListFleets(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleets", reflect.TypeOf((*MockFleetMgrServiceServer)(nil).ListFleets), arg0, arg1)
}

// UpdateFleet mocks base method.
func (m *MockFleetMgrServiceServer) UpdateFleet(arg0 context.Context, arg1 *fmpb.UpdateFleetRequest) (*fmpb.UpdateFleetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFleet", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.UpdateFleetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFleet indicates an expected call of UpdateFleet.
func (mr *MockFleetMgrServiceServerMockRecorder) UpdateFleet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFleet", reflect.TypeOf((*MockFleetMgrServiceServer)(nil).UpdateFleet), arg0, arg1)
}

// UpsertDefaultTag mocks base method.
func (m *MockFleetMgrServiceServer) UpsertDefaultTag(arg0 context.Context, arg1 *fmpb.UpsertDefaultTagRequest) (*fmpb.UpsertDefaultTagResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertDefaultTag", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.UpsertDefaultTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertDefaultTag indicates an expected call of UpsertDefaultTag.
func (mr *MockFleetMgrServiceServerMockRecorder) UpsertDefaultTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertDefaultTag", reflect.TypeOf((*MockFleetMgrServiceServer)(nil).UpsertDefaultTag), arg0, arg1)
}

// MockFleetMgrEdgeServiceClient is a mock of FleetMgrEdgeServiceClient interface.
type MockFleetMgrEdgeServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFleetMgrEdgeServiceClientMockRecorder
}

// MockFleetMgrEdgeServiceClientMockRecorder is the mock recorder for MockFleetMgrEdgeServiceClient.
type MockFleetMgrEdgeServiceClientMockRecorder struct {
	mock *MockFleetMgrEdgeServiceClient
}

// NewMockFleetMgrEdgeServiceClient creates a new mock instance.
func NewMockFleetMgrEdgeServiceClient(ctrl *gomock.Controller) *MockFleetMgrEdgeServiceClient {
	mock := &MockFleetMgrEdgeServiceClient{ctrl: ctrl}
	mock.recorder = &MockFleetMgrEdgeServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFleetMgrEdgeServiceClient) EXPECT() *MockFleetMgrEdgeServiceClientMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockFleetMgrEdgeServiceClient) Register(ctx context.Context, in *fmpb.RegisterRequest, opts ...grpc.CallOption) (*fmpb.RegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*fmpb.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockFleetMgrEdgeServiceClientMockRecorder) Register(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockFleetMgrEdgeServiceClient)(nil).Register), varargs...)
}

// MockFleetMgrEdgeServiceServer is a mock of FleetMgrEdgeServiceServer interface.
type MockFleetMgrEdgeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFleetMgrEdgeServiceServerMockRecorder
}

// MockFleetMgrEdgeServiceServerMockRecorder is the mock recorder for MockFleetMgrEdgeServiceServer.
type MockFleetMgrEdgeServiceServerMockRecorder struct {
	mock *MockFleetMgrEdgeServiceServer
}

// NewMockFleetMgrEdgeServiceServer creates a new mock instance.
func NewMockFleetMgrEdgeServiceServer(ctrl *gomock.Controller) *MockFleetMgrEdgeServiceServer {
	mock := &MockFleetMgrEdgeServiceServer{ctrl: ctrl}
	mock.recorder = &MockFleetMgrEdgeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFleetMgrEdgeServiceServer) EXPECT() *MockFleetMgrEdgeServiceServerMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockFleetMgrEdgeServiceServer) Register(arg0 context.Context, arg1 *fmpb.RegisterRequest) (*fmpb.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockFleetMgrEdgeServiceServerMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockFleetMgrEdgeServiceServer)(nil).Register), arg0, arg1)
}

// MockFleetMgrDeviceServiceClient is a mock of FleetMgrDeviceServiceClient interface.
type MockFleetMgrDeviceServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFleetMgrDeviceServiceClientMockRecorder
}

// MockFleetMgrDeviceServiceClientMockRecorder is the mock recorder for MockFleetMgrDeviceServiceClient.
type MockFleetMgrDeviceServiceClientMockRecorder struct {
	mock *MockFleetMgrDeviceServiceClient
}

// NewMockFleetMgrDeviceServiceClient creates a new mock instance.
func NewMockFleetMgrDeviceServiceClient(ctrl *gomock.Controller) *MockFleetMgrDeviceServiceClient {
	mock := &MockFleetMgrDeviceServiceClient{ctrl: ctrl}
	mock.recorder = &MockFleetMgrDeviceServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFleetMgrDeviceServiceClient) EXPECT() *MockFleetMgrDeviceServiceClientMockRecorder {
	return m.recorder
}

// DeleteDevices mocks base method.
func (m *MockFleetMgrDeviceServiceClient) DeleteDevices(ctx context.Context, in *fmpb.DeleteDevicesRequest, opts ...grpc.CallOption) (*fmpb.DeleteDevicesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDevices", varargs...)
	ret0, _ := ret[0].(*fmpb.DeleteDevicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDevices indicates an expected call of DeleteDevices.
func (mr *MockFleetMgrDeviceServiceClientMockRecorder) DeleteDevices(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevices", reflect.TypeOf((*MockFleetMgrDeviceServiceClient)(nil).DeleteDevices), varargs...)
}

// GetDevice mocks base method.
func (m *MockFleetMgrDeviceServiceClient) GetDevice(ctx context.Context, in *fmpb.GetDeviceRequest, opts ...grpc.CallOption) (*fmpb.GetDeviceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDevice", varargs...)
	ret0, _ := ret[0].(*fmpb.GetDeviceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockFleetMgrDeviceServiceClientMockRecorder) GetDevice(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockFleetMgrDeviceServiceClient)(nil).GetDevice), varargs...)
}

// ListDevices mocks base method.
func (m *MockFleetMgrDeviceServiceClient) ListDevices(ctx context.Context, in *fmpb.ListDevicesRequest, opts ...grpc.CallOption) (*fmpb.ListDevicesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDevices", varargs...)
	ret0, _ := ret[0].(*fmpb.ListDevicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevices indicates an expected call of ListDevices.
func (mr *MockFleetMgrDeviceServiceClientMockRecorder) ListDevices(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevices", reflect.TypeOf((*MockFleetMgrDeviceServiceClient)(nil).ListDevices), varargs...)
}

// SetDeviceCapabilities mocks base method.
func (m *MockFleetMgrDeviceServiceClient) SetDeviceCapabilities(ctx context.Context, in *fmpb.SetDeviceCapabilitiesRequest, opts ...grpc.CallOption) (*fmpb.SetDeviceCapabilitiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetDeviceCapabilities", varargs...)
	ret0, _ := ret[0].(*fmpb.SetDeviceCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDeviceCapabilities indicates an expected call of SetDeviceCapabilities.
func (mr *MockFleetMgrDeviceServiceClientMockRecorder) SetDeviceCapabilities(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeviceCapabilities", reflect.TypeOf((*MockFleetMgrDeviceServiceClient)(nil).SetDeviceCapabilities), varargs...)
}

// UpdateDevice mocks base method.
func (m *MockFleetMgrDeviceServiceClient) UpdateDevice(ctx context.Context, in *fmpb.UpdateDeviceRequest, opts ...grpc.CallOption) (*fmpb.UpdateDeviceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDevice", varargs...)
	ret0, _ := ret[0].(*fmpb.UpdateDeviceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockFleetMgrDeviceServiceClientMockRecorder) UpdateDevice(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockFleetMgrDeviceServiceClient)(nil).UpdateDevice), varargs...)
}

// UpdateStatus mocks base method.
func (m *MockFleetMgrDeviceServiceClient) UpdateStatus(ctx context.Context, in *fmpb.UpdateStatusRequest, opts ...grpc.CallOption) (*fmpb.UpdateStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStatus", varargs...)
	ret0, _ := ret[0].(*fmpb.UpdateStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockFleetMgrDeviceServiceClientMockRecorder) UpdateStatus(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockFleetMgrDeviceServiceClient)(nil).UpdateStatus), varargs...)
}

// MockFleetMgrDeviceServiceServer is a mock of FleetMgrDeviceServiceServer interface.
type MockFleetMgrDeviceServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFleetMgrDeviceServiceServerMockRecorder
}

// MockFleetMgrDeviceServiceServerMockRecorder is the mock recorder for MockFleetMgrDeviceServiceServer.
type MockFleetMgrDeviceServiceServerMockRecorder struct {
	mock *MockFleetMgrDeviceServiceServer
}

// NewMockFleetMgrDeviceServiceServer creates a new mock instance.
func NewMockFleetMgrDeviceServiceServer(ctrl *gomock.Controller) *MockFleetMgrDeviceServiceServer {
	mock := &MockFleetMgrDeviceServiceServer{ctrl: ctrl}
	mock.recorder = &MockFleetMgrDeviceServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFleetMgrDeviceServiceServer) EXPECT() *MockFleetMgrDeviceServiceServerMockRecorder {
	return m.recorder
}

// DeleteDevices mocks base method.
func (m *MockFleetMgrDeviceServiceServer) DeleteDevices(arg0 context.Context, arg1 *fmpb.DeleteDevicesRequest) (*fmpb.DeleteDevicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevices", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.DeleteDevicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDevices indicates an expected call of DeleteDevices.
func (mr *MockFleetMgrDeviceServiceServerMockRecorder) DeleteDevices(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevices", reflect.TypeOf((*MockFleetMgrDeviceServiceServer)(nil).DeleteDevices), arg0, arg1)
}

// GetDevice mocks base method.
func (m *MockFleetMgrDeviceServiceServer) GetDevice(arg0 context.Context, arg1 *fmpb.GetDeviceRequest) (*fmpb.GetDeviceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.GetDeviceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockFleetMgrDeviceServiceServerMockRecorder) GetDevice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockFleetMgrDeviceServiceServer)(nil).GetDevice), arg0, arg1)
}

// ListDevices mocks base method.
func (m *MockFleetMgrDeviceServiceServer) ListDevices(arg0 context.Context, arg1 *fmpb.ListDevicesRequest) (*fmpb.ListDevicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevices", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.ListDevicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevices indicates an expected call of ListDevices.
func (mr *MockFleetMgrDeviceServiceServerMockRecorder) ListDevices(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevices", reflect.TypeOf((*MockFleetMgrDeviceServiceServer)(nil).ListDevices), arg0, arg1)
}

// SetDeviceCapabilities mocks base method.
func (m *MockFleetMgrDeviceServiceServer) SetDeviceCapabilities(arg0 context.Context, arg1 *fmpb.SetDeviceCapabilitiesRequest) (*fmpb.SetDeviceCapabilitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeviceCapabilities", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.SetDeviceCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDeviceCapabilities indicates an expected call of SetDeviceCapabilities.
func (mr *MockFleetMgrDeviceServiceServerMockRecorder) SetDeviceCapabilities(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeviceCapabilities", reflect.TypeOf((*MockFleetMgrDeviceServiceServer)(nil).SetDeviceCapabilities), arg0, arg1)
}

// UpdateDevice mocks base method.
func (m *MockFleetMgrDeviceServiceServer) UpdateDevice(arg0 context.Context, arg1 *fmpb.UpdateDeviceRequest) (*fmpb.UpdateDeviceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.UpdateDeviceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockFleetMgrDeviceServiceServerMockRecorder) UpdateDevice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockFleetMgrDeviceServiceServer)(nil).UpdateDevice), arg0, arg1)
}

// UpdateStatus mocks base method.
func (m *MockFleetMgrDeviceServiceServer) UpdateStatus(arg0 context.Context, arg1 *fmpb.UpdateStatusRequest) (*fmpb.UpdateStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.UpdateStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockFleetMgrDeviceServiceServerMockRecorder) UpdateStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockFleetMgrDeviceServiceServer)(nil).UpdateStatus), arg0, arg1)
}

// MockFleetMgrDeviceTagsServiceClient is a mock of FleetMgrDeviceTagsServiceClient interface.
type MockFleetMgrDeviceTagsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFleetMgrDeviceTagsServiceClientMockRecorder
}

// MockFleetMgrDeviceTagsServiceClientMockRecorder is the mock recorder for MockFleetMgrDeviceTagsServiceClient.
type MockFleetMgrDeviceTagsServiceClientMockRecorder struct {
	mock *MockFleetMgrDeviceTagsServiceClient
}

// NewMockFleetMgrDeviceTagsServiceClient creates a new mock instance.
func NewMockFleetMgrDeviceTagsServiceClient(ctrl *gomock.Controller) *MockFleetMgrDeviceTagsServiceClient {
	mock := &MockFleetMgrDeviceTagsServiceClient{ctrl: ctrl}
	mock.recorder = &MockFleetMgrDeviceTagsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFleetMgrDeviceTagsServiceClient) EXPECT() *MockFleetMgrDeviceTagsServiceClientMockRecorder {
	return m.recorder
}

// AssociateTagsWithDeployKey mocks base method.
func (m *MockFleetMgrDeviceTagsServiceClient) AssociateTagsWithDeployKey(ctx context.Context, in *fmpb.AssociateTagsWithDeployKeyRequest, opts ...grpc.CallOption) (*fmpb.AssociateTagsWithDeployKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateTagsWithDeployKey", varargs...)
	ret0, _ := ret[0].(*fmpb.AssociateTagsWithDeployKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateTagsWithDeployKey indicates an expected call of AssociateTagsWithDeployKey.
func (mr *MockFleetMgrDeviceTagsServiceClientMockRecorder) AssociateTagsWithDeployKey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateTagsWithDeployKey", reflect.TypeOf((*MockFleetMgrDeviceTagsServiceClient)(nil).AssociateTagsWithDeployKey), varargs...)
}

// DeleteTag mocks base method.
func (m *MockFleetMgrDeviceTagsServiceClient) DeleteTag(ctx context.Context, in *fmpb.DeleteTagRequest, opts ...grpc.CallOption) (*fmpb.DeleteTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTag", varargs...)
	ret0, _ := ret[0].(*fmpb.DeleteTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockFleetMgrDeviceTagsServiceClientMockRecorder) DeleteTag(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockFleetMgrDeviceTagsServiceClient)(nil).DeleteTag), varargs...)
}

// GetTags mocks base method.
func (m *MockFleetMgrDeviceTagsServiceClient) GetTags(ctx context.Context, in *fmpb.GetTagsRequest, opts ...grpc.CallOption) (*fmpb.GetTagsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTags", varargs...)
	ret0, _ := ret[0].(*fmpb.GetTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockFleetMgrDeviceTagsServiceClientMockRecorder) GetTags(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockFleetMgrDeviceTagsServiceClient)(nil).GetTags), varargs...)
}

// ListTagsAssociatedWithDeployKey mocks base method.
func (m *MockFleetMgrDeviceTagsServiceClient) ListTagsAssociatedWithDeployKey(ctx context.Context, in *fmpb.ListTagsAssociatedWithDeployKeyRequest, opts ...grpc.CallOption) (*fmpb.ListTagsAssociatedWithDeployKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsAssociatedWithDeployKey", varargs...)
	ret0, _ := ret[0].(*fmpb.ListTagsAssociatedWithDeployKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsAssociatedWithDeployKey indicates an expected call of ListTagsAssociatedWithDeployKey.
func (mr *MockFleetMgrDeviceTagsServiceClientMockRecorder) ListTagsAssociatedWithDeployKey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsAssociatedWithDeployKey", reflect.TypeOf((*MockFleetMgrDeviceTagsServiceClient)(nil).ListTagsAssociatedWithDeployKey), varargs...)
}

// UnassociateTagsWithDeployKey mocks base method.
func (m *MockFleetMgrDeviceTagsServiceClient) UnassociateTagsWithDeployKey(ctx context.Context, in *fmpb.UnassociateTagsWithDeployKeyRequest, opts ...grpc.CallOption) (*fmpb.UnassociateTagsWithDeployKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnassociateTagsWithDeployKey", varargs...)
	ret0, _ := ret[0].(*fmpb.UnassociateTagsWithDeployKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnassociateTagsWithDeployKey indicates an expected call of UnassociateTagsWithDeployKey.
func (mr *MockFleetMgrDeviceTagsServiceClientMockRecorder) UnassociateTagsWithDeployKey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassociateTagsWithDeployKey", reflect.TypeOf((*MockFleetMgrDeviceTagsServiceClient)(nil).UnassociateTagsWithDeployKey), varargs...)
}

// UpsertTag mocks base method.
func (m *MockFleetMgrDeviceTagsServiceClient) UpsertTag(ctx context.Context, in *fmpb.UpsertTagRequest, opts ...grpc.CallOption) (*fmpb.UpsertTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTag", varargs...)
	ret0, _ := ret[0].(*fmpb.UpsertTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertTag indicates an expected call of UpsertTag.
func (mr *MockFleetMgrDeviceTagsServiceClientMockRecorder) UpsertTag(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTag", reflect.TypeOf((*MockFleetMgrDeviceTagsServiceClient)(nil).UpsertTag), varargs...)
}

// MockFleetMgrDeviceTagsServiceServer is a mock of FleetMgrDeviceTagsServiceServer interface.
type MockFleetMgrDeviceTagsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFleetMgrDeviceTagsServiceServerMockRecorder
}

// MockFleetMgrDeviceTagsServiceServerMockRecorder is the mock recorder for MockFleetMgrDeviceTagsServiceServer.
type MockFleetMgrDeviceTagsServiceServerMockRecorder struct {
	mock *MockFleetMgrDeviceTagsServiceServer
}

// NewMockFleetMgrDeviceTagsServiceServer creates a new mock instance.
func NewMockFleetMgrDeviceTagsServiceServer(ctrl *gomock.Controller) *MockFleetMgrDeviceTagsServiceServer {
	mock := &MockFleetMgrDeviceTagsServiceServer{ctrl: ctrl}
	mock.recorder = &MockFleetMgrDeviceTagsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFleetMgrDeviceTagsServiceServer) EXPECT() *MockFleetMgrDeviceTagsServiceServerMockRecorder {
	return m.recorder
}

// AssociateTagsWithDeployKey mocks base method.
func (m *MockFleetMgrDeviceTagsServiceServer) AssociateTagsWithDeployKey(arg0 context.Context, arg1 *fmpb.AssociateTagsWithDeployKeyRequest) (*fmpb.AssociateTagsWithDeployKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateTagsWithDeployKey", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.AssociateTagsWithDeployKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateTagsWithDeployKey indicates an expected call of AssociateTagsWithDeployKey.
func (mr *MockFleetMgrDeviceTagsServiceServerMockRecorder) AssociateTagsWithDeployKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateTagsWithDeployKey", reflect.TypeOf((*MockFleetMgrDeviceTagsServiceServer)(nil).AssociateTagsWithDeployKey), arg0, arg1)
}

// DeleteTag mocks base method.
func (m *MockFleetMgrDeviceTagsServiceServer) DeleteTag(arg0 context.Context, arg1 *fmpb.DeleteTagRequest) (*fmpb.DeleteTagResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.DeleteTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockFleetMgrDeviceTagsServiceServerMockRecorder) DeleteTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockFleetMgrDeviceTagsServiceServer)(nil).DeleteTag), arg0, arg1)
}

// GetTags mocks base method.
func (m *MockFleetMgrDeviceTagsServiceServer) GetTags(arg0 context.Context, arg1 *fmpb.GetTagsRequest) (*fmpb.GetTagsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.GetTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockFleetMgrDeviceTagsServiceServerMockRecorder) GetTags(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockFleetMgrDeviceTagsServiceServer)(nil).GetTags), arg0, arg1)
}

// ListTagsAssociatedWithDeployKey mocks base method.
func (m *MockFleetMgrDeviceTagsServiceServer) ListTagsAssociatedWithDeployKey(arg0 context.Context, arg1 *fmpb.ListTagsAssociatedWithDeployKeyRequest) (*fmpb.ListTagsAssociatedWithDeployKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsAssociatedWithDeployKey", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.ListTagsAssociatedWithDeployKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsAssociatedWithDeployKey indicates an expected call of ListTagsAssociatedWithDeployKey.
func (mr *MockFleetMgrDeviceTagsServiceServerMockRecorder) ListTagsAssociatedWithDeployKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsAssociatedWithDeployKey", reflect.TypeOf((*MockFleetMgrDeviceTagsServiceServer)(nil).ListTagsAssociatedWithDeployKey), arg0, arg1)
}

// UnassociateTagsWithDeployKey mocks base method.
func (m *MockFleetMgrDeviceTagsServiceServer) UnassociateTagsWithDeployKey(arg0 context.Context, arg1 *fmpb.UnassociateTagsWithDeployKeyRequest) (*fmpb.UnassociateTagsWithDeployKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassociateTagsWithDeployKey", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.UnassociateTagsWithDeployKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnassociateTagsWithDeployKey indicates an expected call of UnassociateTagsWithDeployKey.
func (mr *MockFleetMgrDeviceTagsServiceServerMockRecorder) UnassociateTagsWithDeployKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassociateTagsWithDeployKey", reflect.TypeOf((*MockFleetMgrDeviceTagsServiceServer)(nil).UnassociateTagsWithDeployKey), arg0, arg1)
}

// UpsertTag mocks base method.
func (m *MockFleetMgrDeviceTagsServiceServer) UpsertTag(arg0 context.Context, arg1 *fmpb.UpsertTagRequest) (*fmpb.UpsertTagResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertTag", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.UpsertTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertTag indicates an expected call of UpsertTag.
func (mr *MockFleetMgrDeviceTagsServiceServerMockRecorder) UpsertTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTag", reflect.TypeOf((*MockFleetMgrDeviceTagsServiceServer)(nil).UpsertTag), arg0, arg1)
}

// MockFleetMgrConfigServiceClient is a mock of FleetMgrConfigServiceClient interface.
type MockFleetMgrConfigServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFleetMgrConfigServiceClientMockRecorder
}

// MockFleetMgrConfigServiceClientMockRecorder is the mock recorder for MockFleetMgrConfigServiceClient.
type MockFleetMgrConfigServiceClientMockRecorder struct {
	mock *MockFleetMgrConfigServiceClient
}

// NewMockFleetMgrConfigServiceClient creates a new mock instance.
func NewMockFleetMgrConfigServiceClient(ctrl *gomock.Controller) *MockFleetMgrConfigServiceClient {
	mock := &MockFleetMgrConfigServiceClient{ctrl: ctrl}
	mock.recorder = &MockFleetMgrConfigServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFleetMgrConfigServiceClient) EXPECT() *MockFleetMgrConfigServiceClientMockRecorder {
	return m.recorder
}

// GetBaseConfig mocks base method.
func (m *MockFleetMgrConfigServiceClient) GetBaseConfig(ctx context.Context, in *fmpb.GetBaseConfigRequest, opts ...grpc.CallOption) (*fmpb.GetBaseConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBaseConfig", varargs...)
	ret0, _ := ret[0].(*fmpb.GetBaseConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseConfig indicates an expected call of GetBaseConfig.
func (mr *MockFleetMgrConfigServiceClientMockRecorder) GetBaseConfig(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseConfig", reflect.TypeOf((*MockFleetMgrConfigServiceClient)(nil).GetBaseConfig), varargs...)
}

// GetDeviceConfigState mocks base method.
func (m *MockFleetMgrConfigServiceClient) GetDeviceConfigState(ctx context.Context, in *fmpb.GetDeviceConfigStateRequest, opts ...grpc.CallOption) (*fmpb.GetDeviceConfigStateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeviceConfigState", varargs...)
	ret0, _ := ret[0].(*fmpb.GetDeviceConfigStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceConfigState indicates an expected call of GetDeviceConfigState.
func (mr *MockFleetMgrConfigServiceClientMockRecorder) GetDeviceConfigState(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceConfigState", reflect.TypeOf((*MockFleetMgrConfigServiceClient)(nil).GetDeviceConfigState), varargs...)
}

// UpdateBaseConfig mocks base method.
func (m *MockFleetMgrConfigServiceClient) UpdateBaseConfig(ctx context.Context, in *fmpb.UpdateBaseConfigRequest, opts ...grpc.CallOption) (*fmpb.UpdateBaseConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBaseConfig", varargs...)
	ret0, _ := ret[0].(*fmpb.UpdateBaseConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBaseConfig indicates an expected call of UpdateBaseConfig.
func (mr *MockFleetMgrConfigServiceClientMockRecorder) UpdateBaseConfig(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBaseConfig", reflect.TypeOf((*MockFleetMgrConfigServiceClient)(nil).UpdateBaseConfig), varargs...)
}

// MockFleetMgrConfigServiceServer is a mock of FleetMgrConfigServiceServer interface.
type MockFleetMgrConfigServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFleetMgrConfigServiceServerMockRecorder
}

// MockFleetMgrConfigServiceServerMockRecorder is the mock recorder for MockFleetMgrConfigServiceServer.
type MockFleetMgrConfigServiceServerMockRecorder struct {
	mock *MockFleetMgrConfigServiceServer
}

// NewMockFleetMgrConfigServiceServer creates a new mock instance.
func NewMockFleetMgrConfigServiceServer(ctrl *gomock.Controller) *MockFleetMgrConfigServiceServer {
	mock := &MockFleetMgrConfigServiceServer{ctrl: ctrl}
	mock.recorder = &MockFleetMgrConfigServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFleetMgrConfigServiceServer) EXPECT() *MockFleetMgrConfigServiceServerMockRecorder {
	return m.recorder
}

// GetBaseConfig mocks base method.
func (m *MockFleetMgrConfigServiceServer) GetBaseConfig(arg0 context.Context, arg1 *fmpb.GetBaseConfigRequest) (*fmpb.GetBaseConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseConfig", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.GetBaseConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseConfig indicates an expected call of GetBaseConfig.
func (mr *MockFleetMgrConfigServiceServerMockRecorder) GetBaseConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseConfig", reflect.TypeOf((*MockFleetMgrConfigServiceServer)(nil).GetBaseConfig), arg0, arg1)
}

// GetDeviceConfigState mocks base method.
func (m *MockFleetMgrConfigServiceServer) GetDeviceConfigState(arg0 context.Context, arg1 *fmpb.GetDeviceConfigStateRequest) (*fmpb.GetDeviceConfigStateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceConfigState", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.GetDeviceConfigStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceConfigState indicates an expected call of GetDeviceConfigState.
func (mr *MockFleetMgrConfigServiceServerMockRecorder) GetDeviceConfigState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceConfigState", reflect.TypeOf((*MockFleetMgrConfigServiceServer)(nil).GetDeviceConfigState), arg0, arg1)
}

// UpdateBaseConfig mocks base method.
func (m *MockFleetMgrConfigServiceServer) UpdateBaseConfig(arg0 context.Context, arg1 *fmpb.UpdateBaseConfigRequest) (*fmpb.UpdateBaseConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBaseConfig", arg0, arg1)
	ret0, _ := ret[0].(*fmpb.UpdateBaseConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBaseConfig indicates an expected call of UpdateBaseConfig.
func (mr *MockFleetMgrConfigServiceServerMockRecorder) UpdateBaseConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBaseConfig", reflect.TypeOf((*MockFleetMgrConfigServiceServer)(nil).UpdateBaseConfig), arg0, arg1)
}
