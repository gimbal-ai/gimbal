// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/controlplane/logicalpipeline/lppb/v1/lppb.proto

package lppb

import (
	context "context"
	fmt "fmt"
	v1 "gimletlabs.ai/gimlet/src/api/corepb/v1"
	typespb "gimletlabs.ai/gimlet/src/common/typespb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LogicalPipelineInfo struct {
	ID   *typespb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *LogicalPipelineInfo) Reset()      { *m = LogicalPipelineInfo{} }
func (*LogicalPipelineInfo) ProtoMessage() {}
func (*LogicalPipelineInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_88d942c18068ffdb, []int{0}
}
func (m *LogicalPipelineInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogicalPipelineInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogicalPipelineInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogicalPipelineInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalPipelineInfo.Merge(m, src)
}
func (m *LogicalPipelineInfo) XXX_Size() int {
	return m.Size()
}
func (m *LogicalPipelineInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalPipelineInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalPipelineInfo proto.InternalMessageInfo

func (m *LogicalPipelineInfo) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *LogicalPipelineInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListLogicalPipelinesRequest struct {
	OrgID *typespb.UUID `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *ListLogicalPipelinesRequest) Reset()      { *m = ListLogicalPipelinesRequest{} }
func (*ListLogicalPipelinesRequest) ProtoMessage() {}
func (*ListLogicalPipelinesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88d942c18068ffdb, []int{1}
}
func (m *ListLogicalPipelinesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLogicalPipelinesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLogicalPipelinesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLogicalPipelinesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLogicalPipelinesRequest.Merge(m, src)
}
func (m *ListLogicalPipelinesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListLogicalPipelinesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLogicalPipelinesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListLogicalPipelinesRequest proto.InternalMessageInfo

func (m *ListLogicalPipelinesRequest) GetOrgID() *typespb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type ListLogicalPipelinesResponse struct {
	Pipelines []*LogicalPipelineInfo `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
}

func (m *ListLogicalPipelinesResponse) Reset()      { *m = ListLogicalPipelinesResponse{} }
func (*ListLogicalPipelinesResponse) ProtoMessage() {}
func (*ListLogicalPipelinesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88d942c18068ffdb, []int{2}
}
func (m *ListLogicalPipelinesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLogicalPipelinesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLogicalPipelinesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLogicalPipelinesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLogicalPipelinesResponse.Merge(m, src)
}
func (m *ListLogicalPipelinesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListLogicalPipelinesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLogicalPipelinesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListLogicalPipelinesResponse proto.InternalMessageInfo

func (m *ListLogicalPipelinesResponse) GetPipelines() []*LogicalPipelineInfo {
	if m != nil {
		return m.Pipelines
	}
	return nil
}

type GetLogicalPipelineRequest struct {
	ID    *typespb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OrgID *typespb.UUID `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *GetLogicalPipelineRequest) Reset()      { *m = GetLogicalPipelineRequest{} }
func (*GetLogicalPipelineRequest) ProtoMessage() {}
func (*GetLogicalPipelineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88d942c18068ffdb, []int{3}
}
func (m *GetLogicalPipelineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLogicalPipelineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLogicalPipelineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLogicalPipelineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLogicalPipelineRequest.Merge(m, src)
}
func (m *GetLogicalPipelineRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLogicalPipelineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLogicalPipelineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLogicalPipelineRequest proto.InternalMessageInfo

func (m *GetLogicalPipelineRequest) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *GetLogicalPipelineRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetLogicalPipelineRequest) GetOrgID() *typespb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type GetLogicalPipelineResponse struct {
	PipelineInfo    *LogicalPipelineInfo `protobuf:"bytes,2,opt,name=pipeline_info,json=pipelineInfo,proto3" json:"pipeline_info,omitempty"`
	Yaml            string               `protobuf:"bytes,3,opt,name=yaml,proto3" json:"yaml,omitempty"`
	LogicalPipeline *v1.LogicalPipeline  `protobuf:"bytes,4,opt,name=logical_pipeline,json=logicalPipeline,proto3" json:"logical_pipeline,omitempty"`
	EncodedDAG      string               `protobuf:"bytes,5,opt,name=encoded_dag,json=encodedDag,proto3" json:"encoded_dag,omitempty"`
}

func (m *GetLogicalPipelineResponse) Reset()      { *m = GetLogicalPipelineResponse{} }
func (*GetLogicalPipelineResponse) ProtoMessage() {}
func (*GetLogicalPipelineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88d942c18068ffdb, []int{4}
}
func (m *GetLogicalPipelineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLogicalPipelineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLogicalPipelineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLogicalPipelineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLogicalPipelineResponse.Merge(m, src)
}
func (m *GetLogicalPipelineResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLogicalPipelineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLogicalPipelineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLogicalPipelineResponse proto.InternalMessageInfo

func (m *GetLogicalPipelineResponse) GetPipelineInfo() *LogicalPipelineInfo {
	if m != nil {
		return m.PipelineInfo
	}
	return nil
}

func (m *GetLogicalPipelineResponse) GetYaml() string {
	if m != nil {
		return m.Yaml
	}
	return ""
}

func (m *GetLogicalPipelineResponse) GetLogicalPipeline() *v1.LogicalPipeline {
	if m != nil {
		return m.LogicalPipeline
	}
	return nil
}

func (m *GetLogicalPipelineResponse) GetEncodedDAG() string {
	if m != nil {
		return m.EncodedDAG
	}
	return ""
}

type CreateLogicalPipelineRequest struct {
	OrgID *typespb.UUID `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Yaml  string        `protobuf:"bytes,4,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (m *CreateLogicalPipelineRequest) Reset()      { *m = CreateLogicalPipelineRequest{} }
func (*CreateLogicalPipelineRequest) ProtoMessage() {}
func (*CreateLogicalPipelineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88d942c18068ffdb, []int{5}
}
func (m *CreateLogicalPipelineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateLogicalPipelineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateLogicalPipelineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateLogicalPipelineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateLogicalPipelineRequest.Merge(m, src)
}
func (m *CreateLogicalPipelineRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateLogicalPipelineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateLogicalPipelineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateLogicalPipelineRequest proto.InternalMessageInfo

func (m *CreateLogicalPipelineRequest) GetOrgID() *typespb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

func (m *CreateLogicalPipelineRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateLogicalPipelineRequest) GetYaml() string {
	if m != nil {
		return m.Yaml
	}
	return ""
}

type CreateLogicalPipelineResponse struct {
	ID *typespb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CreateLogicalPipelineResponse) Reset()      { *m = CreateLogicalPipelineResponse{} }
func (*CreateLogicalPipelineResponse) ProtoMessage() {}
func (*CreateLogicalPipelineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88d942c18068ffdb, []int{6}
}
func (m *CreateLogicalPipelineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateLogicalPipelineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateLogicalPipelineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateLogicalPipelineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateLogicalPipelineResponse.Merge(m, src)
}
func (m *CreateLogicalPipelineResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateLogicalPipelineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateLogicalPipelineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateLogicalPipelineResponse proto.InternalMessageInfo

func (m *CreateLogicalPipelineResponse) GetID() *typespb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func init() {
	proto.RegisterType((*LogicalPipelineInfo)(nil), "gml.internal.controlplane.logicalpipeline.v1.LogicalPipelineInfo")
	proto.RegisterType((*ListLogicalPipelinesRequest)(nil), "gml.internal.controlplane.logicalpipeline.v1.ListLogicalPipelinesRequest")
	proto.RegisterType((*ListLogicalPipelinesResponse)(nil), "gml.internal.controlplane.logicalpipeline.v1.ListLogicalPipelinesResponse")
	proto.RegisterType((*GetLogicalPipelineRequest)(nil), "gml.internal.controlplane.logicalpipeline.v1.GetLogicalPipelineRequest")
	proto.RegisterType((*GetLogicalPipelineResponse)(nil), "gml.internal.controlplane.logicalpipeline.v1.GetLogicalPipelineResponse")
	proto.RegisterType((*CreateLogicalPipelineRequest)(nil), "gml.internal.controlplane.logicalpipeline.v1.CreateLogicalPipelineRequest")
	proto.RegisterType((*CreateLogicalPipelineResponse)(nil), "gml.internal.controlplane.logicalpipeline.v1.CreateLogicalPipelineResponse")
}

func init() {
	proto.RegisterFile("src/controlplane/logicalpipeline/lppb/v1/lppb.proto", fileDescriptor_88d942c18068ffdb)
}

var fileDescriptor_88d942c18068ffdb = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcf, 0x4f, 0xd4, 0x4e,
	0x1c, 0xed, 0x94, 0x42, 0xd8, 0xe1, 0xfb, 0x15, 0x32, 0xa2, 0x59, 0xab, 0x0c, 0xa4, 0x17, 0x31,
	0x31, 0x6d, 0x80, 0xa3, 0x27, 0xd6, 0x35, 0x50, 0x24, 0x91, 0x54, 0xb9, 0x78, 0x69, 0x66, 0xdb,
	0xa1, 0x99, 0x64, 0xda, 0x19, 0xdb, 0x42, 0xe0, 0xa4, 0x77, 0x2f, 0xfe, 0x13, 0x44, 0x2f, 0x26,
	0xfe, 0x19, 0x1e, 0x39, 0x72, 0x22, 0x6e, 0xf7, 0xe2, 0x91, 0x3f, 0xc1, 0xf4, 0xc7, 0x86, 0x65,
	0xed, 0x9a, 0xdd, 0xb0, 0xa7, 0xf9, 0xfd, 0xde, 0x9b, 0xf7, 0x79, 0x93, 0x81, 0x5b, 0x49, 0xec,
	0x59, 0x9e, 0x88, 0xd2, 0x58, 0x70, 0xc9, 0x49, 0x44, 0x2d, 0x2e, 0x02, 0xe6, 0x11, 0x2e, 0x99,
	0xa4, 0x9c, 0xe5, 0x63, 0x29, 0x3b, 0xd6, 0xc9, 0x46, 0xd1, 0x9a, 0x32, 0x16, 0xa9, 0x40, 0xcf,
	0x83, 0x90, 0x9b, 0x2c, 0x4a, 0x69, 0x1c, 0x11, 0x6e, 0x0e, 0x9e, 0x36, 0x87, 0x4e, 0x9b, 0x27,
	0x1b, 0xfa, 0x72, 0x20, 0x02, 0x51, 0x1c, 0xb4, 0xf2, 0x5e, 0x89, 0xa1, 0xaf, 0x94, 0xc4, 0x61,
	0x28, 0x22, 0x2b, 0x3d, 0x93, 0x34, 0x91, 0x1d, 0xeb, 0xf8, 0x98, 0xf9, 0xd5, 0xb2, 0x91, 0x2f,
	0x13, 0xc9, 0x2c, 0x4f, 0xc4, 0xb4, 0x14, 0x10, 0x0a, 0x9f, 0x72, 0x97, 0x9e, 0x52, 0xaf, 0xdc,
	0x63, 0x38, 0xf0, 0xfe, 0x7e, 0x49, 0x77, 0x50, 0xd1, 0xd9, 0xd1, 0x91, 0x40, 0x4f, 0xa1, 0xca,
	0xfc, 0x26, 0x58, 0x03, 0xeb, 0x0b, 0x9b, 0x8b, 0x66, 0x2e, 0xb5, 0xc0, 0x37, 0x0f, 0x0f, 0xed,
	0x76, 0x6b, 0x2e, 0xbb, 0x5a, 0x55, 0xed, 0xb6, 0xa3, 0x32, 0x1f, 0x21, 0xa8, 0x45, 0x24, 0xa4,
	0x4d, 0x75, 0x0d, 0xac, 0x37, 0x9c, 0xa2, 0x6f, 0x1c, 0xc0, 0xc7, 0xfb, 0x2c, 0x49, 0x87, 0x70,
	0x13, 0x87, 0x7e, 0x38, 0xa6, 0x49, 0x8a, 0x36, 0xe0, 0x9c, 0x88, 0x03, 0x77, 0x34, 0x7e, 0x23,
	0xbb, 0x5a, 0x9d, 0x7d, 0x13, 0x07, 0x76, 0xdb, 0x99, 0x15, 0x71, 0x60, 0xfb, 0xc6, 0x47, 0xf8,
	0xa4, 0x1e, 0x31, 0x91, 0x22, 0x4a, 0x28, 0x72, 0x61, 0xa3, 0xef, 0x56, 0xd2, 0x04, 0x6b, 0x33,
	0xeb, 0x0b, 0x9b, 0xdb, 0xe6, 0x24, 0x06, 0x9b, 0x35, 0x26, 0x38, 0x37, 0x98, 0xc6, 0x67, 0x00,
	0x1f, 0xed, 0xd0, 0x61, 0x01, 0xfd, 0x1b, 0xdd, 0xc5, 0xad, 0x01, 0x3b, 0x66, 0xc6, 0xb5, 0xe3,
	0x5c, 0x85, 0x7a, 0x9d, 0x9a, 0xca, 0x8d, 0x23, 0xf8, 0x7f, 0x5f, 0xb9, 0xcb, 0xa2, 0x23, 0x51,
	0xd0, 0x4d, 0xc5, 0x91, 0xff, 0xe4, 0x60, 0x48, 0x10, 0xd4, 0xce, 0x48, 0xc8, 0x0b, 0xdd, 0x0d,
	0xa7, 0xe8, 0xa3, 0x77, 0x70, 0xa9, 0xc2, 0x72, 0xfb, 0x7b, 0x9b, 0x5a, 0x41, 0xff, 0xec, 0x36,
	0x3d, 0x91, 0xcc, 0xcc, 0x73, 0x59, 0x43, 0xe5, 0x2c, 0xf2, 0xdb, 0x13, 0xc8, 0x82, 0x0b, 0x34,
	0xf2, 0x84, 0x4f, 0x7d, 0xd7, 0x27, 0x41, 0x73, 0x36, 0x27, 0x6c, 0xdd, 0xcb, 0xae, 0x56, 0xe1,
	0xab, 0x72, 0xba, 0xbd, 0xbd, 0xe3, 0xc0, 0x6a, 0x4b, 0x9b, 0x04, 0x7b, 0xda, 0x3c, 0x58, 0x52,
	0xf3, 0xd8, 0xbc, 0x8c, 0x29, 0x49, 0xe9, 0x88, 0xba, 0x4d, 0x9e, 0xc4, 0xda, 0x0a, 0xf6, 0x7d,
	0xd0, 0x6e, 0x7c, 0xd8, 0xd3, 0xe6, 0x67, 0x96, 0x34, 0x63, 0x17, 0xae, 0x8c, 0x10, 0x50, 0x95,
	0x6a, 0xdc, 0xe4, 0x6c, 0x9e, 0x6b, 0xf0, 0xe1, 0x10, 0xc8, 0x5b, 0x1a, 0x9f, 0x30, 0x8f, 0xa2,
	0xef, 0x00, 0x2e, 0xd7, 0xbd, 0x0e, 0x64, 0x4f, 0x58, 0xf0, 0xd1, 0x6f, 0x56, 0xdf, 0x9b, 0x06,
	0x54, 0x75, 0xe7, 0xaf, 0x00, 0xa2, 0xbf, 0xd3, 0x8b, 0x76, 0x26, 0xa3, 0x18, 0xf9, 0x1a, 0xf5,
	0xdd, 0xbb, 0x03, 0x55, 0x4a, 0x7f, 0x00, 0xf8, 0xa0, 0xb6, 0x7e, 0x68, 0x42, 0x3f, 0xfe, 0x95,
	0x42, 0xfd, 0xf5, 0x54, 0xb0, 0x4a, 0xc9, 0xad, 0xd3, 0x8b, 0x2e, 0x56, 0x2e, 0xbb, 0x58, 0xb9,
	0xee, 0x62, 0xf0, 0x29, 0xc3, 0xe0, 0x5b, 0x86, 0xc1, 0xcf, 0x0c, 0x83, 0x8b, 0x0c, 0x83, 0x5f,
	0x19, 0x06, 0xbf, 0x33, 0xac, 0x5c, 0x67, 0x18, 0x7c, 0xe9, 0x61, 0xe5, 0xa2, 0x87, 0x95, 0xcb,
	0x1e, 0x56, 0xde, 0xb7, 0x02, 0x16, 0x72, 0x9a, 0x72, 0xd2, 0x49, 0x4c, 0xc2, 0xac, 0x72, 0x64,
	0x8d, 0xfb, 0xad, 0xbd, 0xc8, 0xdb, 0xce, 0x5c, 0xf1, 0xa1, 0x6c, 0xfd, 0x09, 0x00, 0x00, 0xff,
	0xff, 0xdc, 0x62, 0x2f, 0xad, 0x0e, 0x07, 0x00, 0x00,
}

func (this *LogicalPipelineInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogicalPipelineInfo)
	if !ok {
		that2, ok := that.(LogicalPipelineInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ListLogicalPipelinesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListLogicalPipelinesRequest)
	if !ok {
		that2, ok := that.(ListLogicalPipelinesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *ListLogicalPipelinesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListLogicalPipelinesResponse)
	if !ok {
		that2, ok := that.(ListLogicalPipelinesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pipelines) != len(that1.Pipelines) {
		return false
	}
	for i := range this.Pipelines {
		if !this.Pipelines[i].Equal(that1.Pipelines[i]) {
			return false
		}
	}
	return true
}
func (this *GetLogicalPipelineRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetLogicalPipelineRequest)
	if !ok {
		that2, ok := that.(GetLogicalPipelineRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *GetLogicalPipelineResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetLogicalPipelineResponse)
	if !ok {
		that2, ok := that.(GetLogicalPipelineResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PipelineInfo.Equal(that1.PipelineInfo) {
		return false
	}
	if this.Yaml != that1.Yaml {
		return false
	}
	if !this.LogicalPipeline.Equal(that1.LogicalPipeline) {
		return false
	}
	if this.EncodedDAG != that1.EncodedDAG {
		return false
	}
	return true
}
func (this *CreateLogicalPipelineRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateLogicalPipelineRequest)
	if !ok {
		that2, ok := that.(CreateLogicalPipelineRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Yaml != that1.Yaml {
		return false
	}
	return true
}
func (this *CreateLogicalPipelineResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateLogicalPipelineResponse)
	if !ok {
		that2, ok := that.(CreateLogicalPipelineResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *LogicalPipelineInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&lppb.LogicalPipelineInfo{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListLogicalPipelinesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&lppb.ListLogicalPipelinesRequest{")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListLogicalPipelinesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&lppb.ListLogicalPipelinesResponse{")
	if this.Pipelines != nil {
		s = append(s, "Pipelines: "+fmt.Sprintf("%#v", this.Pipelines)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLogicalPipelineRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&lppb.GetLogicalPipelineRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLogicalPipelineResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&lppb.GetLogicalPipelineResponse{")
	if this.PipelineInfo != nil {
		s = append(s, "PipelineInfo: "+fmt.Sprintf("%#v", this.PipelineInfo)+",\n")
	}
	s = append(s, "Yaml: "+fmt.Sprintf("%#v", this.Yaml)+",\n")
	if this.LogicalPipeline != nil {
		s = append(s, "LogicalPipeline: "+fmt.Sprintf("%#v", this.LogicalPipeline)+",\n")
	}
	s = append(s, "EncodedDAG: "+fmt.Sprintf("%#v", this.EncodedDAG)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateLogicalPipelineRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&lppb.CreateLogicalPipelineRequest{")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Yaml: "+fmt.Sprintf("%#v", this.Yaml)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateLogicalPipelineResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&lppb.CreateLogicalPipelineResponse{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLppb(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogicalPipelineServiceClient is the client API for LogicalPipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogicalPipelineServiceClient interface {
	ListLogicalPipelines(ctx context.Context, in *ListLogicalPipelinesRequest, opts ...grpc.CallOption) (*ListLogicalPipelinesResponse, error)
	GetLogicalPipeline(ctx context.Context, in *GetLogicalPipelineRequest, opts ...grpc.CallOption) (*GetLogicalPipelineResponse, error)
	CreateLogicalPipeline(ctx context.Context, in *CreateLogicalPipelineRequest, opts ...grpc.CallOption) (*CreateLogicalPipelineResponse, error)
}

type logicalPipelineServiceClient struct {
	cc *grpc.ClientConn
}

func NewLogicalPipelineServiceClient(cc *grpc.ClientConn) LogicalPipelineServiceClient {
	return &logicalPipelineServiceClient{cc}
}

func (c *logicalPipelineServiceClient) ListLogicalPipelines(ctx context.Context, in *ListLogicalPipelinesRequest, opts ...grpc.CallOption) (*ListLogicalPipelinesResponse, error) {
	out := new(ListLogicalPipelinesResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.logicalpipeline.v1.LogicalPipelineService/ListLogicalPipelines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicalPipelineServiceClient) GetLogicalPipeline(ctx context.Context, in *GetLogicalPipelineRequest, opts ...grpc.CallOption) (*GetLogicalPipelineResponse, error) {
	out := new(GetLogicalPipelineResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.logicalpipeline.v1.LogicalPipelineService/GetLogicalPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicalPipelineServiceClient) CreateLogicalPipeline(ctx context.Context, in *CreateLogicalPipelineRequest, opts ...grpc.CallOption) (*CreateLogicalPipelineResponse, error) {
	out := new(CreateLogicalPipelineResponse)
	err := c.cc.Invoke(ctx, "/gml.internal.controlplane.logicalpipeline.v1.LogicalPipelineService/CreateLogicalPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogicalPipelineServiceServer is the server API for LogicalPipelineService service.
type LogicalPipelineServiceServer interface {
	ListLogicalPipelines(context.Context, *ListLogicalPipelinesRequest) (*ListLogicalPipelinesResponse, error)
	GetLogicalPipeline(context.Context, *GetLogicalPipelineRequest) (*GetLogicalPipelineResponse, error)
	CreateLogicalPipeline(context.Context, *CreateLogicalPipelineRequest) (*CreateLogicalPipelineResponse, error)
}

// UnimplementedLogicalPipelineServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogicalPipelineServiceServer struct {
}

func (*UnimplementedLogicalPipelineServiceServer) ListLogicalPipelines(ctx context.Context, req *ListLogicalPipelinesRequest) (*ListLogicalPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogicalPipelines not implemented")
}
func (*UnimplementedLogicalPipelineServiceServer) GetLogicalPipeline(ctx context.Context, req *GetLogicalPipelineRequest) (*GetLogicalPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogicalPipeline not implemented")
}
func (*UnimplementedLogicalPipelineServiceServer) CreateLogicalPipeline(ctx context.Context, req *CreateLogicalPipelineRequest) (*CreateLogicalPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogicalPipeline not implemented")
}

func RegisterLogicalPipelineServiceServer(s *grpc.Server, srv LogicalPipelineServiceServer) {
	s.RegisterService(&_LogicalPipelineService_serviceDesc, srv)
}

func _LogicalPipelineService_ListLogicalPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLogicalPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicalPipelineServiceServer).ListLogicalPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.logicalpipeline.v1.LogicalPipelineService/ListLogicalPipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicalPipelineServiceServer).ListLogicalPipelines(ctx, req.(*ListLogicalPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicalPipelineService_GetLogicalPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogicalPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicalPipelineServiceServer).GetLogicalPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.logicalpipeline.v1.LogicalPipelineService/GetLogicalPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicalPipelineServiceServer).GetLogicalPipeline(ctx, req.(*GetLogicalPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicalPipelineService_CreateLogicalPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogicalPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicalPipelineServiceServer).CreateLogicalPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.internal.controlplane.logicalpipeline.v1.LogicalPipelineService/CreateLogicalPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicalPipelineServiceServer).CreateLogicalPipeline(ctx, req.(*CreateLogicalPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogicalPipelineService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gml.internal.controlplane.logicalpipeline.v1.LogicalPipelineService",
	HandlerType: (*LogicalPipelineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLogicalPipelines",
			Handler:    _LogicalPipelineService_ListLogicalPipelines_Handler,
		},
		{
			MethodName: "GetLogicalPipeline",
			Handler:    _LogicalPipelineService_GetLogicalPipeline_Handler,
		},
		{
			MethodName: "CreateLogicalPipeline",
			Handler:    _LogicalPipelineService_CreateLogicalPipeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/controlplane/logicalpipeline/lppb/v1/lppb.proto",
}

func (m *LogicalPipelineInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicalPipelineInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogicalPipelineInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLppb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLppb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListLogicalPipelinesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLogicalPipelinesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListLogicalPipelinesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLppb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListLogicalPipelinesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLogicalPipelinesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListLogicalPipelinesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pipelines) > 0 {
		for iNdEx := len(m.Pipelines) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pipelines[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLppb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetLogicalPipelineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLogicalPipelineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLogicalPipelineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLppb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLppb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLppb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLogicalPipelineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLogicalPipelineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLogicalPipelineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncodedDAG) > 0 {
		i -= len(m.EncodedDAG)
		copy(dAtA[i:], m.EncodedDAG)
		i = encodeVarintLppb(dAtA, i, uint64(len(m.EncodedDAG)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LogicalPipeline != nil {
		{
			size, err := m.LogicalPipeline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLppb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Yaml) > 0 {
		i -= len(m.Yaml)
		copy(dAtA[i:], m.Yaml)
		i = encodeVarintLppb(dAtA, i, uint64(len(m.Yaml)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PipelineInfo != nil {
		{
			size, err := m.PipelineInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLppb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *CreateLogicalPipelineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateLogicalPipelineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateLogicalPipelineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Yaml) > 0 {
		i -= len(m.Yaml)
		copy(dAtA[i:], m.Yaml)
		i = encodeVarintLppb(dAtA, i, uint64(len(m.Yaml)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLppb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLppb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateLogicalPipelineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateLogicalPipelineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateLogicalPipelineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLppb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLppb(dAtA []byte, offset int, v uint64) int {
	offset -= sovLppb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LogicalPipelineInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovLppb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLppb(uint64(l))
	}
	return n
}

func (m *ListLogicalPipelinesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovLppb(uint64(l))
	}
	return n
}

func (m *ListLogicalPipelinesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pipelines) > 0 {
		for _, e := range m.Pipelines {
			l = e.Size()
			n += 1 + l + sovLppb(uint64(l))
		}
	}
	return n
}

func (m *GetLogicalPipelineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovLppb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLppb(uint64(l))
	}
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovLppb(uint64(l))
	}
	return n
}

func (m *GetLogicalPipelineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PipelineInfo != nil {
		l = m.PipelineInfo.Size()
		n += 1 + l + sovLppb(uint64(l))
	}
	l = len(m.Yaml)
	if l > 0 {
		n += 1 + l + sovLppb(uint64(l))
	}
	if m.LogicalPipeline != nil {
		l = m.LogicalPipeline.Size()
		n += 1 + l + sovLppb(uint64(l))
	}
	l = len(m.EncodedDAG)
	if l > 0 {
		n += 1 + l + sovLppb(uint64(l))
	}
	return n
}

func (m *CreateLogicalPipelineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovLppb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLppb(uint64(l))
	}
	l = len(m.Yaml)
	if l > 0 {
		n += 1 + l + sovLppb(uint64(l))
	}
	return n
}

func (m *CreateLogicalPipelineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovLppb(uint64(l))
	}
	return n
}

func sovLppb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLppb(x uint64) (n int) {
	return sovLppb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LogicalPipelineInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogicalPipelineInfo{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListLogicalPipelinesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListLogicalPipelinesRequest{`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListLogicalPipelinesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPipelines := "[]*LogicalPipelineInfo{"
	for _, f := range this.Pipelines {
		repeatedStringForPipelines += strings.Replace(f.String(), "LogicalPipelineInfo", "LogicalPipelineInfo", 1) + ","
	}
	repeatedStringForPipelines += "}"
	s := strings.Join([]string{`&ListLogicalPipelinesResponse{`,
		`Pipelines:` + repeatedStringForPipelines + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLogicalPipelineRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLogicalPipelineRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLogicalPipelineResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLogicalPipelineResponse{`,
		`PipelineInfo:` + strings.Replace(this.PipelineInfo.String(), "LogicalPipelineInfo", "LogicalPipelineInfo", 1) + `,`,
		`Yaml:` + fmt.Sprintf("%v", this.Yaml) + `,`,
		`LogicalPipeline:` + strings.Replace(fmt.Sprintf("%v", this.LogicalPipeline), "LogicalPipeline", "v1.LogicalPipeline", 1) + `,`,
		`EncodedDAG:` + fmt.Sprintf("%v", this.EncodedDAG) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateLogicalPipelineRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateLogicalPipelineRequest{`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "typespb.UUID", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Yaml:` + fmt.Sprintf("%v", this.Yaml) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateLogicalPipelineResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateLogicalPipelineResponse{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "typespb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLppb(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LogicalPipelineInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLppb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicalPipelineInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicalPipelineInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLppb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLppb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLppb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLppb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLppb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLppb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLppb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLppb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLogicalPipelinesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLppb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListLogicalPipelinesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListLogicalPipelinesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLppb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLppb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLppb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &typespb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLppb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLppb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLogicalPipelinesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLppb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListLogicalPipelinesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListLogicalPipelinesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipelines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLppb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLppb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLppb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pipelines = append(m.Pipelines, &LogicalPipelineInfo{})
			if err := m.Pipelines[len(m.Pipelines)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLppb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLppb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLogicalPipelineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLppb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLogicalPipelineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLogicalPipelineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLppb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLppb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLppb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLppb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLppb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLppb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLppb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLppb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLppb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &typespb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLppb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLppb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLogicalPipelineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLppb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLogicalPipelineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLogicalPipelineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PipelineInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLppb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLppb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLppb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PipelineInfo == nil {
				m.PipelineInfo = &LogicalPipelineInfo{}
			}
			if err := m.PipelineInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yaml", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLppb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLppb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLppb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Yaml = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalPipeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLppb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLppb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLppb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogicalPipeline == nil {
				m.LogicalPipeline = &v1.LogicalPipeline{}
			}
			if err := m.LogicalPipeline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedDAG", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLppb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLppb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLppb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedDAG = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLppb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLppb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateLogicalPipelineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLppb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateLogicalPipelineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateLogicalPipelineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLppb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLppb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLppb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &typespb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLppb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLppb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLppb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yaml", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLppb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLppb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLppb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Yaml = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLppb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLppb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateLogicalPipelineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLppb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateLogicalPipelineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateLogicalPipelineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLppb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLppb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLppb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &typespb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLppb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLppb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLppb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLppb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLppb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLppb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLppb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLppb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLppb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLppb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLppb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLppb = fmt.Errorf("proto: unexpected end of group")
)
