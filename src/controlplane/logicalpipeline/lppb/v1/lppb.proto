/*
 * Copyright Â© 2023- Gimlet Labs, Inc.
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Gimlet Labs, Inc. and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Gimlet Labs, Inc. and its suppliers and
 * may be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law. Dissemination
 * of this information or reproduction of this material is strictly
 * forbidden unless prior written permission is obtained from
 * Gimlet Labs, Inc.
 *
 * SPDX-License-Identifier: Proprietary
 */

syntax = "proto3";

package gml.internal.controlplane.logicalpipeline.v1;

option go_package = "gimletlabs.ai/gimlet/src/controlplane/logicalpipeline/lppb/v1;lppb";

import "gogoproto/gogo.proto";
import "src/common/typespb/uuid.proto";
import "src/api/corepb/v1/model_exec.proto";

message LogicalPipelineInfo {
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
  string name = 2;
}

message ListLogicalPipelinesRequest {
  // The orgID of the org to get logical pipelines from.
  gml.types.UUID org_id = 1 [ (gogoproto.customname) = "OrgID" ];
}

message ListLogicalPipelinesResponse {
  repeated LogicalPipelineInfo pipelines = 1;
}

message GetLogicalPipelineRequest {
  // Will use ID if supplied, else will try to lookup by name.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
  string name = 2;
  // Lookup by name requires OrgID to be set.
  gml.types.UUID org_id = 3 [ (gogoproto.customname) = "OrgID" ];
}

message GetLogicalPipelineResponse {
  LogicalPipelineInfo pipeline_info = 2;
  string yaml = 3;
  gml.internal.api.core.v1.LogicalPipeline logical_pipeline = 4;
  string encoded_dag = 5 [ (gogoproto.customname) = "EncodedDAG" ];

  reserved 1;
}

message CreateLogicalPipelineRequest {
  // The orgID of the org to create a logical pipeline in.
  gml.types.UUID org_id = 1 [ (gogoproto.customname) = "OrgID" ];
  // The name of the logical pipeline.
  string name = 2;
  string yaml = 4;

  reserved 3;
}

message CreateLogicalPipelineResponse {
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
}

// LogicalPipelineService manages the registry of pipelines available to deploy.
service LogicalPipelineService {
  rpc ListLogicalPipelines(ListLogicalPipelinesRequest) returns (ListLogicalPipelinesResponse);
  rpc GetLogicalPipeline(GetLogicalPipelineRequest) returns (GetLogicalPipelineResponse);
  rpc CreateLogicalPipeline(CreateLogicalPipelineRequest) returns (CreateLogicalPipelineResponse);
}
