// Code generated by MockGen. DO NOT EDIT.
// Source: mpb.pb.go
//
// Generated by this command:
//
//	mockgen -source=mpb.pb.go -destination=mock/mpb_mock.gen.go ModelService
//
// Package mock_mpb is a generated GoMock package.
package mock_mpb

import (
	context "context"
	reflect "reflect"

	mpb "gimletlabs.ai/gimlet/src/controlplane/model/mpb/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockModelServiceClient is a mock of ModelServiceClient interface.
type MockModelServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceClientMockRecorder
}

// MockModelServiceClientMockRecorder is the mock recorder for MockModelServiceClient.
type MockModelServiceClientMockRecorder struct {
	mock *MockModelServiceClient
}

// NewMockModelServiceClient creates a new mock instance.
func NewMockModelServiceClient(ctrl *gomock.Controller) *MockModelServiceClient {
	mock := &MockModelServiceClient{ctrl: ctrl}
	mock.recorder = &MockModelServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelServiceClient) EXPECT() *MockModelServiceClientMockRecorder {
	return m.recorder
}

// CreateModel mocks base method.
func (m *MockModelServiceClient) CreateModel(ctx context.Context, in *mpb.CreateModelRequest, opts ...grpc.CallOption) (*mpb.CreateModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateModel", varargs...)
	ret0, _ := ret[0].(*mpb.CreateModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockModelServiceClientMockRecorder) CreateModel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockModelServiceClient)(nil).CreateModel), varargs...)
}

// GetModel mocks base method.
func (m *MockModelServiceClient) GetModel(ctx context.Context, in *mpb.GetModelRequest, opts ...grpc.CallOption) (*mpb.GetModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModel", varargs...)
	ret0, _ := ret[0].(*mpb.GetModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel.
func (mr *MockModelServiceClientMockRecorder) GetModel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockModelServiceClient)(nil).GetModel), varargs...)
}

// MockModelServiceServer is a mock of ModelServiceServer interface.
type MockModelServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceServerMockRecorder
}

// MockModelServiceServerMockRecorder is the mock recorder for MockModelServiceServer.
type MockModelServiceServerMockRecorder struct {
	mock *MockModelServiceServer
}

// NewMockModelServiceServer creates a new mock instance.
func NewMockModelServiceServer(ctrl *gomock.Controller) *MockModelServiceServer {
	mock := &MockModelServiceServer{ctrl: ctrl}
	mock.recorder = &MockModelServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelServiceServer) EXPECT() *MockModelServiceServerMockRecorder {
	return m.recorder
}

// CreateModel mocks base method.
func (m *MockModelServiceServer) CreateModel(arg0 context.Context, arg1 *mpb.CreateModelRequest) (*mpb.CreateModelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", arg0, arg1)
	ret0, _ := ret[0].(*mpb.CreateModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockModelServiceServerMockRecorder) CreateModel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockModelServiceServer)(nil).CreateModel), arg0, arg1)
}

// GetModel mocks base method.
func (m *MockModelServiceServer) GetModel(arg0 context.Context, arg1 *mpb.GetModelRequest) (*mpb.GetModelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModel", arg0, arg1)
	ret0, _ := ret[0].(*mpb.GetModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel.
func (mr *MockModelServiceServerMockRecorder) GetModel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockModelServiceServer)(nil).GetModel), arg0, arg1)
}
