/*
 * Copyright Â© 2023- Gimlet Labs, Inc.
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Gimlet Labs, Inc. and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Gimlet Labs, Inc. and its suppliers and
 * may be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law. Dissemination
 * of this information or reproduction of this material is strictly
 * forbidden unless prior written permission is obtained from
 * Gimlet Labs, Inc.
 *
 * SPDX-License-Identifier: Proprietary
 */

syntax = "proto3";

package gml.internal.controlplane.model.v1;

option go_package = "gimletlabs.ai/gimlet/src/controlplane/model/mpb/v1;mpb";

import "gogoproto/gogo.proto";
import "src/common/typespb/uuid.proto";
import "src/api/corepb/v1/model_exec.proto";

message GetModelRequest {
  // Will use ID if supplied, else will try to lookup by name.
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
  string name = 2;
  // Lookup by name requires OrgID to be set.
  gml.types.UUID org_id = 3 [ (gogoproto.customname) = "OrgID" ];
}

message GetModelResponse {
  gml.internal.api.core.v1.ModelInfo model_info = 1;
}

message CreateModelRequest {
  // The orgID of the org to create a model in.
  gml.types.UUID org_id = 1 [ (gogoproto.customname) = "OrgID" ];
  // The name of the model.
  string name = 2;
  gml.internal.api.core.v1.ModelInfo model_info = 3;
}

message CreateModelResponse {
  gml.types.UUID id = 1 [ (gogoproto.customname) = "ID" ];
}

// ModelService manages the registry of models available.
service ModelService {
  rpc GetModel(GetModelRequest) returns (GetModelResponse);
  rpc CreateModel(CreateModelRequest) returns (CreateModelResponse);
}
