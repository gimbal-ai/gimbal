// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/gem/calculators/core/optionspb/bytetrack_calculator_options.proto

package optionspb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ByteTrackCalculatorOptions struct {
	MaxFramesLost *types.Int32Value `protobuf:"bytes,1,opt,name=max_frames_lost,json=maxFramesLost,proto3" json:"max_frames_lost,omitempty"`
	TrackThresh   *types.FloatValue `protobuf:"bytes,10,opt,name=track_thresh,json=trackThresh,proto3" json:"track_thresh,omitempty"`
	HighThresh    *types.FloatValue `protobuf:"bytes,11,opt,name=high_thresh,json=highThresh,proto3" json:"high_thresh,omitempty"`
	MatchThresh   *types.FloatValue `protobuf:"bytes,12,opt,name=match_thresh,json=matchThresh,proto3" json:"match_thresh,omitempty"`
}

func (m *ByteTrackCalculatorOptions) Reset()      { *m = ByteTrackCalculatorOptions{} }
func (*ByteTrackCalculatorOptions) ProtoMessage() {}
func (*ByteTrackCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_915965dca56549a8, []int{0}
}
func (m *ByteTrackCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ByteTrackCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ByteTrackCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ByteTrackCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByteTrackCalculatorOptions.Merge(m, src)
}
func (m *ByteTrackCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *ByteTrackCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ByteTrackCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ByteTrackCalculatorOptions proto.InternalMessageInfo

func (m *ByteTrackCalculatorOptions) GetMaxFramesLost() *types.Int32Value {
	if m != nil {
		return m.MaxFramesLost
	}
	return nil
}

func (m *ByteTrackCalculatorOptions) GetTrackThresh() *types.FloatValue {
	if m != nil {
		return m.TrackThresh
	}
	return nil
}

func (m *ByteTrackCalculatorOptions) GetHighThresh() *types.FloatValue {
	if m != nil {
		return m.HighThresh
	}
	return nil
}

func (m *ByteTrackCalculatorOptions) GetMatchThresh() *types.FloatValue {
	if m != nil {
		return m.MatchThresh
	}
	return nil
}

func init() {
	proto.RegisterType((*ByteTrackCalculatorOptions)(nil), "gml.gem.calculators.core.optionspb.ByteTrackCalculatorOptions")
}

func init() {
	proto.RegisterFile("src/gem/calculators/core/optionspb/bytetrack_calculator_options.proto", fileDescriptor_915965dca56549a8)
}

var fileDescriptor_915965dca56549a8 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xb1, 0x6a, 0xeb, 0x30,
	0x14, 0x86, 0xad, 0x3b, 0xdc, 0x41, 0xce, 0xe5, 0x82, 0xa7, 0x90, 0xc2, 0xa1, 0x64, 0xea, 0x24,
	0x41, 0x32, 0xb6, 0x04, 0x9a, 0xd0, 0x40, 0xa1, 0x50, 0x28, 0xa1, 0x43, 0x17, 0x23, 0x1b, 0x45,
	0x36, 0x95, 0x22, 0x23, 0x29, 0x24, 0xd9, 0xfa, 0x08, 0x7d, 0x83, 0xae, 0x7d, 0x94, 0x8e, 0x19,
	0x33, 0x36, 0xca, 0xd2, 0x31, 0x8f, 0x50, 0x62, 0x27, 0x6e, 0x97, 0x92, 0x6e, 0x12, 0xfa, 0xbf,
	0xef, 0xd7, 0xe1, 0xe0, 0x2b, 0x6b, 0x52, 0x2a, 0xb8, 0xa2, 0x29, 0x93, 0xe9, 0x54, 0x32, 0xa7,
	0x8d, 0xa5, 0xa9, 0x36, 0x9c, 0xea, 0xc2, 0xe5, 0x7a, 0x62, 0x8b, 0x84, 0x26, 0x0b, 0xc7, 0x9d,
	0x61, 0xe9, 0x63, 0xfc, 0x15, 0x8a, 0xf7, 0xcf, 0xa4, 0x30, 0xda, 0xe9, 0xa8, 0x2d, 0x94, 0x24,
	0x82, 0x2b, 0xf2, 0x4d, 0x43, 0x76, 0x1a, 0x52, 0x6b, 0x5a, 0x20, 0xb4, 0x16, 0x92, 0xd3, 0x92,
	0x48, 0xa6, 0x63, 0x3a, 0x33, 0xac, 0x28, 0xb8, 0xd9, 0x3b, 0xda, 0x2f, 0x7f, 0x70, 0xab, 0xbf,
	0x70, 0x7c, 0xb4, 0xab, 0x1a, 0xd4, 0x9e, 0xdb, 0x4a, 0x10, 0x0d, 0xf0, 0x7f, 0xc5, 0xe6, 0xf1,
	0xd8, 0x30, 0xc5, 0x6d, 0x2c, 0xb5, 0x75, 0x4d, 0x74, 0x8a, 0xce, 0xc2, 0xce, 0x09, 0xa9, 0xc4,
	0xe4, 0x20, 0x26, 0xd7, 0x13, 0xd7, 0xed, 0xdc, 0x33, 0x39, 0xe5, 0x77, 0xff, 0x14, 0x9b, 0x0f,
	0x4b, 0xe4, 0x46, 0x5b, 0x17, 0xf5, 0x70, 0xa3, 0x9a, 0xc4, 0x65, 0x86, 0xdb, 0xac, 0x89, 0x7f,
	0x30, 0x0c, 0xa5, 0x66, 0xae, 0x32, 0x84, 0x25, 0x30, 0x2a, 0xf3, 0xd1, 0x05, 0x0e, 0xb3, 0x5c,
	0x64, 0x07, 0x3c, 0x3c, 0x8e, 0xe3, 0x5d, 0x7e, 0x4f, 0xf7, 0x70, 0x43, 0x31, 0x97, 0xd6, 0x78,
	0xe3, 0x17, 0xed, 0x25, 0x50, 0xf1, 0xfd, 0xd9, 0x72, 0x0d, 0xc1, 0x6a, 0x0d, 0xc1, 0x76, 0x0d,
	0xe8, 0xc9, 0x03, 0x7a, 0xf5, 0x80, 0xde, 0x3c, 0xa0, 0xa5, 0x07, 0xf4, 0xee, 0x01, 0x7d, 0x78,
	0x08, 0xb6, 0x1e, 0xd0, 0xf3, 0x06, 0x82, 0xe5, 0x06, 0x82, 0xd5, 0x06, 0x82, 0x87, 0x4b, 0x91,
	0x2b, 0xc9, 0x9d, 0x64, 0x89, 0x25, 0x2c, 0xa7, 0xd5, 0x8d, 0x1e, 0xdf, 0xfb, 0x79, 0x7d, 0x4a,
	0xfe, 0x96, 0x5f, 0xeb, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x2f, 0xc8, 0x6a, 0x2e, 0x02,
	0x00, 0x00,
}

func (this *ByteTrackCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ByteTrackCalculatorOptions)
	if !ok {
		that2, ok := that.(ByteTrackCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxFramesLost.Equal(that1.MaxFramesLost) {
		return false
	}
	if !this.TrackThresh.Equal(that1.TrackThresh) {
		return false
	}
	if !this.HighThresh.Equal(that1.HighThresh) {
		return false
	}
	if !this.MatchThresh.Equal(that1.MatchThresh) {
		return false
	}
	return true
}
func (this *ByteTrackCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&optionspb.ByteTrackCalculatorOptions{")
	if this.MaxFramesLost != nil {
		s = append(s, "MaxFramesLost: "+fmt.Sprintf("%#v", this.MaxFramesLost)+",\n")
	}
	if this.TrackThresh != nil {
		s = append(s, "TrackThresh: "+fmt.Sprintf("%#v", this.TrackThresh)+",\n")
	}
	if this.HighThresh != nil {
		s = append(s, "HighThresh: "+fmt.Sprintf("%#v", this.HighThresh)+",\n")
	}
	if this.MatchThresh != nil {
		s = append(s, "MatchThresh: "+fmt.Sprintf("%#v", this.MatchThresh)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBytetrackCalculatorOptions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ByteTrackCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ByteTrackCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ByteTrackCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MatchThresh != nil {
		{
			size, err := m.MatchThresh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBytetrackCalculatorOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.HighThresh != nil {
		{
			size, err := m.HighThresh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBytetrackCalculatorOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.TrackThresh != nil {
		{
			size, err := m.TrackThresh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBytetrackCalculatorOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.MaxFramesLost != nil {
		{
			size, err := m.MaxFramesLost.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBytetrackCalculatorOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBytetrackCalculatorOptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovBytetrackCalculatorOptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ByteTrackCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxFramesLost != nil {
		l = m.MaxFramesLost.Size()
		n += 1 + l + sovBytetrackCalculatorOptions(uint64(l))
	}
	if m.TrackThresh != nil {
		l = m.TrackThresh.Size()
		n += 1 + l + sovBytetrackCalculatorOptions(uint64(l))
	}
	if m.HighThresh != nil {
		l = m.HighThresh.Size()
		n += 1 + l + sovBytetrackCalculatorOptions(uint64(l))
	}
	if m.MatchThresh != nil {
		l = m.MatchThresh.Size()
		n += 1 + l + sovBytetrackCalculatorOptions(uint64(l))
	}
	return n
}

func sovBytetrackCalculatorOptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBytetrackCalculatorOptions(x uint64) (n int) {
	return sovBytetrackCalculatorOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ByteTrackCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ByteTrackCalculatorOptions{`,
		`MaxFramesLost:` + strings.Replace(fmt.Sprintf("%v", this.MaxFramesLost), "Int32Value", "types.Int32Value", 1) + `,`,
		`TrackThresh:` + strings.Replace(fmt.Sprintf("%v", this.TrackThresh), "FloatValue", "types.FloatValue", 1) + `,`,
		`HighThresh:` + strings.Replace(fmt.Sprintf("%v", this.HighThresh), "FloatValue", "types.FloatValue", 1) + `,`,
		`MatchThresh:` + strings.Replace(fmt.Sprintf("%v", this.MatchThresh), "FloatValue", "types.FloatValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBytetrackCalculatorOptions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ByteTrackCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBytetrackCalculatorOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByteTrackCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByteTrackCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFramesLost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBytetrackCalculatorOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBytetrackCalculatorOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBytetrackCalculatorOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxFramesLost == nil {
				m.MaxFramesLost = &types.Int32Value{}
			}
			if err := m.MaxFramesLost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackThresh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBytetrackCalculatorOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBytetrackCalculatorOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBytetrackCalculatorOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrackThresh == nil {
				m.TrackThresh = &types.FloatValue{}
			}
			if err := m.TrackThresh.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighThresh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBytetrackCalculatorOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBytetrackCalculatorOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBytetrackCalculatorOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HighThresh == nil {
				m.HighThresh = &types.FloatValue{}
			}
			if err := m.HighThresh.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchThresh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBytetrackCalculatorOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBytetrackCalculatorOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBytetrackCalculatorOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatchThresh == nil {
				m.MatchThresh = &types.FloatValue{}
			}
			if err := m.MatchThresh.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBytetrackCalculatorOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBytetrackCalculatorOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBytetrackCalculatorOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBytetrackCalculatorOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBytetrackCalculatorOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBytetrackCalculatorOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBytetrackCalculatorOptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBytetrackCalculatorOptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBytetrackCalculatorOptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBytetrackCalculatorOptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBytetrackCalculatorOptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBytetrackCalculatorOptions = fmt.Errorf("proto: unexpected end of group")
)
