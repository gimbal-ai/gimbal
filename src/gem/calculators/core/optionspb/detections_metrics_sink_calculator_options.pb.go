// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/gem/calculators/core/optionspb/detections_metrics_sink_calculator_options.proto

package optionspb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DetectionsMetricsSinkCalculatorOptions struct {
	MetricAttributes map[string]string `protobuf:"bytes,1,rep,name=metric_attributes,json=metricAttributes,proto3" json:"metric_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DetectionsMetricsSinkCalculatorOptions) Reset() {
	*m = DetectionsMetricsSinkCalculatorOptions{}
}
func (*DetectionsMetricsSinkCalculatorOptions) ProtoMessage() {}
func (*DetectionsMetricsSinkCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_09bb7a46f82529c9, []int{0}
}
func (m *DetectionsMetricsSinkCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetectionsMetricsSinkCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DetectionsMetricsSinkCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DetectionsMetricsSinkCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectionsMetricsSinkCalculatorOptions.Merge(m, src)
}
func (m *DetectionsMetricsSinkCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *DetectionsMetricsSinkCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectionsMetricsSinkCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_DetectionsMetricsSinkCalculatorOptions proto.InternalMessageInfo

func (m *DetectionsMetricsSinkCalculatorOptions) GetMetricAttributes() map[string]string {
	if m != nil {
		return m.MetricAttributes
	}
	return nil
}

func init() {
	proto.RegisterType((*DetectionsMetricsSinkCalculatorOptions)(nil), "gml.gem.calculators.core.optionspb.DetectionsMetricsSinkCalculatorOptions")
	proto.RegisterMapType((map[string]string)(nil), "gml.gem.calculators.core.optionspb.DetectionsMetricsSinkCalculatorOptions.MetricAttributesEntry")
}

func init() {
	proto.RegisterFile("src/gem/calculators/core/optionspb/detections_metrics_sink_calculator_options.proto", fileDescriptor_09bb7a46f82529c9)
}

var fileDescriptor_09bb7a46f82529c9 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x0a, 0x2e, 0x2e, 0x4a, 0xd6,
	0x4f, 0x4f, 0xcd, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0x2a, 0xd6,
	0x4f, 0xce, 0x2f, 0x4a, 0xd5, 0xcf, 0x2f, 0x28, 0xc9, 0xcc, 0xcf, 0x2b, 0x2e, 0x48, 0xd2, 0x4f,
	0x49, 0x2d, 0x49, 0x4d, 0x06, 0x73, 0xe2, 0x73, 0x53, 0x4b, 0x8a, 0x32, 0x93, 0x8b, 0xe3, 0x8b,
	0x33, 0xf3, 0xb2, 0xe3, 0x11, 0x5a, 0xe2, 0xa1, 0x8a, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85,
	0x94, 0xd2, 0x73, 0x73, 0xf4, 0xd2, 0x53, 0x73, 0xf5, 0x90, 0x0c, 0xd5, 0x03, 0x19, 0xaa, 0x07,
	0x37, 0x54, 0xe9, 0x2f, 0x23, 0x97, 0x9a, 0x0b, 0xdc, 0x60, 0x5f, 0x88, 0xb9, 0xc1, 0x99, 0x79,
	0xd9, 0xce, 0x70, 0x3d, 0xfe, 0x10, 0xc5, 0x42, 0xbd, 0x8c, 0x5c, 0x82, 0x10, 0x8b, 0xe3, 0x13,
	0x4b, 0x4a, 0x8a, 0x32, 0x93, 0x4a, 0x4b, 0x52, 0x8b, 0x25, 0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d,
	0x12, 0xf4, 0x08, 0xdb, 0xa5, 0x47, 0x9c, 0x3d, 0x7a, 0x10, 0x49, 0x47, 0xb8, 0x15, 0xae, 0x79,
	0x25, 0x45, 0x95, 0x41, 0x02, 0xb9, 0x68, 0xc2, 0x52, 0xce, 0x5c, 0xa2, 0x58, 0x95, 0x0a, 0x09,
	0x70, 0x31, 0x67, 0xa7, 0x56, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98, 0x42, 0x22,
	0x5c, 0xac, 0x65, 0x89, 0x39, 0xa5, 0xa9, 0x12, 0x4c, 0x60, 0x31, 0x08, 0xc7, 0x8a, 0xc9, 0x82,
	0xd1, 0xa9, 0xfc, 0xc2, 0x43, 0x39, 0x86, 0x1b, 0x0f, 0xe5, 0x18, 0x3e, 0x3c, 0x94, 0x63, 0x6c,
	0x78, 0x24, 0xc7, 0xb8, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31,
	0x3e, 0x78, 0x24, 0xc7, 0xf8, 0xe2, 0x91, 0x1c, 0xc3, 0x87, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb,
	0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x63, 0x7a, 0x66, 0x6e, 0x4e,
	0x6a, 0x49, 0x4e, 0x62, 0x52, 0xb1, 0x5e, 0x62, 0xa6, 0x3e, 0x84, 0xa7, 0x4f, 0x38, 0x0e, 0xad,
	0xe1, 0xac, 0x24, 0x36, 0x70, 0x1c, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xca, 0x36, 0x51,
	0xc4, 0xfa, 0x01, 0x00, 0x00,
}

func (this *DetectionsMetricsSinkCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionsMetricsSinkCalculatorOptions)
	if !ok {
		that2, ok := that.(DetectionsMetricsSinkCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.MetricAttributes) != len(that1.MetricAttributes) {
		return false
	}
	for i := range this.MetricAttributes {
		if this.MetricAttributes[i] != that1.MetricAttributes[i] {
			return false
		}
	}
	return true
}
func (this *DetectionsMetricsSinkCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&optionspb.DetectionsMetricsSinkCalculatorOptions{")
	keysForMetricAttributes := make([]string, 0, len(this.MetricAttributes))
	for k, _ := range this.MetricAttributes {
		keysForMetricAttributes = append(keysForMetricAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetricAttributes)
	mapStringForMetricAttributes := "map[string]string{"
	for _, k := range keysForMetricAttributes {
		mapStringForMetricAttributes += fmt.Sprintf("%#v: %#v,", k, this.MetricAttributes[k])
	}
	mapStringForMetricAttributes += "}"
	if this.MetricAttributes != nil {
		s = append(s, "MetricAttributes: "+mapStringForMetricAttributes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDetectionsMetricsSinkCalculatorOptions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DetectionsMetricsSinkCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetectionsMetricsSinkCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionsMetricsSinkCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetricAttributes) > 0 {
		for k := range m.MetricAttributes {
			v := m.MetricAttributes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintDetectionsMetricsSinkCalculatorOptions(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDetectionsMetricsSinkCalculatorOptions(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDetectionsMetricsSinkCalculatorOptions(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDetectionsMetricsSinkCalculatorOptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovDetectionsMetricsSinkCalculatorOptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DetectionsMetricsSinkCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MetricAttributes) > 0 {
		for k, v := range m.MetricAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDetectionsMetricsSinkCalculatorOptions(uint64(len(k))) + 1 + len(v) + sovDetectionsMetricsSinkCalculatorOptions(uint64(len(v)))
			n += mapEntrySize + 1 + sovDetectionsMetricsSinkCalculatorOptions(uint64(mapEntrySize))
		}
	}
	return n
}

func sovDetectionsMetricsSinkCalculatorOptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDetectionsMetricsSinkCalculatorOptions(x uint64) (n int) {
	return sovDetectionsMetricsSinkCalculatorOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DetectionsMetricsSinkCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	keysForMetricAttributes := make([]string, 0, len(this.MetricAttributes))
	for k, _ := range this.MetricAttributes {
		keysForMetricAttributes = append(keysForMetricAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetricAttributes)
	mapStringForMetricAttributes := "map[string]string{"
	for _, k := range keysForMetricAttributes {
		mapStringForMetricAttributes += fmt.Sprintf("%v: %v,", k, this.MetricAttributes[k])
	}
	mapStringForMetricAttributes += "}"
	s := strings.Join([]string{`&DetectionsMetricsSinkCalculatorOptions{`,
		`MetricAttributes:` + mapStringForMetricAttributes + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDetectionsMetricsSinkCalculatorOptions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DetectionsMetricsSinkCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDetectionsMetricsSinkCalculatorOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetectionsMetricsSinkCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetectionsMetricsSinkCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetectionsMetricsSinkCalculatorOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDetectionsMetricsSinkCalculatorOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDetectionsMetricsSinkCalculatorOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetricAttributes == nil {
				m.MetricAttributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDetectionsMetricsSinkCalculatorOptions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDetectionsMetricsSinkCalculatorOptions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDetectionsMetricsSinkCalculatorOptions
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDetectionsMetricsSinkCalculatorOptions
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDetectionsMetricsSinkCalculatorOptions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDetectionsMetricsSinkCalculatorOptions
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthDetectionsMetricsSinkCalculatorOptions
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDetectionsMetricsSinkCalculatorOptions(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDetectionsMetricsSinkCalculatorOptions
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MetricAttributes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDetectionsMetricsSinkCalculatorOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDetectionsMetricsSinkCalculatorOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDetectionsMetricsSinkCalculatorOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDetectionsMetricsSinkCalculatorOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDetectionsMetricsSinkCalculatorOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDetectionsMetricsSinkCalculatorOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDetectionsMetricsSinkCalculatorOptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDetectionsMetricsSinkCalculatorOptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDetectionsMetricsSinkCalculatorOptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDetectionsMetricsSinkCalculatorOptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDetectionsMetricsSinkCalculatorOptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDetectionsMetricsSinkCalculatorOptions = fmt.Errorf("proto: unexpected end of group")
)
