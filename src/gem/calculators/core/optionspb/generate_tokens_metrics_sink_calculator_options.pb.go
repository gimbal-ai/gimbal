// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/gem/calculators/core/optionspb/generate_tokens_metrics_sink_calculator_options.proto

package optionspb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GenerateTokensMetricsSinkCalculatorOptions struct {
	MetricAttributes map[string]string `protobuf:"bytes,1,rep,name=metric_attributes,json=metricAttributes,proto3" json:"metric_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GenerateTokensMetricsSinkCalculatorOptions) Reset() {
	*m = GenerateTokensMetricsSinkCalculatorOptions{}
}
func (*GenerateTokensMetricsSinkCalculatorOptions) ProtoMessage() {}
func (*GenerateTokensMetricsSinkCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6cb70ee50f084e5, []int{0}
}
func (m *GenerateTokensMetricsSinkCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateTokensMetricsSinkCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateTokensMetricsSinkCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateTokensMetricsSinkCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateTokensMetricsSinkCalculatorOptions.Merge(m, src)
}
func (m *GenerateTokensMetricsSinkCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *GenerateTokensMetricsSinkCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateTokensMetricsSinkCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateTokensMetricsSinkCalculatorOptions proto.InternalMessageInfo

func (m *GenerateTokensMetricsSinkCalculatorOptions) GetMetricAttributes() map[string]string {
	if m != nil {
		return m.MetricAttributes
	}
	return nil
}

func init() {
	proto.RegisterType((*GenerateTokensMetricsSinkCalculatorOptions)(nil), "gml.gem.calculators.core.optionspb.GenerateTokensMetricsSinkCalculatorOptions")
	proto.RegisterMapType((map[string]string)(nil), "gml.gem.calculators.core.optionspb.GenerateTokensMetricsSinkCalculatorOptions.MetricAttributesEntry")
}

func init() {
	proto.RegisterFile("src/gem/calculators/core/optionspb/generate_tokens_metrics_sink_calculator_options.proto", fileDescriptor_f6cb70ee50f084e5)
}

var fileDescriptor_f6cb70ee50f084e5 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xbf, 0x4a, 0x03, 0x41,
	0x10, 0xc6, 0x6f, 0x12, 0x14, 0x3c, 0x9b, 0x78, 0x28, 0x04, 0x8b, 0x21, 0xa4, 0x0a, 0x16, 0xbb,
	0xa0, 0x8d, 0x68, 0x15, 0x83, 0x58, 0x89, 0x10, 0x2d, 0xc4, 0xe6, 0xd8, 0x3b, 0x87, 0x63, 0xb9,
	0x3f, 0x1b, 0x76, 0x37, 0x4a, 0x3a, 0x1b, 0x7b, 0x7d, 0x0b, 0x1f, 0xc5, 0x32, 0x65, 0x4a, 0xb3,
	0x69, 0x2c, 0xf3, 0x08, 0x92, 0x5c, 0x38, 0x45, 0x84, 0xd8, 0xcd, 0xcc, 0xee, 0xf7, 0xfb, 0x15,
	0x9f, 0x7f, 0x6b, 0x74, 0xcc, 0x13, 0xca, 0x79, 0x2c, 0xb2, 0x78, 0x98, 0x09, 0xab, 0xb4, 0xe1,
	0xb1, 0xd2, 0xc4, 0xd5, 0xc0, 0x4a, 0x55, 0x98, 0x41, 0xc4, 0x13, 0x2a, 0x48, 0x0b, 0x4b, 0xa1,
	0x55, 0x29, 0x15, 0x26, 0xcc, 0xc9, 0x6a, 0x19, 0x9b, 0xd0, 0xc8, 0x22, 0x0d, 0xbf, 0x73, 0xe1,
	0x2a, 0xc1, 0x06, 0x5a, 0x59, 0x15, 0xb4, 0x93, 0x3c, 0x63, 0x09, 0xe5, 0xec, 0x07, 0x99, 0x2d,
	0xc8, 0xac, 0x22, 0xb7, 0x9f, 0x6b, 0xfe, 0xc1, 0xc5, 0x8a, 0x7e, 0xb3, 0x84, 0x5f, 0x96, 0xec,
	0x6b, 0x59, 0xa4, 0xbd, 0x2a, 0x77, 0x55, 0x06, 0x82, 0x57, 0xf0, 0x77, 0x4a, 0x79, 0x28, 0xac,
	0xd5, 0x32, 0x1a, 0x5a, 0x32, 0x4d, 0x68, 0xd5, 0x3b, 0xdb, 0x87, 0xf7, 0x6c, 0xbd, 0x8f, 0xfd,
	0xdf, 0xc5, 0xca, 0xc7, 0x6e, 0xa5, 0x39, 0x2f, 0xac, 0x1e, 0xf5, 0x1b, 0xf9, 0xaf, 0xf3, 0x7e,
	0xcf, 0xdf, 0xfb, 0xf3, 0x6b, 0xd0, 0xf0, 0xeb, 0x29, 0x8d, 0x9a, 0xd0, 0x82, 0xce, 0x56, 0x7f,
	0x31, 0x06, 0xbb, 0xfe, 0xc6, 0x83, 0xc8, 0x86, 0xd4, 0xac, 0x2d, 0x6f, 0xe5, 0x72, 0x52, 0x3b,
	0x86, 0xb3, 0xc7, 0xf1, 0x14, 0xbd, 0xc9, 0x14, 0xbd, 0xf9, 0x14, 0xe1, 0xc9, 0x21, 0xbc, 0x39,
	0x84, 0x77, 0x87, 0x30, 0x76, 0x08, 0x1f, 0x0e, 0xe1, 0xd3, 0xa1, 0x37, 0x77, 0x08, 0x2f, 0x33,
	0xf4, 0xc6, 0x33, 0xf4, 0x26, 0x33, 0xf4, 0xee, 0xba, 0x89, 0xcc, 0x33, 0xb2, 0x99, 0x88, 0x0c,
	0x13, 0x92, 0x97, 0x1b, 0x5f, 0x5f, 0xe8, 0x69, 0x35, 0x45, 0x9b, 0xcb, 0xae, 0x8e, 0xbe, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x50, 0xe8, 0xaa, 0x04, 0x07, 0x02, 0x00, 0x00,
}

func (this *GenerateTokensMetricsSinkCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateTokensMetricsSinkCalculatorOptions)
	if !ok {
		that2, ok := that.(GenerateTokensMetricsSinkCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.MetricAttributes) != len(that1.MetricAttributes) {
		return false
	}
	for i := range this.MetricAttributes {
		if this.MetricAttributes[i] != that1.MetricAttributes[i] {
			return false
		}
	}
	return true
}
func (this *GenerateTokensMetricsSinkCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&optionspb.GenerateTokensMetricsSinkCalculatorOptions{")
	keysForMetricAttributes := make([]string, 0, len(this.MetricAttributes))
	for k, _ := range this.MetricAttributes {
		keysForMetricAttributes = append(keysForMetricAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetricAttributes)
	mapStringForMetricAttributes := "map[string]string{"
	for _, k := range keysForMetricAttributes {
		mapStringForMetricAttributes += fmt.Sprintf("%#v: %#v,", k, this.MetricAttributes[k])
	}
	mapStringForMetricAttributes += "}"
	if this.MetricAttributes != nil {
		s = append(s, "MetricAttributes: "+mapStringForMetricAttributes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGenerateTokensMetricsSinkCalculatorOptions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GenerateTokensMetricsSinkCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateTokensMetricsSinkCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateTokensMetricsSinkCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetricAttributes) > 0 {
		for k := range m.MetricAttributes {
			v := m.MetricAttributes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerateTokensMetricsSinkCalculatorOptions(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenerateTokensMetricsSinkCalculatorOptions(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerateTokensMetricsSinkCalculatorOptions(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenerateTokensMetricsSinkCalculatorOptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerateTokensMetricsSinkCalculatorOptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenerateTokensMetricsSinkCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MetricAttributes) > 0 {
		for k, v := range m.MetricAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerateTokensMetricsSinkCalculatorOptions(uint64(len(k))) + 1 + len(v) + sovGenerateTokensMetricsSinkCalculatorOptions(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerateTokensMetricsSinkCalculatorOptions(uint64(mapEntrySize))
		}
	}
	return n
}

func sovGenerateTokensMetricsSinkCalculatorOptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerateTokensMetricsSinkCalculatorOptions(x uint64) (n int) {
	return sovGenerateTokensMetricsSinkCalculatorOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GenerateTokensMetricsSinkCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	keysForMetricAttributes := make([]string, 0, len(this.MetricAttributes))
	for k, _ := range this.MetricAttributes {
		keysForMetricAttributes = append(keysForMetricAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetricAttributes)
	mapStringForMetricAttributes := "map[string]string{"
	for _, k := range keysForMetricAttributes {
		mapStringForMetricAttributes += fmt.Sprintf("%v: %v,", k, this.MetricAttributes[k])
	}
	mapStringForMetricAttributes += "}"
	s := strings.Join([]string{`&GenerateTokensMetricsSinkCalculatorOptions{`,
		`MetricAttributes:` + mapStringForMetricAttributes + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerateTokensMetricsSinkCalculatorOptions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GenerateTokensMetricsSinkCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerateTokensMetricsSinkCalculatorOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateTokensMetricsSinkCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateTokensMetricsSinkCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerateTokensMetricsSinkCalculatorOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerateTokensMetricsSinkCalculatorOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerateTokensMetricsSinkCalculatorOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetricAttributes == nil {
				m.MetricAttributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerateTokensMetricsSinkCalculatorOptions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerateTokensMetricsSinkCalculatorOptions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerateTokensMetricsSinkCalculatorOptions
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerateTokensMetricsSinkCalculatorOptions
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerateTokensMetricsSinkCalculatorOptions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerateTokensMetricsSinkCalculatorOptions
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerateTokensMetricsSinkCalculatorOptions
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerateTokensMetricsSinkCalculatorOptions(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerateTokensMetricsSinkCalculatorOptions
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MetricAttributes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerateTokensMetricsSinkCalculatorOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerateTokensMetricsSinkCalculatorOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerateTokensMetricsSinkCalculatorOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerateTokensMetricsSinkCalculatorOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerateTokensMetricsSinkCalculatorOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerateTokensMetricsSinkCalculatorOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerateTokensMetricsSinkCalculatorOptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerateTokensMetricsSinkCalculatorOptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerateTokensMetricsSinkCalculatorOptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerateTokensMetricsSinkCalculatorOptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerateTokensMetricsSinkCalculatorOptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerateTokensMetricsSinkCalculatorOptions = fmt.Errorf("proto: unexpected end of group")
)
