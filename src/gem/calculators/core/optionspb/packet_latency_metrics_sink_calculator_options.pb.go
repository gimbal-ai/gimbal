// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/gem/calculators/core/optionspb/packet_latency_metrics_sink_calculator_options.proto

package optionspb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PacketLatencyMetricsSinkCalculatorOptions struct {
	Name             string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MetricAttributes map[string]string `protobuf:"bytes,2,rep,name=metric_attributes,json=metricAttributes,proto3" json:"metric_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PacketLatencyMetricsSinkCalculatorOptions) Reset() {
	*m = PacketLatencyMetricsSinkCalculatorOptions{}
}
func (*PacketLatencyMetricsSinkCalculatorOptions) ProtoMessage() {}
func (*PacketLatencyMetricsSinkCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fadef9e8d59af86, []int{0}
}
func (m *PacketLatencyMetricsSinkCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketLatencyMetricsSinkCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketLatencyMetricsSinkCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketLatencyMetricsSinkCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketLatencyMetricsSinkCalculatorOptions.Merge(m, src)
}
func (m *PacketLatencyMetricsSinkCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *PacketLatencyMetricsSinkCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketLatencyMetricsSinkCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PacketLatencyMetricsSinkCalculatorOptions proto.InternalMessageInfo

func (m *PacketLatencyMetricsSinkCalculatorOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PacketLatencyMetricsSinkCalculatorOptions) GetMetricAttributes() map[string]string {
	if m != nil {
		return m.MetricAttributes
	}
	return nil
}

func init() {
	proto.RegisterType((*PacketLatencyMetricsSinkCalculatorOptions)(nil), "gml.gem.calculators.core.optionspb.PacketLatencyMetricsSinkCalculatorOptions")
	proto.RegisterMapType((map[string]string)(nil), "gml.gem.calculators.core.optionspb.PacketLatencyMetricsSinkCalculatorOptions.MetricAttributesEntry")
}

func init() {
	proto.RegisterFile("src/gem/calculators/core/optionspb/packet_latency_metrics_sink_calculator_options.proto", fileDescriptor_1fadef9e8d59af86)
}

var fileDescriptor_1fadef9e8d59af86 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x3f, 0x4b, 0x03, 0x31,
	0x18, 0xc6, 0x2f, 0x57, 0x15, 0x8c, 0x4b, 0x3d, 0x14, 0x8a, 0x43, 0x28, 0x9d, 0xea, 0x92, 0x80,
	0x2e, 0xa2, 0x53, 0x2d, 0x6e, 0x8a, 0x52, 0x07, 0xc1, 0xe5, 0xc8, 0x85, 0x70, 0x84, 0x4b, 0xee,
	0x8e, 0x24, 0x55, 0xba, 0xf9, 0x11, 0xba, 0xf9, 0x15, 0xfc, 0x28, 0x8e, 0x1d, 0x3b, 0xda, 0xdc,
	0xe2, 0xd8, 0x8f, 0x20, 0xbd, 0x94, 0x53, 0x44, 0xa8, 0xdb, 0xf3, 0xfe, 0x79, 0x7e, 0xef, 0x03,
	0x2f, 0x7c, 0x30, 0x9a, 0x91, 0x94, 0x2b, 0xc2, 0xa8, 0x64, 0x63, 0x49, 0x6d, 0xa1, 0x0d, 0x61,
	0x85, 0xe6, 0xa4, 0x28, 0xad, 0x28, 0x72, 0x53, 0x26, 0xa4, 0xa4, 0x2c, 0xe3, 0x36, 0x96, 0xd4,
	0xf2, 0x9c, 0x4d, 0x62, 0xc5, 0xad, 0x16, 0xcc, 0xc4, 0x46, 0xe4, 0x59, 0xfc, 0x6d, 0x8b, 0xd7,
	0x06, 0x5c, 0xea, 0xc2, 0x16, 0x51, 0x2f, 0x55, 0x12, 0xa7, 0x5c, 0xe1, 0x1f, 0x60, 0xbc, 0x02,
	0xe3, 0x06, 0xdc, 0x7b, 0x0d, 0xe1, 0xf1, 0x5d, 0x0d, 0xbf, 0xf6, 0xec, 0x1b, 0x8f, 0xbe, 0x17,
	0x79, 0x36, 0x6c, 0x6c, 0xb7, 0x7e, 0x3f, 0x8a, 0xe0, 0x56, 0x4e, 0x15, 0xef, 0x80, 0x2e, 0xe8,
	0xef, 0x8e, 0x6a, 0x1d, 0x4d, 0x01, 0xdc, 0xf7, 0x79, 0x62, 0x6a, 0xad, 0x16, 0xc9, 0xd8, 0x72,
	0xd3, 0x09, 0xbb, 0xad, 0xfe, 0xde, 0x09, 0xc3, 0x9b, 0x23, 0xe0, 0x7f, 0x9f, 0xc7, 0x7e, 0x38,
	0x68, 0xae, 0x5c, 0xe5, 0x56, 0x4f, 0x46, 0x6d, 0xf5, 0xab, 0x7d, 0x34, 0x84, 0x87, 0x7f, 0xae,
	0x46, 0x6d, 0xd8, 0xca, 0xf8, 0x64, 0x1d, 0x7f, 0x25, 0xa3, 0x03, 0xb8, 0xfd, 0x44, 0xe5, 0x98,
	0x77, 0xc2, 0xba, 0xe7, 0x8b, 0xf3, 0xf0, 0x0c, 0x5c, 0x3e, 0xcf, 0x16, 0x28, 0x98, 0x2f, 0x50,
	0xb0, 0x5c, 0x20, 0xf0, 0xe2, 0x10, 0x78, 0x73, 0x08, 0xbc, 0x3b, 0x04, 0x66, 0x0e, 0x81, 0x0f,
	0x87, 0xc0, 0xa7, 0x43, 0xc1, 0xd2, 0x21, 0x30, 0xad, 0x50, 0x30, 0xab, 0x50, 0x30, 0xaf, 0x50,
	0xf0, 0x38, 0x48, 0x85, 0x92, 0xdc, 0x4a, 0x9a, 0x18, 0x4c, 0x05, 0xf1, 0x15, 0xd9, 0xfc, 0xe1,
	0x8b, 0x46, 0x25, 0x3b, 0xf5, 0xf7, 0x4e, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xad, 0xc0, 0x1b,
	0x26, 0x18, 0x02, 0x00, 0x00,
}

func (this *PacketLatencyMetricsSinkCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PacketLatencyMetricsSinkCalculatorOptions)
	if !ok {
		that2, ok := that.(PacketLatencyMetricsSinkCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.MetricAttributes) != len(that1.MetricAttributes) {
		return false
	}
	for i := range this.MetricAttributes {
		if this.MetricAttributes[i] != that1.MetricAttributes[i] {
			return false
		}
	}
	return true
}
func (this *PacketLatencyMetricsSinkCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&optionspb.PacketLatencyMetricsSinkCalculatorOptions{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	keysForMetricAttributes := make([]string, 0, len(this.MetricAttributes))
	for k, _ := range this.MetricAttributes {
		keysForMetricAttributes = append(keysForMetricAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetricAttributes)
	mapStringForMetricAttributes := "map[string]string{"
	for _, k := range keysForMetricAttributes {
		mapStringForMetricAttributes += fmt.Sprintf("%#v: %#v,", k, this.MetricAttributes[k])
	}
	mapStringForMetricAttributes += "}"
	if this.MetricAttributes != nil {
		s = append(s, "MetricAttributes: "+mapStringForMetricAttributes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPacketLatencyMetricsSinkCalculatorOptions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PacketLatencyMetricsSinkCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketLatencyMetricsSinkCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketLatencyMetricsSinkCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetricAttributes) > 0 {
		for k := range m.MetricAttributes {
			v := m.MetricAttributes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPacketLatencyMetricsSinkCalculatorOptions(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPacketLatencyMetricsSinkCalculatorOptions(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPacketLatencyMetricsSinkCalculatorOptions(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPacketLatencyMetricsSinkCalculatorOptions(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacketLatencyMetricsSinkCalculatorOptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacketLatencyMetricsSinkCalculatorOptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PacketLatencyMetricsSinkCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPacketLatencyMetricsSinkCalculatorOptions(uint64(l))
	}
	if len(m.MetricAttributes) > 0 {
		for k, v := range m.MetricAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPacketLatencyMetricsSinkCalculatorOptions(uint64(len(k))) + 1 + len(v) + sovPacketLatencyMetricsSinkCalculatorOptions(uint64(len(v)))
			n += mapEntrySize + 1 + sovPacketLatencyMetricsSinkCalculatorOptions(uint64(mapEntrySize))
		}
	}
	return n
}

func sovPacketLatencyMetricsSinkCalculatorOptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacketLatencyMetricsSinkCalculatorOptions(x uint64) (n int) {
	return sovPacketLatencyMetricsSinkCalculatorOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PacketLatencyMetricsSinkCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	keysForMetricAttributes := make([]string, 0, len(this.MetricAttributes))
	for k, _ := range this.MetricAttributes {
		keysForMetricAttributes = append(keysForMetricAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetricAttributes)
	mapStringForMetricAttributes := "map[string]string{"
	for _, k := range keysForMetricAttributes {
		mapStringForMetricAttributes += fmt.Sprintf("%v: %v,", k, this.MetricAttributes[k])
	}
	mapStringForMetricAttributes += "}"
	s := strings.Join([]string{`&PacketLatencyMetricsSinkCalculatorOptions{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`MetricAttributes:` + mapStringForMetricAttributes + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPacketLatencyMetricsSinkCalculatorOptions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PacketLatencyMetricsSinkCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketLatencyMetricsSinkCalculatorOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketLatencyMetricsSinkCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketLatencyMetricsSinkCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketLatencyMetricsSinkCalculatorOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacketLatencyMetricsSinkCalculatorOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketLatencyMetricsSinkCalculatorOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketLatencyMetricsSinkCalculatorOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketLatencyMetricsSinkCalculatorOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketLatencyMetricsSinkCalculatorOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetricAttributes == nil {
				m.MetricAttributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPacketLatencyMetricsSinkCalculatorOptions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPacketLatencyMetricsSinkCalculatorOptions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPacketLatencyMetricsSinkCalculatorOptions
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPacketLatencyMetricsSinkCalculatorOptions
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPacketLatencyMetricsSinkCalculatorOptions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPacketLatencyMetricsSinkCalculatorOptions
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPacketLatencyMetricsSinkCalculatorOptions
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPacketLatencyMetricsSinkCalculatorOptions(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPacketLatencyMetricsSinkCalculatorOptions
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MetricAttributes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketLatencyMetricsSinkCalculatorOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacketLatencyMetricsSinkCalculatorOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacketLatencyMetricsSinkCalculatorOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacketLatencyMetricsSinkCalculatorOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketLatencyMetricsSinkCalculatorOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketLatencyMetricsSinkCalculatorOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacketLatencyMetricsSinkCalculatorOptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacketLatencyMetricsSinkCalculatorOptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacketLatencyMetricsSinkCalculatorOptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacketLatencyMetricsSinkCalculatorOptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacketLatencyMetricsSinkCalculatorOptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacketLatencyMetricsSinkCalculatorOptions = fmt.Errorf("proto: unexpected end of group")
)
