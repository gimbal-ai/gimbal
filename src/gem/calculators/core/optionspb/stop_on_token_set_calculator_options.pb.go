// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/gem/calculators/core/optionspb/stop_on_token_set_calculator_options.proto

package optionspb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StopOnTokenSetCalculatorOptions struct {
	MaxTokensBeforeEos int64   `protobuf:"varint,1,opt,name=max_tokens_before_eos,json=maxTokensBeforeEos,proto3" json:"max_tokens_before_eos,omitempty"`
	EosTokens          []int64 `protobuf:"varint,2,rep,packed,name=eos_tokens,json=eosTokens,proto3" json:"eos_tokens,omitempty"`
}

func (m *StopOnTokenSetCalculatorOptions) Reset()      { *m = StopOnTokenSetCalculatorOptions{} }
func (*StopOnTokenSetCalculatorOptions) ProtoMessage() {}
func (*StopOnTokenSetCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_720dedb2c2aebbcd, []int{0}
}
func (m *StopOnTokenSetCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopOnTokenSetCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopOnTokenSetCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopOnTokenSetCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopOnTokenSetCalculatorOptions.Merge(m, src)
}
func (m *StopOnTokenSetCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *StopOnTokenSetCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_StopOnTokenSetCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_StopOnTokenSetCalculatorOptions proto.InternalMessageInfo

func (m *StopOnTokenSetCalculatorOptions) GetMaxTokensBeforeEos() int64 {
	if m != nil {
		return m.MaxTokensBeforeEos
	}
	return 0
}

func (m *StopOnTokenSetCalculatorOptions) GetEosTokens() []int64 {
	if m != nil {
		return m.EosTokens
	}
	return nil
}

func init() {
	proto.RegisterType((*StopOnTokenSetCalculatorOptions)(nil), "gml.gem.calculators.core.optionspb.StopOnTokenSetCalculatorOptions")
}

func init() {
	proto.RegisterFile("src/gem/calculators/core/optionspb/stop_on_token_set_calculator_options.proto", fileDescriptor_720dedb2c2aebbcd)
}

var fileDescriptor_720dedb2c2aebbcd = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xb1, 0x4a, 0xc4, 0x40,
	0x10, 0x86, 0x77, 0x3d, 0x10, 0x4c, 0x19, 0x10, 0xae, 0x71, 0x3c, 0xae, 0xba, 0x6a, 0x17, 0xb1,
	0xb4, 0x52, 0xb1, 0x94, 0x83, 0x3b, 0x2b, 0x9b, 0x65, 0x13, 0xc6, 0x70, 0x98, 0xcd, 0x84, 0xcc,
	0x8a, 0x57, 0xfa, 0x08, 0x3e, 0x86, 0x8f, 0x62, 0x99, 0xf2, 0x4a, 0xb3, 0x69, 0x2c, 0xef, 0x11,
	0xe4, 0x92, 0x10, 0xed, 0xec, 0x66, 0x98, 0xef, 0xff, 0x06, 0xfe, 0xe8, 0x9e, 0xab, 0x54, 0x67,
	0xe8, 0x74, 0x6a, 0xf3, 0xf4, 0x25, 0xb7, 0x9e, 0x2a, 0xd6, 0x29, 0x55, 0xa8, 0xa9, 0xf4, 0x1b,
	0x2a, 0xb8, 0x4c, 0x34, 0x7b, 0x2a, 0x0d, 0x15, 0xc6, 0xd3, 0x33, 0x16, 0x86, 0xd1, 0x9b, 0x5f,
	0xd8, 0x0c, 0x98, 0x2a, 0x2b, 0xf2, 0x14, 0xcf, 0x33, 0x97, 0xab, 0x0c, 0x9d, 0xfa, 0xa3, 0x53,
	0x07, 0x9d, 0x1a, 0x75, 0x73, 0x8e, 0xce, 0xd7, 0x9e, 0xca, 0x65, 0xf1, 0x70, 0xf0, 0xad, 0xd1,
	0xdf, 0x8e, 0xec, 0xb2, 0x87, 0xe2, 0x8b, 0xe8, 0xd4, 0xd9, 0x6d, 0xff, 0x90, 0x4d, 0x82, 0x4f,
	0x54, 0xa1, 0x41, 0xe2, 0xa9, 0x9c, 0xc9, 0xc5, 0x64, 0x15, 0x3b, 0xbb, 0xed, 0xc2, 0x7c, 0xd3,
	0x9d, 0xee, 0x88, 0xe3, 0xb3, 0x28, 0x42, 0xe2, 0x21, 0x32, 0x3d, 0x9a, 0x4d, 0x16, 0x93, 0xd5,
	0x09, 0x12, 0x0f, 0xdc, 0x6b, 0xdd, 0x80, 0xd8, 0x35, 0x20, 0xf6, 0x0d, 0xc8, 0xb7, 0x00, 0xf2,
	0x23, 0x80, 0xfc, 0x0c, 0x20, 0xeb, 0x00, 0xf2, 0x2b, 0x80, 0xfc, 0x0e, 0x20, 0xf6, 0x01, 0xe4,
	0x7b, 0x0b, 0xa2, 0x6e, 0x41, 0xec, 0x5a, 0x10, 0x8f, 0xd7, 0xd9, 0xc6, 0xe5, 0xe8, 0x73, 0x9b,
	0xb0, 0xb2, 0x1b, 0xdd, 0x6f, 0xfa, 0xff, 0xca, 0xae, 0xc6, 0x29, 0x39, 0xee, 0x8a, 0xb9, 0xfc,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x70, 0x18, 0x60, 0xb8, 0x69, 0x01, 0x00, 0x00,
}

func (this *StopOnTokenSetCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StopOnTokenSetCalculatorOptions)
	if !ok {
		that2, ok := that.(StopOnTokenSetCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxTokensBeforeEos != that1.MaxTokensBeforeEos {
		return false
	}
	if len(this.EosTokens) != len(that1.EosTokens) {
		return false
	}
	for i := range this.EosTokens {
		if this.EosTokens[i] != that1.EosTokens[i] {
			return false
		}
	}
	return true
}
func (this *StopOnTokenSetCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&optionspb.StopOnTokenSetCalculatorOptions{")
	s = append(s, "MaxTokensBeforeEos: "+fmt.Sprintf("%#v", this.MaxTokensBeforeEos)+",\n")
	s = append(s, "EosTokens: "+fmt.Sprintf("%#v", this.EosTokens)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStopOnTokenSetCalculatorOptions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *StopOnTokenSetCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopOnTokenSetCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopOnTokenSetCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EosTokens) > 0 {
		dAtA2 := make([]byte, len(m.EosTokens)*10)
		var j1 int
		for _, num1 := range m.EosTokens {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintStopOnTokenSetCalculatorOptions(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.MaxTokensBeforeEos != 0 {
		i = encodeVarintStopOnTokenSetCalculatorOptions(dAtA, i, uint64(m.MaxTokensBeforeEos))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStopOnTokenSetCalculatorOptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovStopOnTokenSetCalculatorOptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StopOnTokenSetCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxTokensBeforeEos != 0 {
		n += 1 + sovStopOnTokenSetCalculatorOptions(uint64(m.MaxTokensBeforeEos))
	}
	if len(m.EosTokens) > 0 {
		l = 0
		for _, e := range m.EosTokens {
			l += sovStopOnTokenSetCalculatorOptions(uint64(e))
		}
		n += 1 + sovStopOnTokenSetCalculatorOptions(uint64(l)) + l
	}
	return n
}

func sovStopOnTokenSetCalculatorOptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStopOnTokenSetCalculatorOptions(x uint64) (n int) {
	return sovStopOnTokenSetCalculatorOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StopOnTokenSetCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StopOnTokenSetCalculatorOptions{`,
		`MaxTokensBeforeEos:` + fmt.Sprintf("%v", this.MaxTokensBeforeEos) + `,`,
		`EosTokens:` + fmt.Sprintf("%v", this.EosTokens) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStopOnTokenSetCalculatorOptions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StopOnTokenSetCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStopOnTokenSetCalculatorOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopOnTokenSetCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopOnTokenSetCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTokensBeforeEos", wireType)
			}
			m.MaxTokensBeforeEos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStopOnTokenSetCalculatorOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTokensBeforeEos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStopOnTokenSetCalculatorOptions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EosTokens = append(m.EosTokens, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStopOnTokenSetCalculatorOptions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStopOnTokenSetCalculatorOptions
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStopOnTokenSetCalculatorOptions
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EosTokens) == 0 {
					m.EosTokens = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStopOnTokenSetCalculatorOptions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EosTokens = append(m.EosTokens, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EosTokens", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStopOnTokenSetCalculatorOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStopOnTokenSetCalculatorOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStopOnTokenSetCalculatorOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStopOnTokenSetCalculatorOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStopOnTokenSetCalculatorOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStopOnTokenSetCalculatorOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStopOnTokenSetCalculatorOptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStopOnTokenSetCalculatorOptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStopOnTokenSetCalculatorOptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStopOnTokenSetCalculatorOptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStopOnTokenSetCalculatorOptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStopOnTokenSetCalculatorOptions = fmt.Errorf("proto: unexpected end of group")
)
