# Copyright Â© 2023- Gimlet Labs, Inc.
# All Rights Reserved.
#
# NOTICE:  All information contained herein is, and remains
# the property of Gimlet Labs, Inc. and its suppliers,
# if any.  The intellectual and technical concepts contained
# herein are proprietary to Gimlet Labs, Inc. and its suppliers and
# may be covered by U.S. and Foreign Patents, patents in process,
# and are protected by trade secret or copyright law. Dissemination
# of this information or reproduction of this material is strictly
# forbidden unless prior written permission is obtained from
# Gimlet Labs, Inc.
#
# SPDX-License-Identifier: Proprietary

load("//bazel:gml_build_system.bzl", "gml_cc_test")
load("//bazel:images.bzl", "gml_jetson_image")
load("//src/gem/plugins:plugins.bzl", "gem_plugin_cc_library")

package(default_visibility = [
    "//src/experimental:__subpackages__",
    "//src/gem:__subpackages__",
])

gem_plugin_cc_library(
    name = "cc_library",
    srcs = [
        "argus_cam_calculator.cc",
        "nvbuf_to_image_frame_calculator.cc",
        "nvbuf_to_planar_image_calculator.cc",
        "nvbufsurf_planar_image.cc",
    ],
    hdrs = [
        "argus_cam_calculator.h",
        "nvbuf_to_image_frame_calculator.h",
        "nvbuf_to_planar_image_calculator.h",
    ],
    plugin_name = "argus",
    deps = [
        "//src/gem/calculators/plugin/argus/optionspb:optionspb_cc_library",
        "//src/gem/devices/camera/argus:cc_library",
        "//src/gem/exec/core:cc_library",
        "@com_github_google_mediapipe//mediapipe/framework:calculator_framework",
        "@libyuv",
    ],
)

# Tests below are marked as manual, because they can only run on the Jeston device.
gml_cc_test(
    name = "nvbufsurf_planar_image_test",
    srcs = [
        "nvbufsurf_planar_image_test.cc",
    ],
    data = glob(["testdata/**/*"]),
    tags = ["manual"],
    deps = [
        ":cc_library",
        "//src/gem/testing/core:cc_library",
    ],
)

# Test is marked as manual, because it can only run on the Jeston device.
gml_cc_test(
    name = "nvbuf_to_image_frame_calculator_test",
    srcs = [
        "nvbuf_to_image_frame_calculator_test.cc",
    ],
    data = glob(["testdata/**/*"]),
    tags = ["manual"],
    deps = [
        ":cc_library",
        "//src/gem/testing/core:cc_library",
        "@com_github_google_mediapipe//mediapipe/framework:calculator_runner",
    ],
)

# Test is marked as manual, because it can only run on the Jeston device.
gml_cc_test(
    name = "nvbuf_to_planar_image_calculator_test",
    srcs = [
        "nvbuf_to_planar_image_calculator_test.cc",
    ],
    data = glob(["testdata/**/*"]),
    tags = ["manual"],
    deps = [
        ":cc_library",
        "//src/gem/testing/core:cc_library",
    ],
)

gml_jetson_image(
    name = "nvbufsurf_planar_image_calculator_test_image",
    testonly = 1,
    binary = ":nvbufsurf_planar_image_test",
    include_runfiles = True,
    multiarch = False,
    tags = ["manual"],
)

# Because the test needs to be run on the Jeston device, we put the tests into container images.
# The images can then be deployed on the device as part of manually testing.
gml_jetson_image(
    name = "nvbuf_to_image_frame_calculator_test_image",
    testonly = 1,
    binary = ":nvbuf_to_image_frame_calculator_test",
    include_runfiles = True,
    multiarch = False,
    tags = ["manual"],
)

gml_jetson_image(
    name = "nvbuf_to_planar_image_calculator_test_image",
    testonly = 1,
    binary = ":nvbuf_to_planar_image_calculator_test",
    include_runfiles = True,
    multiarch = False,
    tags = ["manual"],
)
