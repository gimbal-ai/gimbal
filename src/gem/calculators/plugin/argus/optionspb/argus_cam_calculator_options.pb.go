// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/gem/calculators/plugin/argus/optionspb/argus_cam_calculator_options.proto

package optionspb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ArgusCamSourceCalculatorOptions struct {
	TargetFrameRate uint64 `protobuf:"varint,1,opt,name=target_frame_rate,json=targetFrameRate,proto3" json:"target_frame_rate,omitempty"`
	DeviceUUID      string `protobuf:"bytes,2,opt,name=device_uuid,json=deviceUuid,proto3" json:"device_uuid,omitempty"`
}

func (m *ArgusCamSourceCalculatorOptions) Reset()      { *m = ArgusCamSourceCalculatorOptions{} }
func (*ArgusCamSourceCalculatorOptions) ProtoMessage() {}
func (*ArgusCamSourceCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0304a2bbec33aa0, []int{0}
}
func (m *ArgusCamSourceCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgusCamSourceCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArgusCamSourceCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArgusCamSourceCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgusCamSourceCalculatorOptions.Merge(m, src)
}
func (m *ArgusCamSourceCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *ArgusCamSourceCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgusCamSourceCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ArgusCamSourceCalculatorOptions proto.InternalMessageInfo

func (m *ArgusCamSourceCalculatorOptions) GetTargetFrameRate() uint64 {
	if m != nil {
		return m.TargetFrameRate
	}
	return 0
}

func (m *ArgusCamSourceCalculatorOptions) GetDeviceUUID() string {
	if m != nil {
		return m.DeviceUUID
	}
	return ""
}

func init() {
	proto.RegisterType((*ArgusCamSourceCalculatorOptions)(nil), "gml.gem.calculators.argus.optionspb.ArgusCamSourceCalculatorOptions")
}

func init() {
	proto.RegisterFile("src/gem/calculators/plugin/argus/optionspb/argus_cam_calculator_options.proto", fileDescriptor_c0304a2bbec33aa0)
}

var fileDescriptor_c0304a2bbec33aa0 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xb1, 0x4a, 0x7b, 0x31,
	0x18, 0xc5, 0x6f, 0xfe, 0xfc, 0x11, 0x8c, 0xa0, 0x58, 0x1c, 0x8a, 0xc3, 0xd7, 0xa2, 0x4b, 0x71,
	0x48, 0x06, 0x47, 0x27, 0xdb, 0x22, 0x74, 0x10, 0xa1, 0xd2, 0xc5, 0x25, 0xa4, 0x69, 0x0c, 0x81,
	0xa4, 0xb9, 0xe4, 0x26, 0x8e, 0xea, 0x23, 0xf8, 0x18, 0x3e, 0x8a, 0x63, 0xc7, 0x4e, 0x62, 0xd3,
	0xc5, 0xb1, 0x8f, 0x20, 0xbd, 0x91, 0xab, 0xa3, 0xdb, 0xf7, 0x9d, 0xf3, 0x3b, 0x67, 0x38, 0xf8,
	0xba, 0xf2, 0x82, 0x2a, 0x69, 0xa9, 0xe0, 0x46, 0x44, 0xc3, 0x83, 0xf3, 0x15, 0x2d, 0x4d, 0x54,
	0x7a, 0x4e, 0xb9, 0x57, 0xb1, 0xa2, 0xae, 0x0c, 0xda, 0xcd, 0xab, 0x72, 0x9a, 0x7f, 0x26, 0xb8,
	0x65, 0x3f, 0x30, 0xfb, 0xb6, 0x49, 0xe9, 0x5d, 0x70, 0xad, 0x53, 0x65, 0x0d, 0x51, 0xd2, 0x92,
	0x5f, 0x75, 0xa4, 0xce, 0x91, 0xa6, 0xe7, 0xf8, 0x48, 0x39, 0xe5, 0x6a, 0x9e, 0x6e, 0xaf, 0x1c,
	0x3d, 0x79, 0xc4, 0x9d, 0xcb, 0x2d, 0x38, 0xe0, 0xf6, 0xd6, 0x45, 0x2f, 0xe4, 0xa0, 0xa9, 0xb8,
	0xc9, 0xd1, 0xd6, 0x19, 0x3e, 0x0c, 0xdc, 0x2b, 0x19, 0xd8, 0xbd, 0xe7, 0x56, 0x32, 0xcf, 0x83,
	0x6c, 0xa3, 0x2e, 0xea, 0xfd, 0x1f, 0x1f, 0x64, 0xe3, 0x6a, 0xab, 0x8f, 0x79, 0x90, 0x2d, 0x8a,
	0xf7, 0x66, 0xf2, 0x41, 0x0b, 0xc9, 0x62, 0xd4, 0xb3, 0xf6, 0xbf, 0x2e, 0xea, 0xed, 0xf6, 0xf7,
	0xd3, 0x7b, 0x07, 0x0f, 0x6b, 0x79, 0x32, 0x19, 0x0d, 0xc7, 0x38, 0x23, 0x93, 0xa8, 0x67, 0xfd,
	0xa7, 0xc5, 0x0a, 0x8a, 0xe5, 0x0a, 0x8a, 0xcd, 0x0a, 0xd0, 0x73, 0x02, 0xf4, 0x9a, 0x00, 0xbd,
	0x25, 0x40, 0x8b, 0x04, 0xe8, 0x23, 0x01, 0xfa, 0x4c, 0x50, 0x6c, 0x12, 0xa0, 0x97, 0x35, 0x14,
	0x8b, 0x35, 0x14, 0xcb, 0x35, 0x14, 0x77, 0x23, 0xa5, 0xad, 0x91, 0xc1, 0xf0, 0x69, 0x45, 0xb8,
	0xa6, 0xf9, 0xa3, 0x7f, 0x1f, 0xf5, 0xa2, 0xb9, 0xa6, 0x3b, 0xf5, 0x0e, 0xe7, 0x5f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x64, 0xfc, 0xdc, 0xee, 0x93, 0x01, 0x00, 0x00,
}

func (this *ArgusCamSourceCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArgusCamSourceCalculatorOptions)
	if !ok {
		that2, ok := that.(ArgusCamSourceCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TargetFrameRate != that1.TargetFrameRate {
		return false
	}
	if this.DeviceUUID != that1.DeviceUUID {
		return false
	}
	return true
}
func (this *ArgusCamSourceCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&optionspb.ArgusCamSourceCalculatorOptions{")
	s = append(s, "TargetFrameRate: "+fmt.Sprintf("%#v", this.TargetFrameRate)+",\n")
	s = append(s, "DeviceUUID: "+fmt.Sprintf("%#v", this.DeviceUUID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringArgusCamCalculatorOptions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ArgusCamSourceCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgusCamSourceCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgusCamSourceCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceUUID) > 0 {
		i -= len(m.DeviceUUID)
		copy(dAtA[i:], m.DeviceUUID)
		i = encodeVarintArgusCamCalculatorOptions(dAtA, i, uint64(len(m.DeviceUUID)))
		i--
		dAtA[i] = 0x12
	}
	if m.TargetFrameRate != 0 {
		i = encodeVarintArgusCamCalculatorOptions(dAtA, i, uint64(m.TargetFrameRate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintArgusCamCalculatorOptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovArgusCamCalculatorOptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ArgusCamSourceCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetFrameRate != 0 {
		n += 1 + sovArgusCamCalculatorOptions(uint64(m.TargetFrameRate))
	}
	l = len(m.DeviceUUID)
	if l > 0 {
		n += 1 + l + sovArgusCamCalculatorOptions(uint64(l))
	}
	return n
}

func sovArgusCamCalculatorOptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArgusCamCalculatorOptions(x uint64) (n int) {
	return sovArgusCamCalculatorOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ArgusCamSourceCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ArgusCamSourceCalculatorOptions{`,
		`TargetFrameRate:` + fmt.Sprintf("%v", this.TargetFrameRate) + `,`,
		`DeviceUUID:` + fmt.Sprintf("%v", this.DeviceUUID) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringArgusCamCalculatorOptions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ArgusCamSourceCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArgusCamCalculatorOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgusCamSourceCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgusCamSourceCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetFrameRate", wireType)
			}
			m.TargetFrameRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArgusCamCalculatorOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetFrameRate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArgusCamCalculatorOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArgusCamCalculatorOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArgusCamCalculatorOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArgusCamCalculatorOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArgusCamCalculatorOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArgusCamCalculatorOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArgusCamCalculatorOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArgusCamCalculatorOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArgusCamCalculatorOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArgusCamCalculatorOptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArgusCamCalculatorOptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArgusCamCalculatorOptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArgusCamCalculatorOptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArgusCamCalculatorOptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArgusCamCalculatorOptions = fmt.Errorf("proto: unexpected end of group")
)
