// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/gem/calculators/plugin/cpu_tensor/optionspb/bounding_box_tensors_to_detections_options.proto

package optionspb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BoundingBoxToDetectionsOptions struct {
	IndexToLabel []string `protobuf:"bytes,1,rep,name=index_to_label,json=indexToLabel,proto3" json:"index_to_label,omitempty"`
}

func (m *BoundingBoxToDetectionsOptions) Reset()      { *m = BoundingBoxToDetectionsOptions{} }
func (*BoundingBoxToDetectionsOptions) ProtoMessage() {}
func (*BoundingBoxToDetectionsOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_80c8af72478ecffd, []int{0}
}
func (m *BoundingBoxToDetectionsOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoundingBoxToDetectionsOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoundingBoxToDetectionsOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoundingBoxToDetectionsOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoundingBoxToDetectionsOptions.Merge(m, src)
}
func (m *BoundingBoxToDetectionsOptions) XXX_Size() int {
	return m.Size()
}
func (m *BoundingBoxToDetectionsOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BoundingBoxToDetectionsOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BoundingBoxToDetectionsOptions proto.InternalMessageInfo

func (m *BoundingBoxToDetectionsOptions) GetIndexToLabel() []string {
	if m != nil {
		return m.IndexToLabel
	}
	return nil
}

func init() {
	proto.RegisterType((*BoundingBoxToDetectionsOptions)(nil), "gml.gem.calculators.cpu_tensor.optionspb.BoundingBoxToDetectionsOptions")
}

func init() {
	proto.RegisterFile("src/gem/calculators/plugin/cpu_tensor/optionspb/bounding_box_tensors_to_detections_options.proto", fileDescriptor_80c8af72478ecffd)
}

var fileDescriptor_80c8af72478ecffd = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xb1, 0x4a, 0xc5, 0x30,
	0x14, 0x86, 0x13, 0x04, 0xc1, 0x22, 0x0e, 0x77, 0x72, 0x3a, 0x88, 0x38, 0xdc, 0x29, 0x19, 0x1c,
	0xdd, 0x8a, 0x38, 0x89, 0x82, 0xdc, 0xc9, 0xa5, 0x36, 0x69, 0x08, 0x81, 0x34, 0x27, 0x34, 0x29,
	0x74, 0x74, 0xf0, 0x01, 0x7c, 0x0c, 0x1f, 0xc5, 0xb1, 0xe3, 0x1d, 0x6d, 0xba, 0x38, 0xde, 0x47,
	0x90, 0xdb, 0x5b, 0xaa, 0xab, 0x5b, 0xf2, 0x9f, 0x8f, 0xef, 0xe7, 0x9c, 0xec, 0x25, 0x34, 0x92,
	0x6b, 0x55, 0x73, 0x59, 0x5a, 0xd9, 0xda, 0x32, 0x62, 0x13, 0xb8, 0xb7, 0xad, 0x36, 0x8e, 0x4b,
	0xdf, 0x16, 0x51, 0xb9, 0x80, 0x0d, 0x47, 0x1f, 0x0d, 0xba, 0xe0, 0x05, 0x17, 0xd8, 0xba, 0xca,
	0x38, 0x5d, 0x08, 0xec, 0xe6, 0x69, 0x28, 0x22, 0x16, 0x95, 0x8a, 0x4a, 0x4e, 0x50, 0x31, 0xc3,
	0xcc, 0x37, 0x18, 0x71, 0xb5, 0xd6, 0xb5, 0x65, 0x5a, 0xd5, 0xec, 0x4f, 0x03, 0xfb, 0x55, 0xb3,
	0x45, 0x7d, 0x79, 0x97, 0x41, 0x3e, 0xdb, 0x73, 0xec, 0x36, 0x78, 0xbb, 0x28, 0x1f, 0x0f, 0xcc,
	0xea, 0x2a, 0x3b, 0x33, 0xae, 0x52, 0xdd, 0xbe, 0xd0, 0x96, 0x42, 0xd9, 0x73, 0x7a, 0x71, 0xb4,
	0x3e, 0x79, 0x3a, 0x9d, 0xd2, 0x0d, 0xde, 0xef, 0xb3, 0xfc, 0x8d, 0xf6, 0x03, 0x90, 0xed, 0x00,
	0x64, 0x37, 0x00, 0x7d, 0x4d, 0x40, 0x3f, 0x12, 0xd0, 0xcf, 0x04, 0xb4, 0x4f, 0x40, 0xbf, 0x12,
	0xd0, 0xef, 0x04, 0x64, 0x97, 0x80, 0xbe, 0x8f, 0x40, 0xfa, 0x11, 0xc8, 0x76, 0x04, 0xf2, 0xfc,
	0xa0, 0x4d, 0x6d, 0x55, 0xb4, 0xa5, 0x08, 0xac, 0x34, 0xfc, 0xf0, 0xe3, 0xff, 0xbc, 0xcf, 0xcd,
	0xf2, 0x12, 0xc7, 0xd3, 0xfe, 0xd7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x4c, 0x46, 0xb7,
	0x63, 0x01, 0x00, 0x00,
}

func (this *BoundingBoxToDetectionsOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BoundingBoxToDetectionsOptions)
	if !ok {
		that2, ok := that.(BoundingBoxToDetectionsOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.IndexToLabel) != len(that1.IndexToLabel) {
		return false
	}
	for i := range this.IndexToLabel {
		if this.IndexToLabel[i] != that1.IndexToLabel[i] {
			return false
		}
	}
	return true
}
func (this *BoundingBoxToDetectionsOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&optionspb.BoundingBoxToDetectionsOptions{")
	s = append(s, "IndexToLabel: "+fmt.Sprintf("%#v", this.IndexToLabel)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBoundingBoxTensorsToDetectionsOptions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BoundingBoxToDetectionsOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoundingBoxToDetectionsOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BoundingBoxToDetectionsOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IndexToLabel) > 0 {
		for iNdEx := len(m.IndexToLabel) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IndexToLabel[iNdEx])
			copy(dAtA[i:], m.IndexToLabel[iNdEx])
			i = encodeVarintBoundingBoxTensorsToDetectionsOptions(dAtA, i, uint64(len(m.IndexToLabel[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintBoundingBoxTensorsToDetectionsOptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovBoundingBoxTensorsToDetectionsOptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BoundingBoxToDetectionsOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IndexToLabel) > 0 {
		for _, s := range m.IndexToLabel {
			l = len(s)
			n += 1 + l + sovBoundingBoxTensorsToDetectionsOptions(uint64(l))
		}
	}
	return n
}

func sovBoundingBoxTensorsToDetectionsOptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBoundingBoxTensorsToDetectionsOptions(x uint64) (n int) {
	return sovBoundingBoxTensorsToDetectionsOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BoundingBoxToDetectionsOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BoundingBoxToDetectionsOptions{`,
		`IndexToLabel:` + fmt.Sprintf("%v", this.IndexToLabel) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBoundingBoxTensorsToDetectionsOptions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BoundingBoxToDetectionsOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBoundingBoxTensorsToDetectionsOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoundingBoxToDetectionsOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoundingBoxToDetectionsOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexToLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoundingBoxTensorsToDetectionsOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBoundingBoxTensorsToDetectionsOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBoundingBoxTensorsToDetectionsOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexToLabel = append(m.IndexToLabel, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBoundingBoxTensorsToDetectionsOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBoundingBoxTensorsToDetectionsOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBoundingBoxTensorsToDetectionsOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBoundingBoxTensorsToDetectionsOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBoundingBoxTensorsToDetectionsOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBoundingBoxTensorsToDetectionsOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBoundingBoxTensorsToDetectionsOptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBoundingBoxTensorsToDetectionsOptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBoundingBoxTensorsToDetectionsOptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBoundingBoxTensorsToDetectionsOptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBoundingBoxTensorsToDetectionsOptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBoundingBoxTensorsToDetectionsOptions = fmt.Errorf("proto: unexpected end of group")
)
