// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/gem/calculators/plugin/openvino/optionspb/openvino_execute_calculator_options.proto

package optionspb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OpenVinoExecuteCalculatorOptions struct {
}

func (m *OpenVinoExecuteCalculatorOptions) Reset()      { *m = OpenVinoExecuteCalculatorOptions{} }
func (*OpenVinoExecuteCalculatorOptions) ProtoMessage() {}
func (*OpenVinoExecuteCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6071a2708178be6c, []int{0}
}
func (m *OpenVinoExecuteCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenVinoExecuteCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenVinoExecuteCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenVinoExecuteCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenVinoExecuteCalculatorOptions.Merge(m, src)
}
func (m *OpenVinoExecuteCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *OpenVinoExecuteCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenVinoExecuteCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_OpenVinoExecuteCalculatorOptions proto.InternalMessageInfo

func init() {
	proto.RegisterType((*OpenVinoExecuteCalculatorOptions)(nil), "gml.gem.calculators.openvino.optionspb.OpenVinoExecuteCalculatorOptions")
}

func init() {
	proto.RegisterFile("src/gem/calculators/plugin/openvino/optionspb/openvino_execute_calculator_options.proto", fileDescriptor_6071a2708178be6c)
}

var fileDescriptor_6071a2708178be6c = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x0a, 0x2f, 0x2e, 0x4a, 0xd6,
	0x4f, 0x4f, 0xcd, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0x2a, 0xd6,
	0x2f, 0xc8, 0x29, 0x4d, 0xcf, 0xcc, 0xd3, 0xcf, 0x2f, 0x48, 0xcd, 0x2b, 0xcb, 0xcc, 0xcb, 0xd7,
	0xcf, 0x2f, 0x28, 0xc9, 0xcc, 0xcf, 0x2b, 0x2e, 0x48, 0x82, 0x0b, 0xc5, 0xa7, 0x56, 0xa4, 0x26,
	0x97, 0x96, 0xa4, 0xc6, 0x23, 0xb4, 0xc5, 0x43, 0x55, 0xe9, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b,
	0xa9, 0xa5, 0xe7, 0xe6, 0xe8, 0xa5, 0xa7, 0xe6, 0xea, 0x21, 0x19, 0xac, 0x07, 0xd3, 0xae, 0x07,
	0x37, 0x51, 0x49, 0x89, 0x4b, 0xc1, 0xbf, 0x20, 0x35, 0x2f, 0x2c, 0x33, 0x2f, 0xdf, 0x15, 0x62,
	0xa6, 0x33, 0x5c, 0x83, 0x3f, 0x44, 0x95, 0x53, 0x13, 0xe3, 0x85, 0x87, 0x72, 0x0c, 0x37, 0x1e,
	0xca, 0x31, 0x7c, 0x78, 0x28, 0xc7, 0xd8, 0xf0, 0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x13,
	0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39, 0x86,
	0x0f, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39,
	0x86, 0x28, 0x9f, 0xf4, 0xcc, 0xdc, 0x9c, 0xd4, 0x92, 0x9c, 0xc4, 0xa4, 0x62, 0xbd, 0xc4, 0x4c,
	0x7d, 0x08, 0x4f, 0x9f, 0x24, 0x0f, 0x5b, 0xc3, 0x59, 0x49, 0x6c, 0x60, 0x7f, 0x19, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x2c, 0xca, 0xdc, 0xaf, 0x32, 0x01, 0x00, 0x00,
}

func (this *OpenVinoExecuteCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenVinoExecuteCalculatorOptions)
	if !ok {
		that2, ok := that.(OpenVinoExecuteCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *OpenVinoExecuteCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&optionspb.OpenVinoExecuteCalculatorOptions{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOpenvinoExecuteCalculatorOptions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *OpenVinoExecuteCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenVinoExecuteCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenVinoExecuteCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintOpenvinoExecuteCalculatorOptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovOpenvinoExecuteCalculatorOptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OpenVinoExecuteCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovOpenvinoExecuteCalculatorOptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOpenvinoExecuteCalculatorOptions(x uint64) (n int) {
	return sovOpenvinoExecuteCalculatorOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *OpenVinoExecuteCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenVinoExecuteCalculatorOptions{`,
		`}`,
	}, "")
	return s
}
func valueToStringOpenvinoExecuteCalculatorOptions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *OpenVinoExecuteCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenvinoExecuteCalculatorOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenVinoExecuteCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenVinoExecuteCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOpenvinoExecuteCalculatorOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOpenvinoExecuteCalculatorOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOpenvinoExecuteCalculatorOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOpenvinoExecuteCalculatorOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpenvinoExecuteCalculatorOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpenvinoExecuteCalculatorOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOpenvinoExecuteCalculatorOptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOpenvinoExecuteCalculatorOptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOpenvinoExecuteCalculatorOptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOpenvinoExecuteCalculatorOptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOpenvinoExecuteCalculatorOptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOpenvinoExecuteCalculatorOptions = fmt.Errorf("proto: unexpected end of group")
)
