// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/gem/calculators/plugin/qdrant/optionspb/qdrant_search_calculator_options.proto

package optionspb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QdrantSearchCalculatorOptions struct {
	Address    string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Collection string `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	Limit      int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	PayloadKey string `protobuf:"bytes,4,opt,name=payload_key,json=payloadKey,proto3" json:"payload_key,omitempty"`
}

func (m *QdrantSearchCalculatorOptions) Reset()      { *m = QdrantSearchCalculatorOptions{} }
func (*QdrantSearchCalculatorOptions) ProtoMessage() {}
func (*QdrantSearchCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_278f910377f85c77, []int{0}
}
func (m *QdrantSearchCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QdrantSearchCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QdrantSearchCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QdrantSearchCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QdrantSearchCalculatorOptions.Merge(m, src)
}
func (m *QdrantSearchCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *QdrantSearchCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_QdrantSearchCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_QdrantSearchCalculatorOptions proto.InternalMessageInfo

func (m *QdrantSearchCalculatorOptions) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QdrantSearchCalculatorOptions) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *QdrantSearchCalculatorOptions) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QdrantSearchCalculatorOptions) GetPayloadKey() string {
	if m != nil {
		return m.PayloadKey
	}
	return ""
}

func init() {
	proto.RegisterType((*QdrantSearchCalculatorOptions)(nil), "gml.gem.calculators.qdrant.optionspb.QdrantSearchCalculatorOptions")
}

func init() {
	proto.RegisterFile("src/gem/calculators/plugin/qdrant/optionspb/qdrant_search_calculator_options.proto", fileDescriptor_278f910377f85c77)
}

var fileDescriptor_278f910377f85c77 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xad, 0x52, 0x03, 0x31,
	0x14, 0x85, 0x73, 0x29, 0x3f, 0x43, 0x70, 0x3b, 0x88, 0x35, 0x5c, 0x3a, 0x0c, 0xa2, 0x2a, 0x11,
	0x48, 0x1c, 0x38, 0x10, 0x0c, 0xc5, 0x61, 0x76, 0xd2, 0x6c, 0x66, 0xc9, 0x90, 0x6d, 0x96, 0x24,
	0x15, 0x75, 0x7d, 0x84, 0x3e, 0x06, 0x8f, 0x82, 0xac, 0xac, 0xa4, 0x59, 0x83, 0xec, 0x23, 0x30,
	0xec, 0x2e, 0x4b, 0x2d, 0x2e, 0xe7, 0xcb, 0x77, 0x8e, 0xb8, 0x74, 0xec, 0x9d, 0xe4, 0x85, 0x2a,
	0xb9, 0x14, 0x46, 0xce, 0x8c, 0x08, 0xd6, 0x79, 0x5e, 0x99, 0x59, 0xa1, 0xa7, 0xfc, 0x2d, 0x77,
	0x62, 0x1a, 0xb8, 0xad, 0x82, 0xb6, 0x53, 0x5f, 0x4d, 0x3a, 0x90, 0x79, 0x25, 0x9c, 0x7c, 0xc9,
	0xfe, 0x1a, 0x59, 0xa7, 0xb0, 0xca, 0xd9, 0x60, 0x93, 0xcb, 0xa2, 0x34, 0xac, 0x50, 0x25, 0xdb,
	0xd9, 0x64, 0x6d, 0x97, 0xf5, 0x63, 0x17, 0x4b, 0xa0, 0x67, 0x8f, 0x0d, 0x7c, 0x6a, 0xf6, 0x6e,
	0x7b, 0xf9, 0xa1, 0x75, 0x92, 0x94, 0x1e, 0x89, 0x3c, 0x77, 0xca, 0xfb, 0x14, 0x86, 0x30, 0x3a,
	0x1e, 0xff, 0xc6, 0x04, 0x29, 0x95, 0xd6, 0x18, 0x25, 0x7f, 0xc4, 0x74, 0xaf, 0xf9, 0xdc, 0x21,
	0xc9, 0x29, 0x3d, 0x30, 0xba, 0xd4, 0x21, 0x1d, 0x0c, 0x61, 0x34, 0x18, 0xb7, 0x21, 0x39, 0xa7,
	0x27, 0x95, 0x98, 0x1b, 0x2b, 0xf2, 0xec, 0x55, 0xcd, 0xd3, 0xfd, 0xb6, 0xd6, 0xa1, 0x7b, 0x35,
	0xbf, 0x59, 0xc0, 0x6a, 0x83, 0x64, 0xbd, 0x41, 0xb2, 0xdd, 0x20, 0x2c, 0x22, 0xc2, 0x7b, 0x44,
	0xf8, 0x88, 0x08, 0xab, 0x88, 0xf0, 0x19, 0x11, 0xbe, 0x22, 0x92, 0x6d, 0x44, 0x58, 0xd6, 0x48,
	0x56, 0x35, 0x92, 0x75, 0x8d, 0xe4, 0xf9, 0xae, 0xd0, 0xa5, 0x51, 0xc1, 0x88, 0x89, 0x67, 0x42,
	0xf3, 0x36, 0xf1, 0x7f, 0x1c, 0xf6, 0xba, 0x7f, 0x4d, 0x0e, 0x9b, 0x13, 0x5e, 0x7d, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x39, 0x48, 0x69, 0xdc, 0x98, 0x01, 0x00, 0x00,
}

func (this *QdrantSearchCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QdrantSearchCalculatorOptions)
	if !ok {
		that2, ok := that.(QdrantSearchCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Collection != that1.Collection {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.PayloadKey != that1.PayloadKey {
		return false
	}
	return true
}
func (this *QdrantSearchCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&optionspb.QdrantSearchCalculatorOptions{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Collection: "+fmt.Sprintf("%#v", this.Collection)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "PayloadKey: "+fmt.Sprintf("%#v", this.PayloadKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringQdrantSearchCalculatorOptions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *QdrantSearchCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QdrantSearchCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QdrantSearchCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PayloadKey) > 0 {
		i -= len(m.PayloadKey)
		copy(dAtA[i:], m.PayloadKey)
		i = encodeVarintQdrantSearchCalculatorOptions(dAtA, i, uint64(len(m.PayloadKey)))
		i--
		dAtA[i] = 0x22
	}
	if m.Limit != 0 {
		i = encodeVarintQdrantSearchCalculatorOptions(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Collection) > 0 {
		i -= len(m.Collection)
		copy(dAtA[i:], m.Collection)
		i = encodeVarintQdrantSearchCalculatorOptions(dAtA, i, uint64(len(m.Collection)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQdrantSearchCalculatorOptions(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQdrantSearchCalculatorOptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovQdrantSearchCalculatorOptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QdrantSearchCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQdrantSearchCalculatorOptions(uint64(l))
	}
	l = len(m.Collection)
	if l > 0 {
		n += 1 + l + sovQdrantSearchCalculatorOptions(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovQdrantSearchCalculatorOptions(uint64(m.Limit))
	}
	l = len(m.PayloadKey)
	if l > 0 {
		n += 1 + l + sovQdrantSearchCalculatorOptions(uint64(l))
	}
	return n
}

func sovQdrantSearchCalculatorOptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQdrantSearchCalculatorOptions(x uint64) (n int) {
	return sovQdrantSearchCalculatorOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *QdrantSearchCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QdrantSearchCalculatorOptions{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Collection:` + fmt.Sprintf("%v", this.Collection) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`PayloadKey:` + fmt.Sprintf("%v", this.PayloadKey) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringQdrantSearchCalculatorOptions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *QdrantSearchCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQdrantSearchCalculatorOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QdrantSearchCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QdrantSearchCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQdrantSearchCalculatorOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQdrantSearchCalculatorOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQdrantSearchCalculatorOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQdrantSearchCalculatorOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQdrantSearchCalculatorOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQdrantSearchCalculatorOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collection = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQdrantSearchCalculatorOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQdrantSearchCalculatorOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQdrantSearchCalculatorOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQdrantSearchCalculatorOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayloadKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQdrantSearchCalculatorOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQdrantSearchCalculatorOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQdrantSearchCalculatorOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQdrantSearchCalculatorOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQdrantSearchCalculatorOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQdrantSearchCalculatorOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQdrantSearchCalculatorOptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQdrantSearchCalculatorOptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQdrantSearchCalculatorOptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQdrantSearchCalculatorOptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQdrantSearchCalculatorOptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQdrantSearchCalculatorOptions = fmt.Errorf("proto: unexpected end of group")
)
