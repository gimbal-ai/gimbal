graph {
  input_side_packet: "input_mp4_path"
  input_side_packet: "tensorrt_exec_ctx"
  input_side_packet: "cpu_exec_ctx"
  input_side_packet: "ctrl_exec_ctx"
  input_side_packet: "frame_rate_sleep"

  node {
    calculator: "ArgusCamSourceCalculator"
    output_stream: "nv_buf"
    node_options {
      [type.googleapis.com/gml.gem.calculators.argus.optionspb.ArgusCamSourceCalculatorOptions] {
        target_frame_rate: 18
      }
    }
  }

  node {
    calculator: "NvBufSurfToImageFrameCalculator"
    input_stream: "nv_buf"
    output_stream: "video_frames"
  }

  node {
    calculator: "FlowLimiterCalculator"
    input_stream: "video_frames"
    input_stream: "FINISHED:detections"
    input_stream_info {
      tag_index: "FINISHED"
      back_edge: true
    }
    output_stream: "sampled_frames"
    output_stream: "ALLOW:frame_allowed"
    node_options: {
      [type.googleapis.com/mediapipe.FlowLimiterCalculatorOptions] {
        max_in_flight: 1
        max_in_queue: 1
        in_flight_timeout: 0
      }
    }
  }

  node {
    calculator: "ImageTransformationCalculator"
    input_stream: "IMAGE:sampled_frames"
    output_stream: "IMAGE:scaled_frames"
    node_options {
      [type.googleapis.com/mediapipe.ImageTransformationCalculatorOptions] {
        output_width: 416
        output_height: 416
        scale_mode: SCALE_MODE_FIT
        padding_color {
          red: 128
          green: 128
          blue: 128
        }
      }
    }
  }

  node {
    calculator: "ImageShapeCPUTensorCalculator"
    input_side_packet: "EXEC_CTX:cpu_exec_ctx"
    input_stream: "IMAGE_FRAME:sampled_frames"
    output_stream: "IMAGE_SHAPE:image_shape"
  }

  node {
    calculator: "CPUTensorToCUDATensorCalculator"
    input_side_packet: "EXEC_CTX:tensorrt_exec_ctx"
    input_stream: "image_shape"
    output_stream: "image_shape_cuda"
  }

  node {
    calculator: "ImageFrameToCUDATensorCalculator"
    input_side_packet: "EXEC_CTX:tensorrt_exec_ctx"
    input_stream: "IMAGE_FRAME:scaled_frames"
    output_stream: "OUTPUT_TENSOR:image_tensor"
  }

  node {
    calculator: "TensorRTExecuteCalculator"
    input_side_packet: "EXEC_CTX:tensorrt_exec_ctx"
    input_stream: "image_tensor"
    input_stream: "image_shape_cuda"
    output_stream: "anchor_boxes"
    output_stream: "scores"
    output_stream: "selected_indices"
    node_options {
      [type.googleapis.com/gml.gem.calculators.tensorrt.optionspb.TensorRTExecuteCalculatorOptions] {
        input_onnx_name: "input_1"
        input_onnx_name: "image_shape"
        output_onnx_name: "yolonms_layer_1/ExpandDims_1:0"
        output_onnx_name: "yolonms_layer_1/ExpandDims_3:0"
        output_onnx_name: "yolonms_layer_1/concat_2:0"
      }
    }
  }

  node {
    calculator: "CUDATensorToCPUTensorCalculator"
    input_side_packet: "EXEC_CTX:cpu_exec_ctx"
    input_stream: "anchor_boxes"
    input_stream: "scores"
    input_stream: "selected_indices"
    output_stream: "anchor_boxes_cpu"
    output_stream: "scores_cpu"
    output_stream: "selected_indices_cpu"
  }

  node {
    calculator: "BoundingBoxTensorsToDetections"
    input_stream: "BOX_TENSOR:anchor_boxes_cpu"
    input_stream: "SCORE_TENSOR:scores_cpu"
    input_stream: "INDEX_TENSOR:selected_indices_cpu"
    input_stream: "ORIG_IMAGE_SHAPE:image_shape"
    output_stream: "detections"
    node_options {
      [type.googleapis.com/gml.gem.calculators.cpu_tensor.optionspb.BoundingBoxToDetectionsOptions] {
        # TODO(james): Pull these from a file/blob instead of listing them here.
        index_to_label: "person"
        index_to_label: "bicycle"
        index_to_label: "car"
        index_to_label: "motorbike"
        index_to_label: "aeroplane"
        index_to_label: "bus"
        index_to_label: "train"
        index_to_label: "truck"
        index_to_label: "boat"
        index_to_label: "traffic light"
        index_to_label: "fire hydrant"
        index_to_label: "stop sign"
        index_to_label: "parking meter"
        index_to_label: "bench"
        index_to_label: "bird"
        index_to_label: "cat"
        index_to_label: "dog"
        index_to_label: "horse"
        index_to_label: "sheep"
        index_to_label: "cow"
        index_to_label: "elephant"
        index_to_label: "bear"
        index_to_label: "zebra"
        index_to_label: "giraffe"
        index_to_label: "backpack"
        index_to_label: "umbrella"
        index_to_label: "handbag"
        index_to_label: "tie"
        index_to_label: "suitcase"
        index_to_label: "frisbee"
        index_to_label: "skis"
        index_to_label: "snowboard"
        index_to_label: "sports ball"
        index_to_label: "kite"
        index_to_label: "baseball bat"
        index_to_label: "baseball glove"
        index_to_label: "skateboard"
        index_to_label: "surfboard"
        index_to_label: "tennis racket"
        index_to_label: "bottle"
        index_to_label: "wine glass"
        index_to_label: "cup"
        index_to_label: "fork"
        index_to_label: "knife"
        index_to_label: "spoon"
        index_to_label: "bowl"
        index_to_label: "banana"
        index_to_label: "apple"
        index_to_label: "sandwich"
        index_to_label: "orange"
        index_to_label: "broccoli"
        index_to_label: "carrot"
        index_to_label: "hot dog"
        index_to_label: "pizza"
        index_to_label: "donut"
        index_to_label: "cake"
        index_to_label: "chair"
        index_to_label: "sofa"
        index_to_label: "pottedplant"
        index_to_label: "bed"
        index_to_label: "diningtable"
        index_to_label: "toilet"
        index_to_label: "tvmonitor"
        index_to_label: "laptop"
        index_to_label: "mouse"
        index_to_label: "remote"
        index_to_label: "keyboard"
        index_to_label: "cell phone"
        index_to_label: "microwave"
        index_to_label: "oven"
        index_to_label: "toaster"
        index_to_label: "sink"
        index_to_label: "refrigerator"
        index_to_label: "book"
        index_to_label: "clock"
        index_to_label: "vase"
        index_to_label: "scissors"
        index_to_label: "teddy bear"
        index_to_label: "hair drier"
        index_to_label: "toothbrush"
        coordinate_format: COORDINATE_FORMAT_DIAG_CORNERS_YX
      }
    }
  }

  node {
    calculator: "ImageFrameToYUVPlanarImage"
    input_stream: "IMAGE_FRAME:sampled_frames"
    output_stream: "YUV_IMAGE:planar_image"
  }

  node {
    calculator: "FFmpegVideoEncoderCalculator"
    input_stream: "PLANAR_IMAGE:planar_image"
    input_side_packet: "FRAME_RATE:frame_rate"
    output_stream: "AV_PACKETS:encoded_av_packets"
  }

  node {
    calculator: "OverlayedFFmpegVideoSinkCalculator"
    input_side_packet: "EXEC_CTX:ctrl_exec_ctx"
    input_stream: "DETECTIONS:detections"
    input_stream: "AV_PACKETS:encoded_av_packets"
  }

  output_stream: "frame_allowed"
}
