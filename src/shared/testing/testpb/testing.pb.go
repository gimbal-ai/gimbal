// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/shared/testing/testpb/testing.proto

package testpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PingRequest struct {
	Req string `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
}

func (m *PingRequest) Reset()      { *m = PingRequest{} }
func (*PingRequest) ProtoMessage() {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f0f98343becd377, []int{0}
}
func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return m.Size()
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetReq() string {
	if m != nil {
		return m.Req
	}
	return ""
}

type PingResponse struct {
	Reply string `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (m *PingResponse) Reset()      { *m = PingResponse{} }
func (*PingResponse) ProtoMessage() {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f0f98343becd377, []int{1}
}
func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(m, src)
}
func (m *PingResponse) XXX_Size() int {
	return m.Size()
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

func (m *PingResponse) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

type PingClientStreamRequest struct {
	Req string `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
}

func (m *PingClientStreamRequest) Reset()      { *m = PingClientStreamRequest{} }
func (*PingClientStreamRequest) ProtoMessage() {}
func (*PingClientStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f0f98343becd377, []int{2}
}
func (m *PingClientStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingClientStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingClientStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingClientStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingClientStreamRequest.Merge(m, src)
}
func (m *PingClientStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *PingClientStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingClientStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingClientStreamRequest proto.InternalMessageInfo

func (m *PingClientStreamRequest) GetReq() string {
	if m != nil {
		return m.Req
	}
	return ""
}

type PingClientStreamResponse struct {
	Reply string `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (m *PingClientStreamResponse) Reset()      { *m = PingClientStreamResponse{} }
func (*PingClientStreamResponse) ProtoMessage() {}
func (*PingClientStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f0f98343becd377, []int{3}
}
func (m *PingClientStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingClientStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingClientStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingClientStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingClientStreamResponse.Merge(m, src)
}
func (m *PingClientStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *PingClientStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingClientStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingClientStreamResponse proto.InternalMessageInfo

func (m *PingClientStreamResponse) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

type PingServerStreamRequest struct {
	Req string `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
}

func (m *PingServerStreamRequest) Reset()      { *m = PingServerStreamRequest{} }
func (*PingServerStreamRequest) ProtoMessage() {}
func (*PingServerStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f0f98343becd377, []int{4}
}
func (m *PingServerStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingServerStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingServerStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingServerStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingServerStreamRequest.Merge(m, src)
}
func (m *PingServerStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *PingServerStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingServerStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingServerStreamRequest proto.InternalMessageInfo

func (m *PingServerStreamRequest) GetReq() string {
	if m != nil {
		return m.Req
	}
	return ""
}

type PingServerStreamResponse struct {
	Reply string `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (m *PingServerStreamResponse) Reset()      { *m = PingServerStreamResponse{} }
func (*PingServerStreamResponse) ProtoMessage() {}
func (*PingServerStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f0f98343becd377, []int{5}
}
func (m *PingServerStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingServerStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingServerStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingServerStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingServerStreamResponse.Merge(m, src)
}
func (m *PingServerStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *PingServerStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingServerStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingServerStreamResponse proto.InternalMessageInfo

func (m *PingServerStreamResponse) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "gml.testing.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "gml.testing.PingResponse")
	proto.RegisterType((*PingClientStreamRequest)(nil), "gml.testing.PingClientStreamRequest")
	proto.RegisterType((*PingClientStreamResponse)(nil), "gml.testing.PingClientStreamResponse")
	proto.RegisterType((*PingServerStreamRequest)(nil), "gml.testing.PingServerStreamRequest")
	proto.RegisterType((*PingServerStreamResponse)(nil), "gml.testing.PingServerStreamResponse")
}

func init() {
	proto.RegisterFile("src/shared/testing/testpb/testing.proto", fileDescriptor_2f0f98343becd377)
}

var fileDescriptor_2f0f98343becd377 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2f, 0x2e, 0x4a, 0xd6,
	0x2f, 0xce, 0x48, 0x2c, 0x4a, 0x4d, 0xd1, 0x2f, 0x49, 0x2d, 0x2e, 0xc9, 0xcc, 0x4b, 0x07, 0xd3,
	0x05, 0x49, 0x30, 0xae, 0x5e, 0x41, 0x51, 0x7e, 0x49, 0xbe, 0x10, 0x77, 0x7a, 0x6e, 0x8e, 0x1e,
	0x54, 0x48, 0x49, 0x9e, 0x8b, 0x3b, 0x20, 0x33, 0x2f, 0x3d, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8,
	0x44, 0x48, 0x80, 0x8b, 0xb9, 0x28, 0xb5, 0x50, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc4,
	0x54, 0x52, 0xe1, 0xe2, 0x81, 0x28, 0x28, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x12, 0xe1, 0x62,
	0x2d, 0x4a, 0x2d, 0xc8, 0xa9, 0x84, 0xaa, 0x81, 0x70, 0x94, 0xb4, 0xb9, 0xc4, 0x41, 0xaa, 0x9c,
	0x73, 0x32, 0x53, 0xf3, 0x4a, 0x82, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0x71, 0x1b, 0x69, 0xc0, 0x25,
	0x81, 0xa9, 0x98, 0x18, 0xe3, 0x83, 0x53, 0x8b, 0xca, 0x52, 0x8b, 0x88, 0x34, 0x1e, 0x55, 0x31,
	0x3e, 0xe3, 0x8d, 0x26, 0x30, 0x41, 0x42, 0x01, 0xa4, 0x25, 0x33, 0x39, 0x55, 0xc8, 0x9a, 0x8b,
	0x05, 0xc4, 0x15, 0x92, 0xd0, 0x43, 0x0a, 0x2a, 0x3d, 0xa4, 0x70, 0x92, 0x92, 0xc4, 0x22, 0x03,
	0xb5, 0x22, 0x91, 0x4b, 0x00, 0xdd, 0x77, 0x42, 0x2a, 0x18, 0xca, 0xb1, 0x84, 0x94, 0x94, 0x2a,
	0x01, 0x55, 0x10, 0x0b, 0x34, 0x18, 0x61, 0x56, 0x20, 0xfb, 0x10, 0x8b, 0x15, 0x58, 0x42, 0x0b,
	0x8b, 0x15, 0xd8, 0x82, 0xc9, 0x80, 0xd1, 0x29, 0xe5, 0xc2, 0x43, 0x39, 0x86, 0x1b, 0x0f, 0xe5,
	0x18, 0x3e, 0x3c, 0x94, 0x63, 0x6c, 0x78, 0x24, 0xc7, 0xb8, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47,
	0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0xf8, 0xe2, 0x91, 0x1c, 0xc3, 0x87,
	0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43,
	0x94, 0x5e, 0x7a, 0x66, 0x6e, 0x4e, 0x6a, 0x49, 0x4e, 0x62, 0x52, 0xb1, 0x5e, 0x62, 0xa6, 0x3e,
	0x84, 0xa7, 0x8f, 0x33, 0x61, 0x26, 0xb1, 0x81, 0x53, 0xa4, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0xf6, 0x3d, 0x18, 0x35, 0xbc, 0x02, 0x00, 0x00,
}

func (this *PingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingRequest)
	if !ok {
		that2, ok := that.(PingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Req != that1.Req {
		return false
	}
	return true
}
func (this *PingResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingResponse)
	if !ok {
		that2, ok := that.(PingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Reply != that1.Reply {
		return false
	}
	return true
}
func (this *PingClientStreamRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingClientStreamRequest)
	if !ok {
		that2, ok := that.(PingClientStreamRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Req != that1.Req {
		return false
	}
	return true
}
func (this *PingClientStreamResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingClientStreamResponse)
	if !ok {
		that2, ok := that.(PingClientStreamResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Reply != that1.Reply {
		return false
	}
	return true
}
func (this *PingServerStreamRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingServerStreamRequest)
	if !ok {
		that2, ok := that.(PingServerStreamRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Req != that1.Req {
		return false
	}
	return true
}
func (this *PingServerStreamResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingServerStreamResponse)
	if !ok {
		that2, ok := that.(PingServerStreamResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Reply != that1.Reply {
		return false
	}
	return true
}
func (this *PingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&testpb.PingRequest{")
	s = append(s, "Req: "+fmt.Sprintf("%#v", this.Req)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&testpb.PingResponse{")
	s = append(s, "Reply: "+fmt.Sprintf("%#v", this.Reply)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingClientStreamRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&testpb.PingClientStreamRequest{")
	s = append(s, "Req: "+fmt.Sprintf("%#v", this.Req)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingClientStreamResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&testpb.PingClientStreamResponse{")
	s = append(s, "Reply: "+fmt.Sprintf("%#v", this.Reply)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingServerStreamRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&testpb.PingServerStreamRequest{")
	s = append(s, "Req: "+fmt.Sprintf("%#v", this.Req)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingServerStreamResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&testpb.PingServerStreamResponse{")
	s = append(s, "Reply: "+fmt.Sprintf("%#v", this.Reply)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTesting(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PingServiceClient is the client API for PingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PingServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	PingClientStream(ctx context.Context, opts ...grpc.CallOption) (PingService_PingClientStreamClient, error)
	PingServerStream(ctx context.Context, in *PingServerStreamRequest, opts ...grpc.CallOption) (PingService_PingServerStreamClient, error)
}

type pingServiceClient struct {
	cc *grpc.ClientConn
}

func NewPingServiceClient(cc *grpc.ClientConn) PingServiceClient {
	return &pingServiceClient{cc}
}

func (c *pingServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/gml.testing.PingService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingServiceClient) PingClientStream(ctx context.Context, opts ...grpc.CallOption) (PingService_PingClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PingService_serviceDesc.Streams[0], "/gml.testing.PingService/PingClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServicePingClientStreamClient{stream}
	return x, nil
}

type PingService_PingClientStreamClient interface {
	Send(*PingClientStreamRequest) error
	CloseAndRecv() (*PingClientStreamResponse, error)
	grpc.ClientStream
}

type pingServicePingClientStreamClient struct {
	grpc.ClientStream
}

func (x *pingServicePingClientStreamClient) Send(m *PingClientStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingServicePingClientStreamClient) CloseAndRecv() (*PingClientStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PingClientStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingServiceClient) PingServerStream(ctx context.Context, in *PingServerStreamRequest, opts ...grpc.CallOption) (PingService_PingServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PingService_serviceDesc.Streams[1], "/gml.testing.PingService/PingServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServicePingServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PingService_PingServerStreamClient interface {
	Recv() (*PingServerStreamResponse, error)
	grpc.ClientStream
}

type pingServicePingServerStreamClient struct {
	grpc.ClientStream
}

func (x *pingServicePingServerStreamClient) Recv() (*PingServerStreamResponse, error) {
	m := new(PingServerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingServiceServer is the server API for PingService service.
type PingServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	PingClientStream(PingService_PingClientStreamServer) error
	PingServerStream(*PingServerStreamRequest, PingService_PingServerStreamServer) error
}

// UnimplementedPingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPingServiceServer struct {
}

func (*UnimplementedPingServiceServer) Ping(ctx context.Context, req *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedPingServiceServer) PingClientStream(srv PingService_PingClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PingClientStream not implemented")
}
func (*UnimplementedPingServiceServer) PingServerStream(req *PingServerStreamRequest, srv PingService_PingServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PingServerStream not implemented")
}

func RegisterPingServiceServer(s *grpc.Server, srv PingServiceServer) {
	s.RegisterService(&_PingService_serviceDesc, srv)
}

func _PingService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gml.testing.PingService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingService_PingClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingServiceServer).PingClientStream(&pingServicePingClientStreamServer{stream})
}

type PingService_PingClientStreamServer interface {
	SendAndClose(*PingClientStreamResponse) error
	Recv() (*PingClientStreamRequest, error)
	grpc.ServerStream
}

type pingServicePingClientStreamServer struct {
	grpc.ServerStream
}

func (x *pingServicePingClientStreamServer) SendAndClose(m *PingClientStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingServicePingClientStreamServer) Recv() (*PingClientStreamRequest, error) {
	m := new(PingClientStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PingService_PingServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingServerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingServiceServer).PingServerStream(m, &pingServicePingServerStreamServer{stream})
}

type PingService_PingServerStreamServer interface {
	Send(*PingServerStreamResponse) error
	grpc.ServerStream
}

type pingServicePingServerStreamServer struct {
	grpc.ServerStream
}

func (x *pingServicePingServerStreamServer) Send(m *PingServerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gml.testing.PingService",
	HandlerType: (*PingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PingService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingClientStream",
			Handler:       _PingService_PingClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PingServerStream",
			Handler:       _PingService_PingServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/shared/testing/testpb/testing.proto",
}

func (m *PingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Req) > 0 {
		i -= len(m.Req)
		copy(dAtA[i:], m.Req)
		i = encodeVarintTesting(dAtA, i, uint64(len(m.Req)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		i -= len(m.Reply)
		copy(dAtA[i:], m.Reply)
		i = encodeVarintTesting(dAtA, i, uint64(len(m.Reply)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PingClientStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingClientStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingClientStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Req) > 0 {
		i -= len(m.Req)
		copy(dAtA[i:], m.Req)
		i = encodeVarintTesting(dAtA, i, uint64(len(m.Req)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PingClientStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingClientStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingClientStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		i -= len(m.Reply)
		copy(dAtA[i:], m.Reply)
		i = encodeVarintTesting(dAtA, i, uint64(len(m.Reply)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PingServerStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingServerStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingServerStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Req) > 0 {
		i -= len(m.Req)
		copy(dAtA[i:], m.Req)
		i = encodeVarintTesting(dAtA, i, uint64(len(m.Req)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PingServerStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingServerStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingServerStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		i -= len(m.Reply)
		copy(dAtA[i:], m.Reply)
		i = encodeVarintTesting(dAtA, i, uint64(len(m.Reply)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTesting(dAtA []byte, offset int, v uint64) int {
	offset -= sovTesting(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Req)
	if l > 0 {
		n += 1 + l + sovTesting(uint64(l))
	}
	return n
}

func (m *PingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovTesting(uint64(l))
	}
	return n
}

func (m *PingClientStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Req)
	if l > 0 {
		n += 1 + l + sovTesting(uint64(l))
	}
	return n
}

func (m *PingClientStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovTesting(uint64(l))
	}
	return n
}

func (m *PingServerStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Req)
	if l > 0 {
		n += 1 + l + sovTesting(uint64(l))
	}
	return n
}

func (m *PingServerStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovTesting(uint64(l))
	}
	return n
}

func sovTesting(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTesting(x uint64) (n int) {
	return sovTesting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingRequest{`,
		`Req:` + fmt.Sprintf("%v", this.Req) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingResponse{`,
		`Reply:` + fmt.Sprintf("%v", this.Reply) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingClientStreamRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingClientStreamRequest{`,
		`Req:` + fmt.Sprintf("%v", this.Req) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingClientStreamResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingClientStreamResponse{`,
		`Reply:` + fmt.Sprintf("%v", this.Reply) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingServerStreamRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingServerStreamRequest{`,
		`Req:` + fmt.Sprintf("%v", this.Req) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingServerStreamResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingServerStreamResponse{`,
		`Reply:` + fmt.Sprintf("%v", this.Reply) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTesting(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTesting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Req = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTesting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTesting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTesting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTesting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTesting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingClientStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTesting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingClientStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingClientStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Req = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTesting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTesting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingClientStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTesting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingClientStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingClientStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTesting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTesting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingServerStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTesting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingServerStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingServerStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Req = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTesting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTesting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingServerStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTesting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingServerStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingServerStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTesting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTesting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTesting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTesting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTesting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTesting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTesting
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTesting
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTesting
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTesting        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTesting          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTesting = fmt.Errorf("proto: unexpected end of group")
)
