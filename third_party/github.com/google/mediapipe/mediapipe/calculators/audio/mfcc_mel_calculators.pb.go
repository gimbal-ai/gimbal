// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/audio/mfcc_mel_calculators.proto

package audio

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MelSpectrumCalculatorOptions struct {
	ChannelCount      *int32   `protobuf:"varint,1,opt,name=channel_count,json=channelCount,def=20" json:"channel_count,omitempty"`
	MinFrequencyHertz *float32 `protobuf:"fixed32,2,opt,name=min_frequency_hertz,json=minFrequencyHertz,def=125" json:"min_frequency_hertz,omitempty"`
	MaxFrequencyHertz *float32 `protobuf:"fixed32,3,opt,name=max_frequency_hertz,json=maxFrequencyHertz,def=3800" json:"max_frequency_hertz,omitempty"`
}

func (m *MelSpectrumCalculatorOptions) Reset()      { *m = MelSpectrumCalculatorOptions{} }
func (*MelSpectrumCalculatorOptions) ProtoMessage() {}
func (*MelSpectrumCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dc004d94e24c18, []int{0}
}
func (m *MelSpectrumCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MelSpectrumCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MelSpectrumCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MelSpectrumCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MelSpectrumCalculatorOptions.Merge(m, src)
}
func (m *MelSpectrumCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *MelSpectrumCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_MelSpectrumCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_MelSpectrumCalculatorOptions proto.InternalMessageInfo

const Default_MelSpectrumCalculatorOptions_ChannelCount int32 = 20
const Default_MelSpectrumCalculatorOptions_MinFrequencyHertz float32 = 125
const Default_MelSpectrumCalculatorOptions_MaxFrequencyHertz float32 = 3800

func (m *MelSpectrumCalculatorOptions) GetChannelCount() int32 {
	if m != nil && m.ChannelCount != nil {
		return *m.ChannelCount
	}
	return Default_MelSpectrumCalculatorOptions_ChannelCount
}

func (m *MelSpectrumCalculatorOptions) GetMinFrequencyHertz() float32 {
	if m != nil && m.MinFrequencyHertz != nil {
		return *m.MinFrequencyHertz
	}
	return Default_MelSpectrumCalculatorOptions_MinFrequencyHertz
}

func (m *MelSpectrumCalculatorOptions) GetMaxFrequencyHertz() float32 {
	if m != nil && m.MaxFrequencyHertz != nil {
		return *m.MaxFrequencyHertz
	}
	return Default_MelSpectrumCalculatorOptions_MaxFrequencyHertz
}

var E_MelSpectrumCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*MelSpectrumCalculatorOptions)(nil),
	Field:         78581812,
	Name:          "mediapipe.MelSpectrumCalculatorOptions.ext",
	Tag:           "bytes,78581812,opt,name=ext",
	Filename:      "mediapipe/calculators/audio/mfcc_mel_calculators.proto",
}

type MfccCalculatorOptions struct {
	MelSpectrumParams *MelSpectrumCalculatorOptions `protobuf:"bytes,1,opt,name=mel_spectrum_params,json=melSpectrumParams" json:"mel_spectrum_params,omitempty"`
	MfccCount         *uint32                       `protobuf:"varint,2,opt,name=mfcc_count,json=mfccCount,def=13" json:"mfcc_count,omitempty"`
}

func (m *MfccCalculatorOptions) Reset()      { *m = MfccCalculatorOptions{} }
func (*MfccCalculatorOptions) ProtoMessage() {}
func (*MfccCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dc004d94e24c18, []int{1}
}
func (m *MfccCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MfccCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MfccCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MfccCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MfccCalculatorOptions.Merge(m, src)
}
func (m *MfccCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *MfccCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_MfccCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_MfccCalculatorOptions proto.InternalMessageInfo

const Default_MfccCalculatorOptions_MfccCount uint32 = 13

func (m *MfccCalculatorOptions) GetMelSpectrumParams() *MelSpectrumCalculatorOptions {
	if m != nil {
		return m.MelSpectrumParams
	}
	return nil
}

func (m *MfccCalculatorOptions) GetMfccCount() uint32 {
	if m != nil && m.MfccCount != nil {
		return *m.MfccCount
	}
	return Default_MfccCalculatorOptions_MfccCount
}

var E_MfccCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*MfccCalculatorOptions)(nil),
	Field:         78450441,
	Name:          "mediapipe.MfccCalculatorOptions.ext",
	Tag:           "bytes,78450441,opt,name=ext",
	Filename:      "mediapipe/calculators/audio/mfcc_mel_calculators.proto",
}

func init() {
	proto.RegisterExtension(E_MelSpectrumCalculatorOptions_Ext)
	proto.RegisterType((*MelSpectrumCalculatorOptions)(nil), "mediapipe.MelSpectrumCalculatorOptions")
	proto.RegisterExtension(E_MfccCalculatorOptions_Ext)
	proto.RegisterType((*MfccCalculatorOptions)(nil), "mediapipe.MfccCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/audio/mfcc_mel_calculators.proto", fileDescriptor_49dc004d94e24c18)
}

var fileDescriptor_49dc004d94e24c18 = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0xcb, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f,
	0x2a, 0xd6, 0x4f, 0x2c, 0x4d, 0xc9, 0xcc, 0xd7, 0xcf, 0x4d, 0x4b, 0x4e, 0x8e, 0xcf, 0x4d, 0xcd,
	0x89, 0x47, 0x92, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0xeb, 0x93, 0x52, 0x41,
	0x18, 0x91, 0x56, 0x94, 0x98, 0x9b, 0x5a, 0x9e, 0x5f, 0x94, 0x8d, 0x64, 0x18, 0x44, 0x83, 0x52,
	0x1f, 0x13, 0x97, 0x8c, 0x6f, 0x6a, 0x4e, 0x70, 0x41, 0x6a, 0x72, 0x49, 0x51, 0x69, 0xae, 0x33,
	0x5c, 0xde, 0xbf, 0xa0, 0x24, 0x33, 0x3f, 0xaf, 0x58, 0x48, 0x9d, 0x8b, 0x37, 0x39, 0x23, 0x31,
	0x2f, 0x0f, 0x64, 0x5d, 0x7e, 0x69, 0x5e, 0x89, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xab, 0x15, 0x93,
	0x91, 0x41, 0x10, 0x0f, 0x54, 0xc2, 0x19, 0x24, 0x2e, 0x64, 0xcc, 0x25, 0x9c, 0x9b, 0x99, 0x17,
	0x9f, 0x56, 0x94, 0x5a, 0x58, 0x9a, 0x9a, 0x97, 0x5c, 0x19, 0x9f, 0x91, 0x5a, 0x54, 0x52, 0x25,
	0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x64, 0xc5, 0x6c, 0x68, 0x64, 0x1a, 0x24, 0x98, 0x9b, 0x99, 0xe7,
	0x06, 0x93, 0xf6, 0x00, 0xc9, 0x0a, 0x99, 0x70, 0x09, 0xe7, 0x26, 0x56, 0x60, 0x68, 0x62, 0x06,
	0x6b, 0x62, 0x31, 0xb6, 0x30, 0x30, 0x08, 0x12, 0xcc, 0x4d, 0xac, 0x40, 0xd5, 0x65, 0x14, 0xc5,
	0xc5, 0x9c, 0x5a, 0x51, 0x22, 0x24, 0xa3, 0x07, 0xf7, 0xa2, 0x1e, 0x86, 0xc3, 0x25, 0xb6, 0x2c,
	0xd8, 0xa3, 0xaa, 0xc0, 0xa8, 0xc1, 0x6d, 0xa4, 0x8e, 0xa4, 0x0c, 0x9f, 0x57, 0x83, 0x40, 0x86,
	0x2a, 0xbd, 0x60, 0xe4, 0x12, 0xf5, 0x4d, 0x4b, 0x4e, 0xc6, 0x0c, 0x89, 0x70, 0x2e, 0x61, 0x50,
	0xa0, 0x17, 0x43, 0xf5, 0xc7, 0x17, 0x24, 0x16, 0x25, 0xe6, 0x16, 0x83, 0xc3, 0x83, 0x04, 0x4b,
	0x04, 0x73, 0x11, 0xb2, 0x01, 0x60, 0x13, 0x84, 0x14, 0xb9, 0xb8, 0xc0, 0x51, 0x0a, 0x09, 0x5f,
	0x50, 0x80, 0xf1, 0x5a, 0x31, 0x19, 0x1a, 0x07, 0x71, 0x82, 0x44, 0xc1, 0x81, 0x6b, 0x14, 0x4c,
	0x8c, 0x8f, 0x3b, 0xe7, 0x6d, 0x81, 0xf8, 0x58, 0x01, 0xd9, 0x31, 0xd8, 0xfc, 0x02, 0xf6, 0xaa,
	0x53, 0xee, 0x85, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca, 0x31, 0x7c, 0x78, 0x28, 0xc7, 0xd8, 0xf0,
	0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c,
	0xf0, 0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39, 0x86, 0x0f, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63,
	0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xf3, 0xf4, 0xcc, 0x92, 0x8c, 0xd2,
	0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0x7d, 0x44, 0x4a, 0xc3,
	0x93, 0x6c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x70, 0x16, 0x32, 0xca, 0xd4, 0x02, 0x00, 0x00,
}

func (this *MelSpectrumCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MelSpectrumCalculatorOptions)
	if !ok {
		that2, ok := that.(MelSpectrumCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChannelCount != nil && that1.ChannelCount != nil {
		if *this.ChannelCount != *that1.ChannelCount {
			return false
		}
	} else if this.ChannelCount != nil {
		return false
	} else if that1.ChannelCount != nil {
		return false
	}
	if this.MinFrequencyHertz != nil && that1.MinFrequencyHertz != nil {
		if *this.MinFrequencyHertz != *that1.MinFrequencyHertz {
			return false
		}
	} else if this.MinFrequencyHertz != nil {
		return false
	} else if that1.MinFrequencyHertz != nil {
		return false
	}
	if this.MaxFrequencyHertz != nil && that1.MaxFrequencyHertz != nil {
		if *this.MaxFrequencyHertz != *that1.MaxFrequencyHertz {
			return false
		}
	} else if this.MaxFrequencyHertz != nil {
		return false
	} else if that1.MaxFrequencyHertz != nil {
		return false
	}
	return true
}
func (this *MfccCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MfccCalculatorOptions)
	if !ok {
		that2, ok := that.(MfccCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MelSpectrumParams.Equal(that1.MelSpectrumParams) {
		return false
	}
	if this.MfccCount != nil && that1.MfccCount != nil {
		if *this.MfccCount != *that1.MfccCount {
			return false
		}
	} else if this.MfccCount != nil {
		return false
	} else if that1.MfccCount != nil {
		return false
	}
	return true
}
func (this *MelSpectrumCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&audio.MelSpectrumCalculatorOptions{")
	if this.ChannelCount != nil {
		s = append(s, "ChannelCount: "+valueToGoStringMfccMelCalculators(this.ChannelCount, "int32")+",\n")
	}
	if this.MinFrequencyHertz != nil {
		s = append(s, "MinFrequencyHertz: "+valueToGoStringMfccMelCalculators(this.MinFrequencyHertz, "float32")+",\n")
	}
	if this.MaxFrequencyHertz != nil {
		s = append(s, "MaxFrequencyHertz: "+valueToGoStringMfccMelCalculators(this.MaxFrequencyHertz, "float32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MfccCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&audio.MfccCalculatorOptions{")
	if this.MelSpectrumParams != nil {
		s = append(s, "MelSpectrumParams: "+fmt.Sprintf("%#v", this.MelSpectrumParams)+",\n")
	}
	if this.MfccCount != nil {
		s = append(s, "MfccCount: "+valueToGoStringMfccMelCalculators(this.MfccCount, "uint32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMfccMelCalculators(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MelSpectrumCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MelSpectrumCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MelSpectrumCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxFrequencyHertz != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.MaxFrequencyHertz))))
		i--
		dAtA[i] = 0x1d
	}
	if m.MinFrequencyHertz != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.MinFrequencyHertz))))
		i--
		dAtA[i] = 0x15
	}
	if m.ChannelCount != nil {
		i = encodeVarintMfccMelCalculators(dAtA, i, uint64(*m.ChannelCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MfccCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MfccCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MfccCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MfccCount != nil {
		i = encodeVarintMfccMelCalculators(dAtA, i, uint64(*m.MfccCount))
		i--
		dAtA[i] = 0x10
	}
	if m.MelSpectrumParams != nil {
		{
			size, err := m.MelSpectrumParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMfccMelCalculators(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMfccMelCalculators(dAtA []byte, offset int, v uint64) int {
	offset -= sovMfccMelCalculators(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MelSpectrumCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelCount != nil {
		n += 1 + sovMfccMelCalculators(uint64(*m.ChannelCount))
	}
	if m.MinFrequencyHertz != nil {
		n += 5
	}
	if m.MaxFrequencyHertz != nil {
		n += 5
	}
	return n
}

func (m *MfccCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MelSpectrumParams != nil {
		l = m.MelSpectrumParams.Size()
		n += 1 + l + sovMfccMelCalculators(uint64(l))
	}
	if m.MfccCount != nil {
		n += 1 + sovMfccMelCalculators(uint64(*m.MfccCount))
	}
	return n
}

func sovMfccMelCalculators(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMfccMelCalculators(x uint64) (n int) {
	return sovMfccMelCalculators(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MelSpectrumCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MelSpectrumCalculatorOptions{`,
		`ChannelCount:` + valueToStringMfccMelCalculators(this.ChannelCount) + `,`,
		`MinFrequencyHertz:` + valueToStringMfccMelCalculators(this.MinFrequencyHertz) + `,`,
		`MaxFrequencyHertz:` + valueToStringMfccMelCalculators(this.MaxFrequencyHertz) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MfccCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MfccCalculatorOptions{`,
		`MelSpectrumParams:` + strings.Replace(this.MelSpectrumParams.String(), "MelSpectrumCalculatorOptions", "MelSpectrumCalculatorOptions", 1) + `,`,
		`MfccCount:` + valueToStringMfccMelCalculators(this.MfccCount) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMfccMelCalculators(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MelSpectrumCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMfccMelCalculators
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MelSpectrumCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MelSpectrumCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfccMelCalculators
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChannelCount = &v
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFrequencyHertz", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.MinFrequencyHertz = &v2
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFrequencyHertz", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.MaxFrequencyHertz = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipMfccMelCalculators(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMfccMelCalculators
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MfccCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMfccMelCalculators
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MfccCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MfccCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MelSpectrumParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfccMelCalculators
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMfccMelCalculators
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMfccMelCalculators
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MelSpectrumParams == nil {
				m.MelSpectrumParams = &MelSpectrumCalculatorOptions{}
			}
			if err := m.MelSpectrumParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MfccCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfccMelCalculators
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MfccCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipMfccMelCalculators(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMfccMelCalculators
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMfccMelCalculators(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMfccMelCalculators
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMfccMelCalculators
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMfccMelCalculators
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMfccMelCalculators
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMfccMelCalculators
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMfccMelCalculators
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMfccMelCalculators        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMfccMelCalculators          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMfccMelCalculators = fmt.Errorf("proto: unexpected end of group")
)
