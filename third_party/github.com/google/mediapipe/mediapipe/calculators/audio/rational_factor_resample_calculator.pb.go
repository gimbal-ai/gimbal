// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/audio/rational_factor_resample_calculator.proto

package audio

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RationalFactorResampleCalculatorOptions struct {
	TargetSampleRate               float64                                                                 `protobuf:"fixed64,1,opt,name=target_sample_rate,json=targetSampleRate" json:"target_sample_rate"`
	ResamplerRationalFactorOptions *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions `protobuf:"bytes,2,opt,name=resampler_rational_factor_options,json=resamplerRationalFactorOptions" json:"resampler_rational_factor_options,omitempty"`
	CheckInconsistentTimestamps    *bool                                                                   `protobuf:"varint,3,opt,name=check_inconsistent_timestamps,json=checkInconsistentTimestamps,def=1" json:"check_inconsistent_timestamps,omitempty"`
}

func (m *RationalFactorResampleCalculatorOptions) Reset() {
	*m = RationalFactorResampleCalculatorOptions{}
}
func (*RationalFactorResampleCalculatorOptions) ProtoMessage() {}
func (*RationalFactorResampleCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0641f8a9e86db8, []int{0}
}
func (m *RationalFactorResampleCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RationalFactorResampleCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RationalFactorResampleCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RationalFactorResampleCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RationalFactorResampleCalculatorOptions.Merge(m, src)
}
func (m *RationalFactorResampleCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *RationalFactorResampleCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RationalFactorResampleCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RationalFactorResampleCalculatorOptions proto.InternalMessageInfo

const Default_RationalFactorResampleCalculatorOptions_CheckInconsistentTimestamps bool = true

func (m *RationalFactorResampleCalculatorOptions) GetTargetSampleRate() float64 {
	if m != nil {
		return m.TargetSampleRate
	}
	return 0
}

func (m *RationalFactorResampleCalculatorOptions) GetResamplerRationalFactorOptions() *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions {
	if m != nil {
		return m.ResamplerRationalFactorOptions
	}
	return nil
}

func (m *RationalFactorResampleCalculatorOptions) GetCheckInconsistentTimestamps() bool {
	if m != nil && m.CheckInconsistentTimestamps != nil {
		return *m.CheckInconsistentTimestamps
	}
	return Default_RationalFactorResampleCalculatorOptions_CheckInconsistentTimestamps
}

var E_RationalFactorResampleCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*RationalFactorResampleCalculatorOptions)(nil),
	Field:         259760074,
	Name:          "mediapipe.RationalFactorResampleCalculatorOptions.ext",
	Tag:           "bytes,259760074,opt,name=ext",
	Filename:      "mediapipe/calculators/audio/rational_factor_resample_calculator.proto",
}

type RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions struct {
	Radius     float64  `protobuf:"fixed64,1,opt,name=radius" json:"radius"`
	Cutoff     float64  `protobuf:"fixed64,2,opt,name=cutoff" json:"cutoff"`
	KaiserBeta *float64 `protobuf:"fixed64,3,opt,name=kaiser_beta,json=kaiserBeta,def=6" json:"kaiser_beta,omitempty"`
}

func (m *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) Reset() {
	*m = RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions{}
}
func (*RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) ProtoMessage() {}
func (*RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0641f8a9e86db8, []int{0, 0}
}
func (m *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions.Merge(m, src)
}
func (m *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) XXX_Size() int {
	return m.Size()
}
func (m *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions proto.InternalMessageInfo

const Default_RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions_KaiserBeta float64 = 6

func (m *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) GetRadius() float64 {
	if m != nil {
		return m.Radius
	}
	return 0
}

func (m *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) GetCutoff() float64 {
	if m != nil {
		return m.Cutoff
	}
	return 0
}

func (m *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) GetKaiserBeta() float64 {
	if m != nil && m.KaiserBeta != nil {
		return *m.KaiserBeta
	}
	return Default_RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions_KaiserBeta
}

func init() {
	proto.RegisterExtension(E_RationalFactorResampleCalculatorOptions_Ext)
	proto.RegisterType((*RationalFactorResampleCalculatorOptions)(nil), "mediapipe.RationalFactorResampleCalculatorOptions")
	proto.RegisterType((*RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions)(nil), "mediapipe.RationalFactorResampleCalculatorOptions.ResamplerRationalFactorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/audio/rational_factor_resample_calculator.proto", fileDescriptor_7c0641f8a9e86db8)
}

var fileDescriptor_7c0641f8a9e86db8 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xb1, 0x6e, 0x13, 0x41,
	0x10, 0x86, 0x6f, 0x88, 0x85, 0x60, 0xd3, 0xa0, 0xab, 0xac, 0x10, 0x16, 0x13, 0x21, 0xe1, 0xea,
	0x4e, 0x72, 0x01, 0x52, 0x4a, 0x23, 0x10, 0x54, 0x88, 0x85, 0x8a, 0x66, 0x35, 0x59, 0x8f, 0x9d,
	0x95, 0xef, 0xbc, 0xa7, 0xdd, 0x39, 0x81, 0x44, 0x93, 0x47, 0xe0, 0x01, 0x78, 0x00, 0x4a, 0xde,
	0x80, 0x36, 0xa2, 0x72, 0x99, 0x0a, 0xe1, 0x73, 0x43, 0x85, 0xf2, 0x08, 0xc8, 0xe7, 0xcb, 0x39,
	0x09, 0x92, 0x05, 0xed, 0x7c, 0xff, 0xfc, 0xfb, 0xef, 0xaf, 0x11, 0xcf, 0x72, 0x1a, 0x59, 0x2c,
	0x6c, 0x41, 0xa9, 0xc1, 0xcc, 0x94, 0x19, 0xb2, 0xf3, 0x21, 0xc5, 0x72, 0x64, 0x5d, 0xea, 0x91,
	0xad, 0x9b, 0x61, 0xa6, 0xc7, 0x68, 0xd8, 0x79, 0xed, 0x29, 0x60, 0x5e, 0x64, 0xa4, 0x37, 0xd2,
	0xa4, 0xf0, 0x8e, 0x5d, 0x7c, 0xbb, 0xb5, 0xd9, 0x7b, 0xb8, 0x71, 0x1c, 0x7b, 0xcc, 0xe9, 0xbd,
	0xf3, 0xd3, 0xf4, 0xfa, 0xc2, 0xc1, 0xd7, 0x8e, 0x78, 0xa4, 0x1a, 0xfb, 0xe7, 0xb5, 0xbb, 0x6a,
	0xcc, 0x9f, 0xb6, 0xd2, 0x57, 0xc5, 0x8a, 0x87, 0x78, 0x20, 0x62, 0x46, 0x3f, 0x21, 0xd6, 0xcd,
	0xf3, 0x1e, 0x99, 0xba, 0xd0, 0x83, 0x3e, 0x0c, 0x3b, 0xa7, 0x3f, 0xee, 0x47, 0xea, 0xce, 0x9a,
	0xbf, 0xa9, 0xb1, 0x42, 0xa6, 0xf8, 0x33, 0x88, 0x07, 0x17, 0x71, 0xbd, 0xbe, 0xfe, 0x11, 0xb7,
	0x76, 0xee, 0xde, 0xe8, 0x41, 0x7f, 0x77, 0xf0, 0x3a, 0x69, 0x23, 0x27, 0xff, 0x98, 0x29, 0xb9,
	0x20, 0xfe, 0xea, 0x42, 0x83, 0x95, 0xf4, 0x5b, 0x79, 0xfc, 0x42, 0xdc, 0x33, 0xc7, 0x64, 0xa6,
	0xda, 0xce, 0x8c, 0x9b, 0x05, 0x1b, 0x98, 0x66, 0xac, 0xd9, 0xe6, 0x14, 0x18, 0xf3, 0x22, 0x74,
	0x77, 0x7a, 0xd0, 0xbf, 0x75, 0xd8, 0x61, 0x5f, 0x92, 0xba, 0x5b, 0x4b, 0x5f, 0x5e, 0x52, 0xbe,
	0x6d, 0x85, 0x7b, 0x27, 0x20, 0xe4, 0xf6, 0x30, 0xf1, 0xbe, 0xb8, 0xe9, 0x71, 0x64, 0xcb, 0x70,
	0xa5, 0xb3, 0x66, 0xb6, 0xa2, 0xa6, 0x64, 0x37, 0x1e, 0xd7, 0x6d, 0xb4, 0x74, 0x3d, 0x8b, 0x0f,
	0xc4, 0xee, 0x14, 0x6d, 0x20, 0xaf, 0x8f, 0x88, 0xb1, 0x8e, 0x05, 0x87, 0xf0, 0x58, 0x89, 0xf5,
	0x74, 0x48, 0x8c, 0x03, 0x12, 0x3b, 0xf4, 0x81, 0xe3, 0xfd, 0x4b, 0x35, 0xfe, 0x55, 0x58, 0xf7,
	0xfb, 0xb7, 0xdf, 0x1f, 0xeb, 0xb6, 0x07, 0xff, 0xdf, 0xb6, 0x5a, 0xf9, 0x0f, 0xf3, 0xf9, 0x42,
	0x46, 0x67, 0x0b, 0x19, 0x9d, 0x2f, 0x24, 0x9c, 0x54, 0x12, 0xbe, 0x54, 0x12, 0x4e, 0x2b, 0x09,
	0xf3, 0x4a, 0xc2, 0xcf, 0x4a, 0xc2, 0xaf, 0x4a, 0x46, 0xe7, 0x95, 0x84, 0x4f, 0x4b, 0x19, 0xcd,
	0x97, 0x32, 0x3a, 0x5b, 0xca, 0xe8, 0xdd, 0x93, 0x89, 0xe5, 0xe3, 0xf2, 0x28, 0x31, 0x2e, 0x4f,
	0x27, 0xce, 0x4d, 0x32, 0x4a, 0x37, 0x07, 0xba, 0xe5, 0xf8, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xfb, 0x05, 0x4f, 0x8e, 0x1a, 0x03, 0x00, 0x00,
}

func (this *RationalFactorResampleCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RationalFactorResampleCalculatorOptions)
	if !ok {
		that2, ok := that.(RationalFactorResampleCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TargetSampleRate != that1.TargetSampleRate {
		return false
	}
	if !this.ResamplerRationalFactorOptions.Equal(that1.ResamplerRationalFactorOptions) {
		return false
	}
	if this.CheckInconsistentTimestamps != nil && that1.CheckInconsistentTimestamps != nil {
		if *this.CheckInconsistentTimestamps != *that1.CheckInconsistentTimestamps {
			return false
		}
	} else if this.CheckInconsistentTimestamps != nil {
		return false
	} else if that1.CheckInconsistentTimestamps != nil {
		return false
	}
	return true
}
func (this *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions)
	if !ok {
		that2, ok := that.(RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Radius != that1.Radius {
		return false
	}
	if this.Cutoff != that1.Cutoff {
		return false
	}
	if this.KaiserBeta != nil && that1.KaiserBeta != nil {
		if *this.KaiserBeta != *that1.KaiserBeta {
			return false
		}
	} else if this.KaiserBeta != nil {
		return false
	} else if that1.KaiserBeta != nil {
		return false
	}
	return true
}
func (this *RationalFactorResampleCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&audio.RationalFactorResampleCalculatorOptions{")
	s = append(s, "TargetSampleRate: "+fmt.Sprintf("%#v", this.TargetSampleRate)+",\n")
	if this.ResamplerRationalFactorOptions != nil {
		s = append(s, "ResamplerRationalFactorOptions: "+fmt.Sprintf("%#v", this.ResamplerRationalFactorOptions)+",\n")
	}
	if this.CheckInconsistentTimestamps != nil {
		s = append(s, "CheckInconsistentTimestamps: "+valueToGoStringRationalFactorResampleCalculator(this.CheckInconsistentTimestamps, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&audio.RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions{")
	s = append(s, "Radius: "+fmt.Sprintf("%#v", this.Radius)+",\n")
	s = append(s, "Cutoff: "+fmt.Sprintf("%#v", this.Cutoff)+",\n")
	if this.KaiserBeta != nil {
		s = append(s, "KaiserBeta: "+valueToGoStringRationalFactorResampleCalculator(this.KaiserBeta, "float64")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRationalFactorResampleCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RationalFactorResampleCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RationalFactorResampleCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RationalFactorResampleCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CheckInconsistentTimestamps != nil {
		i--
		if *m.CheckInconsistentTimestamps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ResamplerRationalFactorOptions != nil {
		{
			size, err := m.ResamplerRationalFactorOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRationalFactorResampleCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TargetSampleRate))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KaiserBeta != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.KaiserBeta))))
		i--
		dAtA[i] = 0x19
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Cutoff))))
	i--
	dAtA[i] = 0x11
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Radius))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func encodeVarintRationalFactorResampleCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovRationalFactorResampleCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RationalFactorResampleCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	if m.ResamplerRationalFactorOptions != nil {
		l = m.ResamplerRationalFactorOptions.Size()
		n += 1 + l + sovRationalFactorResampleCalculator(uint64(l))
	}
	if m.CheckInconsistentTimestamps != nil {
		n += 2
	}
	return n
}

func (m *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	if m.KaiserBeta != nil {
		n += 9
	}
	return n
}

func sovRationalFactorResampleCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRationalFactorResampleCalculator(x uint64) (n int) {
	return sovRationalFactorResampleCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RationalFactorResampleCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RationalFactorResampleCalculatorOptions{`,
		`TargetSampleRate:` + fmt.Sprintf("%v", this.TargetSampleRate) + `,`,
		`ResamplerRationalFactorOptions:` + strings.Replace(fmt.Sprintf("%v", this.ResamplerRationalFactorOptions), "RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions", "RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions", 1) + `,`,
		`CheckInconsistentTimestamps:` + valueToStringRationalFactorResampleCalculator(this.CheckInconsistentTimestamps) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions{`,
		`Radius:` + fmt.Sprintf("%v", this.Radius) + `,`,
		`Cutoff:` + fmt.Sprintf("%v", this.Cutoff) + `,`,
		`KaiserBeta:` + valueToStringRationalFactorResampleCalculator(this.KaiserBeta) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRationalFactorResampleCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RationalFactorResampleCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRationalFactorResampleCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RationalFactorResampleCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RationalFactorResampleCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSampleRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TargetSampleRate = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResamplerRationalFactorOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRationalFactorResampleCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRationalFactorResampleCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRationalFactorResampleCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResamplerRationalFactorOptions == nil {
				m.ResamplerRationalFactorOptions = &RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions{}
			}
			if err := m.ResamplerRationalFactorOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckInconsistentTimestamps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRationalFactorResampleCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CheckInconsistentTimestamps = &b
		default:
			iNdEx = preIndex
			skippy, err := skipRationalFactorResampleCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRationalFactorResampleCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RationalFactorResampleCalculatorOptions_ResamplerRationalFactorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRationalFactorResampleCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResamplerRationalFactorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResamplerRationalFactorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radius", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Radius = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cutoff", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Cutoff = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field KaiserBeta", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.KaiserBeta = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipRationalFactorResampleCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRationalFactorResampleCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRationalFactorResampleCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRationalFactorResampleCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRationalFactorResampleCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRationalFactorResampleCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRationalFactorResampleCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRationalFactorResampleCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRationalFactorResampleCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRationalFactorResampleCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRationalFactorResampleCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRationalFactorResampleCalculator = fmt.Errorf("proto: unexpected end of group")
)
