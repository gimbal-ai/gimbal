// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/audio/stabilized_log_calculator.proto

package audio

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StabilizedLogCalculatorOptions struct {
	Stabilizer         *float32 `protobuf:"fixed32,1,opt,name=stabilizer,def=1e-05" json:"stabilizer,omitempty"`
	CheckNonnegativity *bool    `protobuf:"varint,2,opt,name=check_nonnegativity,json=checkNonnegativity,def=1" json:"check_nonnegativity,omitempty"`
	OutputScale        *float64 `protobuf:"fixed64,3,opt,name=output_scale,json=outputScale,def=1" json:"output_scale,omitempty"`
}

func (m *StabilizedLogCalculatorOptions) Reset()      { *m = StabilizedLogCalculatorOptions{} }
func (*StabilizedLogCalculatorOptions) ProtoMessage() {}
func (*StabilizedLogCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_857881888629b72d, []int{0}
}
func (m *StabilizedLogCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StabilizedLogCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StabilizedLogCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StabilizedLogCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StabilizedLogCalculatorOptions.Merge(m, src)
}
func (m *StabilizedLogCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *StabilizedLogCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_StabilizedLogCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_StabilizedLogCalculatorOptions proto.InternalMessageInfo

const Default_StabilizedLogCalculatorOptions_Stabilizer float32 = 1e-05
const Default_StabilizedLogCalculatorOptions_CheckNonnegativity bool = true
const Default_StabilizedLogCalculatorOptions_OutputScale float64 = 1

func (m *StabilizedLogCalculatorOptions) GetStabilizer() float32 {
	if m != nil && m.Stabilizer != nil {
		return *m.Stabilizer
	}
	return Default_StabilizedLogCalculatorOptions_Stabilizer
}

func (m *StabilizedLogCalculatorOptions) GetCheckNonnegativity() bool {
	if m != nil && m.CheckNonnegativity != nil {
		return *m.CheckNonnegativity
	}
	return Default_StabilizedLogCalculatorOptions_CheckNonnegativity
}

func (m *StabilizedLogCalculatorOptions) GetOutputScale() float64 {
	if m != nil && m.OutputScale != nil {
		return *m.OutputScale
	}
	return Default_StabilizedLogCalculatorOptions_OutputScale
}

var E_StabilizedLogCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*StabilizedLogCalculatorOptions)(nil),
	Field:         101978339,
	Name:          "mediapipe.StabilizedLogCalculatorOptions.ext",
	Tag:           "bytes,101978339,opt,name=ext",
	Filename:      "mediapipe/calculators/audio/stabilized_log_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_StabilizedLogCalculatorOptions_Ext)
	proto.RegisterType((*StabilizedLogCalculatorOptions)(nil), "mediapipe.StabilizedLogCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/audio/stabilized_log_calculator.proto", fileDescriptor_857881888629b72d)
}

var fileDescriptor_857881888629b72d = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x3f, 0x4b, 0xc3, 0x40,
	0x18, 0xc6, 0xf3, 0xb6, 0x0a, 0x7a, 0x75, 0x8a, 0x4b, 0x10, 0x79, 0x09, 0x52, 0x21, 0x0e, 0x26,
	0x6d, 0xa1, 0x08, 0x75, 0xd3, 0x55, 0x14, 0xd2, 0x4d, 0x84, 0x70, 0x4d, 0xcf, 0xf4, 0x68, 0x92,
	0x0b, 0xc9, 0xc5, 0x7f, 0x93, 0xf8, 0x09, 0xfc, 0x0a, 0x6e, 0x7e, 0x14, 0xc7, 0x8c, 0x1d, 0xed,
	0x65, 0x71, 0xec, 0x47, 0x90, 0x2a, 0xa4, 0x41, 0xa1, 0xeb, 0xf3, 0xfc, 0x9e, 0xe7, 0xee, 0xb9,
	0x23, 0xa7, 0x11, 0x1b, 0x73, 0x9a, 0xf0, 0x84, 0x39, 0x3e, 0x0d, 0xfd, 0x3c, 0xa4, 0x52, 0xa4,
	0x99, 0x43, 0xf3, 0x31, 0x17, 0x4e, 0x26, 0xe9, 0x88, 0x87, 0xfc, 0x89, 0x8d, 0xbd, 0x50, 0x04,
	0xde, 0x0a, 0xb0, 0x93, 0x54, 0x48, 0xa1, 0x6f, 0x57, 0xe1, 0xbd, 0xf6, 0xaa, 0xe7, 0x36, 0xa5,
	0x11, 0xbb, 0x17, 0xe9, 0xd4, 0xf9, 0x1b, 0x38, 0x78, 0x69, 0x10, 0x1c, 0x56, 0xa5, 0x17, 0x22,
	0x38, 0xaf, 0x88, 0xab, 0x44, 0x72, 0x11, 0x67, 0xfa, 0x21, 0x21, 0xd5, 0xb1, 0xa9, 0x01, 0x26,
	0x58, 0x8d, 0xc1, 0x66, 0x97, 0x1d, 0x77, 0xfa, 0x6e, 0xcd, 0xd0, 0xfb, 0x64, 0xd7, 0x9f, 0x30,
	0x7f, 0xea, 0xc5, 0x22, 0x8e, 0x59, 0x40, 0x25, 0xbf, 0xe3, 0xf2, 0xd1, 0x68, 0x98, 0x60, 0x6d,
	0x0d, 0x36, 0x64, 0x9a, 0x33, 0x57, 0xff, 0x01, 0x2e, 0xeb, 0xbe, 0xde, 0x26, 0x3b, 0x22, 0x97,
	0x49, 0x2e, 0xbd, 0xcc, 0xa7, 0x21, 0x33, 0x9a, 0x26, 0x58, 0x30, 0x80, 0xae, 0xdb, 0xfa, 0x95,
	0x87, 0x4b, 0xb5, 0x77, 0x43, 0x9a, 0xec, 0x41, 0xea, 0xfb, 0x76, 0x35, 0xca, 0xfe, 0x77, 0x51,
	0xa3, 0x7c, 0x2b, 0x3a, 0x26, 0x58, 0xad, 0xde, 0x51, 0x0d, 0x5b, 0x3f, 0xce, 0x5d, 0xd6, 0x9e,
	0x45, 0xc5, 0x1c, 0xb5, 0xd9, 0x1c, 0xb5, 0xc5, 0x1c, 0xe1, 0x59, 0x21, 0xbc, 0x2b, 0x84, 0x0f,
	0x85, 0x50, 0x28, 0x84, 0x4f, 0x85, 0xf0, 0xa5, 0x50, 0x5b, 0x28, 0x84, 0xd7, 0x12, 0xb5, 0xa2,
	0x44, 0x6d, 0x56, 0xa2, 0x76, 0x7d, 0x12, 0x70, 0x39, 0xc9, 0x47, 0xb6, 0x2f, 0x22, 0x27, 0x10,
	0x22, 0x08, 0x99, 0xb3, 0x7a, 0xf2, 0x35, 0x9f, 0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xe3,
	0xe7, 0x4a, 0xe2, 0x01, 0x00, 0x00,
}

func (this *StabilizedLogCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StabilizedLogCalculatorOptions)
	if !ok {
		that2, ok := that.(StabilizedLogCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Stabilizer != nil && that1.Stabilizer != nil {
		if *this.Stabilizer != *that1.Stabilizer {
			return false
		}
	} else if this.Stabilizer != nil {
		return false
	} else if that1.Stabilizer != nil {
		return false
	}
	if this.CheckNonnegativity != nil && that1.CheckNonnegativity != nil {
		if *this.CheckNonnegativity != *that1.CheckNonnegativity {
			return false
		}
	} else if this.CheckNonnegativity != nil {
		return false
	} else if that1.CheckNonnegativity != nil {
		return false
	}
	if this.OutputScale != nil && that1.OutputScale != nil {
		if *this.OutputScale != *that1.OutputScale {
			return false
		}
	} else if this.OutputScale != nil {
		return false
	} else if that1.OutputScale != nil {
		return false
	}
	return true
}
func (this *StabilizedLogCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&audio.StabilizedLogCalculatorOptions{")
	if this.Stabilizer != nil {
		s = append(s, "Stabilizer: "+valueToGoStringStabilizedLogCalculator(this.Stabilizer, "float32")+",\n")
	}
	if this.CheckNonnegativity != nil {
		s = append(s, "CheckNonnegativity: "+valueToGoStringStabilizedLogCalculator(this.CheckNonnegativity, "bool")+",\n")
	}
	if this.OutputScale != nil {
		s = append(s, "OutputScale: "+valueToGoStringStabilizedLogCalculator(this.OutputScale, "float64")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStabilizedLogCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *StabilizedLogCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StabilizedLogCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StabilizedLogCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutputScale != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.OutputScale))))
		i--
		dAtA[i] = 0x19
	}
	if m.CheckNonnegativity != nil {
		i--
		if *m.CheckNonnegativity {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Stabilizer != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Stabilizer))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func encodeVarintStabilizedLogCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovStabilizedLogCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StabilizedLogCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stabilizer != nil {
		n += 5
	}
	if m.CheckNonnegativity != nil {
		n += 2
	}
	if m.OutputScale != nil {
		n += 9
	}
	return n
}

func sovStabilizedLogCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStabilizedLogCalculator(x uint64) (n int) {
	return sovStabilizedLogCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StabilizedLogCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StabilizedLogCalculatorOptions{`,
		`Stabilizer:` + valueToStringStabilizedLogCalculator(this.Stabilizer) + `,`,
		`CheckNonnegativity:` + valueToStringStabilizedLogCalculator(this.CheckNonnegativity) + `,`,
		`OutputScale:` + valueToStringStabilizedLogCalculator(this.OutputScale) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStabilizedLogCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StabilizedLogCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStabilizedLogCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StabilizedLogCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StabilizedLogCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stabilizer", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Stabilizer = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckNonnegativity", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStabilizedLogCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CheckNonnegativity = &b
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputScale", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.OutputScale = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipStabilizedLogCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStabilizedLogCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStabilizedLogCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStabilizedLogCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStabilizedLogCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStabilizedLogCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStabilizedLogCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStabilizedLogCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStabilizedLogCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStabilizedLogCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStabilizedLogCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStabilizedLogCalculator = fmt.Errorf("proto: unexpected end of group")
)
