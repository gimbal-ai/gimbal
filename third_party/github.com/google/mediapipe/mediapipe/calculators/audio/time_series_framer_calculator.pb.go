// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/audio/time_series_framer_calculator.proto

package audio

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TimeSeriesFramerCalculatorOptions_WindowFunction int32

const (
	WINDOW_NONE    TimeSeriesFramerCalculatorOptions_WindowFunction = 0
	WINDOW_HAMMING TimeSeriesFramerCalculatorOptions_WindowFunction = 1
	WINDOW_HANN    TimeSeriesFramerCalculatorOptions_WindowFunction = 2
)

var TimeSeriesFramerCalculatorOptions_WindowFunction_name = map[int32]string{
	0: "WINDOW_NONE",
	1: "WINDOW_HAMMING",
	2: "WINDOW_HANN",
}

var TimeSeriesFramerCalculatorOptions_WindowFunction_value = map[string]int32{
	"WINDOW_NONE":    0,
	"WINDOW_HAMMING": 1,
	"WINDOW_HANN":    2,
}

func (x TimeSeriesFramerCalculatorOptions_WindowFunction) Enum() *TimeSeriesFramerCalculatorOptions_WindowFunction {
	p := new(TimeSeriesFramerCalculatorOptions_WindowFunction)
	*p = x
	return p
}

func (x TimeSeriesFramerCalculatorOptions_WindowFunction) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(TimeSeriesFramerCalculatorOptions_WindowFunction_name, int32(x))
}

func (x *TimeSeriesFramerCalculatorOptions_WindowFunction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TimeSeriesFramerCalculatorOptions_WindowFunction_value, data, "TimeSeriesFramerCalculatorOptions_WindowFunction")
	if err != nil {
		return err
	}
	*x = TimeSeriesFramerCalculatorOptions_WindowFunction(value)
	return nil
}

func (TimeSeriesFramerCalculatorOptions_WindowFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e506b1b38d51020c, []int{0, 0}
}

type TimeSeriesFramerCalculatorOptions struct {
	FrameDurationSeconds          float64                                           `protobuf:"fixed64,1,opt,name=frame_duration_seconds,json=frameDurationSeconds" json:"frame_duration_seconds"`
	FrameOverlapSeconds           *float64                                          `protobuf:"fixed64,2,opt,name=frame_overlap_seconds,json=frameOverlapSeconds,def=0" json:"frame_overlap_seconds,omitempty"`
	EmulateFractionalFrameOverlap *bool                                             `protobuf:"varint,5,opt,name=emulate_fractional_frame_overlap,json=emulateFractionalFrameOverlap,def=0" json:"emulate_fractional_frame_overlap,omitempty"`
	PadFinalPacket                *bool                                             `protobuf:"varint,3,opt,name=pad_final_packet,json=padFinalPacket,def=1" json:"pad_final_packet,omitempty"`
	WindowFunction                *TimeSeriesFramerCalculatorOptions_WindowFunction `protobuf:"varint,4,opt,name=window_function,json=windowFunction,enum=mediapipe.TimeSeriesFramerCalculatorOptions_WindowFunction,def=0" json:"window_function,omitempty"`
	UseLocalTimestamp             *bool                                             `protobuf:"varint,6,opt,name=use_local_timestamp,json=useLocalTimestamp,def=0" json:"use_local_timestamp,omitempty"`
}

func (m *TimeSeriesFramerCalculatorOptions) Reset()      { *m = TimeSeriesFramerCalculatorOptions{} }
func (*TimeSeriesFramerCalculatorOptions) ProtoMessage() {}
func (*TimeSeriesFramerCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_e506b1b38d51020c, []int{0}
}
func (m *TimeSeriesFramerCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeSeriesFramerCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeSeriesFramerCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeSeriesFramerCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeSeriesFramerCalculatorOptions.Merge(m, src)
}
func (m *TimeSeriesFramerCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *TimeSeriesFramerCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeSeriesFramerCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TimeSeriesFramerCalculatorOptions proto.InternalMessageInfo

const Default_TimeSeriesFramerCalculatorOptions_FrameOverlapSeconds float64 = 0
const Default_TimeSeriesFramerCalculatorOptions_EmulateFractionalFrameOverlap bool = false
const Default_TimeSeriesFramerCalculatorOptions_PadFinalPacket bool = true
const Default_TimeSeriesFramerCalculatorOptions_WindowFunction TimeSeriesFramerCalculatorOptions_WindowFunction = WINDOW_NONE
const Default_TimeSeriesFramerCalculatorOptions_UseLocalTimestamp bool = false

func (m *TimeSeriesFramerCalculatorOptions) GetFrameDurationSeconds() float64 {
	if m != nil {
		return m.FrameDurationSeconds
	}
	return 0
}

func (m *TimeSeriesFramerCalculatorOptions) GetFrameOverlapSeconds() float64 {
	if m != nil && m.FrameOverlapSeconds != nil {
		return *m.FrameOverlapSeconds
	}
	return Default_TimeSeriesFramerCalculatorOptions_FrameOverlapSeconds
}

func (m *TimeSeriesFramerCalculatorOptions) GetEmulateFractionalFrameOverlap() bool {
	if m != nil && m.EmulateFractionalFrameOverlap != nil {
		return *m.EmulateFractionalFrameOverlap
	}
	return Default_TimeSeriesFramerCalculatorOptions_EmulateFractionalFrameOverlap
}

func (m *TimeSeriesFramerCalculatorOptions) GetPadFinalPacket() bool {
	if m != nil && m.PadFinalPacket != nil {
		return *m.PadFinalPacket
	}
	return Default_TimeSeriesFramerCalculatorOptions_PadFinalPacket
}

func (m *TimeSeriesFramerCalculatorOptions) GetWindowFunction() TimeSeriesFramerCalculatorOptions_WindowFunction {
	if m != nil && m.WindowFunction != nil {
		return *m.WindowFunction
	}
	return Default_TimeSeriesFramerCalculatorOptions_WindowFunction
}

func (m *TimeSeriesFramerCalculatorOptions) GetUseLocalTimestamp() bool {
	if m != nil && m.UseLocalTimestamp != nil {
		return *m.UseLocalTimestamp
	}
	return Default_TimeSeriesFramerCalculatorOptions_UseLocalTimestamp
}

var E_TimeSeriesFramerCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*TimeSeriesFramerCalculatorOptions)(nil),
	Field:         50631621,
	Name:          "mediapipe.TimeSeriesFramerCalculatorOptions.ext",
	Tag:           "bytes,50631621,opt,name=ext",
	Filename:      "mediapipe/calculators/audio/time_series_framer_calculator.proto",
}

func init() {
	proto.RegisterEnum("mediapipe.TimeSeriesFramerCalculatorOptions_WindowFunction", TimeSeriesFramerCalculatorOptions_WindowFunction_name, TimeSeriesFramerCalculatorOptions_WindowFunction_value)
	proto.RegisterExtension(E_TimeSeriesFramerCalculatorOptions_Ext)
	proto.RegisterType((*TimeSeriesFramerCalculatorOptions)(nil), "mediapipe.TimeSeriesFramerCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/audio/time_series_framer_calculator.proto", fileDescriptor_e506b1b38d51020c)
}

var fileDescriptor_e506b1b38d51020c = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xc1, 0x6a, 0xd4, 0x40,
	0x18, 0xc7, 0x33, 0xed, 0x56, 0x74, 0x0a, 0xe9, 0x3a, 0x55, 0x09, 0xa2, 0x63, 0x2c, 0x1e, 0xf6,
	0x20, 0x89, 0x2c, 0x14, 0x61, 0x3d, 0x48, 0x6b, 0x8d, 0x2d, 0xd8, 0xac, 0xa4, 0x85, 0x05, 0x2f,
	0xc3, 0x98, 0xcc, 0xae, 0x43, 0x93, 0x9d, 0x98, 0x49, 0x5c, 0x8f, 0x3e, 0x82, 0xf8, 0x12, 0xfa,
	0x22, 0x42, 0x8f, 0x7b, 0xec, 0x49, 0xdc, 0xec, 0x45, 0x6f, 0x7d, 0x04, 0x99, 0xd9, 0x6d, 0x36,
	0xab, 0xa0, 0xf4, 0x3a, 0xff, 0xdf, 0xff, 0x37, 0xf9, 0xbe, 0x24, 0xf0, 0x69, 0xc2, 0x22, 0x4e,
	0x53, 0x9e, 0x32, 0x37, 0xa4, 0x71, 0x58, 0xc4, 0x34, 0x17, 0x99, 0x74, 0x69, 0x11, 0x71, 0xe1,
	0xe6, 0x3c, 0x61, 0x44, 0xb2, 0x8c, 0x33, 0x49, 0xfa, 0x19, 0x4d, 0x58, 0x46, 0x16, 0x90, 0x93,
	0x66, 0x22, 0x17, 0xe8, 0x5a, 0x25, 0xb8, 0xfd, 0x60, 0xe1, 0xd2, 0xf4, 0x48, 0x64, 0x27, 0xee,
	0x9f, 0x85, 0xad, 0x5f, 0x0d, 0x78, 0xff, 0x98, 0x27, 0xec, 0x48, 0x7b, 0x3d, 0xad, 0x7d, 0x56,
	0x41, 0xdd, 0x34, 0xe7, 0x62, 0x28, 0x51, 0x07, 0xde, 0xd2, 0x0e, 0x12, 0x15, 0x19, 0x55, 0x47,
	0x44, 0xb2, 0x50, 0x0c, 0x23, 0x69, 0x01, 0x1b, 0xb4, 0xc0, 0x6e, 0xe3, 0xf4, 0xfb, 0x3d, 0x23,
	0xb8, 0xa1, 0x99, 0xbd, 0x39, 0x72, 0x34, 0x23, 0xd0, 0x36, 0xbc, 0x39, 0xeb, 0x8a, 0xf7, 0x2c,
	0x8b, 0x69, 0x5a, 0x55, 0x57, 0x54, 0xb5, 0x03, 0x1e, 0x05, 0x9b, 0x3a, 0xef, 0xce, 0xe2, 0x8b,
	0x9a, 0x0f, 0x6d, 0x96, 0xa8, 0xa7, 0x60, 0x6a, 0xd8, 0x50, 0x19, 0x69, 0x4c, 0x96, 0x4c, 0xd6,
	0x9a, 0x0d, 0x5a, 0x57, 0x3b, 0x6b, 0x7d, 0x1a, 0x4b, 0x16, 0xdc, 0x9d, 0xe3, 0x5e, 0x45, 0x7b,
	0x35, 0x2d, 0x72, 0x60, 0x33, 0xa5, 0x11, 0xe9, 0x73, 0xa5, 0x49, 0x69, 0x78, 0xc2, 0x72, 0x6b,
	0x55, 0xf7, 0x1b, 0x79, 0x56, 0xb0, 0xc0, 0x4c, 0x69, 0xe4, 0xa9, 0xf0, 0x95, 0xce, 0xd0, 0x3b,
	0xb8, 0x31, 0xe2, 0xc3, 0x48, 0x8c, 0x48, 0xbf, 0x18, 0x6a, 0xa1, 0xd5, 0xb0, 0x41, 0xcb, 0x6c,
	0x3f, 0x71, 0xaa, 0xc5, 0x3a, 0xff, 0xdd, 0x9c, 0xd3, 0xd3, 0x0e, 0x6f, 0xae, 0xe8, 0xac, 0xf7,
	0x0e, 0xfc, 0xbd, 0x6e, 0x8f, 0xf8, 0x5d, 0xff, 0x79, 0x60, 0x8e, 0x96, 0x42, 0xb4, 0x0d, 0x37,
	0x0b, 0xc9, 0x48, 0x2c, 0x42, 0x1a, 0x13, 0xf5, 0xb6, 0x65, 0x4e, 0x93, 0xd4, 0xba, 0x52, 0x9f,
	0xf2, 0x7a, 0x21, 0xd9, 0x4b, 0x05, 0x1c, 0x5f, 0xe4, 0x5b, 0x1e, 0x34, 0x97, 0x6f, 0x41, 0x1b,
	0xb0, 0x7e, 0x4f, 0xd3, 0x40, 0x08, 0x9a, 0xf3, 0x83, 0xfd, 0x9d, 0xc3, 0xc3, 0x03, 0xff, 0x45,
	0x13, 0xd4, 0xa0, 0xfd, 0x1d, 0xdf, 0x6f, 0xae, 0xb4, 0x09, 0x5c, 0x65, 0x1f, 0x72, 0x74, 0xa7,
	0x36, 0xdf, 0x5f, 0xf3, 0x58, 0xdf, 0xbe, 0x7c, 0xb6, 0x6c, 0xd0, 0x5a, 0x6f, 0x3f, 0xbc, 0xcc,
	0x1a, 0x02, 0x65, 0xde, 0x4d, 0xc6, 0x13, 0x6c, 0x9c, 0x4d, 0xb0, 0x71, 0x3e, 0xc1, 0xe0, 0x63,
	0x89, 0xc1, 0xd7, 0x12, 0x83, 0xd3, 0x12, 0x83, 0x71, 0x89, 0xc1, 0x8f, 0x12, 0x83, 0x9f, 0x25,
	0x36, 0xce, 0x4b, 0x0c, 0x3e, 0x4d, 0xb1, 0x31, 0x9e, 0x62, 0xe3, 0x6c, 0x8a, 0x8d, 0xd7, 0x8f,
	0x07, 0x3c, 0x7f, 0x5b, 0xbc, 0x71, 0x42, 0x91, 0xb8, 0x03, 0x21, 0x06, 0x31, 0x73, 0x17, 0x5f,
	0xf6, 0x3f, 0xfe, 0x97, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x6c, 0x9c, 0x5f, 0x4d, 0x03,
	0x00, 0x00,
}

func (x TimeSeriesFramerCalculatorOptions_WindowFunction) String() string {
	s, ok := TimeSeriesFramerCalculatorOptions_WindowFunction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *TimeSeriesFramerCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimeSeriesFramerCalculatorOptions)
	if !ok {
		that2, ok := that.(TimeSeriesFramerCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FrameDurationSeconds != that1.FrameDurationSeconds {
		return false
	}
	if this.FrameOverlapSeconds != nil && that1.FrameOverlapSeconds != nil {
		if *this.FrameOverlapSeconds != *that1.FrameOverlapSeconds {
			return false
		}
	} else if this.FrameOverlapSeconds != nil {
		return false
	} else if that1.FrameOverlapSeconds != nil {
		return false
	}
	if this.EmulateFractionalFrameOverlap != nil && that1.EmulateFractionalFrameOverlap != nil {
		if *this.EmulateFractionalFrameOverlap != *that1.EmulateFractionalFrameOverlap {
			return false
		}
	} else if this.EmulateFractionalFrameOverlap != nil {
		return false
	} else if that1.EmulateFractionalFrameOverlap != nil {
		return false
	}
	if this.PadFinalPacket != nil && that1.PadFinalPacket != nil {
		if *this.PadFinalPacket != *that1.PadFinalPacket {
			return false
		}
	} else if this.PadFinalPacket != nil {
		return false
	} else if that1.PadFinalPacket != nil {
		return false
	}
	if this.WindowFunction != nil && that1.WindowFunction != nil {
		if *this.WindowFunction != *that1.WindowFunction {
			return false
		}
	} else if this.WindowFunction != nil {
		return false
	} else if that1.WindowFunction != nil {
		return false
	}
	if this.UseLocalTimestamp != nil && that1.UseLocalTimestamp != nil {
		if *this.UseLocalTimestamp != *that1.UseLocalTimestamp {
			return false
		}
	} else if this.UseLocalTimestamp != nil {
		return false
	} else if that1.UseLocalTimestamp != nil {
		return false
	}
	return true
}
func (this *TimeSeriesFramerCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&audio.TimeSeriesFramerCalculatorOptions{")
	s = append(s, "FrameDurationSeconds: "+fmt.Sprintf("%#v", this.FrameDurationSeconds)+",\n")
	if this.FrameOverlapSeconds != nil {
		s = append(s, "FrameOverlapSeconds: "+valueToGoStringTimeSeriesFramerCalculator(this.FrameOverlapSeconds, "float64")+",\n")
	}
	if this.EmulateFractionalFrameOverlap != nil {
		s = append(s, "EmulateFractionalFrameOverlap: "+valueToGoStringTimeSeriesFramerCalculator(this.EmulateFractionalFrameOverlap, "bool")+",\n")
	}
	if this.PadFinalPacket != nil {
		s = append(s, "PadFinalPacket: "+valueToGoStringTimeSeriesFramerCalculator(this.PadFinalPacket, "bool")+",\n")
	}
	if this.WindowFunction != nil {
		s = append(s, "WindowFunction: "+valueToGoStringTimeSeriesFramerCalculator(this.WindowFunction, "TimeSeriesFramerCalculatorOptions_WindowFunction")+",\n")
	}
	if this.UseLocalTimestamp != nil {
		s = append(s, "UseLocalTimestamp: "+valueToGoStringTimeSeriesFramerCalculator(this.UseLocalTimestamp, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTimeSeriesFramerCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TimeSeriesFramerCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeSeriesFramerCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeSeriesFramerCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UseLocalTimestamp != nil {
		i--
		if *m.UseLocalTimestamp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.EmulateFractionalFrameOverlap != nil {
		i--
		if *m.EmulateFractionalFrameOverlap {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.WindowFunction != nil {
		i = encodeVarintTimeSeriesFramerCalculator(dAtA, i, uint64(*m.WindowFunction))
		i--
		dAtA[i] = 0x20
	}
	if m.PadFinalPacket != nil {
		i--
		if *m.PadFinalPacket {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.FrameOverlapSeconds != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.FrameOverlapSeconds))))
		i--
		dAtA[i] = 0x11
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FrameDurationSeconds))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func encodeVarintTimeSeriesFramerCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovTimeSeriesFramerCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TimeSeriesFramerCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	if m.FrameOverlapSeconds != nil {
		n += 9
	}
	if m.PadFinalPacket != nil {
		n += 2
	}
	if m.WindowFunction != nil {
		n += 1 + sovTimeSeriesFramerCalculator(uint64(*m.WindowFunction))
	}
	if m.EmulateFractionalFrameOverlap != nil {
		n += 2
	}
	if m.UseLocalTimestamp != nil {
		n += 2
	}
	return n
}

func sovTimeSeriesFramerCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTimeSeriesFramerCalculator(x uint64) (n int) {
	return sovTimeSeriesFramerCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TimeSeriesFramerCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimeSeriesFramerCalculatorOptions{`,
		`FrameDurationSeconds:` + fmt.Sprintf("%v", this.FrameDurationSeconds) + `,`,
		`FrameOverlapSeconds:` + valueToStringTimeSeriesFramerCalculator(this.FrameOverlapSeconds) + `,`,
		`PadFinalPacket:` + valueToStringTimeSeriesFramerCalculator(this.PadFinalPacket) + `,`,
		`WindowFunction:` + valueToStringTimeSeriesFramerCalculator(this.WindowFunction) + `,`,
		`EmulateFractionalFrameOverlap:` + valueToStringTimeSeriesFramerCalculator(this.EmulateFractionalFrameOverlap) + `,`,
		`UseLocalTimestamp:` + valueToStringTimeSeriesFramerCalculator(this.UseLocalTimestamp) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTimeSeriesFramerCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TimeSeriesFramerCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimeSeriesFramerCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeSeriesFramerCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeSeriesFramerCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameDurationSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FrameDurationSeconds = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameOverlapSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.FrameOverlapSeconds = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PadFinalPacket", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimeSeriesFramerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.PadFinalPacket = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowFunction", wireType)
			}
			var v TimeSeriesFramerCalculatorOptions_WindowFunction
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimeSeriesFramerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= TimeSeriesFramerCalculatorOptions_WindowFunction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WindowFunction = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmulateFractionalFrameOverlap", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimeSeriesFramerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.EmulateFractionalFrameOverlap = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseLocalTimestamp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimeSeriesFramerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UseLocalTimestamp = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTimeSeriesFramerCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimeSeriesFramerCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTimeSeriesFramerCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTimeSeriesFramerCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimeSeriesFramerCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimeSeriesFramerCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTimeSeriesFramerCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTimeSeriesFramerCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTimeSeriesFramerCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTimeSeriesFramerCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTimeSeriesFramerCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTimeSeriesFramerCalculator = fmt.Errorf("proto: unexpected end of group")
)
