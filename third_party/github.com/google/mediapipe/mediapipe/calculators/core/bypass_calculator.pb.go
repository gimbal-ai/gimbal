// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/core/bypass_calculator.proto

package core

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BypassCalculatorOptions struct {
	PassInputStream  []string `protobuf:"bytes,1,rep,name=pass_input_stream,json=passInputStream" json:"pass_input_stream,omitempty"`
	PassOutputStream []string `protobuf:"bytes,2,rep,name=pass_output_stream,json=passOutputStream" json:"pass_output_stream,omitempty"`
}

func (m *BypassCalculatorOptions) Reset()      { *m = BypassCalculatorOptions{} }
func (*BypassCalculatorOptions) ProtoMessage() {}
func (*BypassCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a89b04bc1509ea7, []int{0}
}
func (m *BypassCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BypassCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BypassCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BypassCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BypassCalculatorOptions.Merge(m, src)
}
func (m *BypassCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *BypassCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BypassCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BypassCalculatorOptions proto.InternalMessageInfo

func (m *BypassCalculatorOptions) GetPassInputStream() []string {
	if m != nil {
		return m.PassInputStream
	}
	return nil
}

func (m *BypassCalculatorOptions) GetPassOutputStream() []string {
	if m != nil {
		return m.PassOutputStream
	}
	return nil
}

var E_BypassCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*BypassCalculatorOptions)(nil),
	Field:         481259677,
	Name:          "mediapipe.BypassCalculatorOptions.ext",
	Tag:           "bytes,481259677,opt,name=ext",
	Filename:      "mediapipe/calculators/core/bypass_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_BypassCalculatorOptions_Ext)
	proto.RegisterType((*BypassCalculatorOptions)(nil), "mediapipe.BypassCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/core/bypass_calculator.proto", fileDescriptor_8a89b04bc1509ea7)
}

var fileDescriptor_8a89b04bc1509ea7 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0xca, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f,
	0x2a, 0xd6, 0x4f, 0xce, 0x2f, 0x4a, 0xd5, 0x4f, 0xaa, 0x2c, 0x48, 0x2c, 0x2e, 0x8e, 0x47, 0x88,
	0xeb, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x71, 0xc2, 0xf5, 0x48, 0xa9, 0x20, 0xb4, 0xa7, 0x15,
	0x25, 0xe6, 0xa6, 0x96, 0xe7, 0x17, 0x65, 0xeb, 0xa3, 0x6b, 0x50, 0x3a, 0xcd, 0xc8, 0x25, 0xee,
	0x04, 0x36, 0xcc, 0x19, 0x2e, 0xe5, 0x5f, 0x50, 0x92, 0x99, 0x9f, 0x57, 0x2c, 0xa4, 0xc5, 0x25,
	0x08, 0xb6, 0x25, 0x33, 0xaf, 0xa0, 0xb4, 0x24, 0xbe, 0xb8, 0xa4, 0x28, 0x35, 0x31, 0x57, 0x82,
	0x51, 0x81, 0x59, 0x83, 0x33, 0x88, 0x1f, 0x24, 0xe1, 0x09, 0x12, 0x0f, 0x06, 0x0b, 0x0b, 0xe9,
	0x70, 0x09, 0x81, 0xd5, 0xe6, 0x97, 0x96, 0x20, 0x29, 0x66, 0x02, 0x2b, 0x16, 0x00, 0xc9, 0xf8,
	0x83, 0x25, 0x20, 0xaa, 0x8d, 0xc2, 0xb8, 0x98, 0x53, 0x2b, 0x4a, 0x84, 0x64, 0xf4, 0xe0, 0x6e,
	0xd4, 0xc3, 0xb0, 0x5e, 0x62, 0xee, 0xc3, 0xbd, 0x4f, 0x19, 0x15, 0x18, 0x35, 0xb8, 0x8d, 0x94,
	0x90, 0xd4, 0xe1, 0x70, 0x6c, 0x10, 0xc8, 0x40, 0xa7, 0x9c, 0x0b, 0x0f, 0xe5, 0x18, 0x6e, 0x3c,
	0x94, 0x63, 0xf8, 0xf0, 0x50, 0x8e, 0xb1, 0xe1, 0x91, 0x1c, 0xe3, 0x8a, 0x47, 0x72, 0x8c, 0x27,
	0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8b, 0x47, 0x72, 0x0c,
	0x1f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72,
	0x0c, 0x51, 0x66, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xe9, 0xf9,
	0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x88, 0xb0, 0xc3, 0x1d, 0x09, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa5, 0x3d, 0x15, 0x0e, 0xa1, 0x01, 0x00, 0x00,
}

func (this *BypassCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BypassCalculatorOptions)
	if !ok {
		that2, ok := that.(BypassCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PassInputStream) != len(that1.PassInputStream) {
		return false
	}
	for i := range this.PassInputStream {
		if this.PassInputStream[i] != that1.PassInputStream[i] {
			return false
		}
	}
	if len(this.PassOutputStream) != len(that1.PassOutputStream) {
		return false
	}
	for i := range this.PassOutputStream {
		if this.PassOutputStream[i] != that1.PassOutputStream[i] {
			return false
		}
	}
	return true
}
func (this *BypassCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&core.BypassCalculatorOptions{")
	if this.PassInputStream != nil {
		s = append(s, "PassInputStream: "+fmt.Sprintf("%#v", this.PassInputStream)+",\n")
	}
	if this.PassOutputStream != nil {
		s = append(s, "PassOutputStream: "+fmt.Sprintf("%#v", this.PassOutputStream)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBypassCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BypassCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BypassCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BypassCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PassOutputStream) > 0 {
		for iNdEx := len(m.PassOutputStream) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PassOutputStream[iNdEx])
			copy(dAtA[i:], m.PassOutputStream[iNdEx])
			i = encodeVarintBypassCalculator(dAtA, i, uint64(len(m.PassOutputStream[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PassInputStream) > 0 {
		for iNdEx := len(m.PassInputStream) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PassInputStream[iNdEx])
			copy(dAtA[i:], m.PassInputStream[iNdEx])
			i = encodeVarintBypassCalculator(dAtA, i, uint64(len(m.PassInputStream[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintBypassCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovBypassCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BypassCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PassInputStream) > 0 {
		for _, s := range m.PassInputStream {
			l = len(s)
			n += 1 + l + sovBypassCalculator(uint64(l))
		}
	}
	if len(m.PassOutputStream) > 0 {
		for _, s := range m.PassOutputStream {
			l = len(s)
			n += 1 + l + sovBypassCalculator(uint64(l))
		}
	}
	return n
}

func sovBypassCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBypassCalculator(x uint64) (n int) {
	return sovBypassCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BypassCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BypassCalculatorOptions{`,
		`PassInputStream:` + fmt.Sprintf("%v", this.PassInputStream) + `,`,
		`PassOutputStream:` + fmt.Sprintf("%v", this.PassOutputStream) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBypassCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BypassCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBypassCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BypassCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BypassCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassInputStream", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBypassCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBypassCalculator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBypassCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassInputStream = append(m.PassInputStream, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassOutputStream", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBypassCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBypassCalculator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBypassCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassOutputStream = append(m.PassOutputStream, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBypassCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBypassCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBypassCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBypassCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBypassCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBypassCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBypassCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBypassCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBypassCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBypassCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBypassCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBypassCalculator = fmt.Errorf("proto: unexpected end of group")
)
