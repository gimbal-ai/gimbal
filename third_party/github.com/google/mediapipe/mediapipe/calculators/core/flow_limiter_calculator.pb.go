// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/core/flow_limiter_calculator.proto

package core

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FlowLimiterCalculatorOptions struct {
	MaxInFlight     *int32 `protobuf:"varint,1,opt,name=max_in_flight,json=maxInFlight,def=1" json:"max_in_flight,omitempty"`
	MaxInQueue      *int32 `protobuf:"varint,2,opt,name=max_in_queue,json=maxInQueue,def=0" json:"max_in_queue,omitempty"`
	InFlightTimeout *int64 `protobuf:"varint,3,opt,name=in_flight_timeout,json=inFlightTimeout,def=0" json:"in_flight_timeout,omitempty"`
}

func (m *FlowLimiterCalculatorOptions) Reset()      { *m = FlowLimiterCalculatorOptions{} }
func (*FlowLimiterCalculatorOptions) ProtoMessage() {}
func (*FlowLimiterCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fcee00b573d2560, []int{0}
}
func (m *FlowLimiterCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowLimiterCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowLimiterCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowLimiterCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowLimiterCalculatorOptions.Merge(m, src)
}
func (m *FlowLimiterCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *FlowLimiterCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowLimiterCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FlowLimiterCalculatorOptions proto.InternalMessageInfo

const Default_FlowLimiterCalculatorOptions_MaxInFlight int32 = 1
const Default_FlowLimiterCalculatorOptions_MaxInQueue int32 = 0
const Default_FlowLimiterCalculatorOptions_InFlightTimeout int64 = 0

func (m *FlowLimiterCalculatorOptions) GetMaxInFlight() int32 {
	if m != nil && m.MaxInFlight != nil {
		return *m.MaxInFlight
	}
	return Default_FlowLimiterCalculatorOptions_MaxInFlight
}

func (m *FlowLimiterCalculatorOptions) GetMaxInQueue() int32 {
	if m != nil && m.MaxInQueue != nil {
		return *m.MaxInQueue
	}
	return Default_FlowLimiterCalculatorOptions_MaxInQueue
}

func (m *FlowLimiterCalculatorOptions) GetInFlightTimeout() int64 {
	if m != nil && m.InFlightTimeout != nil {
		return *m.InFlightTimeout
	}
	return Default_FlowLimiterCalculatorOptions_InFlightTimeout
}

var E_FlowLimiterCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*FlowLimiterCalculatorOptions)(nil),
	Field:         326963320,
	Name:          "mediapipe.FlowLimiterCalculatorOptions.ext",
	Tag:           "bytes,326963320,opt,name=ext",
	Filename:      "mediapipe/calculators/core/flow_limiter_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_FlowLimiterCalculatorOptions_Ext)
	proto.RegisterType((*FlowLimiterCalculatorOptions)(nil), "mediapipe.FlowLimiterCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/core/flow_limiter_calculator.proto", fileDescriptor_0fcee00b573d2560)
}

var fileDescriptor_0fcee00b573d2560 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0xc8, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f,
	0x2a, 0xd6, 0x4f, 0xce, 0x2f, 0x4a, 0xd5, 0x4f, 0xcb, 0xc9, 0x2f, 0x8f, 0xcf, 0xc9, 0xcc, 0xcd,
	0x2c, 0x49, 0x2d, 0x8a, 0x47, 0xc8, 0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x71, 0xc2, 0x75,
	0x4a, 0xa9, 0x20, 0x0c, 0x49, 0x2b, 0x4a, 0xcc, 0x4d, 0x2d, 0xcf, 0x2f, 0xca, 0xd6, 0x47, 0xd7,
	0xa0, 0xf4, 0x8d, 0x91, 0x4b, 0xc6, 0x2d, 0x27, 0xbf, 0xdc, 0x07, 0x62, 0xa2, 0x33, 0x5c, 0xde,
	0xbf, 0xa0, 0x24, 0x33, 0x3f, 0xaf, 0x58, 0x48, 0x95, 0x8b, 0x37, 0x37, 0xb1, 0x22, 0x3e, 0x33,
	0x2f, 0x3e, 0x2d, 0x27, 0x33, 0x3d, 0xa3, 0x44, 0x82, 0x51, 0x81, 0x51, 0x83, 0xd5, 0x8a, 0xd1,
	0x30, 0x88, 0x3b, 0x37, 0xb1, 0xc2, 0x33, 0xcf, 0x0d, 0x2c, 0x2a, 0xa4, 0xcc, 0xc5, 0x03, 0x55,
	0x56, 0x58, 0x9a, 0x5a, 0x9a, 0x2a, 0xc1, 0x04, 0x51, 0x65, 0x10, 0xc4, 0x05, 0x56, 0x15, 0x08,
	0x12, 0x14, 0xd2, 0xe5, 0x12, 0x84, 0x9b, 0x13, 0x5f, 0x92, 0x99, 0x9b, 0x9a, 0x5f, 0x5a, 0x22,
	0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x0c, 0x52, 0xc9, 0x9f, 0x09, 0x35, 0x2c, 0x04, 0x22, 0x63, 0x14,
	0xcd, 0xc5, 0x9c, 0x5a, 0x51, 0x22, 0x24, 0xa3, 0x07, 0xf7, 0x89, 0x1e, 0x86, 0xfb, 0x24, 0x7e,
	0x2c, 0xf8, 0x32, 0x1b, 0xe4, 0x24, 0x6e, 0x23, 0x75, 0x24, 0x75, 0xf8, 0xbc, 0x14, 0x04, 0x32,
	0xd5, 0x69, 0x3d, 0xe3, 0x85, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca, 0x31, 0x7c, 0x78, 0x28, 0xc7,
	0xd8, 0xf0, 0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92,
	0x63, 0x7c, 0xf0, 0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39, 0x86, 0x0f, 0x8f, 0xe4, 0x18, 0x27, 0x3c,
	0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x06, 0x2e, 0xd5, 0xe4, 0xfc, 0x5c,
	0xbd, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0x24, 0xeb, 0xd0, 0x83, 0xd5, 0x49, 0x0a, 0xab, 0x03,
	0x02, 0x40, 0x72, 0x51, 0x66, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa,
	0x10, 0x93, 0xf4, 0x11, 0x51, 0x85, 0x3b, 0xe6, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x07, 0x5d,
	0x4b, 0xc1, 0x16, 0x02, 0x00, 0x00,
}

func (this *FlowLimiterCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowLimiterCalculatorOptions)
	if !ok {
		that2, ok := that.(FlowLimiterCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxInFlight != nil && that1.MaxInFlight != nil {
		if *this.MaxInFlight != *that1.MaxInFlight {
			return false
		}
	} else if this.MaxInFlight != nil {
		return false
	} else if that1.MaxInFlight != nil {
		return false
	}
	if this.MaxInQueue != nil && that1.MaxInQueue != nil {
		if *this.MaxInQueue != *that1.MaxInQueue {
			return false
		}
	} else if this.MaxInQueue != nil {
		return false
	} else if that1.MaxInQueue != nil {
		return false
	}
	if this.InFlightTimeout != nil && that1.InFlightTimeout != nil {
		if *this.InFlightTimeout != *that1.InFlightTimeout {
			return false
		}
	} else if this.InFlightTimeout != nil {
		return false
	} else if that1.InFlightTimeout != nil {
		return false
	}
	return true
}
func (this *FlowLimiterCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&core.FlowLimiterCalculatorOptions{")
	if this.MaxInFlight != nil {
		s = append(s, "MaxInFlight: "+valueToGoStringFlowLimiterCalculator(this.MaxInFlight, "int32")+",\n")
	}
	if this.MaxInQueue != nil {
		s = append(s, "MaxInQueue: "+valueToGoStringFlowLimiterCalculator(this.MaxInQueue, "int32")+",\n")
	}
	if this.InFlightTimeout != nil {
		s = append(s, "InFlightTimeout: "+valueToGoStringFlowLimiterCalculator(this.InFlightTimeout, "int64")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFlowLimiterCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FlowLimiterCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowLimiterCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowLimiterCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InFlightTimeout != nil {
		i = encodeVarintFlowLimiterCalculator(dAtA, i, uint64(*m.InFlightTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxInQueue != nil {
		i = encodeVarintFlowLimiterCalculator(dAtA, i, uint64(*m.MaxInQueue))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxInFlight != nil {
		i = encodeVarintFlowLimiterCalculator(dAtA, i, uint64(*m.MaxInFlight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFlowLimiterCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlowLimiterCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FlowLimiterCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxInFlight != nil {
		n += 1 + sovFlowLimiterCalculator(uint64(*m.MaxInFlight))
	}
	if m.MaxInQueue != nil {
		n += 1 + sovFlowLimiterCalculator(uint64(*m.MaxInQueue))
	}
	if m.InFlightTimeout != nil {
		n += 1 + sovFlowLimiterCalculator(uint64(*m.InFlightTimeout))
	}
	return n
}

func sovFlowLimiterCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlowLimiterCalculator(x uint64) (n int) {
	return sovFlowLimiterCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FlowLimiterCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowLimiterCalculatorOptions{`,
		`MaxInFlight:` + valueToStringFlowLimiterCalculator(this.MaxInFlight) + `,`,
		`MaxInQueue:` + valueToStringFlowLimiterCalculator(this.MaxInQueue) + `,`,
		`InFlightTimeout:` + valueToStringFlowLimiterCalculator(this.InFlightTimeout) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFlowLimiterCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FlowLimiterCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlowLimiterCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowLimiterCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowLimiterCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInFlight", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowLimiterCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxInFlight = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInQueue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowLimiterCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxInQueue = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InFlightTimeout", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowLimiterCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InFlightTimeout = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFlowLimiterCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlowLimiterCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlowLimiterCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlowLimiterCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlowLimiterCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlowLimiterCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlowLimiterCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFlowLimiterCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFlowLimiterCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFlowLimiterCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlowLimiterCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFlowLimiterCalculator = fmt.Errorf("proto: unexpected end of group")
)
