// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/core/get_vector_item_calculator.proto

package core

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetVectorItemCalculatorOptions struct {
	ItemIndex        int32 `protobuf:"varint,1,opt,name=item_index,json=itemIndex" json:"item_index"`
	OutputEmptyOnOob bool  `protobuf:"varint,2,opt,name=output_empty_on_oob,json=outputEmptyOnOob" json:"output_empty_on_oob"`
}

func (m *GetVectorItemCalculatorOptions) Reset()      { *m = GetVectorItemCalculatorOptions{} }
func (*GetVectorItemCalculatorOptions) ProtoMessage() {}
func (*GetVectorItemCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_a06c1fa2eb9a73d0, []int{0}
}
func (m *GetVectorItemCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVectorItemCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVectorItemCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVectorItemCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVectorItemCalculatorOptions.Merge(m, src)
}
func (m *GetVectorItemCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *GetVectorItemCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVectorItemCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GetVectorItemCalculatorOptions proto.InternalMessageInfo

func (m *GetVectorItemCalculatorOptions) GetItemIndex() int32 {
	if m != nil {
		return m.ItemIndex
	}
	return 0
}

func (m *GetVectorItemCalculatorOptions) GetOutputEmptyOnOob() bool {
	if m != nil {
		return m.OutputEmptyOnOob
	}
	return false
}

var E_GetVectorItemCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*GetVectorItemCalculatorOptions)(nil),
	Field:         463538543,
	Name:          "mediapipe.GetVectorItemCalculatorOptions.ext",
	Tag:           "bytes,463538543,opt,name=ext",
	Filename:      "mediapipe/calculators/core/get_vector_item_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_GetVectorItemCalculatorOptions_Ext)
	proto.RegisterType((*GetVectorItemCalculatorOptions)(nil), "mediapipe.GetVectorItemCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/core/get_vector_item_calculator.proto", fileDescriptor_a06c1fa2eb9a73d0)
}

var fileDescriptor_a06c1fa2eb9a73d0 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0xce, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f,
	0x2a, 0xd6, 0x4f, 0xce, 0x2f, 0x4a, 0xd5, 0x4f, 0x4f, 0x2d, 0x89, 0x2f, 0x4b, 0x4d, 0x2e, 0xc9,
	0x2f, 0x8a, 0xcf, 0x2c, 0x49, 0xcd, 0x8d, 0x47, 0x28, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x84, 0x6b, 0x96, 0x52, 0x41, 0x98, 0x93, 0x56, 0x94, 0x98, 0x9b, 0x5a, 0x9e, 0x5f, 0x94,
	0xad, 0x8f, 0xae, 0x41, 0xe9, 0x26, 0x23, 0x97, 0x9c, 0x7b, 0x6a, 0x49, 0x18, 0xd8, 0x50, 0xcf,
	0x92, 0xd4, 0x5c, 0x67, 0xb8, 0x0a, 0xff, 0x82, 0x92, 0xcc, 0xfc, 0xbc, 0x62, 0x21, 0x65, 0x2e,
	0x2e, 0xb0, 0x65, 0x99, 0x79, 0x29, 0xa9, 0x15, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xac, 0x4e, 0x2c,
	0x27, 0xee, 0xc9, 0x33, 0x04, 0x71, 0x82, 0xc4, 0x3d, 0x41, 0xc2, 0x42, 0xc6, 0x5c, 0xc2, 0xf9,
	0xa5, 0x25, 0x05, 0xa5, 0x25, 0xf1, 0xa9, 0xb9, 0x05, 0x25, 0x95, 0xf1, 0xf9, 0x79, 0xf1, 0xf9,
	0xf9, 0x49, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x1c, 0x50, 0xd5, 0x02, 0x10, 0x05, 0xae, 0x20, 0x79,
	0xff, 0x3c, 0xff, 0xfc, 0x24, 0xa3, 0x58, 0x2e, 0xe6, 0xd4, 0x8a, 0x12, 0x21, 0x19, 0x3d, 0xb8,
	0x53, 0xf5, 0x30, 0xac, 0x97, 0x78, 0x3f, 0xa9, 0xe5, 0x2e, 0xc8, 0x52, 0x6e, 0x23, 0x4d, 0x24,
	0x75, 0xf8, 0xdd, 0x1c, 0x04, 0x32, 0xd7, 0x29, 0xe7, 0xc2, 0x43, 0x39, 0x86, 0x1b, 0x0f, 0xe5,
	0x18, 0x3e, 0x3c, 0x94, 0x63, 0x6c, 0x78, 0x24, 0xc7, 0xb8, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47,
	0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0xf8, 0xe2, 0x91, 0x1c, 0xc3, 0x87,
	0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43,
	0x94, 0x59, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x7a, 0x7e, 0x7e,
	0x7a, 0x4e, 0xaa, 0x3e, 0x22, 0x24, 0x71, 0xc7, 0x0d, 0x20, 0x00, 0x00, 0xff, 0xff, 0x9c, 0xea,
	0x52, 0x94, 0xb8, 0x01, 0x00, 0x00,
}

func (this *GetVectorItemCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetVectorItemCalculatorOptions)
	if !ok {
		that2, ok := that.(GetVectorItemCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemIndex != that1.ItemIndex {
		return false
	}
	if this.OutputEmptyOnOob != that1.OutputEmptyOnOob {
		return false
	}
	return true
}
func (this *GetVectorItemCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&core.GetVectorItemCalculatorOptions{")
	s = append(s, "ItemIndex: "+fmt.Sprintf("%#v", this.ItemIndex)+",\n")
	s = append(s, "OutputEmptyOnOob: "+fmt.Sprintf("%#v", this.OutputEmptyOnOob)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGetVectorItemCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GetVectorItemCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVectorItemCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVectorItemCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.OutputEmptyOnOob {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintGetVectorItemCalculator(dAtA, i, uint64(m.ItemIndex))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintGetVectorItemCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovGetVectorItemCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetVectorItemCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGetVectorItemCalculator(uint64(m.ItemIndex))
	n += 2
	return n
}

func sovGetVectorItemCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGetVectorItemCalculator(x uint64) (n int) {
	return sovGetVectorItemCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetVectorItemCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVectorItemCalculatorOptions{`,
		`ItemIndex:` + fmt.Sprintf("%v", this.ItemIndex) + `,`,
		`OutputEmptyOnOob:` + fmt.Sprintf("%v", this.OutputEmptyOnOob) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGetVectorItemCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetVectorItemCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetVectorItemCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVectorItemCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVectorItemCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemIndex", wireType)
			}
			m.ItemIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetVectorItemCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputEmptyOnOob", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetVectorItemCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutputEmptyOnOob = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGetVectorItemCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGetVectorItemCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGetVectorItemCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGetVectorItemCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGetVectorItemCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGetVectorItemCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGetVectorItemCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGetVectorItemCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGetVectorItemCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGetVectorItemCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGetVectorItemCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGetVectorItemCalculator = fmt.Errorf("proto: unexpected end of group")
)
