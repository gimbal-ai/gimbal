// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/core/packet_cloner_calculator.proto

package core

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PacketClonerCalculatorOptions struct {
	OutputOnlyWhenAllInputsReceived        *bool `protobuf:"varint,1,opt,name=output_only_when_all_inputs_received,json=outputOnlyWhenAllInputsReceived,def=0" json:"output_only_when_all_inputs_received,omitempty"`
	OutputPacketsOnlyWhenAllInputsReceived *bool `protobuf:"varint,2,opt,name=output_packets_only_when_all_inputs_received,json=outputPacketsOnlyWhenAllInputsReceived,def=0" json:"output_packets_only_when_all_inputs_received,omitempty"`
}

func (m *PacketClonerCalculatorOptions) Reset()      { *m = PacketClonerCalculatorOptions{} }
func (*PacketClonerCalculatorOptions) ProtoMessage() {}
func (*PacketClonerCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_eef1b6b1e03a0ac2, []int{0}
}
func (m *PacketClonerCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketClonerCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketClonerCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketClonerCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketClonerCalculatorOptions.Merge(m, src)
}
func (m *PacketClonerCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *PacketClonerCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketClonerCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PacketClonerCalculatorOptions proto.InternalMessageInfo

const Default_PacketClonerCalculatorOptions_OutputOnlyWhenAllInputsReceived bool = false
const Default_PacketClonerCalculatorOptions_OutputPacketsOnlyWhenAllInputsReceived bool = false

func (m *PacketClonerCalculatorOptions) GetOutputOnlyWhenAllInputsReceived() bool {
	if m != nil && m.OutputOnlyWhenAllInputsReceived != nil {
		return *m.OutputOnlyWhenAllInputsReceived
	}
	return Default_PacketClonerCalculatorOptions_OutputOnlyWhenAllInputsReceived
}

func (m *PacketClonerCalculatorOptions) GetOutputPacketsOnlyWhenAllInputsReceived() bool {
	if m != nil && m.OutputPacketsOnlyWhenAllInputsReceived != nil {
		return *m.OutputPacketsOnlyWhenAllInputsReceived
	}
	return Default_PacketClonerCalculatorOptions_OutputPacketsOnlyWhenAllInputsReceived
}

var E_PacketClonerCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*PacketClonerCalculatorOptions)(nil),
	Field:         258872085,
	Name:          "mediapipe.PacketClonerCalculatorOptions.ext",
	Tag:           "bytes,258872085,opt,name=ext",
	Filename:      "mediapipe/calculators/core/packet_cloner_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_PacketClonerCalculatorOptions_Ext)
	proto.RegisterType((*PacketClonerCalculatorOptions)(nil), "mediapipe.PacketClonerCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/core/packet_cloner_calculator.proto", fileDescriptor_eef1b6b1e03a0ac2)
}

var fileDescriptor_eef1b6b1e03a0ac2 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xb1, 0x4a, 0x2b, 0x41,
	0x14, 0x86, 0x77, 0x72, 0xb9, 0xa0, 0x6b, 0xb7, 0x55, 0x10, 0x3d, 0x06, 0x09, 0x92, 0x42, 0x76,
	0x21, 0x85, 0xa0, 0x9d, 0xa6, 0xb2, 0x8a, 0x04, 0x41, 0xd0, 0x62, 0x18, 0x27, 0x27, 0xc9, 0x92,
	0xc9, 0xcc, 0x30, 0x3b, 0x6b, 0x0c, 0x36, 0x3e, 0x82, 0x8d, 0xaf, 0x20, 0xbe, 0x81, 0x3e, 0x82,
	0x65, 0xca, 0x94, 0x66, 0xd2, 0x58, 0xe6, 0x11, 0xc4, 0x6c, 0xc8, 0x06, 0x25, 0x5a, 0xcf, 0xff,
	0x7d, 0x73, 0xce, 0xf9, 0xfd, 0xc3, 0x1e, 0x36, 0x63, 0xa6, 0x63, 0x8d, 0x11, 0x67, 0x82, 0xa7,
	0x82, 0x59, 0x65, 0x92, 0x88, 0x2b, 0x83, 0x91, 0x66, 0xbc, 0x8b, 0x96, 0x72, 0xa1, 0x24, 0x1a,
	0x9a, 0x3f, 0x87, 0xda, 0x28, 0xab, 0x82, 0xf5, 0x05, 0xba, 0x59, 0xce, 0x2d, 0x2d, 0xc3, 0x7a,
	0xd8, 0x57, 0xa6, 0x1b, 0x7d, 0x07, 0x76, 0x5f, 0x0a, 0xfe, 0xf6, 0xd9, 0xcc, 0x59, 0x9b, 0x29,
	0x6b, 0x8b, 0x40, 0x5d, 0xdb, 0x58, 0xc9, 0x24, 0x38, 0xf7, 0xcb, 0x2a, 0xb5, 0x3a, 0xb5, 0x54,
	0x49, 0x31, 0xa0, 0xfd, 0x0e, 0x4a, 0xca, 0x84, 0xa0, 0xb1, 0xd4, 0xa9, 0x4d, 0xa8, 0x41, 0x8e,
	0xf1, 0x0d, 0x36, 0x8b, 0xa4, 0x44, 0x2a, 0x6b, 0x47, 0xff, 0x5b, 0x4c, 0x24, 0xd8, 0xd8, 0xc9,
	0x90, 0xba, 0x14, 0x83, 0x8b, 0x0e, 0xca, 0x63, 0x21, 0x4e, 0x67, 0xf1, 0xc6, 0x3c, 0x1d, 0x70,
	0x7f, 0x7f, 0x6e, 0xcd, 0x36, 0x4a, 0xfe, 0xb0, 0x17, 0x96, 0xed, 0x7b, 0x19, 0x9a, 0xcd, 0x9d,
	0xac, 0xfc, 0xa4, 0x7a, 0xe5, 0xff, 0xc3, 0x5b, 0x1b, 0x6c, 0x85, 0x8b, 0x53, 0x84, 0x3f, 0xf6,
	0x2b, 0x3e, 0x3e, 0xbd, 0xde, 0x95, 0x48, 0x65, 0xa3, 0x5a, 0x59, 0x8a, 0xfd, 0x7a, 0x92, 0xc6,
	0x97, 0xf5, 0x44, 0x0c, 0xc7, 0xe0, 0x8d, 0xc6, 0xe0, 0x4d, 0xc7, 0x40, 0xee, 0x1d, 0x90, 0x67,
	0x07, 0xe4, 0xcd, 0x01, 0x19, 0x3a, 0x20, 0xef, 0x0e, 0xc8, 0x87, 0x03, 0x6f, 0xea, 0x80, 0x3c,
	0x4c, 0xc0, 0x1b, 0x4e, 0xc0, 0x1b, 0x4d, 0xc0, 0xbb, 0x3c, 0x68, 0xc7, 0xb6, 0x93, 0x5e, 0x87,
	0x5c, 0xf5, 0xa2, 0xb6, 0x52, 0x6d, 0x81, 0x51, 0xde, 0xd3, 0xea, 0xde, 0x3f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xcb, 0xa0, 0x4d, 0x74, 0x14, 0x02, 0x00, 0x00,
}

func (this *PacketClonerCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PacketClonerCalculatorOptions)
	if !ok {
		that2, ok := that.(PacketClonerCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OutputOnlyWhenAllInputsReceived != nil && that1.OutputOnlyWhenAllInputsReceived != nil {
		if *this.OutputOnlyWhenAllInputsReceived != *that1.OutputOnlyWhenAllInputsReceived {
			return false
		}
	} else if this.OutputOnlyWhenAllInputsReceived != nil {
		return false
	} else if that1.OutputOnlyWhenAllInputsReceived != nil {
		return false
	}
	if this.OutputPacketsOnlyWhenAllInputsReceived != nil && that1.OutputPacketsOnlyWhenAllInputsReceived != nil {
		if *this.OutputPacketsOnlyWhenAllInputsReceived != *that1.OutputPacketsOnlyWhenAllInputsReceived {
			return false
		}
	} else if this.OutputPacketsOnlyWhenAllInputsReceived != nil {
		return false
	} else if that1.OutputPacketsOnlyWhenAllInputsReceived != nil {
		return false
	}
	return true
}
func (this *PacketClonerCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&core.PacketClonerCalculatorOptions{")
	if this.OutputOnlyWhenAllInputsReceived != nil {
		s = append(s, "OutputOnlyWhenAllInputsReceived: "+valueToGoStringPacketClonerCalculator(this.OutputOnlyWhenAllInputsReceived, "bool")+",\n")
	}
	if this.OutputPacketsOnlyWhenAllInputsReceived != nil {
		s = append(s, "OutputPacketsOnlyWhenAllInputsReceived: "+valueToGoStringPacketClonerCalculator(this.OutputPacketsOnlyWhenAllInputsReceived, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPacketClonerCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PacketClonerCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketClonerCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketClonerCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutputPacketsOnlyWhenAllInputsReceived != nil {
		i--
		if *m.OutputPacketsOnlyWhenAllInputsReceived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.OutputOnlyWhenAllInputsReceived != nil {
		i--
		if *m.OutputOnlyWhenAllInputsReceived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacketClonerCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacketClonerCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PacketClonerCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutputOnlyWhenAllInputsReceived != nil {
		n += 2
	}
	if m.OutputPacketsOnlyWhenAllInputsReceived != nil {
		n += 2
	}
	return n
}

func sovPacketClonerCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacketClonerCalculator(x uint64) (n int) {
	return sovPacketClonerCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PacketClonerCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PacketClonerCalculatorOptions{`,
		`OutputOnlyWhenAllInputsReceived:` + valueToStringPacketClonerCalculator(this.OutputOnlyWhenAllInputsReceived) + `,`,
		`OutputPacketsOnlyWhenAllInputsReceived:` + valueToStringPacketClonerCalculator(this.OutputPacketsOnlyWhenAllInputsReceived) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPacketClonerCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PacketClonerCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketClonerCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketClonerCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketClonerCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputOnlyWhenAllInputsReceived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketClonerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.OutputOnlyWhenAllInputsReceived = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputPacketsOnlyWhenAllInputsReceived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketClonerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.OutputPacketsOnlyWhenAllInputsReceived = &b
		default:
			iNdEx = preIndex
			skippy, err := skipPacketClonerCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacketClonerCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacketClonerCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacketClonerCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketClonerCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketClonerCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacketClonerCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacketClonerCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacketClonerCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacketClonerCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacketClonerCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacketClonerCalculator = fmt.Errorf("proto: unexpected end of group")
)
