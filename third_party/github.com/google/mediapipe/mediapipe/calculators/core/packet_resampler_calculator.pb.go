// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/core/packet_resampler_calculator.proto

package core

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PacketResamplerCalculatorOptions_OutputHeader int32

const (
	NONE                PacketResamplerCalculatorOptions_OutputHeader = 0
	PASS_HEADER         PacketResamplerCalculatorOptions_OutputHeader = 1
	UPDATE_VIDEO_HEADER PacketResamplerCalculatorOptions_OutputHeader = 2
)

var PacketResamplerCalculatorOptions_OutputHeader_name = map[int32]string{
	0: "NONE",
	1: "PASS_HEADER",
	2: "UPDATE_VIDEO_HEADER",
}

var PacketResamplerCalculatorOptions_OutputHeader_value = map[string]int32{
	"NONE":                0,
	"PASS_HEADER":         1,
	"UPDATE_VIDEO_HEADER": 2,
}

func (x PacketResamplerCalculatorOptions_OutputHeader) Enum() *PacketResamplerCalculatorOptions_OutputHeader {
	p := new(PacketResamplerCalculatorOptions_OutputHeader)
	*p = x
	return p
}

func (x PacketResamplerCalculatorOptions_OutputHeader) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(PacketResamplerCalculatorOptions_OutputHeader_name, int32(x))
}

func (x *PacketResamplerCalculatorOptions_OutputHeader) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PacketResamplerCalculatorOptions_OutputHeader_value, data, "PacketResamplerCalculatorOptions_OutputHeader")
	if err != nil {
		return err
	}
	*x = PacketResamplerCalculatorOptions_OutputHeader(value)
	return nil
}

func (PacketResamplerCalculatorOptions_OutputHeader) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_005d000680f5ef5b, []int{0, 0}
}

type PacketResamplerCalculatorOptions struct {
	FrameRate            *float64                                       `protobuf:"fixed64,1,opt,name=frame_rate,json=frameRate,def=-1" json:"frame_rate,omitempty"`
	OutputHeader         *PacketResamplerCalculatorOptions_OutputHeader `protobuf:"varint,2,opt,name=output_header,json=outputHeader,enum=mediapipe.PacketResamplerCalculatorOptions_OutputHeader,def=0" json:"output_header,omitempty"`
	FlushLastPacket      *bool                                          `protobuf:"varint,3,opt,name=flush_last_packet,json=flushLastPacket,def=1" json:"flush_last_packet,omitempty"`
	Jitter               float64                                        `protobuf:"fixed64,4,opt,name=jitter" json:"jitter"`
	JitterWithReflection *bool                                          `protobuf:"varint,9,opt,name=jitter_with_reflection,json=jitterWithReflection,def=0" json:"jitter_with_reflection,omitempty"`
	ReproducibleSampling *bool                                          `protobuf:"varint,10,opt,name=reproducible_sampling,json=reproducibleSampling,def=0" json:"reproducible_sampling,omitempty"`
	BaseTimestamp        int64                                          `protobuf:"varint,5,opt,name=base_timestamp,json=baseTimestamp" json:"base_timestamp"`
	StartTime            int64                                          `protobuf:"varint,6,opt,name=start_time,json=startTime" json:"start_time"`
	EndTime              int64                                          `protobuf:"varint,7,opt,name=end_time,json=endTime" json:"end_time"`
	RoundLimits          *bool                                          `protobuf:"varint,8,opt,name=round_limits,json=roundLimits,def=0" json:"round_limits,omitempty"`
}

func (m *PacketResamplerCalculatorOptions) Reset()      { *m = PacketResamplerCalculatorOptions{} }
func (*PacketResamplerCalculatorOptions) ProtoMessage() {}
func (*PacketResamplerCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_005d000680f5ef5b, []int{0}
}
func (m *PacketResamplerCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketResamplerCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketResamplerCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketResamplerCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketResamplerCalculatorOptions.Merge(m, src)
}
func (m *PacketResamplerCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *PacketResamplerCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketResamplerCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PacketResamplerCalculatorOptions proto.InternalMessageInfo

const Default_PacketResamplerCalculatorOptions_FrameRate float64 = -1
const Default_PacketResamplerCalculatorOptions_OutputHeader PacketResamplerCalculatorOptions_OutputHeader = NONE
const Default_PacketResamplerCalculatorOptions_FlushLastPacket bool = true
const Default_PacketResamplerCalculatorOptions_JitterWithReflection bool = false
const Default_PacketResamplerCalculatorOptions_ReproducibleSampling bool = false
const Default_PacketResamplerCalculatorOptions_RoundLimits bool = false

func (m *PacketResamplerCalculatorOptions) GetFrameRate() float64 {
	if m != nil && m.FrameRate != nil {
		return *m.FrameRate
	}
	return Default_PacketResamplerCalculatorOptions_FrameRate
}

func (m *PacketResamplerCalculatorOptions) GetOutputHeader() PacketResamplerCalculatorOptions_OutputHeader {
	if m != nil && m.OutputHeader != nil {
		return *m.OutputHeader
	}
	return Default_PacketResamplerCalculatorOptions_OutputHeader
}

func (m *PacketResamplerCalculatorOptions) GetFlushLastPacket() bool {
	if m != nil && m.FlushLastPacket != nil {
		return *m.FlushLastPacket
	}
	return Default_PacketResamplerCalculatorOptions_FlushLastPacket
}

func (m *PacketResamplerCalculatorOptions) GetJitter() float64 {
	if m != nil {
		return m.Jitter
	}
	return 0
}

func (m *PacketResamplerCalculatorOptions) GetJitterWithReflection() bool {
	if m != nil && m.JitterWithReflection != nil {
		return *m.JitterWithReflection
	}
	return Default_PacketResamplerCalculatorOptions_JitterWithReflection
}

func (m *PacketResamplerCalculatorOptions) GetReproducibleSampling() bool {
	if m != nil && m.ReproducibleSampling != nil {
		return *m.ReproducibleSampling
	}
	return Default_PacketResamplerCalculatorOptions_ReproducibleSampling
}

func (m *PacketResamplerCalculatorOptions) GetBaseTimestamp() int64 {
	if m != nil {
		return m.BaseTimestamp
	}
	return 0
}

func (m *PacketResamplerCalculatorOptions) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *PacketResamplerCalculatorOptions) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *PacketResamplerCalculatorOptions) GetRoundLimits() bool {
	if m != nil && m.RoundLimits != nil {
		return *m.RoundLimits
	}
	return Default_PacketResamplerCalculatorOptions_RoundLimits
}

var E_PacketResamplerCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*PacketResamplerCalculatorOptions)(nil),
	Field:         95743844,
	Name:          "mediapipe.PacketResamplerCalculatorOptions.ext",
	Tag:           "bytes,95743844,opt,name=ext",
	Filename:      "mediapipe/calculators/core/packet_resampler_calculator.proto",
}

func init() {
	proto.RegisterEnum("mediapipe.PacketResamplerCalculatorOptions_OutputHeader", PacketResamplerCalculatorOptions_OutputHeader_name, PacketResamplerCalculatorOptions_OutputHeader_value)
	proto.RegisterExtension(E_PacketResamplerCalculatorOptions_Ext)
	proto.RegisterType((*PacketResamplerCalculatorOptions)(nil), "mediapipe.PacketResamplerCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/core/packet_resampler_calculator.proto", fileDescriptor_005d000680f5ef5b)
}

var fileDescriptor_005d000680f5ef5b = []byte{
	// 558 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcb, 0x6e, 0xd3, 0x40,
	0x18, 0x85, 0x3d, 0x6d, 0xda, 0x26, 0xd3, 0x2b, 0xc3, 0xcd, 0x42, 0xd5, 0xd4, 0x14, 0x16, 0x96,
	0xaa, 0xc6, 0xd0, 0x05, 0x42, 0x81, 0x4d, 0x4b, 0x23, 0x15, 0xa9, 0x6a, 0x2a, 0xb7, 0x80, 0xc4,
	0x82, 0xd1, 0xd4, 0xfe, 0x93, 0x0c, 0xb5, 0x33, 0xd6, 0x78, 0xac, 0xb2, 0xe4, 0x11, 0x78, 0x0c,
	0x1e, 0x80, 0x87, 0xe8, 0xb2, 0x12, 0x9b, 0xae, 0x2a, 0xe2, 0xb0, 0x60, 0xd9, 0x47, 0x40, 0x99,
	0xdc, 0x0c, 0x08, 0x21, 0x76, 0xd6, 0x7f, 0xbe, 0xff, 0xcc, 0xb1, 0x8f, 0x07, 0x3f, 0x8f, 0x21,
	0x14, 0x3c, 0x11, 0x09, 0x78, 0x01, 0x8f, 0x82, 0x2c, 0xe2, 0x5a, 0xaa, 0xd4, 0x0b, 0xa4, 0x02,
	0x2f, 0xe1, 0xc1, 0x29, 0x68, 0xa6, 0x20, 0xe5, 0x71, 0x12, 0x81, 0x62, 0x13, 0xa2, 0x9a, 0x28,
	0xa9, 0x25, 0xa9, 0x8c, 0xb7, 0xef, 0x3d, 0x9c, 0x18, 0x35, 0x15, 0x8f, 0xe1, 0x4c, 0xaa, 0x53,
	0xef, 0xf7, 0x85, 0xf5, 0x2f, 0x33, 0xd8, 0x39, 0x34, 0xb6, 0xfe, 0xc8, 0xf5, 0xc5, 0x98, 0x69,
	0x24, 0x5a, 0xc8, 0x4e, 0x4a, 0xee, 0x63, 0x6c, 0x2c, 0x98, 0xe2, 0x1a, 0x6c, 0xe4, 0x20, 0x17,
	0xd5, 0xa6, 0x36, 0x1f, 0xfb, 0x15, 0x33, 0xf5, 0xb9, 0x06, 0x12, 0xe0, 0x45, 0x99, 0xe9, 0x24,
	0xd3, 0xac, 0x0d, 0x3c, 0x04, 0x65, 0x4f, 0x39, 0xc8, 0x5d, 0xda, 0x7a, 0x5a, 0x1d, 0xa7, 0xa8,
	0xfe, 0xeb, 0x98, 0x6a, 0xc3, 0x18, 0xec, 0x99, 0xfd, 0x5a, 0xe9, 0xa0, 0x71, 0x50, 0xf7, 0x17,
	0x64, 0x61, 0x46, 0x1e, 0xe1, 0x1b, 0xcd, 0x28, 0x4b, 0xdb, 0x2c, 0xe2, 0xa9, 0x66, 0x83, 0xaf,
	0x61, 0x4f, 0x3b, 0xc8, 0x2d, 0xd7, 0x4a, 0x5a, 0x65, 0xe0, 0x2f, 0x1b, 0x79, 0x9f, 0xa7, 0x7a,
	0x70, 0x18, 0x59, 0xc5, 0xb3, 0xef, 0x85, 0xd6, 0xa0, 0xec, 0x52, 0x3f, 0xf5, 0x4e, 0xe9, 0xfc,
	0x6a, 0xcd, 0xf2, 0x87, 0x33, 0xf2, 0x0c, 0xdf, 0x19, 0x3c, 0xb1, 0x33, 0xa1, 0xdb, 0x4c, 0x41,
	0x33, 0x82, 0xa0, 0x9f, 0xc5, 0xae, 0x18, 0xd3, 0x99, 0x26, 0x8f, 0x52, 0xf0, 0x6f, 0x0d, 0xa0,
	0x37, 0x42, 0xb7, 0xfd, 0x31, 0x42, 0x6a, 0xf8, 0xb6, 0x82, 0x44, 0xc9, 0x30, 0x0b, 0xc4, 0x49,
	0x04, 0xcc, 0xbc, 0x96, 0xe8, 0xb4, 0x6c, 0xfc, 0xcb, 0x6e, 0x91, 0x39, 0x1a, 0x22, 0x64, 0x03,
	0x2f, 0x9d, 0xf0, 0x14, 0x98, 0x16, 0x31, 0xa4, 0x9a, 0xc7, 0x89, 0x3d, 0xe3, 0x20, 0x77, 0x7a,
	0x18, 0x6f, 0xb1, 0xaf, 0x1d, 0x8f, 0x24, 0xf2, 0x00, 0xe3, 0x54, 0x73, 0xa5, 0x0d, 0x6d, 0xcf,
	0x16, 0xc0, 0x8a, 0x99, 0xf7, 0x49, 0xb2, 0x86, 0xcb, 0xd0, 0x09, 0x07, 0xc8, 0x5c, 0x01, 0x99,
	0x83, 0x4e, 0x68, 0x00, 0x17, 0x2f, 0x28, 0x99, 0x75, 0x42, 0x16, 0x89, 0x58, 0xe8, 0xd4, 0x2e,
	0x17, 0x53, 0xce, 0x1b, 0x69, 0xdf, 0x28, 0xeb, 0x3b, 0x78, 0xa1, 0xd8, 0x04, 0x29, 0x63, 0xd3,
	0xc5, 0x8a, 0x45, 0x96, 0xf1, 0xfc, 0xe1, 0xf6, 0xd1, 0x11, 0xdb, 0xab, 0x6f, 0xef, 0xd6, 0xfd,
	0x15, 0x44, 0xee, 0xe2, 0x9b, 0xaf, 0x0e, 0x77, 0xb7, 0x8f, 0xeb, 0xec, 0xf5, 0xcb, 0xdd, 0x7a,
	0x63, 0x24, 0x4c, 0x6d, 0xbd, 0xc3, 0xd3, 0xf0, 0x41, 0x93, 0xd5, 0x42, 0xfd, 0x7f, 0xf4, 0x6d,
	0x7f, 0xbf, 0xfa, 0xba, 0xe9, 0x20, 0x77, 0x7e, 0x6b, 0xe3, 0x3f, 0xfe, 0x12, 0xbf, 0x6f, 0xbc,
	0x13, 0x5d, 0x74, 0xa9, 0x75, 0xd9, 0xa5, 0xd6, 0x75, 0x97, 0xa2, 0x8f, 0x39, 0x45, 0x9f, 0x73,
	0x8a, 0xce, 0x73, 0x8a, 0x2e, 0x72, 0x8a, 0xbe, 0xe5, 0x14, 0xfd, 0xc8, 0xa9, 0x75, 0x9d, 0x53,
	0xf4, 0xa9, 0x47, 0xad, 0x8b, 0x1e, 0xb5, 0x2e, 0x7b, 0xd4, 0x7a, 0xfb, 0xa4, 0x25, 0x74, 0x3b,
	0x3b, 0xa9, 0x06, 0x32, 0xf6, 0x5a, 0x52, 0xb6, 0x22, 0xf0, 0x26, 0x97, 0xe4, 0xef, 0xf7, 0xee,
	0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x6c, 0xd7, 0xc8, 0x94, 0x03, 0x00, 0x00,
}

func (x PacketResamplerCalculatorOptions_OutputHeader) String() string {
	s, ok := PacketResamplerCalculatorOptions_OutputHeader_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *PacketResamplerCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PacketResamplerCalculatorOptions)
	if !ok {
		that2, ok := that.(PacketResamplerCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FrameRate != nil && that1.FrameRate != nil {
		if *this.FrameRate != *that1.FrameRate {
			return false
		}
	} else if this.FrameRate != nil {
		return false
	} else if that1.FrameRate != nil {
		return false
	}
	if this.OutputHeader != nil && that1.OutputHeader != nil {
		if *this.OutputHeader != *that1.OutputHeader {
			return false
		}
	} else if this.OutputHeader != nil {
		return false
	} else if that1.OutputHeader != nil {
		return false
	}
	if this.FlushLastPacket != nil && that1.FlushLastPacket != nil {
		if *this.FlushLastPacket != *that1.FlushLastPacket {
			return false
		}
	} else if this.FlushLastPacket != nil {
		return false
	} else if that1.FlushLastPacket != nil {
		return false
	}
	if this.Jitter != that1.Jitter {
		return false
	}
	if this.JitterWithReflection != nil && that1.JitterWithReflection != nil {
		if *this.JitterWithReflection != *that1.JitterWithReflection {
			return false
		}
	} else if this.JitterWithReflection != nil {
		return false
	} else if that1.JitterWithReflection != nil {
		return false
	}
	if this.ReproducibleSampling != nil && that1.ReproducibleSampling != nil {
		if *this.ReproducibleSampling != *that1.ReproducibleSampling {
			return false
		}
	} else if this.ReproducibleSampling != nil {
		return false
	} else if that1.ReproducibleSampling != nil {
		return false
	}
	if this.BaseTimestamp != that1.BaseTimestamp {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.RoundLimits != nil && that1.RoundLimits != nil {
		if *this.RoundLimits != *that1.RoundLimits {
			return false
		}
	} else if this.RoundLimits != nil {
		return false
	} else if that1.RoundLimits != nil {
		return false
	}
	return true
}
func (this *PacketResamplerCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&core.PacketResamplerCalculatorOptions{")
	if this.FrameRate != nil {
		s = append(s, "FrameRate: "+valueToGoStringPacketResamplerCalculator(this.FrameRate, "float64")+",\n")
	}
	if this.OutputHeader != nil {
		s = append(s, "OutputHeader: "+valueToGoStringPacketResamplerCalculator(this.OutputHeader, "PacketResamplerCalculatorOptions_OutputHeader")+",\n")
	}
	if this.FlushLastPacket != nil {
		s = append(s, "FlushLastPacket: "+valueToGoStringPacketResamplerCalculator(this.FlushLastPacket, "bool")+",\n")
	}
	s = append(s, "Jitter: "+fmt.Sprintf("%#v", this.Jitter)+",\n")
	if this.JitterWithReflection != nil {
		s = append(s, "JitterWithReflection: "+valueToGoStringPacketResamplerCalculator(this.JitterWithReflection, "bool")+",\n")
	}
	if this.ReproducibleSampling != nil {
		s = append(s, "ReproducibleSampling: "+valueToGoStringPacketResamplerCalculator(this.ReproducibleSampling, "bool")+",\n")
	}
	s = append(s, "BaseTimestamp: "+fmt.Sprintf("%#v", this.BaseTimestamp)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	if this.RoundLimits != nil {
		s = append(s, "RoundLimits: "+valueToGoStringPacketResamplerCalculator(this.RoundLimits, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPacketResamplerCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PacketResamplerCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketResamplerCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketResamplerCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReproducibleSampling != nil {
		i--
		if *m.ReproducibleSampling {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.JitterWithReflection != nil {
		i--
		if *m.JitterWithReflection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.RoundLimits != nil {
		i--
		if *m.RoundLimits {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	i = encodeVarintPacketResamplerCalculator(dAtA, i, uint64(m.EndTime))
	i--
	dAtA[i] = 0x38
	i = encodeVarintPacketResamplerCalculator(dAtA, i, uint64(m.StartTime))
	i--
	dAtA[i] = 0x30
	i = encodeVarintPacketResamplerCalculator(dAtA, i, uint64(m.BaseTimestamp))
	i--
	dAtA[i] = 0x28
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Jitter))))
	i--
	dAtA[i] = 0x21
	if m.FlushLastPacket != nil {
		i--
		if *m.FlushLastPacket {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.OutputHeader != nil {
		i = encodeVarintPacketResamplerCalculator(dAtA, i, uint64(*m.OutputHeader))
		i--
		dAtA[i] = 0x10
	}
	if m.FrameRate != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.FrameRate))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacketResamplerCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacketResamplerCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PacketResamplerCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FrameRate != nil {
		n += 9
	}
	if m.OutputHeader != nil {
		n += 1 + sovPacketResamplerCalculator(uint64(*m.OutputHeader))
	}
	if m.FlushLastPacket != nil {
		n += 2
	}
	n += 9
	n += 1 + sovPacketResamplerCalculator(uint64(m.BaseTimestamp))
	n += 1 + sovPacketResamplerCalculator(uint64(m.StartTime))
	n += 1 + sovPacketResamplerCalculator(uint64(m.EndTime))
	if m.RoundLimits != nil {
		n += 2
	}
	if m.JitterWithReflection != nil {
		n += 2
	}
	if m.ReproducibleSampling != nil {
		n += 2
	}
	return n
}

func sovPacketResamplerCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacketResamplerCalculator(x uint64) (n int) {
	return sovPacketResamplerCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PacketResamplerCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PacketResamplerCalculatorOptions{`,
		`FrameRate:` + valueToStringPacketResamplerCalculator(this.FrameRate) + `,`,
		`OutputHeader:` + valueToStringPacketResamplerCalculator(this.OutputHeader) + `,`,
		`FlushLastPacket:` + valueToStringPacketResamplerCalculator(this.FlushLastPacket) + `,`,
		`Jitter:` + fmt.Sprintf("%v", this.Jitter) + `,`,
		`BaseTimestamp:` + fmt.Sprintf("%v", this.BaseTimestamp) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`RoundLimits:` + valueToStringPacketResamplerCalculator(this.RoundLimits) + `,`,
		`JitterWithReflection:` + valueToStringPacketResamplerCalculator(this.JitterWithReflection) + `,`,
		`ReproducibleSampling:` + valueToStringPacketResamplerCalculator(this.ReproducibleSampling) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPacketResamplerCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PacketResamplerCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketResamplerCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketResamplerCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketResamplerCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.FrameRate = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputHeader", wireType)
			}
			var v PacketResamplerCalculatorOptions_OutputHeader
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketResamplerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PacketResamplerCalculatorOptions_OutputHeader(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutputHeader = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushLastPacket", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketResamplerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FlushLastPacket = &b
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jitter", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Jitter = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTimestamp", wireType)
			}
			m.BaseTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketResamplerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketResamplerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketResamplerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundLimits", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketResamplerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.RoundLimits = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JitterWithReflection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketResamplerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.JitterWithReflection = &b
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReproducibleSampling", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketResamplerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReproducibleSampling = &b
		default:
			iNdEx = preIndex
			skippy, err := skipPacketResamplerCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacketResamplerCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacketResamplerCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacketResamplerCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketResamplerCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketResamplerCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacketResamplerCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacketResamplerCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacketResamplerCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacketResamplerCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacketResamplerCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacketResamplerCalculator = fmt.Errorf("proto: unexpected end of group")
)
