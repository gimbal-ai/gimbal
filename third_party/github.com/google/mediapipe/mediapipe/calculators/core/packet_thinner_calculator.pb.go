// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/core/packet_thinner_calculator.proto

package core

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PacketThinnerCalculatorOptions_ThinnerType int32

const (
	UNKNOWN PacketThinnerCalculatorOptions_ThinnerType = 0
	ASYNC   PacketThinnerCalculatorOptions_ThinnerType = 1
	SYNC    PacketThinnerCalculatorOptions_ThinnerType = 2
)

var PacketThinnerCalculatorOptions_ThinnerType_name = map[int32]string{
	0: "UNKNOWN",
	1: "ASYNC",
	2: "SYNC",
}

var PacketThinnerCalculatorOptions_ThinnerType_value = map[string]int32{
	"UNKNOWN": 0,
	"ASYNC":   1,
	"SYNC":    2,
}

func (x PacketThinnerCalculatorOptions_ThinnerType) Enum() *PacketThinnerCalculatorOptions_ThinnerType {
	p := new(PacketThinnerCalculatorOptions_ThinnerType)
	*p = x
	return p
}

func (x PacketThinnerCalculatorOptions_ThinnerType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(PacketThinnerCalculatorOptions_ThinnerType_name, int32(x))
}

func (x *PacketThinnerCalculatorOptions_ThinnerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PacketThinnerCalculatorOptions_ThinnerType_value, data, "PacketThinnerCalculatorOptions_ThinnerType")
	if err != nil {
		return err
	}
	*x = PacketThinnerCalculatorOptions_ThinnerType(value)
	return nil
}

func (PacketThinnerCalculatorOptions_ThinnerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c609fb8d084fe045, []int{0, 0}
}

type PacketThinnerCalculatorOptions struct {
	ThinnerType          *PacketThinnerCalculatorOptions_ThinnerType `protobuf:"varint,1,opt,name=thinner_type,json=thinnerType,enum=mediapipe.PacketThinnerCalculatorOptions_ThinnerType,def=1" json:"thinner_type,omitempty"`
	Period               *int64                                      `protobuf:"varint,2,opt,name=period,def=1" json:"period,omitempty"`
	StartTime            int64                                       `protobuf:"varint,3,opt,name=start_time,json=startTime" json:"start_time"`
	EndTime              int64                                       `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time"`
	SyncOutputTimestamps *bool                                       `protobuf:"varint,5,opt,name=sync_output_timestamps,json=syncOutputTimestamps,def=1" json:"sync_output_timestamps,omitempty"`
	UpdateFrameRate      *bool                                       `protobuf:"varint,6,opt,name=update_frame_rate,json=updateFrameRate,def=0" json:"update_frame_rate,omitempty"`
}

func (m *PacketThinnerCalculatorOptions) Reset()      { *m = PacketThinnerCalculatorOptions{} }
func (*PacketThinnerCalculatorOptions) ProtoMessage() {}
func (*PacketThinnerCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c609fb8d084fe045, []int{0}
}
func (m *PacketThinnerCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketThinnerCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketThinnerCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketThinnerCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketThinnerCalculatorOptions.Merge(m, src)
}
func (m *PacketThinnerCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *PacketThinnerCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketThinnerCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PacketThinnerCalculatorOptions proto.InternalMessageInfo

const Default_PacketThinnerCalculatorOptions_ThinnerType PacketThinnerCalculatorOptions_ThinnerType = ASYNC
const Default_PacketThinnerCalculatorOptions_Period int64 = 1
const Default_PacketThinnerCalculatorOptions_SyncOutputTimestamps bool = true
const Default_PacketThinnerCalculatorOptions_UpdateFrameRate bool = false

func (m *PacketThinnerCalculatorOptions) GetThinnerType() PacketThinnerCalculatorOptions_ThinnerType {
	if m != nil && m.ThinnerType != nil {
		return *m.ThinnerType
	}
	return Default_PacketThinnerCalculatorOptions_ThinnerType
}

func (m *PacketThinnerCalculatorOptions) GetPeriod() int64 {
	if m != nil && m.Period != nil {
		return *m.Period
	}
	return Default_PacketThinnerCalculatorOptions_Period
}

func (m *PacketThinnerCalculatorOptions) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *PacketThinnerCalculatorOptions) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *PacketThinnerCalculatorOptions) GetSyncOutputTimestamps() bool {
	if m != nil && m.SyncOutputTimestamps != nil {
		return *m.SyncOutputTimestamps
	}
	return Default_PacketThinnerCalculatorOptions_SyncOutputTimestamps
}

func (m *PacketThinnerCalculatorOptions) GetUpdateFrameRate() bool {
	if m != nil && m.UpdateFrameRate != nil {
		return *m.UpdateFrameRate
	}
	return Default_PacketThinnerCalculatorOptions_UpdateFrameRate
}

var E_PacketThinnerCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*PacketThinnerCalculatorOptions)(nil),
	Field:         288533508,
	Name:          "mediapipe.PacketThinnerCalculatorOptions.ext",
	Tag:           "bytes,288533508,opt,name=ext",
	Filename:      "mediapipe/calculators/core/packet_thinner_calculator.proto",
}

func init() {
	proto.RegisterEnum("mediapipe.PacketThinnerCalculatorOptions_ThinnerType", PacketThinnerCalculatorOptions_ThinnerType_name, PacketThinnerCalculatorOptions_ThinnerType_value)
	proto.RegisterExtension(E_PacketThinnerCalculatorOptions_Ext)
	proto.RegisterType((*PacketThinnerCalculatorOptions)(nil), "mediapipe.PacketThinnerCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/core/packet_thinner_calculator.proto", fileDescriptor_c609fb8d084fe045)
}

var fileDescriptor_c609fb8d084fe045 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x33, 0xdb, 0x76, 0xb7, 0x9d, 0x8a, 0xae, 0x83, 0x48, 0x14, 0x99, 0x2d, 0xab, 0x87,
	0x7a, 0x49, 0xd8, 0x82, 0x1e, 0x72, 0x73, 0x17, 0xbc, 0x08, 0xad, 0xc4, 0x8a, 0x28, 0x48, 0x18,
	0x93, 0xb7, 0xdd, 0x61, 0x93, 0xcc, 0x30, 0x79, 0x41, 0x7b, 0xf3, 0xe0, 0xc5, 0x9b, 0x1f, 0xc3,
	0x8f, 0xb2, 0x78, 0xea, 0xb1, 0x27, 0xb1, 0xe9, 0xc5, 0xe3, 0x7e, 0x04, 0x49, 0x52, 0xdb, 0xa2,
	0x28, 0x7b, 0x0b, 0xef, 0xff, 0x7b, 0xbf, 0x30, 0x7f, 0x1e, 0xf5, 0x12, 0x88, 0xa4, 0xd0, 0x52,
	0x83, 0x1b, 0x8a, 0x38, 0xcc, 0x63, 0x81, 0xca, 0x64, 0x6e, 0xa8, 0x0c, 0xb8, 0x5a, 0x84, 0xe7,
	0x80, 0x01, 0x9e, 0xc9, 0x34, 0x05, 0x13, 0x6c, 0x72, 0x47, 0x1b, 0x85, 0x8a, 0x75, 0xd6, 0xbb,
	0x77, 0x1f, 0x6c, 0x34, 0xa7, 0x46, 0x24, 0xf0, 0x5e, 0x99, 0x73, 0xf7, 0xcf, 0x85, 0xc3, 0x45,
	0x83, 0xf2, 0xe7, 0x95, 0x74, 0x5c, 0x3b, 0x4f, 0xd6, 0xc4, 0x48, 0xa3, 0x54, 0x69, 0xc6, 0x02,
	0x7a, 0xed, 0xf7, 0xff, 0x70, 0xaa, 0xc1, 0x26, 0x3d, 0xd2, 0xbf, 0x3e, 0x78, 0xe4, 0xac, 0xfd,
	0xce, 0xff, 0x05, 0xce, 0x2a, 0x18, 0x4f, 0x35, 0x78, 0xad, 0x27, 0x2f, 0x5e, 0x0f, 0x4f, 0xfc,
	0x2e, 0x6e, 0x66, 0xec, 0x0e, 0xdd, 0xd5, 0x60, 0xa4, 0x8a, 0xec, 0x9d, 0x1e, 0xe9, 0x37, 0x3c,
	0x72, 0xe4, 0xaf, 0x06, 0xec, 0x3e, 0xa5, 0x19, 0x0a, 0x83, 0x01, 0xca, 0x04, 0xec, 0x46, 0x19,
	0x1f, 0x37, 0x2f, 0xbe, 0x1f, 0x58, 0x7e, 0xa7, 0x9a, 0x8f, 0x65, 0x02, 0xec, 0x80, 0xb6, 0x21,
	0x8d, 0x6a, 0xa4, 0xb9, 0x85, 0xec, 0x41, 0x1a, 0x55, 0x80, 0x47, 0x6f, 0x67, 0xd3, 0x34, 0x0c,
	0x54, 0x8e, 0x3a, 0xaf, 0x5d, 0x19, 0x8a, 0x44, 0x67, 0x76, 0xab, 0x47, 0xfa, 0x6d, 0xaf, 0x89,
	0x26, 0x07, 0xff, 0x56, 0xc9, 0x8c, 0x2a, 0x64, 0xbc, 0x26, 0xd8, 0x11, 0xbd, 0x99, 0xeb, 0x48,
	0x20, 0x04, 0x55, 0x8b, 0x81, 0x11, 0x08, 0xf6, 0x6e, 0xb5, 0xd6, 0x3a, 0x15, 0x71, 0x06, 0xfe,
	0x8d, 0x3a, 0x7f, 0x5a, 0xc6, 0xbe, 0x40, 0x38, 0x74, 0x69, 0x77, 0xeb, 0xc9, 0xac, 0x4b, 0xf7,
	0x5e, 0x0e, 0x9f, 0x0d, 0x47, 0xaf, 0x86, 0xfb, 0x16, 0xeb, 0xd0, 0xba, 0x81, 0x7d, 0xc2, 0xda,
	0xb4, 0x59, 0x7d, 0xed, 0x0c, 0xde, 0xd2, 0x06, 0x7c, 0x40, 0x76, 0x6f, 0xab, 0xd2, 0xbf, 0x5a,
	0xb4, 0x3f, 0xcd, 0xbf, 0x7d, 0x2e, 0xab, 0xef, 0x0e, 0x1e, 0x5e, 0xb9, 0x7a, 0xbf, 0xf4, 0x1e,
	0xc7, 0xb3, 0x05, 0xb7, 0xe6, 0x0b, 0x6e, 0x5d, 0x2e, 0x38, 0xf9, 0x58, 0x70, 0xf2, 0xb5, 0xe0,
	0xe4, 0xa2, 0xe0, 0x64, 0x56, 0x70, 0xf2, 0xa3, 0xe0, 0xe4, 0x67, 0xc1, 0xad, 0xcb, 0x82, 0x93,
	0x2f, 0x4b, 0x6e, 0xcd, 0x96, 0xdc, 0x9a, 0x2f, 0xb9, 0xf5, 0xe6, 0xf1, 0x44, 0xe2, 0x59, 0xfe,
	0xce, 0x09, 0x55, 0xe2, 0x4e, 0x94, 0x9a, 0xc4, 0xe0, 0x6e, 0x2e, 0xea, 0xdf, 0x27, 0xfa, 0x2b,
	0x00, 0x00, 0xff, 0xff, 0xd3, 0x8c, 0xca, 0x2e, 0xbf, 0x02, 0x00, 0x00,
}

func (x PacketThinnerCalculatorOptions_ThinnerType) String() string {
	s, ok := PacketThinnerCalculatorOptions_ThinnerType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *PacketThinnerCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PacketThinnerCalculatorOptions)
	if !ok {
		that2, ok := that.(PacketThinnerCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ThinnerType != nil && that1.ThinnerType != nil {
		if *this.ThinnerType != *that1.ThinnerType {
			return false
		}
	} else if this.ThinnerType != nil {
		return false
	} else if that1.ThinnerType != nil {
		return false
	}
	if this.Period != nil && that1.Period != nil {
		if *this.Period != *that1.Period {
			return false
		}
	} else if this.Period != nil {
		return false
	} else if that1.Period != nil {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.SyncOutputTimestamps != nil && that1.SyncOutputTimestamps != nil {
		if *this.SyncOutputTimestamps != *that1.SyncOutputTimestamps {
			return false
		}
	} else if this.SyncOutputTimestamps != nil {
		return false
	} else if that1.SyncOutputTimestamps != nil {
		return false
	}
	if this.UpdateFrameRate != nil && that1.UpdateFrameRate != nil {
		if *this.UpdateFrameRate != *that1.UpdateFrameRate {
			return false
		}
	} else if this.UpdateFrameRate != nil {
		return false
	} else if that1.UpdateFrameRate != nil {
		return false
	}
	return true
}
func (this *PacketThinnerCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&core.PacketThinnerCalculatorOptions{")
	if this.ThinnerType != nil {
		s = append(s, "ThinnerType: "+valueToGoStringPacketThinnerCalculator(this.ThinnerType, "PacketThinnerCalculatorOptions_ThinnerType")+",\n")
	}
	if this.Period != nil {
		s = append(s, "Period: "+valueToGoStringPacketThinnerCalculator(this.Period, "int64")+",\n")
	}
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	if this.SyncOutputTimestamps != nil {
		s = append(s, "SyncOutputTimestamps: "+valueToGoStringPacketThinnerCalculator(this.SyncOutputTimestamps, "bool")+",\n")
	}
	if this.UpdateFrameRate != nil {
		s = append(s, "UpdateFrameRate: "+valueToGoStringPacketThinnerCalculator(this.UpdateFrameRate, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPacketThinnerCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PacketThinnerCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketThinnerCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketThinnerCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateFrameRate != nil {
		i--
		if *m.UpdateFrameRate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.SyncOutputTimestamps != nil {
		i--
		if *m.SyncOutputTimestamps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	i = encodeVarintPacketThinnerCalculator(dAtA, i, uint64(m.EndTime))
	i--
	dAtA[i] = 0x20
	i = encodeVarintPacketThinnerCalculator(dAtA, i, uint64(m.StartTime))
	i--
	dAtA[i] = 0x18
	if m.Period != nil {
		i = encodeVarintPacketThinnerCalculator(dAtA, i, uint64(*m.Period))
		i--
		dAtA[i] = 0x10
	}
	if m.ThinnerType != nil {
		i = encodeVarintPacketThinnerCalculator(dAtA, i, uint64(*m.ThinnerType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacketThinnerCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacketThinnerCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PacketThinnerCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ThinnerType != nil {
		n += 1 + sovPacketThinnerCalculator(uint64(*m.ThinnerType))
	}
	if m.Period != nil {
		n += 1 + sovPacketThinnerCalculator(uint64(*m.Period))
	}
	n += 1 + sovPacketThinnerCalculator(uint64(m.StartTime))
	n += 1 + sovPacketThinnerCalculator(uint64(m.EndTime))
	if m.SyncOutputTimestamps != nil {
		n += 2
	}
	if m.UpdateFrameRate != nil {
		n += 2
	}
	return n
}

func sovPacketThinnerCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacketThinnerCalculator(x uint64) (n int) {
	return sovPacketThinnerCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PacketThinnerCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PacketThinnerCalculatorOptions{`,
		`ThinnerType:` + valueToStringPacketThinnerCalculator(this.ThinnerType) + `,`,
		`Period:` + valueToStringPacketThinnerCalculator(this.Period) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`SyncOutputTimestamps:` + valueToStringPacketThinnerCalculator(this.SyncOutputTimestamps) + `,`,
		`UpdateFrameRate:` + valueToStringPacketThinnerCalculator(this.UpdateFrameRate) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPacketThinnerCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PacketThinnerCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketThinnerCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketThinnerCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketThinnerCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThinnerType", wireType)
			}
			var v PacketThinnerCalculatorOptions_ThinnerType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketThinnerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PacketThinnerCalculatorOptions_ThinnerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThinnerType = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketThinnerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Period = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketThinnerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketThinnerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncOutputTimestamps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketThinnerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.SyncOutputTimestamps = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateFrameRate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketThinnerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UpdateFrameRate = &b
		default:
			iNdEx = preIndex
			skippy, err := skipPacketThinnerCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacketThinnerCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacketThinnerCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacketThinnerCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketThinnerCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketThinnerCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacketThinnerCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacketThinnerCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacketThinnerCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacketThinnerCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacketThinnerCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacketThinnerCalculator = fmt.Errorf("proto: unexpected end of group")
)
