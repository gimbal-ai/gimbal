// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/core/split_vector_calculator.proto

package core

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Range struct {
	Begin int32 `protobuf:"varint,1,opt,name=begin" json:"begin"`
	End   int32 `protobuf:"varint,2,opt,name=end" json:"end"`
}

func (m *Range) Reset()      { *m = Range{} }
func (*Range) ProtoMessage() {}
func (*Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d00a3c6cfd68dd, []int{0}
}
func (m *Range) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Range.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Range.Merge(m, src)
}
func (m *Range) XXX_Size() int {
	return m.Size()
}
func (m *Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Range.DiscardUnknown(m)
}

var xxx_messageInfo_Range proto.InternalMessageInfo

func (m *Range) GetBegin() int32 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *Range) GetEnd() int32 {
	if m != nil {
		return m.End
	}
	return 0
}

type SplitVectorCalculatorOptions struct {
	Ranges         []*Range `protobuf:"bytes,1,rep,name=ranges" json:"ranges,omitempty"`
	ElementOnly    *bool    `protobuf:"varint,2,opt,name=element_only,json=elementOnly,def=0" json:"element_only,omitempty"`
	CombineOutputs *bool    `protobuf:"varint,3,opt,name=combine_outputs,json=combineOutputs,def=0" json:"combine_outputs,omitempty"`
}

func (m *SplitVectorCalculatorOptions) Reset()      { *m = SplitVectorCalculatorOptions{} }
func (*SplitVectorCalculatorOptions) ProtoMessage() {}
func (*SplitVectorCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d00a3c6cfd68dd, []int{1}
}
func (m *SplitVectorCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SplitVectorCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SplitVectorCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SplitVectorCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplitVectorCalculatorOptions.Merge(m, src)
}
func (m *SplitVectorCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *SplitVectorCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SplitVectorCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SplitVectorCalculatorOptions proto.InternalMessageInfo

const Default_SplitVectorCalculatorOptions_ElementOnly bool = false
const Default_SplitVectorCalculatorOptions_CombineOutputs bool = false

func (m *SplitVectorCalculatorOptions) GetRanges() []*Range {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *SplitVectorCalculatorOptions) GetElementOnly() bool {
	if m != nil && m.ElementOnly != nil {
		return *m.ElementOnly
	}
	return Default_SplitVectorCalculatorOptions_ElementOnly
}

func (m *SplitVectorCalculatorOptions) GetCombineOutputs() bool {
	if m != nil && m.CombineOutputs != nil {
		return *m.CombineOutputs
	}
	return Default_SplitVectorCalculatorOptions_CombineOutputs
}

var E_SplitVectorCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*SplitVectorCalculatorOptions)(nil),
	Field:         259438222,
	Name:          "mediapipe.SplitVectorCalculatorOptions.ext",
	Tag:           "bytes,259438222,opt,name=ext",
	Filename:      "mediapipe/calculators/core/split_vector_calculator.proto",
}

func init() {
	proto.RegisterType((*Range)(nil), "mediapipe.Range")
	proto.RegisterExtension(E_SplitVectorCalculatorOptions_Ext)
	proto.RegisterType((*SplitVectorCalculatorOptions)(nil), "mediapipe.SplitVectorCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/core/split_vector_calculator.proto", fileDescriptor_90d00a3c6cfd68dd)
}

var fileDescriptor_90d00a3c6cfd68dd = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x33, 0x7f, 0xfe, 0x88, 0x4e, 0x45, 0x25, 0x0b, 0x09, 0xa5, 0x8c, 0xa5, 0x08, 0x66,
	0x95, 0x40, 0x17, 0x22, 0xba, 0xab, 0x0f, 0x50, 0x88, 0xe0, 0xa2, 0x9b, 0x90, 0xa6, 0xb7, 0x31,
	0x38, 0x99, 0x09, 0x93, 0x89, 0x5a, 0xdc, 0xf8, 0x04, 0xe2, 0x63, 0xf8, 0x28, 0x5d, 0x76, 0x59,
	0x5c, 0x88, 0x9d, 0x6e, 0xdc, 0x08, 0x7d, 0x02, 0x91, 0xb4, 0xa5, 0x0d, 0x8a, 0x6e, 0xef, 0x77,
	0xef, 0x39, 0xe7, 0x72, 0xf0, 0x49, 0x02, 0xbd, 0x38, 0x48, 0xe3, 0x14, 0xdc, 0x30, 0xa0, 0x61,
	0x4e, 0x03, 0xc9, 0x45, 0xe6, 0x86, 0x5c, 0x80, 0x9b, 0xa5, 0x34, 0x96, 0xfe, 0x0d, 0x84, 0x92,
	0x0b, 0x7f, 0x4d, 0x9d, 0x54, 0x70, 0xc9, 0xcd, 0xad, 0xd5, 0x65, 0xf5, 0x70, 0x2d, 0xd2, 0x17,
	0x41, 0x02, 0xb7, 0x5c, 0x5c, 0xbb, 0xdf, 0x0f, 0x1a, 0x67, 0xd8, 0xf0, 0x02, 0x16, 0x81, 0x59,
	0xc5, 0x46, 0x17, 0xa2, 0x98, 0x59, 0xa8, 0x8e, 0x6c, 0xa3, 0xf5, 0x7f, 0xf8, 0x7a, 0xa0, 0x79,
	0x8b, 0x91, 0xb9, 0x8f, 0x75, 0x60, 0x3d, 0xeb, 0x5f, 0x89, 0x14, 0x83, 0xc6, 0x27, 0xc2, 0xb5,
	0x8b, 0x22, 0xcf, 0xe5, 0x3c, 0xce, 0xf9, 0x4a, 0xbc, 0x9d, 0xca, 0x98, 0xb3, 0xcc, 0xb4, 0xf1,
	0x86, 0x28, 0xd4, 0x33, 0x0b, 0xd5, 0x75, 0xbb, 0xd2, 0xdc, 0x73, 0x56, 0xa1, 0x9c, 0xb9, 0xad,
	0xb7, 0xe4, 0xa6, 0x8d, 0xb7, 0x81, 0x42, 0x02, 0x4c, 0xfa, 0x9c, 0xd1, 0xc1, 0xdc, 0x6b, 0xf3,
	0xd4, 0xe8, 0x07, 0x34, 0x03, 0xaf, 0xb2, 0x44, 0x6d, 0x46, 0x07, 0xa6, 0x83, 0x77, 0x43, 0x9e,
	0x74, 0x63, 0x06, 0x3e, 0xcf, 0x65, 0x9a, 0xcb, 0xcc, 0xd2, 0xcb, 0xcb, 0x3b, 0x4b, 0xda, 0x5e,
	0xc0, 0x66, 0x07, 0xeb, 0x70, 0x27, 0xcd, 0x5a, 0xc9, 0xfa, 0x47, 0x50, 0xeb, 0xf1, 0xe3, 0xe5,
	0xbe, 0x8e, 0xec, 0x4a, 0xf3, 0xa8, 0xb4, 0xf6, 0xd7, 0x6b, 0x5e, 0x21, 0xda, 0xa2, 0xa3, 0x09,
	0xd1, 0xc6, 0x13, 0xa2, 0xcd, 0x26, 0x04, 0x3d, 0x28, 0x82, 0x9e, 0x15, 0x41, 0x43, 0x45, 0xd0,
	0x48, 0x11, 0xf4, 0xa6, 0x08, 0x7a, 0x57, 0x44, 0x9b, 0x29, 0x82, 0x9e, 0xa6, 0x44, 0x1b, 0x4d,
	0x89, 0x36, 0x9e, 0x12, 0xad, 0x73, 0x1c, 0xc5, 0xf2, 0x2a, 0xef, 0x3a, 0x21, 0x4f, 0xdc, 0x88,
	0xf3, 0x88, 0x82, 0xbb, 0xee, 0xea, 0xf7, 0xea, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xda, 0x98,
	0xc2, 0xa9, 0x17, 0x02, 0x00, 0x00,
}

func (this *Range) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Range)
	if !ok {
		that2, ok := that.(Range)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Begin != that1.Begin {
		return false
	}
	if this.End != that1.End {
		return false
	}
	return true
}
func (this *SplitVectorCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SplitVectorCalculatorOptions)
	if !ok {
		that2, ok := that.(SplitVectorCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ranges) != len(that1.Ranges) {
		return false
	}
	for i := range this.Ranges {
		if !this.Ranges[i].Equal(that1.Ranges[i]) {
			return false
		}
	}
	if this.ElementOnly != nil && that1.ElementOnly != nil {
		if *this.ElementOnly != *that1.ElementOnly {
			return false
		}
	} else if this.ElementOnly != nil {
		return false
	} else if that1.ElementOnly != nil {
		return false
	}
	if this.CombineOutputs != nil && that1.CombineOutputs != nil {
		if *this.CombineOutputs != *that1.CombineOutputs {
			return false
		}
	} else if this.CombineOutputs != nil {
		return false
	} else if that1.CombineOutputs != nil {
		return false
	}
	return true
}
func (this *Range) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&core.Range{")
	s = append(s, "Begin: "+fmt.Sprintf("%#v", this.Begin)+",\n")
	s = append(s, "End: "+fmt.Sprintf("%#v", this.End)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SplitVectorCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&core.SplitVectorCalculatorOptions{")
	if this.Ranges != nil {
		s = append(s, "Ranges: "+fmt.Sprintf("%#v", this.Ranges)+",\n")
	}
	if this.ElementOnly != nil {
		s = append(s, "ElementOnly: "+valueToGoStringSplitVectorCalculator(this.ElementOnly, "bool")+",\n")
	}
	if this.CombineOutputs != nil {
		s = append(s, "CombineOutputs: "+valueToGoStringSplitVectorCalculator(this.CombineOutputs, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSplitVectorCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Range) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Range) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Range) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintSplitVectorCalculator(dAtA, i, uint64(m.End))
	i--
	dAtA[i] = 0x10
	i = encodeVarintSplitVectorCalculator(dAtA, i, uint64(m.Begin))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SplitVectorCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitVectorCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplitVectorCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CombineOutputs != nil {
		i--
		if *m.CombineOutputs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ElementOnly != nil {
		i--
		if *m.ElementOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ranges) > 0 {
		for iNdEx := len(m.Ranges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ranges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSplitVectorCalculator(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSplitVectorCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovSplitVectorCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Range) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSplitVectorCalculator(uint64(m.Begin))
	n += 1 + sovSplitVectorCalculator(uint64(m.End))
	return n
}

func (m *SplitVectorCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ranges) > 0 {
		for _, e := range m.Ranges {
			l = e.Size()
			n += 1 + l + sovSplitVectorCalculator(uint64(l))
		}
	}
	if m.ElementOnly != nil {
		n += 2
	}
	if m.CombineOutputs != nil {
		n += 2
	}
	return n
}

func sovSplitVectorCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSplitVectorCalculator(x uint64) (n int) {
	return sovSplitVectorCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Range) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Range{`,
		`Begin:` + fmt.Sprintf("%v", this.Begin) + `,`,
		`End:` + fmt.Sprintf("%v", this.End) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SplitVectorCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRanges := "[]*Range{"
	for _, f := range this.Ranges {
		repeatedStringForRanges += strings.Replace(f.String(), "Range", "Range", 1) + ","
	}
	repeatedStringForRanges += "}"
	s := strings.Join([]string{`&SplitVectorCalculatorOptions{`,
		`Ranges:` + repeatedStringForRanges + `,`,
		`ElementOnly:` + valueToStringSplitVectorCalculator(this.ElementOnly) + `,`,
		`CombineOutputs:` + valueToStringSplitVectorCalculator(this.CombineOutputs) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSplitVectorCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Range) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSplitVectorCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Range: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Range: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSplitVectorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSplitVectorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSplitVectorCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSplitVectorCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplitVectorCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSplitVectorCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitVectorCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitVectorCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSplitVectorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSplitVectorCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSplitVectorCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranges = append(m.Ranges, &Range{})
			if err := m.Ranges[len(m.Ranges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSplitVectorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ElementOnly = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombineOutputs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSplitVectorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CombineOutputs = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSplitVectorCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSplitVectorCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSplitVectorCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSplitVectorCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSplitVectorCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSplitVectorCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSplitVectorCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSplitVectorCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSplitVectorCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSplitVectorCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSplitVectorCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSplitVectorCalculator = fmt.Errorf("proto: unexpected end of group")
)
