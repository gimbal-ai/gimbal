// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/image/bilateral_filter_calculator.proto

package image

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BilateralFilterCalculatorOptions struct {
	SigmaColor float32 `protobuf:"fixed32,1,opt,name=sigma_color,json=sigmaColor" json:"sigma_color"`
	SigmaSpace float32 `protobuf:"fixed32,2,opt,name=sigma_space,json=sigmaSpace" json:"sigma_space"`
}

func (m *BilateralFilterCalculatorOptions) Reset()      { *m = BilateralFilterCalculatorOptions{} }
func (*BilateralFilterCalculatorOptions) ProtoMessage() {}
func (*BilateralFilterCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_809e70862a1de36c, []int{0}
}
func (m *BilateralFilterCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BilateralFilterCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BilateralFilterCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BilateralFilterCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BilateralFilterCalculatorOptions.Merge(m, src)
}
func (m *BilateralFilterCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *BilateralFilterCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BilateralFilterCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BilateralFilterCalculatorOptions proto.InternalMessageInfo

func (m *BilateralFilterCalculatorOptions) GetSigmaColor() float32 {
	if m != nil {
		return m.SigmaColor
	}
	return 0
}

func (m *BilateralFilterCalculatorOptions) GetSigmaSpace() float32 {
	if m != nil {
		return m.SigmaSpace
	}
	return 0
}

var E_BilateralFilterCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*BilateralFilterCalculatorOptions)(nil),
	Field:         255670209,
	Name:          "mediapipe.BilateralFilterCalculatorOptions.ext",
	Tag:           "bytes,255670209,opt,name=ext",
	Filename:      "mediapipe/calculators/image/bilateral_filter_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_BilateralFilterCalculatorOptions_Ext)
	proto.RegisterType((*BilateralFilterCalculatorOptions)(nil), "mediapipe.BilateralFilterCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/image/bilateral_filter_calculator.proto", fileDescriptor_809e70862a1de36c)
}

var fileDescriptor_809e70862a1de36c = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0xcd, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f,
	0x2a, 0xd6, 0xcf, 0xcc, 0x4d, 0x4c, 0x4f, 0xd5, 0x4f, 0xca, 0xcc, 0x49, 0x2c, 0x49, 0x2d, 0x4a,
	0xcc, 0x89, 0x4f, 0xcb, 0xcc, 0x29, 0x49, 0x2d, 0x8a, 0x47, 0x28, 0xd1, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x84, 0x6b, 0x97, 0x52, 0x41, 0x98, 0x94, 0x56, 0x94, 0x98, 0x9b, 0x5a, 0x9e,
	0x5f, 0x94, 0xad, 0x8f, 0xae, 0x41, 0xe9, 0x02, 0x23, 0x97, 0x82, 0x13, 0xcc, 0x58, 0x37, 0xb0,
	0xa9, 0xce, 0x70, 0x35, 0xfe, 0x05, 0x25, 0x99, 0xf9, 0x79, 0xc5, 0x42, 0xaa, 0x5c, 0xdc, 0xc5,
	0x99, 0xe9, 0xb9, 0x89, 0xf1, 0xc9, 0xf9, 0x39, 0xf9, 0x45, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x4c,
	0x4e, 0x2c, 0x27, 0xee, 0xc9, 0x33, 0x04, 0x71, 0x81, 0x25, 0x9c, 0x41, 0xe2, 0x08, 0x65, 0xc5,
	0x05, 0x89, 0xc9, 0xa9, 0x12, 0x4c, 0x18, 0xca, 0x82, 0x41, 0xe2, 0x46, 0x71, 0x5c, 0xcc, 0xa9,
	0x15, 0x25, 0x42, 0x32, 0x7a, 0x70, 0x07, 0xea, 0x61, 0x58, 0x29, 0x71, 0xf0, 0xfd, 0x97, 0x4a,
	0x05, 0x46, 0x0d, 0x6e, 0x23, 0x6d, 0x24, 0x65, 0x84, 0x1c, 0x1a, 0x04, 0x32, 0xd8, 0x29, 0xf7,
	0xc2, 0x43, 0x39, 0x86, 0x1b, 0x0f, 0xe5, 0x18, 0x3e, 0x3c, 0x94, 0x63, 0x6c, 0x78, 0x24, 0xc7,
	0xb8, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24,
	0xc7, 0xf8, 0xe2, 0x91, 0x1c, 0xc3, 0x87, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78,
	0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x79, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e,
	0x72, 0x7e, 0xae, 0x7e, 0x7a, 0x7e, 0x7e, 0x7a, 0x4e, 0xaa, 0x3e, 0x22, 0x00, 0xf1, 0x44, 0x0a,
	0x20, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x84, 0xd1, 0x49, 0xb2, 0x01, 0x00, 0x00,
}

func (this *BilateralFilterCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BilateralFilterCalculatorOptions)
	if !ok {
		that2, ok := that.(BilateralFilterCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SigmaColor != that1.SigmaColor {
		return false
	}
	if this.SigmaSpace != that1.SigmaSpace {
		return false
	}
	return true
}
func (this *BilateralFilterCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&image.BilateralFilterCalculatorOptions{")
	s = append(s, "SigmaColor: "+fmt.Sprintf("%#v", this.SigmaColor)+",\n")
	s = append(s, "SigmaSpace: "+fmt.Sprintf("%#v", this.SigmaSpace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBilateralFilterCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BilateralFilterCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BilateralFilterCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BilateralFilterCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SigmaSpace))))
	i--
	dAtA[i] = 0x15
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SigmaColor))))
	i--
	dAtA[i] = 0xd
	return len(dAtA) - i, nil
}

func encodeVarintBilateralFilterCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovBilateralFilterCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BilateralFilterCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	n += 5
	return n
}

func sovBilateralFilterCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBilateralFilterCalculator(x uint64) (n int) {
	return sovBilateralFilterCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BilateralFilterCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BilateralFilterCalculatorOptions{`,
		`SigmaColor:` + fmt.Sprintf("%v", this.SigmaColor) + `,`,
		`SigmaSpace:` + fmt.Sprintf("%v", this.SigmaSpace) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBilateralFilterCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BilateralFilterCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilateralFilterCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BilateralFilterCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BilateralFilterCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigmaColor", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SigmaColor = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigmaSpace", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SigmaSpace = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBilateralFilterCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilateralFilterCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBilateralFilterCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBilateralFilterCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBilateralFilterCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBilateralFilterCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBilateralFilterCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBilateralFilterCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBilateralFilterCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBilateralFilterCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBilateralFilterCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBilateralFilterCalculator = fmt.Errorf("proto: unexpected end of group")
)
