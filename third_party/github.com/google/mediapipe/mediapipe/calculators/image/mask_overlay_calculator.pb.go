// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/image/mask_overlay_calculator.proto

package image

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MaskOverlayCalculatorOptions_MaskChannel int32

const (
	OVERLAY_MASK_CHANNEL_UNKNOWN MaskOverlayCalculatorOptions_MaskChannel = 0
	OVERLAY_MASK_CHANNEL_RED     MaskOverlayCalculatorOptions_MaskChannel = 1
	OVERLAY_MASK_CHANNEL_ALPHA   MaskOverlayCalculatorOptions_MaskChannel = 2
)

var MaskOverlayCalculatorOptions_MaskChannel_name = map[int32]string{
	0: "OVERLAY_MASK_CHANNEL_UNKNOWN",
	1: "OVERLAY_MASK_CHANNEL_RED",
	2: "OVERLAY_MASK_CHANNEL_ALPHA",
}

var MaskOverlayCalculatorOptions_MaskChannel_value = map[string]int32{
	"OVERLAY_MASK_CHANNEL_UNKNOWN": 0,
	"OVERLAY_MASK_CHANNEL_RED":     1,
	"OVERLAY_MASK_CHANNEL_ALPHA":   2,
}

func (x MaskOverlayCalculatorOptions_MaskChannel) Enum() *MaskOverlayCalculatorOptions_MaskChannel {
	p := new(MaskOverlayCalculatorOptions_MaskChannel)
	*p = x
	return p
}

func (x MaskOverlayCalculatorOptions_MaskChannel) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(MaskOverlayCalculatorOptions_MaskChannel_name, int32(x))
}

func (x *MaskOverlayCalculatorOptions_MaskChannel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MaskOverlayCalculatorOptions_MaskChannel_value, data, "MaskOverlayCalculatorOptions_MaskChannel")
	if err != nil {
		return err
	}
	*x = MaskOverlayCalculatorOptions_MaskChannel(value)
	return nil
}

func (MaskOverlayCalculatorOptions_MaskChannel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d779ab4c5fc2f313, []int{0, 0}
}

type MaskOverlayCalculatorOptions struct {
	MaskChannel *MaskOverlayCalculatorOptions_MaskChannel `protobuf:"varint,1,opt,name=mask_channel,json=maskChannel,enum=mediapipe.MaskOverlayCalculatorOptions_MaskChannel,def=1" json:"mask_channel,omitempty"`
}

func (m *MaskOverlayCalculatorOptions) Reset()      { *m = MaskOverlayCalculatorOptions{} }
func (*MaskOverlayCalculatorOptions) ProtoMessage() {}
func (*MaskOverlayCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d779ab4c5fc2f313, []int{0}
}
func (m *MaskOverlayCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaskOverlayCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaskOverlayCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaskOverlayCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaskOverlayCalculatorOptions.Merge(m, src)
}
func (m *MaskOverlayCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *MaskOverlayCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_MaskOverlayCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_MaskOverlayCalculatorOptions proto.InternalMessageInfo

const Default_MaskOverlayCalculatorOptions_MaskChannel MaskOverlayCalculatorOptions_MaskChannel = OVERLAY_MASK_CHANNEL_RED

func (m *MaskOverlayCalculatorOptions) GetMaskChannel() MaskOverlayCalculatorOptions_MaskChannel {
	if m != nil && m.MaskChannel != nil {
		return *m.MaskChannel
	}
	return Default_MaskOverlayCalculatorOptions_MaskChannel
}

var E_MaskOverlayCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*MaskOverlayCalculatorOptions)(nil),
	Field:         252129282,
	Name:          "mediapipe.MaskOverlayCalculatorOptions.ext",
	Tag:           "bytes,252129282,opt,name=ext",
	Filename:      "mediapipe/calculators/image/mask_overlay_calculator.proto",
}

func init() {
	proto.RegisterEnum("mediapipe.MaskOverlayCalculatorOptions_MaskChannel", MaskOverlayCalculatorOptions_MaskChannel_name, MaskOverlayCalculatorOptions_MaskChannel_value)
	proto.RegisterExtension(E_MaskOverlayCalculatorOptions_Ext)
	proto.RegisterType((*MaskOverlayCalculatorOptions)(nil), "mediapipe.MaskOverlayCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/image/mask_overlay_calculator.proto", fileDescriptor_d779ab4c5fc2f313)
}

var fileDescriptor_d779ab4c5fc2f313 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0xcc, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f,
	0x2a, 0xd6, 0xcf, 0xcc, 0x4d, 0x4c, 0x4f, 0xd5, 0xcf, 0x4d, 0x2c, 0xce, 0x8e, 0xcf, 0x2f, 0x4b,
	0x2d, 0xca, 0x49, 0xac, 0x8c, 0x47, 0x48, 0xeb, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x71, 0xc2,
	0xb5, 0x4a, 0xa9, 0x20, 0x4c, 0x49, 0x2b, 0x4a, 0xcc, 0x4d, 0x2d, 0xcf, 0x2f, 0xca, 0xd6, 0x47,
	0xd7, 0xa0, 0x74, 0x9b, 0x89, 0x4b, 0xc6, 0x37, 0xb1, 0x38, 0xdb, 0x1f, 0x62, 0xa2, 0x33, 0x5c,
	0xde, 0xbf, 0xa0, 0x24, 0x33, 0x3f, 0xaf, 0x58, 0xa8, 0x80, 0x8b, 0x07, 0x6c, 0x65, 0x72, 0x46,
	0x62, 0x5e, 0x5e, 0x6a, 0x8e, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x9f, 0x91, 0xb1, 0x1e, 0xdc, 0x74,
	0x3d, 0x7c, 0xda, 0xc1, 0x92, 0xce, 0x10, 0xad, 0x56, 0x12, 0xfe, 0x61, 0xae, 0x41, 0x3e, 0x8e,
	0x91, 0xf1, 0xbe, 0x8e, 0xc1, 0xde, 0xf1, 0xce, 0x1e, 0x8e, 0x7e, 0x7e, 0xae, 0x3e, 0xf1, 0x41,
	0xae, 0x2e, 0x41, 0xdc, 0xb9, 0x08, 0x65, 0x4a, 0xb9, 0x5c, 0xdc, 0x48, 0xba, 0x84, 0x14, 0xb8,
	0x64, 0xb0, 0xea, 0x0b, 0xf5, 0xf3, 0xf6, 0xf3, 0x0f, 0xf7, 0x13, 0x60, 0x10, 0x92, 0xe1, 0xc2,
	0x69, 0xb2, 0x00, 0xa3, 0x90, 0x1c, 0x97, 0x14, 0x56, 0x59, 0x47, 0x9f, 0x00, 0x0f, 0x47, 0x01,
	0x26, 0xa3, 0x28, 0x2e, 0xe6, 0xd4, 0x8a, 0x12, 0x21, 0x19, 0x24, 0x1f, 0x61, 0x78, 0x43, 0xa2,
	0xe9, 0xc1, 0x9c, 0x0a, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x75, 0x22, 0x3d, 0x1e, 0x04, 0x32, 0xd4,
	0x29, 0xf7, 0xc2, 0x43, 0x39, 0x86, 0x1b, 0x0f, 0xe5, 0x18, 0x3e, 0x3c, 0x94, 0x63, 0x6c, 0x78,
	0x24, 0xc7, 0xb8, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e,
	0x78, 0x24, 0xc7, 0xf8, 0xe2, 0x91, 0x1c, 0xc3, 0x87, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31,
	0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x79, 0x7a, 0x66, 0x49, 0x46, 0x69,
	0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x7a, 0x7e, 0x7e, 0x7a, 0x4e, 0xaa, 0x3e, 0x22, 0x2e, 0xf1,
	0xa4, 0x0d, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x84, 0x68, 0xb5, 0x6e, 0x39, 0x02, 0x00, 0x00,
}

func (x MaskOverlayCalculatorOptions_MaskChannel) String() string {
	s, ok := MaskOverlayCalculatorOptions_MaskChannel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MaskOverlayCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaskOverlayCalculatorOptions)
	if !ok {
		that2, ok := that.(MaskOverlayCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaskChannel != nil && that1.MaskChannel != nil {
		if *this.MaskChannel != *that1.MaskChannel {
			return false
		}
	} else if this.MaskChannel != nil {
		return false
	} else if that1.MaskChannel != nil {
		return false
	}
	return true
}
func (this *MaskOverlayCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&image.MaskOverlayCalculatorOptions{")
	if this.MaskChannel != nil {
		s = append(s, "MaskChannel: "+valueToGoStringMaskOverlayCalculator(this.MaskChannel, "MaskOverlayCalculatorOptions_MaskChannel")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMaskOverlayCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MaskOverlayCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaskOverlayCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaskOverlayCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaskChannel != nil {
		i = encodeVarintMaskOverlayCalculator(dAtA, i, uint64(*m.MaskChannel))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMaskOverlayCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovMaskOverlayCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MaskOverlayCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaskChannel != nil {
		n += 1 + sovMaskOverlayCalculator(uint64(*m.MaskChannel))
	}
	return n
}

func sovMaskOverlayCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMaskOverlayCalculator(x uint64) (n int) {
	return sovMaskOverlayCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MaskOverlayCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaskOverlayCalculatorOptions{`,
		`MaskChannel:` + valueToStringMaskOverlayCalculator(this.MaskChannel) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMaskOverlayCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MaskOverlayCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaskOverlayCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaskOverlayCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaskOverlayCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaskChannel", wireType)
			}
			var v MaskOverlayCalculatorOptions_MaskChannel
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaskOverlayCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MaskOverlayCalculatorOptions_MaskChannel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaskChannel = &v
		default:
			iNdEx = preIndex
			skippy, err := skipMaskOverlayCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMaskOverlayCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMaskOverlayCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMaskOverlayCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMaskOverlayCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMaskOverlayCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMaskOverlayCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMaskOverlayCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMaskOverlayCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMaskOverlayCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMaskOverlayCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMaskOverlayCalculator = fmt.Errorf("proto: unexpected end of group")
)
