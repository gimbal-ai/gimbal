// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/image/opencv_encoded_image_to_image_frame_calculator.proto

package image

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OpenCvEncodedImageToImageFrameCalculatorOptions struct {
	ApplyOrientationFromExifData *bool `protobuf:"varint,1,opt,name=apply_orientation_from_exif_data,json=applyOrientationFromExifData,def=0" json:"apply_orientation_from_exif_data,omitempty"`
}

func (m *OpenCvEncodedImageToImageFrameCalculatorOptions) Reset() {
	*m = OpenCvEncodedImageToImageFrameCalculatorOptions{}
}
func (*OpenCvEncodedImageToImageFrameCalculatorOptions) ProtoMessage() {}
func (*OpenCvEncodedImageToImageFrameCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca134e67ecee7c33, []int{0}
}
func (m *OpenCvEncodedImageToImageFrameCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenCvEncodedImageToImageFrameCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenCvEncodedImageToImageFrameCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenCvEncodedImageToImageFrameCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenCvEncodedImageToImageFrameCalculatorOptions.Merge(m, src)
}
func (m *OpenCvEncodedImageToImageFrameCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *OpenCvEncodedImageToImageFrameCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenCvEncodedImageToImageFrameCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_OpenCvEncodedImageToImageFrameCalculatorOptions proto.InternalMessageInfo

const Default_OpenCvEncodedImageToImageFrameCalculatorOptions_ApplyOrientationFromExifData bool = false

func (m *OpenCvEncodedImageToImageFrameCalculatorOptions) GetApplyOrientationFromExifData() bool {
	if m != nil && m.ApplyOrientationFromExifData != nil {
		return *m.ApplyOrientationFromExifData
	}
	return Default_OpenCvEncodedImageToImageFrameCalculatorOptions_ApplyOrientationFromExifData
}

var E_OpenCvEncodedImageToImageFrameCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*OpenCvEncodedImageToImageFrameCalculatorOptions)(nil),
	Field:         303447308,
	Name:          "mediapipe.OpenCvEncodedImageToImageFrameCalculatorOptions.ext",
	Tag:           "bytes,303447308,opt,name=ext",
	Filename:      "mediapipe/calculators/image/opencv_encoded_image_to_image_frame_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_OpenCvEncodedImageToImageFrameCalculatorOptions_Ext)
	proto.RegisterType((*OpenCvEncodedImageToImageFrameCalculatorOptions)(nil), "mediapipe.OpenCvEncodedImageToImageFrameCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/image/opencv_encoded_image_to_image_frame_calculator.proto", fileDescriptor_ca134e67ecee7c33)
}

var fileDescriptor_ca134e67ecee7c33 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xb1, 0x4b, 0x3b, 0x31,
	0x14, 0xc7, 0x2f, 0xfc, 0xf8, 0x81, 0x9e, 0x5b, 0xa7, 0x22, 0xe5, 0x51, 0xc4, 0xc1, 0xe9, 0x02,
	0x5d, 0x84, 0x8e, 0xd6, 0x16, 0x1c, 0xa4, 0x52, 0x9c, 0x5c, 0x42, 0xbc, 0x7b, 0x77, 0x06, 0x2f,
	0xf7, 0x42, 0x9a, 0xd6, 0xba, 0xf9, 0x07, 0x38, 0xf4, 0xcf, 0xf0, 0x4f, 0x71, 0xec, 0xd8, 0xd1,
	0xa6, 0x8b, 0x63, 0x67, 0x27, 0xb9, 0x53, 0x7a, 0xa2, 0x20, 0x38, 0x25, 0x3c, 0xbe, 0x9f, 0xcf,
	0xf7, 0x91, 0x84, 0x17, 0x1a, 0x13, 0x25, 0x8d, 0x32, 0xc8, 0x63, 0x99, 0xc7, 0x93, 0x5c, 0x3a,
	0xb2, 0x63, 0xae, 0xb4, 0xcc, 0x90, 0x93, 0xc1, 0x22, 0x9e, 0x0a, 0x2c, 0x62, 0x4a, 0x30, 0x11,
	0xd5, 0x50, 0x38, 0xfa, 0xbc, 0xa4, 0x56, 0x6a, 0x14, 0x35, 0x15, 0x19, 0x4b, 0x8e, 0x1a, 0xbb,
	0x5b, 0xe3, 0xfe, 0x61, 0x2d, 0xaf, 0xc2, 0x77, 0x64, 0x6f, 0xf9, 0x77, 0xe0, 0x60, 0xc3, 0x42,
	0x3e, 0x34, 0x58, 0xf4, 0xa6, 0xfd, 0x8f, 0xa2, 0xb3, 0x52, 0x7f, 0x49, 0xd5, 0x31, 0x28, 0xb9,
	0xde, 0x16, 0x19, 0x1a, 0xa7, 0xa8, 0x18, 0x37, 0xce, 0xc3, 0xb6, 0x34, 0x26, 0xbf, 0x17, 0x64,
	0x15, 0x16, 0x4e, 0x96, 0x53, 0x91, 0x5a, 0xd2, 0x02, 0x67, 0x2a, 0x15, 0x89, 0x74, 0xb2, 0xc9,
	0xda, 0xec, 0x68, 0xa7, 0xfb, 0x3f, 0x95, 0xf9, 0x18, 0x47, 0xad, 0x2a, 0x3e, 0xac, 0xd3, 0x03,
	0x4b, 0xba, 0x3f, 0x53, 0xe9, 0xa9, 0x74, 0xb2, 0x53, 0x84, 0xff, 0x70, 0xe6, 0x1a, 0xad, 0x68,
	0xbb, 0x70, 0xf4, 0xa3, 0xb3, 0xf9, 0xf8, 0xb6, 0x9c, 0x97, 0xce, 0xbd, 0x4e, 0xf7, 0x4b, 0xee,
	0x8f, 0x9b, 0x8f, 0xca, 0xa2, 0x13, 0xbd, 0x58, 0x41, 0xb0, 0x5c, 0x41, 0xb0, 0x59, 0x01, 0x7b,
	0xf0, 0xc0, 0x9e, 0x3c, 0xb0, 0x67, 0x0f, 0x6c, 0xe1, 0x81, 0xbd, 0x78, 0x60, 0xaf, 0x1e, 0x82,
	0x8d, 0x07, 0x36, 0x5f, 0x43, 0xb0, 0x58, 0x43, 0xb0, 0x5c, 0x43, 0x70, 0x75, 0x9c, 0x29, 0x77,
	0x33, 0xb9, 0x8e, 0x62, 0xd2, 0x3c, 0x23, 0xca, 0x72, 0xe4, 0xf5, 0x03, 0xff, 0xf2, 0x8f, 0xef,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x83, 0xa9, 0x4f, 0x9c, 0xe5, 0x01, 0x00, 0x00,
}

func (this *OpenCvEncodedImageToImageFrameCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenCvEncodedImageToImageFrameCalculatorOptions)
	if !ok {
		that2, ok := that.(OpenCvEncodedImageToImageFrameCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApplyOrientationFromExifData != nil && that1.ApplyOrientationFromExifData != nil {
		if *this.ApplyOrientationFromExifData != *that1.ApplyOrientationFromExifData {
			return false
		}
	} else if this.ApplyOrientationFromExifData != nil {
		return false
	} else if that1.ApplyOrientationFromExifData != nil {
		return false
	}
	return true
}
func (this *OpenCvEncodedImageToImageFrameCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&image.OpenCvEncodedImageToImageFrameCalculatorOptions{")
	if this.ApplyOrientationFromExifData != nil {
		s = append(s, "ApplyOrientationFromExifData: "+valueToGoStringOpencvEncodedImageToImageFrameCalculator(this.ApplyOrientationFromExifData, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOpencvEncodedImageToImageFrameCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *OpenCvEncodedImageToImageFrameCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenCvEncodedImageToImageFrameCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenCvEncodedImageToImageFrameCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApplyOrientationFromExifData != nil {
		i--
		if *m.ApplyOrientationFromExifData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOpencvEncodedImageToImageFrameCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovOpencvEncodedImageToImageFrameCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OpenCvEncodedImageToImageFrameCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApplyOrientationFromExifData != nil {
		n += 2
	}
	return n
}

func sovOpencvEncodedImageToImageFrameCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOpencvEncodedImageToImageFrameCalculator(x uint64) (n int) {
	return sovOpencvEncodedImageToImageFrameCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *OpenCvEncodedImageToImageFrameCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenCvEncodedImageToImageFrameCalculatorOptions{`,
		`ApplyOrientationFromExifData:` + valueToStringOpencvEncodedImageToImageFrameCalculator(this.ApplyOrientationFromExifData) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOpencvEncodedImageToImageFrameCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *OpenCvEncodedImageToImageFrameCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpencvEncodedImageToImageFrameCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenCvEncodedImageToImageFrameCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenCvEncodedImageToImageFrameCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyOrientationFromExifData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpencvEncodedImageToImageFrameCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ApplyOrientationFromExifData = &b
		default:
			iNdEx = preIndex
			skippy, err := skipOpencvEncodedImageToImageFrameCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOpencvEncodedImageToImageFrameCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOpencvEncodedImageToImageFrameCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOpencvEncodedImageToImageFrameCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpencvEncodedImageToImageFrameCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpencvEncodedImageToImageFrameCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOpencvEncodedImageToImageFrameCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOpencvEncodedImageToImageFrameCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOpencvEncodedImageToImageFrameCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOpencvEncodedImageToImageFrameCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOpencvEncodedImageToImageFrameCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOpencvEncodedImageToImageFrameCalculator = fmt.Errorf("proto: unexpected end of group")
)
