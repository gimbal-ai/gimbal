// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/image/opencv_image_encoder_calculator.proto

package image

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OpenCvImageEncoderCalculatorResults_ColorSpace int32

const (
	COLOR_SPACE_UNKNOWN   OpenCvImageEncoderCalculatorResults_ColorSpace = 0
	COLOR_SPACE_GRAYSCALE OpenCvImageEncoderCalculatorResults_ColorSpace = 1
	COLOR_SPACE_RGB       OpenCvImageEncoderCalculatorResults_ColorSpace = 2
)

var OpenCvImageEncoderCalculatorResults_ColorSpace_name = map[int32]string{
	0: "COLOR_SPACE_UNKNOWN",
	1: "COLOR_SPACE_GRAYSCALE",
	2: "COLOR_SPACE_RGB",
}

var OpenCvImageEncoderCalculatorResults_ColorSpace_value = map[string]int32{
	"COLOR_SPACE_UNKNOWN":   0,
	"COLOR_SPACE_GRAYSCALE": 1,
	"COLOR_SPACE_RGB":       2,
}

func (x OpenCvImageEncoderCalculatorResults_ColorSpace) Enum() *OpenCvImageEncoderCalculatorResults_ColorSpace {
	p := new(OpenCvImageEncoderCalculatorResults_ColorSpace)
	*p = x
	return p
}

func (x OpenCvImageEncoderCalculatorResults_ColorSpace) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(OpenCvImageEncoderCalculatorResults_ColorSpace_name, int32(x))
}

func (x *OpenCvImageEncoderCalculatorResults_ColorSpace) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OpenCvImageEncoderCalculatorResults_ColorSpace_value, data, "OpenCvImageEncoderCalculatorResults_ColorSpace")
	if err != nil {
		return err
	}
	*x = OpenCvImageEncoderCalculatorResults_ColorSpace(value)
	return nil
}

func (OpenCvImageEncoderCalculatorResults_ColorSpace) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3cb1220bf0adf28, []int{1, 0}
}

type OpenCvImageEncoderCalculatorOptions struct {
	Quality int32 `protobuf:"varint,1,opt,name=quality" json:"quality"`
}

func (m *OpenCvImageEncoderCalculatorOptions) Reset()      { *m = OpenCvImageEncoderCalculatorOptions{} }
func (*OpenCvImageEncoderCalculatorOptions) ProtoMessage() {}
func (*OpenCvImageEncoderCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3cb1220bf0adf28, []int{0}
}
func (m *OpenCvImageEncoderCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenCvImageEncoderCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenCvImageEncoderCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenCvImageEncoderCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenCvImageEncoderCalculatorOptions.Merge(m, src)
}
func (m *OpenCvImageEncoderCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *OpenCvImageEncoderCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenCvImageEncoderCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_OpenCvImageEncoderCalculatorOptions proto.InternalMessageInfo

func (m *OpenCvImageEncoderCalculatorOptions) GetQuality() int32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

var E_OpenCvImageEncoderCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*OpenCvImageEncoderCalculatorOptions)(nil),
	Field:         227563646,
	Name:          "mediapipe.OpenCvImageEncoderCalculatorOptions.ext",
	Tag:           "bytes,227563646,opt,name=ext",
	Filename:      "mediapipe/calculators/image/opencv_image_encoder_calculator.proto",
}

type OpenCvImageEncoderCalculatorResults struct {
	EncodedImage []byte                                         `protobuf:"bytes,1,opt,name=encoded_image,json=encodedImage" json:"encoded_image"`
	Height       int32                                          `protobuf:"varint,2,opt,name=height" json:"height"`
	Width        int32                                          `protobuf:"varint,3,opt,name=width" json:"width"`
	Colorspace   OpenCvImageEncoderCalculatorResults_ColorSpace `protobuf:"varint,4,opt,name=colorspace,enum=mediapipe.OpenCvImageEncoderCalculatorResults_ColorSpace" json:"colorspace"`
}

func (m *OpenCvImageEncoderCalculatorResults) Reset()      { *m = OpenCvImageEncoderCalculatorResults{} }
func (*OpenCvImageEncoderCalculatorResults) ProtoMessage() {}
func (*OpenCvImageEncoderCalculatorResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3cb1220bf0adf28, []int{1}
}
func (m *OpenCvImageEncoderCalculatorResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenCvImageEncoderCalculatorResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenCvImageEncoderCalculatorResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenCvImageEncoderCalculatorResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenCvImageEncoderCalculatorResults.Merge(m, src)
}
func (m *OpenCvImageEncoderCalculatorResults) XXX_Size() int {
	return m.Size()
}
func (m *OpenCvImageEncoderCalculatorResults) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenCvImageEncoderCalculatorResults.DiscardUnknown(m)
}

var xxx_messageInfo_OpenCvImageEncoderCalculatorResults proto.InternalMessageInfo

func (m *OpenCvImageEncoderCalculatorResults) GetEncodedImage() []byte {
	if m != nil {
		return m.EncodedImage
	}
	return nil
}

func (m *OpenCvImageEncoderCalculatorResults) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *OpenCvImageEncoderCalculatorResults) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *OpenCvImageEncoderCalculatorResults) GetColorspace() OpenCvImageEncoderCalculatorResults_ColorSpace {
	if m != nil {
		return m.Colorspace
	}
	return COLOR_SPACE_UNKNOWN
}

func init() {
	proto.RegisterEnum("mediapipe.OpenCvImageEncoderCalculatorResults_ColorSpace", OpenCvImageEncoderCalculatorResults_ColorSpace_name, OpenCvImageEncoderCalculatorResults_ColorSpace_value)
	proto.RegisterExtension(E_OpenCvImageEncoderCalculatorOptions_Ext)
	proto.RegisterType((*OpenCvImageEncoderCalculatorOptions)(nil), "mediapipe.OpenCvImageEncoderCalculatorOptions")
	proto.RegisterType((*OpenCvImageEncoderCalculatorResults)(nil), "mediapipe.OpenCvImageEncoderCalculatorResults")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/image/opencv_image_encoder_calculator.proto", fileDescriptor_f3cb1220bf0adf28)
}

var fileDescriptor_f3cb1220bf0adf28 = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x67, 0xba, 0xbb, 0x8a, 0xe3, 0xaa, 0x65, 0x16, 0x31, 0x2e, 0xcb, 0x58, 0xaa, 0x87,
	0x7a, 0x49, 0xa0, 0x17, 0xf1, 0x98, 0x86, 0xb2, 0x88, 0x4b, 0x23, 0x29, 0x8b, 0xe8, 0x25, 0x8c,
	0xc9, 0x98, 0x0c, 0x26, 0x99, 0x98, 0x4c, 0xb6, 0x7a, 0xf3, 0x23, 0xf8, 0x31, 0x7a, 0xf4, 0x2b,
	0xe8, 0xa9, 0xc7, 0x1e, 0x7b, 0x12, 0x9b, 0x5e, 0x3c, 0xf6, 0x13, 0x88, 0xa4, 0x89, 0x4d, 0x70,
	0xa1, 0xf4, 0x38, 0xef, 0xff, 0x9f, 0xdf, 0xfb, 0xbf, 0xc7, 0x43, 0x7a, 0xc8, 0x5c, 0x4e, 0x63,
	0x1e, 0x33, 0xcd, 0xa1, 0x81, 0x93, 0x05, 0x54, 0x8a, 0x24, 0xd5, 0x78, 0x48, 0x3d, 0xa6, 0x89,
	0x98, 0x45, 0xce, 0x95, 0xbd, 0x79, 0xd8, 0x2c, 0x72, 0x84, 0xcb, 0x12, 0xbb, 0xb6, 0xa9, 0x71,
	0x22, 0xa4, 0xc0, 0xb7, 0xb6, 0x88, 0xd3, 0x27, 0x35, 0xed, 0x7d, 0x42, 0x43, 0x36, 0x11, 0xc9,
	0x07, 0xed, 0xff, 0x0f, 0xdd, 0x29, 0x44, 0x8f, 0xcd, 0x98, 0x45, 0xc6, 0xd5, 0x8b, 0x82, 0x3c,
	0x2c, 0xc1, 0xc6, 0xd6, 0x66, 0xc6, 0x92, 0x8b, 0x28, 0xc5, 0x04, 0xdd, 0xfc, 0x98, 0xd1, 0x80,
	0xcb, 0xcf, 0x0a, 0xec, 0xc0, 0xde, 0xd1, 0xe0, 0x70, 0xf6, 0xf3, 0x11, 0xb0, 0xfe, 0x15, 0xfb,
	0x14, 0x1d, 0xb0, 0x4f, 0x12, 0x9f, 0xa9, 0xdb, 0xae, 0xea, 0x35, 0x88, 0xf2, 0xe7, 0xdb, 0xf7,
	0xa0, 0x03, 0x7b, 0xb7, 0xfb, 0x6a, 0xc3, 0xb6, 0x47, 0x77, 0xab, 0x60, 0x77, 0x7f, 0xb4, 0x76,
	0x47, 0xb5, 0x58, 0x9a, 0x05, 0x32, 0xc5, 0x4f, 0xd1, 0x9d, 0x72, 0x3f, 0x6e, 0xb9, 0xad, 0x4d,
	0xe0, 0xe3, 0x2a, 0xf0, 0x71, 0x25, 0x6d, 0x10, 0xf8, 0x0c, 0xdd, 0xf0, 0x19, 0xf7, 0x7c, 0xa9,
	0xb4, 0x1a, 0x43, 0x55, 0x35, 0x7c, 0x8a, 0x8e, 0x26, 0xdc, 0x95, 0xbe, 0x72, 0xd0, 0x10, 0xcb,
	0x12, 0xb6, 0x11, 0x72, 0x44, 0x20, 0x92, 0x34, 0xa6, 0x0e, 0x53, 0x0e, 0x3b, 0xb0, 0x77, 0xb7,
	0xff, 0x7c, 0xcf, 0xa9, 0xaa, 0xa0, 0xaa, 0x51, 0x00, 0xc6, 0x05, 0xa0, 0x62, 0x37, 0x90, 0xdd,
	0x4b, 0x84, 0x6a, 0x1d, 0x3f, 0x40, 0x27, 0x86, 0x79, 0x61, 0x5a, 0xf6, 0xf8, 0x95, 0x6e, 0x0c,
	0xed, 0xcb, 0xd1, 0xcb, 0x91, 0xf9, 0x7a, 0xd4, 0x06, 0xf8, 0x21, 0xba, 0xdf, 0x14, 0xce, 0x2d,
	0xfd, 0xcd, 0xd8, 0xd0, 0x2f, 0x86, 0x6d, 0x88, 0x4f, 0xd0, 0xbd, 0xa6, 0x64, 0x9d, 0x0f, 0xda,
	0xad, 0x41, 0x38, 0x5f, 0x12, 0xb0, 0x58, 0x12, 0xb0, 0x5e, 0x12, 0xf8, 0x25, 0x27, 0x70, 0x9a,
	0x13, 0x38, 0xcb, 0x09, 0x9c, 0xe7, 0x04, 0xfe, 0xca, 0x09, 0xfc, 0x9d, 0x13, 0xb0, 0xce, 0x09,
	0xfc, 0xba, 0x22, 0x60, 0xbe, 0x22, 0x60, 0xb1, 0x22, 0xe0, 0xed, 0x33, 0x8f, 0x4b, 0x3f, 0x7b,
	0xa7, 0x3a, 0x22, 0xd4, 0x3c, 0x21, 0xbc, 0x80, 0x69, 0xf5, 0x75, 0xed, 0xb8, 0xda, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x56, 0x8c, 0xcb, 0xf6, 0xd3, 0x02, 0x00, 0x00,
}

func (x OpenCvImageEncoderCalculatorResults_ColorSpace) String() string {
	s, ok := OpenCvImageEncoderCalculatorResults_ColorSpace_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *OpenCvImageEncoderCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenCvImageEncoderCalculatorOptions)
	if !ok {
		that2, ok := that.(OpenCvImageEncoderCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Quality != that1.Quality {
		return false
	}
	return true
}
func (this *OpenCvImageEncoderCalculatorResults) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenCvImageEncoderCalculatorResults)
	if !ok {
		that2, ok := that.(OpenCvImageEncoderCalculatorResults)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.EncodedImage, that1.EncodedImage) {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Colorspace != that1.Colorspace {
		return false
	}
	return true
}
func (this *OpenCvImageEncoderCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&image.OpenCvImageEncoderCalculatorOptions{")
	s = append(s, "Quality: "+fmt.Sprintf("%#v", this.Quality)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenCvImageEncoderCalculatorResults) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&image.OpenCvImageEncoderCalculatorResults{")
	s = append(s, "EncodedImage: "+fmt.Sprintf("%#v", this.EncodedImage)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "Colorspace: "+fmt.Sprintf("%#v", this.Colorspace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOpencvImageEncoderCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *OpenCvImageEncoderCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenCvImageEncoderCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenCvImageEncoderCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintOpencvImageEncoderCalculator(dAtA, i, uint64(m.Quality))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *OpenCvImageEncoderCalculatorResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenCvImageEncoderCalculatorResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenCvImageEncoderCalculatorResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintOpencvImageEncoderCalculator(dAtA, i, uint64(m.Colorspace))
	i--
	dAtA[i] = 0x20
	i = encodeVarintOpencvImageEncoderCalculator(dAtA, i, uint64(m.Width))
	i--
	dAtA[i] = 0x18
	i = encodeVarintOpencvImageEncoderCalculator(dAtA, i, uint64(m.Height))
	i--
	dAtA[i] = 0x10
	if m.EncodedImage != nil {
		i -= len(m.EncodedImage)
		copy(dAtA[i:], m.EncodedImage)
		i = encodeVarintOpencvImageEncoderCalculator(dAtA, i, uint64(len(m.EncodedImage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOpencvImageEncoderCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovOpencvImageEncoderCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OpenCvImageEncoderCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOpencvImageEncoderCalculator(uint64(m.Quality))
	return n
}

func (m *OpenCvImageEncoderCalculatorResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EncodedImage != nil {
		l = len(m.EncodedImage)
		n += 1 + l + sovOpencvImageEncoderCalculator(uint64(l))
	}
	n += 1 + sovOpencvImageEncoderCalculator(uint64(m.Height))
	n += 1 + sovOpencvImageEncoderCalculator(uint64(m.Width))
	n += 1 + sovOpencvImageEncoderCalculator(uint64(m.Colorspace))
	return n
}

func sovOpencvImageEncoderCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOpencvImageEncoderCalculator(x uint64) (n int) {
	return sovOpencvImageEncoderCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *OpenCvImageEncoderCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenCvImageEncoderCalculatorOptions{`,
		`Quality:` + fmt.Sprintf("%v", this.Quality) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenCvImageEncoderCalculatorResults) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenCvImageEncoderCalculatorResults{`,
		`EncodedImage:` + fmt.Sprintf("%v", this.EncodedImage) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Colorspace:` + fmt.Sprintf("%v", this.Colorspace) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOpencvImageEncoderCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *OpenCvImageEncoderCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpencvImageEncoderCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenCvImageEncoderCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenCvImageEncoderCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpencvImageEncoderCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOpencvImageEncoderCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOpencvImageEncoderCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenCvImageEncoderCalculatorResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpencvImageEncoderCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenCvImageEncoderCalculatorResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenCvImageEncoderCalculatorResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedImage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpencvImageEncoderCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOpencvImageEncoderCalculator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOpencvImageEncoderCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedImage = append(m.EncodedImage[:0], dAtA[iNdEx:postIndex]...)
			if m.EncodedImage == nil {
				m.EncodedImage = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpencvImageEncoderCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpencvImageEncoderCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Colorspace", wireType)
			}
			m.Colorspace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpencvImageEncoderCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Colorspace |= OpenCvImageEncoderCalculatorResults_ColorSpace(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOpencvImageEncoderCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOpencvImageEncoderCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOpencvImageEncoderCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOpencvImageEncoderCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpencvImageEncoderCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpencvImageEncoderCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOpencvImageEncoderCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOpencvImageEncoderCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOpencvImageEncoderCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOpencvImageEncoderCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOpencvImageEncoderCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOpencvImageEncoderCalculator = fmt.Errorf("proto: unexpected end of group")
)
