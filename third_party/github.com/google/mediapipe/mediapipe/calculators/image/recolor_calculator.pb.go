// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/image/recolor_calculator.proto

package image

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	util "github.com/google/mediapipe/mediapipe/util"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RecolorCalculatorOptions_MaskChannel int32

const (
	MASK_CHANNEL_UNKNOWN RecolorCalculatorOptions_MaskChannel = 0
	MASK_CHANNEL_RED     RecolorCalculatorOptions_MaskChannel = 1
	MASK_CHANNEL_ALPHA   RecolorCalculatorOptions_MaskChannel = 2
)

var RecolorCalculatorOptions_MaskChannel_name = map[int32]string{
	0: "MASK_CHANNEL_UNKNOWN",
	1: "MASK_CHANNEL_RED",
	2: "MASK_CHANNEL_ALPHA",
}

var RecolorCalculatorOptions_MaskChannel_value = map[string]int32{
	"MASK_CHANNEL_UNKNOWN": 0,
	"MASK_CHANNEL_RED":     1,
	"MASK_CHANNEL_ALPHA":   2,
}

func (x RecolorCalculatorOptions_MaskChannel) Enum() *RecolorCalculatorOptions_MaskChannel {
	p := new(RecolorCalculatorOptions_MaskChannel)
	*p = x
	return p
}

func (x RecolorCalculatorOptions_MaskChannel) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(RecolorCalculatorOptions_MaskChannel_name, int32(x))
}

func (x *RecolorCalculatorOptions_MaskChannel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RecolorCalculatorOptions_MaskChannel_value, data, "RecolorCalculatorOptions_MaskChannel")
	if err != nil {
		return err
	}
	*x = RecolorCalculatorOptions_MaskChannel(value)
	return nil
}

func (RecolorCalculatorOptions_MaskChannel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fa85b1ea9b831d7b, []int{0, 0}
}

type RecolorCalculatorOptions struct {
	MaskChannel         *RecolorCalculatorOptions_MaskChannel `protobuf:"varint,1,opt,name=mask_channel,json=maskChannel,enum=mediapipe.RecolorCalculatorOptions_MaskChannel,def=1" json:"mask_channel,omitempty"`
	Color               *util.Color                           `protobuf:"bytes,2,opt,name=color" json:"color,omitempty"`
	InvertMask          *bool                                 `protobuf:"varint,3,opt,name=invert_mask,json=invertMask,def=0" json:"invert_mask,omitempty"`
	AdjustWithLuminance *bool                                 `protobuf:"varint,4,opt,name=adjust_with_luminance,json=adjustWithLuminance,def=1" json:"adjust_with_luminance,omitempty"`
}

func (m *RecolorCalculatorOptions) Reset()      { *m = RecolorCalculatorOptions{} }
func (*RecolorCalculatorOptions) ProtoMessage() {}
func (*RecolorCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa85b1ea9b831d7b, []int{0}
}
func (m *RecolorCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecolorCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecolorCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecolorCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecolorCalculatorOptions.Merge(m, src)
}
func (m *RecolorCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *RecolorCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RecolorCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RecolorCalculatorOptions proto.InternalMessageInfo

const Default_RecolorCalculatorOptions_MaskChannel RecolorCalculatorOptions_MaskChannel = MASK_CHANNEL_RED
const Default_RecolorCalculatorOptions_InvertMask bool = false
const Default_RecolorCalculatorOptions_AdjustWithLuminance bool = true

func (m *RecolorCalculatorOptions) GetMaskChannel() RecolorCalculatorOptions_MaskChannel {
	if m != nil && m.MaskChannel != nil {
		return *m.MaskChannel
	}
	return Default_RecolorCalculatorOptions_MaskChannel
}

func (m *RecolorCalculatorOptions) GetColor() *util.Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *RecolorCalculatorOptions) GetInvertMask() bool {
	if m != nil && m.InvertMask != nil {
		return *m.InvertMask
	}
	return Default_RecolorCalculatorOptions_InvertMask
}

func (m *RecolorCalculatorOptions) GetAdjustWithLuminance() bool {
	if m != nil && m.AdjustWithLuminance != nil {
		return *m.AdjustWithLuminance
	}
	return Default_RecolorCalculatorOptions_AdjustWithLuminance
}

var E_RecolorCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*RecolorCalculatorOptions)(nil),
	Field:         252527117,
	Name:          "mediapipe.RecolorCalculatorOptions.ext",
	Tag:           "bytes,252527117,opt,name=ext",
	Filename:      "mediapipe/calculators/image/recolor_calculator.proto",
}

func init() {
	proto.RegisterEnum("mediapipe.RecolorCalculatorOptions_MaskChannel", RecolorCalculatorOptions_MaskChannel_name, RecolorCalculatorOptions_MaskChannel_value)
	proto.RegisterExtension(E_RecolorCalculatorOptions_Ext)
	proto.RegisterType((*RecolorCalculatorOptions)(nil), "mediapipe.RecolorCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/image/recolor_calculator.proto", fileDescriptor_fa85b1ea9b831d7b)
}

var fileDescriptor_fa85b1ea9b831d7b = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0x33, 0xdd, 0x16, 0x74, 0x56, 0x24, 0x8c, 0x55, 0xc2, 0x22, 0xc3, 0x52, 0xa5, 0xec,
	0x29, 0x03, 0x8b, 0xa0, 0xf4, 0x16, 0x63, 0xa1, 0xd0, 0x6d, 0x2a, 0x91, 0x5a, 0xf0, 0x12, 0xc6,
	0xec, 0x34, 0x19, 0x77, 0x26, 0x13, 0x26, 0x13, 0xdb, 0xa3, 0x07, 0xaf, 0x82, 0x1f, 0xc3, 0x2f,
	0xe0, 0xc1, 0x6f, 0xe0, 0x71, 0x8f, 0x3d, 0xba, 0xd9, 0x8b, 0xc7, 0x7e, 0x04, 0x49, 0x82, 0x9b,
	0x6d, 0x45, 0xf1, 0xfa, 0xfe, 0xef, 0xf7, 0x7f, 0xef, 0xff, 0x78, 0xf0, 0x89, 0x64, 0x53, 0x4e,
	0x73, 0x9e, 0x33, 0x12, 0x53, 0x11, 0x97, 0x82, 0x1a, 0xa5, 0x0b, 0xc2, 0x25, 0x4d, 0x18, 0xd1,
	0x2c, 0x56, 0x42, 0xe9, 0xa8, 0x53, 0xdc, 0x5c, 0x2b, 0xa3, 0xd0, 0xed, 0x15, 0x35, 0x78, 0xdc,
	0x19, 0x9c, 0x69, 0x2a, 0xd9, 0xb9, 0xd2, 0x33, 0x72, 0x13, 0x18, 0x0c, 0xba, 0xae, 0xd2, 0x70,
	0x41, 0x1a, 0xdf, 0x56, 0xdb, 0xf9, 0xd6, 0x83, 0x4e, 0xd8, 0x4e, 0xf2, 0x57, 0xdc, 0x71, 0x6e,
	0xb8, 0xca, 0x0a, 0x34, 0x85, 0x77, 0x24, 0x2d, 0x66, 0x51, 0x9c, 0xd2, 0x2c, 0x63, 0xc2, 0x01,
	0x43, 0x30, 0xba, 0x3b, 0x26, 0xee, 0xca, 0xcf, 0xfd, 0x1b, 0xea, 0x1e, 0xd1, 0x62, 0xe6, 0xb7,
	0xd8, 0x9e, 0x7d, 0xe4, 0xbd, 0x3a, 0x8c, 0xfc, 0x03, 0x2f, 0x08, 0xf6, 0x27, 0x51, 0xb8, 0xff,
	0x22, 0xec, 0xcb, 0x4e, 0x46, 0xbb, 0x70, 0xab, 0x31, 0x71, 0x36, 0x86, 0x60, 0xd4, 0x1f, 0xdb,
	0x6b, 0xf6, 0x7e, 0x5d, 0x0f, 0x5b, 0x19, 0xed, 0xc2, 0x3e, 0xcf, 0xde, 0x33, 0x6d, 0xa2, 0x9a,
	0x76, 0x7a, 0x43, 0x30, 0xba, 0xb5, 0xb7, 0x75, 0x46, 0x45, 0xc1, 0x42, 0xd8, 0x2a, 0xf5, 0x54,
	0xf4, 0x0c, 0xde, 0xa7, 0xd3, 0x77, 0x65, 0x61, 0xa2, 0x73, 0x6e, 0xd2, 0x48, 0x94, 0x92, 0x67,
	0x34, 0x8b, 0x99, 0xb3, 0xd9, 0x10, 0x9b, 0x46, 0x97, 0x2c, 0xbc, 0xd7, 0xb6, 0x9c, 0x72, 0x93,
	0x4e, 0x7e, 0x37, 0xec, 0x9c, 0xc0, 0xfe, 0xda, 0xde, 0xc8, 0x81, 0xdb, 0xd7, 0x36, 0x3f, 0x09,
	0x0e, 0x83, 0xe3, 0xd3, 0xc0, 0xb6, 0xd0, 0x36, 0xfc, 0x23, 0x93, 0x0d, 0xd0, 0x03, 0x88, 0xae,
	0x55, 0xbd, 0xc9, 0xcb, 0x03, 0xcf, 0xde, 0x18, 0xbf, 0x86, 0x3d, 0x76, 0x61, 0xd0, 0xc3, 0xf5,
	0x60, 0x37, 0x0f, 0xe6, 0x7c, 0xfa, 0xf8, 0xf5, 0xa2, 0xc9, 0xff, 0xe8, 0x3f, 0xce, 0x1b, 0xd6,
	0x86, 0xcf, 0xe5, 0x7c, 0x81, 0xad, 0xcb, 0x05, 0xb6, 0xae, 0x16, 0x18, 0x7c, 0xa8, 0x30, 0xf8,
	0x52, 0x61, 0xf0, 0xbd, 0xc2, 0x60, 0x5e, 0x61, 0xf0, 0xa3, 0xc2, 0xe0, 0x67, 0x85, 0xad, 0xab,
	0x0a, 0x83, 0xcf, 0x4b, 0x6c, 0xcd, 0x97, 0xd8, 0xba, 0x5c, 0x62, 0xeb, 0xcd, 0xd3, 0x84, 0x9b,
	0xb4, 0x7c, 0xeb, 0xc6, 0x4a, 0x92, 0x44, 0xa9, 0x44, 0x30, 0xd2, 0xfd, 0xc7, 0x3f, 0x1e, 0xf2,
	0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x5f, 0x02, 0x30, 0xae, 0x02, 0x00, 0x00,
}

func (x RecolorCalculatorOptions_MaskChannel) String() string {
	s, ok := RecolorCalculatorOptions_MaskChannel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RecolorCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecolorCalculatorOptions)
	if !ok {
		that2, ok := that.(RecolorCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaskChannel != nil && that1.MaskChannel != nil {
		if *this.MaskChannel != *that1.MaskChannel {
			return false
		}
	} else if this.MaskChannel != nil {
		return false
	} else if that1.MaskChannel != nil {
		return false
	}
	if !this.Color.Equal(that1.Color) {
		return false
	}
	if this.InvertMask != nil && that1.InvertMask != nil {
		if *this.InvertMask != *that1.InvertMask {
			return false
		}
	} else if this.InvertMask != nil {
		return false
	} else if that1.InvertMask != nil {
		return false
	}
	if this.AdjustWithLuminance != nil && that1.AdjustWithLuminance != nil {
		if *this.AdjustWithLuminance != *that1.AdjustWithLuminance {
			return false
		}
	} else if this.AdjustWithLuminance != nil {
		return false
	} else if that1.AdjustWithLuminance != nil {
		return false
	}
	return true
}
func (this *RecolorCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&image.RecolorCalculatorOptions{")
	if this.MaskChannel != nil {
		s = append(s, "MaskChannel: "+valueToGoStringRecolorCalculator(this.MaskChannel, "RecolorCalculatorOptions_MaskChannel")+",\n")
	}
	if this.Color != nil {
		s = append(s, "Color: "+fmt.Sprintf("%#v", this.Color)+",\n")
	}
	if this.InvertMask != nil {
		s = append(s, "InvertMask: "+valueToGoStringRecolorCalculator(this.InvertMask, "bool")+",\n")
	}
	if this.AdjustWithLuminance != nil {
		s = append(s, "AdjustWithLuminance: "+valueToGoStringRecolorCalculator(this.AdjustWithLuminance, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRecolorCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RecolorCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecolorCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecolorCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdjustWithLuminance != nil {
		i--
		if *m.AdjustWithLuminance {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.InvertMask != nil {
		i--
		if *m.InvertMask {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Color != nil {
		{
			size, err := m.Color.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRecolorCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MaskChannel != nil {
		i = encodeVarintRecolorCalculator(dAtA, i, uint64(*m.MaskChannel))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecolorCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecolorCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RecolorCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaskChannel != nil {
		n += 1 + sovRecolorCalculator(uint64(*m.MaskChannel))
	}
	if m.Color != nil {
		l = m.Color.Size()
		n += 1 + l + sovRecolorCalculator(uint64(l))
	}
	if m.InvertMask != nil {
		n += 2
	}
	if m.AdjustWithLuminance != nil {
		n += 2
	}
	return n
}

func sovRecolorCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecolorCalculator(x uint64) (n int) {
	return sovRecolorCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RecolorCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecolorCalculatorOptions{`,
		`MaskChannel:` + valueToStringRecolorCalculator(this.MaskChannel) + `,`,
		`Color:` + strings.Replace(fmt.Sprintf("%v", this.Color), "Color", "util.Color", 1) + `,`,
		`InvertMask:` + valueToStringRecolorCalculator(this.InvertMask) + `,`,
		`AdjustWithLuminance:` + valueToStringRecolorCalculator(this.AdjustWithLuminance) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRecolorCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RecolorCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecolorCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecolorCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecolorCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaskChannel", wireType)
			}
			var v RecolorCalculatorOptions_MaskChannel
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecolorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= RecolorCalculatorOptions_MaskChannel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaskChannel = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecolorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecolorCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecolorCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Color == nil {
				m.Color = &util.Color{}
			}
			if err := m.Color.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertMask", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecolorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.InvertMask = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdjustWithLuminance", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecolorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AdjustWithLuminance = &b
		default:
			iNdEx = preIndex
			skippy, err := skipRecolorCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecolorCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecolorCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecolorCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecolorCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecolorCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecolorCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecolorCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecolorCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecolorCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecolorCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecolorCalculator = fmt.Errorf("proto: unexpected end of group")
)
