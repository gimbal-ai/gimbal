// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/image/rotation_mode.proto

package image

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RotationMode_Mode int32

const (
	ROTATION_MODE_UNKNOWN      RotationMode_Mode = 0
	ROTATION_MODE_ROTATION_0   RotationMode_Mode = 1
	ROTATION_MODE_ROTATION_90  RotationMode_Mode = 2
	ROTATION_MODE_ROTATION_180 RotationMode_Mode = 3
	ROTATION_MODE_ROTATION_270 RotationMode_Mode = 4
)

var RotationMode_Mode_name = map[int32]string{
	0: "ROTATION_MODE_UNKNOWN",
	1: "ROTATION_MODE_ROTATION_0",
	2: "ROTATION_MODE_ROTATION_90",
	3: "ROTATION_MODE_ROTATION_180",
	4: "ROTATION_MODE_ROTATION_270",
}

var RotationMode_Mode_value = map[string]int32{
	"ROTATION_MODE_UNKNOWN":      0,
	"ROTATION_MODE_ROTATION_0":   1,
	"ROTATION_MODE_ROTATION_90":  2,
	"ROTATION_MODE_ROTATION_180": 3,
	"ROTATION_MODE_ROTATION_270": 4,
}

func (x RotationMode_Mode) Enum() *RotationMode_Mode {
	p := new(RotationMode_Mode)
	*p = x
	return p
}

func (x RotationMode_Mode) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(RotationMode_Mode_name, int32(x))
}

func (x *RotationMode_Mode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RotationMode_Mode_value, data, "RotationMode_Mode")
	if err != nil {
		return err
	}
	*x = RotationMode_Mode(value)
	return nil
}

func (RotationMode_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4883b219a37a227a, []int{0, 0}
}

type RotationMode struct {
}

func (m *RotationMode) Reset()      { *m = RotationMode{} }
func (*RotationMode) ProtoMessage() {}
func (*RotationMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_4883b219a37a227a, []int{0}
}
func (m *RotationMode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RotationMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RotationMode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RotationMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RotationMode.Merge(m, src)
}
func (m *RotationMode) XXX_Size() int {
	return m.Size()
}
func (m *RotationMode) XXX_DiscardUnknown() {
	xxx_messageInfo_RotationMode.DiscardUnknown(m)
}

var xxx_messageInfo_RotationMode proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("mediapipe.RotationMode_Mode", RotationMode_Mode_name, RotationMode_Mode_value)
	proto.RegisterType((*RotationMode)(nil), "mediapipe.RotationMode")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/image/rotation_mode.proto", fileDescriptor_4883b219a37a227a)
}

var fileDescriptor_4883b219a37a227a = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xcf, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f,
	0x2a, 0xd6, 0xcf, 0xcc, 0x4d, 0x4c, 0x4f, 0xd5, 0x2f, 0xca, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf,
	0x8b, 0xcf, 0xcd, 0x4f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x6b, 0x50,
	0x5a, 0xcf, 0xc8, 0xc5, 0x13, 0x04, 0x55, 0xe2, 0x9b, 0x9f, 0x92, 0xaa, 0x34, 0x8f, 0x91, 0x8b,
	0x05, 0xc4, 0x10, 0x92, 0xe4, 0x12, 0x0d, 0xf2, 0x0f, 0x71, 0x0c, 0xf1, 0xf4, 0xf7, 0x8b, 0xf7,
	0xf5, 0x77, 0x71, 0x8d, 0x0f, 0xf5, 0xf3, 0xf6, 0xf3, 0x0f, 0xf7, 0x13, 0x60, 0x10, 0x92, 0xe1,
	0x92, 0x40, 0x95, 0x82, 0xf3, 0x0c, 0x04, 0x18, 0x85, 0x64, 0xb9, 0x24, 0x71, 0xc8, 0x5a, 0x1a,
	0x08, 0x30, 0x09, 0xc9, 0x71, 0x49, 0xe1, 0x90, 0x36, 0xb4, 0x30, 0x10, 0x60, 0xc6, 0x23, 0x6f,
	0x64, 0x6e, 0x20, 0xc0, 0xe2, 0xb4, 0x9c, 0xf1, 0xc2, 0x43, 0x39, 0x86, 0x1b, 0x0f, 0xe5, 0x18,
	0x3e, 0x3c, 0x94, 0x63, 0x6c, 0x78, 0x24, 0xc7, 0xb8, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72,
	0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0xf8, 0xe2, 0x91, 0x1c, 0xc3, 0x87, 0x47,
	0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x03, 0x97,
	0x6a, 0x72, 0x7e, 0xae, 0x5e, 0x7a, 0x7e, 0x7e, 0x7a, 0x4e, 0xaa, 0x1e, 0xdc, 0xfb, 0x7a, 0x88,
	0xf0, 0x82, 0x04, 0x8d, 0x93, 0x20, 0x72, 0x60, 0x04, 0x80, 0x84, 0xa2, 0xcc, 0xd3, 0x33, 0x4b,
	0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x21, 0x06, 0x20, 0x05, 0x38, 0x9e, 0xa0, 0x07,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x15, 0x4c, 0x39, 0x1c, 0x98, 0x01, 0x00, 0x00,
}

func (x RotationMode_Mode) String() string {
	s, ok := RotationMode_Mode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RotationMode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RotationMode)
	if !ok {
		that2, ok := that.(RotationMode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RotationMode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&image.RotationMode{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRotationMode(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RotationMode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RotationMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RotationMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintRotationMode(dAtA []byte, offset int, v uint64) int {
	offset -= sovRotationMode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RotationMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovRotationMode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRotationMode(x uint64) (n int) {
	return sovRotationMode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RotationMode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RotationMode{`,
		`}`,
	}, "")
	return s
}
func valueToStringRotationMode(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RotationMode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRotationMode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RotationMode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RotationMode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRotationMode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRotationMode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRotationMode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRotationMode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRotationMode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRotationMode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRotationMode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRotationMode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRotationMode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRotationMode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRotationMode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRotationMode = fmt.Errorf("proto: unexpected end of group")
)
