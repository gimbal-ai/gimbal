// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/image/scale_image_calculator.proto

package image

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	formats "github.com/google/mediapipe/mediapipe/framework/formats"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ScaleImageCalculatorOptions_ScaleAlgorithm int32

const (
	SCALE_ALGO_DEFAULT                 ScaleImageCalculatorOptions_ScaleAlgorithm = 0
	SCALE_ALGO_LINEAR                  ScaleImageCalculatorOptions_ScaleAlgorithm = 1
	SCALE_ALGO_CUBIC                   ScaleImageCalculatorOptions_ScaleAlgorithm = 2
	SCALE_ALGO_AREA                    ScaleImageCalculatorOptions_ScaleAlgorithm = 3
	SCALE_ALGO_LANCZOS                 ScaleImageCalculatorOptions_ScaleAlgorithm = 4
	SCALE_ALGO_DEFAULT_WITHOUT_UPSCALE ScaleImageCalculatorOptions_ScaleAlgorithm = 5
)

var ScaleImageCalculatorOptions_ScaleAlgorithm_name = map[int32]string{
	0: "SCALE_ALGO_DEFAULT",
	1: "SCALE_ALGO_LINEAR",
	2: "SCALE_ALGO_CUBIC",
	3: "SCALE_ALGO_AREA",
	4: "SCALE_ALGO_LANCZOS",
	5: "SCALE_ALGO_DEFAULT_WITHOUT_UPSCALE",
}

var ScaleImageCalculatorOptions_ScaleAlgorithm_value = map[string]int32{
	"SCALE_ALGO_DEFAULT":                 0,
	"SCALE_ALGO_LINEAR":                  1,
	"SCALE_ALGO_CUBIC":                   2,
	"SCALE_ALGO_AREA":                    3,
	"SCALE_ALGO_LANCZOS":                 4,
	"SCALE_ALGO_DEFAULT_WITHOUT_UPSCALE": 5,
}

func (x ScaleImageCalculatorOptions_ScaleAlgorithm) Enum() *ScaleImageCalculatorOptions_ScaleAlgorithm {
	p := new(ScaleImageCalculatorOptions_ScaleAlgorithm)
	*p = x
	return p
}

func (x ScaleImageCalculatorOptions_ScaleAlgorithm) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(ScaleImageCalculatorOptions_ScaleAlgorithm_name, int32(x))
}

func (x *ScaleImageCalculatorOptions_ScaleAlgorithm) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ScaleImageCalculatorOptions_ScaleAlgorithm_value, data, "ScaleImageCalculatorOptions_ScaleAlgorithm")
	if err != nil {
		return err
	}
	*x = ScaleImageCalculatorOptions_ScaleAlgorithm(value)
	return nil
}

func (ScaleImageCalculatorOptions_ScaleAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_53a818b6906e17ce, []int{0, 0}
}

type ScaleImageCalculatorOptions struct {
	TargetWidth                     int32                                       `protobuf:"varint,1,opt,name=target_width,json=targetWidth" json:"target_width"`
	TargetHeight                    int32                                       `protobuf:"varint,2,opt,name=target_height,json=targetHeight" json:"target_height"`
	TargetMaxArea                   int32                                       `protobuf:"varint,15,opt,name=target_max_area,json=targetMaxArea" json:"target_max_area"`
	PreserveAspectRatio             *bool                                       `protobuf:"varint,3,opt,name=preserve_aspect_ratio,json=preserveAspectRatio,def=1" json:"preserve_aspect_ratio,omitempty"`
	MinAspectRatio                  *string                                     `protobuf:"bytes,4,opt,name=min_aspect_ratio,json=minAspectRatio,def=9/16" json:"min_aspect_ratio,omitempty"`
	MaxAspectRatio                  *string                                     `protobuf:"bytes,5,opt,name=max_aspect_ratio,json=maxAspectRatio,def=16/9" json:"max_aspect_ratio,omitempty"`
	OutputFormat                    formats.ImageFormat_Format                  `protobuf:"varint,6,opt,name=output_format,json=outputFormat,enum=mediapipe.ImageFormat_Format" json:"output_format"`
	Algorithm                       *ScaleImageCalculatorOptions_ScaleAlgorithm `protobuf:"varint,7,opt,name=algorithm,enum=mediapipe.ScaleImageCalculatorOptions_ScaleAlgorithm,def=0" json:"algorithm,omitempty"`
	AlignmentBoundary               *int32                                      `protobuf:"varint,8,opt,name=alignment_boundary,json=alignmentBoundary,def=16" json:"alignment_boundary,omitempty"`
	SetAlignmentPadding             *bool                                       `protobuf:"varint,9,opt,name=set_alignment_padding,json=setAlignmentPadding,def=1" json:"set_alignment_padding,omitempty"`
	OBSOLETESkipLinearRgbConversion *bool                                       `protobuf:"varint,10,opt,name=OBSOLETE_skip_linear_rgb_conversion,json=OBSOLETESkipLinearRgbConversion,def=0" json:"OBSOLETE_skip_linear_rgb_conversion,omitempty"`
	PostSharpeningCoefficient       *float32                                    `protobuf:"fixed32,11,opt,name=post_sharpening_coefficient,json=postSharpeningCoefficient,def=0" json:"post_sharpening_coefficient,omitempty"`
	InputFormat                     formats.ImageFormat_Format                  `protobuf:"varint,12,opt,name=input_format,json=inputFormat,enum=mediapipe.ImageFormat_Format" json:"input_format"`
	ScaleToMultipleOf               *int32                                      `protobuf:"varint,13,opt,name=scale_to_multiple_of,json=scaleToMultipleOf,def=2" json:"scale_to_multiple_of,omitempty"`
	UseBt709                        *bool                                       `protobuf:"varint,14,opt,name=use_bt709,json=useBt709,def=0" json:"use_bt709,omitempty"`
}

func (m *ScaleImageCalculatorOptions) Reset()      { *m = ScaleImageCalculatorOptions{} }
func (*ScaleImageCalculatorOptions) ProtoMessage() {}
func (*ScaleImageCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_53a818b6906e17ce, []int{0}
}
func (m *ScaleImageCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScaleImageCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScaleImageCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScaleImageCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScaleImageCalculatorOptions.Merge(m, src)
}
func (m *ScaleImageCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *ScaleImageCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ScaleImageCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ScaleImageCalculatorOptions proto.InternalMessageInfo

const Default_ScaleImageCalculatorOptions_PreserveAspectRatio bool = true
const Default_ScaleImageCalculatorOptions_MinAspectRatio string = "9/16"
const Default_ScaleImageCalculatorOptions_MaxAspectRatio string = "16/9"
const Default_ScaleImageCalculatorOptions_Algorithm ScaleImageCalculatorOptions_ScaleAlgorithm = SCALE_ALGO_DEFAULT
const Default_ScaleImageCalculatorOptions_AlignmentBoundary int32 = 16
const Default_ScaleImageCalculatorOptions_SetAlignmentPadding bool = true
const Default_ScaleImageCalculatorOptions_OBSOLETESkipLinearRgbConversion bool = false
const Default_ScaleImageCalculatorOptions_PostSharpeningCoefficient float32 = 0
const Default_ScaleImageCalculatorOptions_ScaleToMultipleOf int32 = 2
const Default_ScaleImageCalculatorOptions_UseBt709 bool = false

func (m *ScaleImageCalculatorOptions) GetTargetWidth() int32 {
	if m != nil {
		return m.TargetWidth
	}
	return 0
}

func (m *ScaleImageCalculatorOptions) GetTargetHeight() int32 {
	if m != nil {
		return m.TargetHeight
	}
	return 0
}

func (m *ScaleImageCalculatorOptions) GetTargetMaxArea() int32 {
	if m != nil {
		return m.TargetMaxArea
	}
	return 0
}

func (m *ScaleImageCalculatorOptions) GetPreserveAspectRatio() bool {
	if m != nil && m.PreserveAspectRatio != nil {
		return *m.PreserveAspectRatio
	}
	return Default_ScaleImageCalculatorOptions_PreserveAspectRatio
}

func (m *ScaleImageCalculatorOptions) GetMinAspectRatio() string {
	if m != nil && m.MinAspectRatio != nil {
		return *m.MinAspectRatio
	}
	return Default_ScaleImageCalculatorOptions_MinAspectRatio
}

func (m *ScaleImageCalculatorOptions) GetMaxAspectRatio() string {
	if m != nil && m.MaxAspectRatio != nil {
		return *m.MaxAspectRatio
	}
	return Default_ScaleImageCalculatorOptions_MaxAspectRatio
}

func (m *ScaleImageCalculatorOptions) GetOutputFormat() formats.ImageFormat_Format {
	if m != nil {
		return m.OutputFormat
	}
	return formats.FORMAT_UNKNOWN
}

func (m *ScaleImageCalculatorOptions) GetAlgorithm() ScaleImageCalculatorOptions_ScaleAlgorithm {
	if m != nil && m.Algorithm != nil {
		return *m.Algorithm
	}
	return Default_ScaleImageCalculatorOptions_Algorithm
}

func (m *ScaleImageCalculatorOptions) GetAlignmentBoundary() int32 {
	if m != nil && m.AlignmentBoundary != nil {
		return *m.AlignmentBoundary
	}
	return Default_ScaleImageCalculatorOptions_AlignmentBoundary
}

func (m *ScaleImageCalculatorOptions) GetSetAlignmentPadding() bool {
	if m != nil && m.SetAlignmentPadding != nil {
		return *m.SetAlignmentPadding
	}
	return Default_ScaleImageCalculatorOptions_SetAlignmentPadding
}

func (m *ScaleImageCalculatorOptions) GetOBSOLETESkipLinearRgbConversion() bool {
	if m != nil && m.OBSOLETESkipLinearRgbConversion != nil {
		return *m.OBSOLETESkipLinearRgbConversion
	}
	return Default_ScaleImageCalculatorOptions_OBSOLETESkipLinearRgbConversion
}

func (m *ScaleImageCalculatorOptions) GetPostSharpeningCoefficient() float32 {
	if m != nil && m.PostSharpeningCoefficient != nil {
		return *m.PostSharpeningCoefficient
	}
	return Default_ScaleImageCalculatorOptions_PostSharpeningCoefficient
}

func (m *ScaleImageCalculatorOptions) GetInputFormat() formats.ImageFormat_Format {
	if m != nil {
		return m.InputFormat
	}
	return formats.FORMAT_UNKNOWN
}

func (m *ScaleImageCalculatorOptions) GetScaleToMultipleOf() int32 {
	if m != nil && m.ScaleToMultipleOf != nil {
		return *m.ScaleToMultipleOf
	}
	return Default_ScaleImageCalculatorOptions_ScaleToMultipleOf
}

func (m *ScaleImageCalculatorOptions) GetUseBt709() bool {
	if m != nil && m.UseBt709 != nil {
		return *m.UseBt709
	}
	return Default_ScaleImageCalculatorOptions_UseBt709
}

var E_ScaleImageCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*ScaleImageCalculatorOptions)(nil),
	Field:         66237115,
	Name:          "mediapipe.ScaleImageCalculatorOptions.ext",
	Tag:           "bytes,66237115,opt,name=ext",
	Filename:      "mediapipe/calculators/image/scale_image_calculator.proto",
}

func init() {
	proto.RegisterEnum("mediapipe.ScaleImageCalculatorOptions_ScaleAlgorithm", ScaleImageCalculatorOptions_ScaleAlgorithm_name, ScaleImageCalculatorOptions_ScaleAlgorithm_value)
	proto.RegisterExtension(E_ScaleImageCalculatorOptions_Ext)
	proto.RegisterType((*ScaleImageCalculatorOptions)(nil), "mediapipe.ScaleImageCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/image/scale_image_calculator.proto", fileDescriptor_53a818b6906e17ce)
}

var fileDescriptor_53a818b6906e17ce = []byte{
	// 789 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4f, 0x8f, 0xda, 0x46,
	0x18, 0xc6, 0x3d, 0xbb, 0xd0, 0x2e, 0xc3, 0x2e, 0xeb, 0x9d, 0x24, 0x95, 0x9b, 0xb4, 0x5e, 0x44,
	0xab, 0x94, 0x4a, 0x15, 0x0e, 0x48, 0xdd, 0x64, 0xb9, 0x19, 0xca, 0x76, 0x91, 0x48, 0x88, 0x0c,
	0x28, 0x6a, 0x2e, 0xa3, 0xc1, 0x0c, 0x66, 0xb4, 0xb6, 0xc7, 0x1a, 0x8f, 0x13, 0x7a, 0xeb, 0x47,
	0xe8, 0xb5, 0xdf, 0xa0, 0xea, 0x57, 0xe8, 0x17, 0x88, 0x7a, 0xda, 0x63, 0x4e, 0x55, 0x97, 0x55,
	0xa5, 0x1e, 0xf3, 0x11, 0x2a, 0xff, 0x01, 0x9c, 0x4d, 0x14, 0xe5, 0x04, 0xbc, 0xcf, 0xef, 0x79,
	0x6c, 0x9e, 0xd7, 0x1e, 0xf8, 0xc8, 0xa3, 0x33, 0x46, 0x02, 0x16, 0x50, 0xc3, 0x26, 0xae, 0x1d,
	0xb9, 0x44, 0x72, 0x11, 0x1a, 0xcc, 0x23, 0x0e, 0x35, 0x42, 0x9b, 0xb8, 0x14, 0x27, 0xdf, 0xf1,
	0x56, 0x6d, 0x04, 0x82, 0x4b, 0x8e, 0x4a, 0x1b, 0xe7, 0xdd, 0xaf, 0xb7, 0x21, 0x73, 0x41, 0x3c,
	0xfa, 0x92, 0x8b, 0x0b, 0xe3, 0xa6, 0xe1, 0x6e, 0xe3, 0x7d, 0xd4, 0x9c, 0x0b, 0x8f, 0xc8, 0xec,
	0x82, 0x38, 0xfd, 0x95, 0xf2, 0xb5, 0xdf, 0x4a, 0xf0, 0xde, 0x28, 0xbe, 0x83, 0x7e, 0xac, 0x75,
	0x37, 0x71, 0xc3, 0x40, 0x32, 0xee, 0x87, 0xe8, 0x1b, 0xb8, 0x2f, 0x89, 0x70, 0xa8, 0xc4, 0x2f,
	0xd9, 0x4c, 0x2e, 0x34, 0x50, 0x05, 0xf5, 0x62, 0xa7, 0xf0, 0xea, 0xef, 0x63, 0xc5, 0x2a, 0xa7,
	0xca, 0xb3, 0x58, 0x40, 0xdf, 0xc2, 0x83, 0x0c, 0x5c, 0x50, 0xe6, 0x2c, 0xa4, 0xb6, 0x93, 0x23,
	0xb3, 0x8c, 0xf3, 0x44, 0x41, 0xdf, 0xc1, 0xc3, 0x0c, 0xf5, 0xc8, 0x12, 0x13, 0x41, 0x89, 0x76,
	0x98, 0x83, 0xb3, 0x9c, 0xc7, 0x64, 0x69, 0x0a, 0x4a, 0xd0, 0x23, 0x78, 0x27, 0x10, 0x34, 0xa4,
	0xe2, 0x05, 0xc5, 0x24, 0x0c, 0xa8, 0x2d, 0xb1, 0x20, 0x92, 0x71, 0x6d, 0xb7, 0x0a, 0xea, 0x7b,
	0xed, 0x82, 0x14, 0x11, 0xb5, 0x6e, 0xad, 0x11, 0x33, 0x21, 0xac, 0x18, 0x40, 0x0d, 0xa8, 0x7a,
	0xcc, 0x7f, 0xdb, 0x54, 0xa8, 0x82, 0x7a, 0xa9, 0x5d, 0x38, 0x35, 0x9a, 0x27, 0x56, 0xc5, 0x63,
	0xfe, 0x4d, 0x3e, 0xbe, 0xa1, 0x3c, 0x5f, 0x4c, 0xf9, 0xe6, 0x89, 0x71, 0x6a, 0x55, 0x3c, 0xb2,
	0xcc, 0xf3, 0xe7, 0xf0, 0x80, 0x47, 0x32, 0x88, 0x64, 0x56, 0xa9, 0xf6, 0x49, 0x15, 0xd4, 0x2b,
	0xad, 0x2f, 0xb7, 0x3b, 0x68, 0x24, 0xad, 0x9e, 0xa5, 0x85, 0xa7, 0x1f, 0xeb, 0x46, 0x52, 0x67,
	0x3a, 0x43, 0x0e, 0x2c, 0x11, 0xd7, 0xe1, 0x82, 0xc9, 0x85, 0xa7, 0x7d, 0x9a, 0xa4, 0x7c, 0x9f,
	0x4b, 0xf9, 0xc0, 0x82, 0x52, 0xcd, 0x5c, 0x9b, 0xdb, 0x68, 0xd4, 0x35, 0x07, 0x3d, 0x6c, 0x0e,
	0x7e, 0x1c, 0xe2, 0x1f, 0x7a, 0x67, 0xe6, 0x64, 0x30, 0xb6, 0xb6, 0xd9, 0xa8, 0x09, 0x11, 0x71,
	0x99, 0xe3, 0x7b, 0xd4, 0x97, 0x78, 0xca, 0x23, 0x7f, 0x46, 0xc4, 0xcf, 0xda, 0x5e, 0xdc, 0x7e,
	0x7b, 0xa7, 0x79, 0x62, 0x1d, 0x6d, 0xd4, 0x4e, 0x26, 0xc6, 0xfd, 0x87, 0x54, 0xe2, 0xad, 0x2d,
	0x20, 0xb3, 0x19, 0xf3, 0x1d, 0xad, 0x94, 0xef, 0x3f, 0xa4, 0xd2, 0x5c, 0x13, 0x4f, 0x53, 0x00,
	0x8d, 0xe0, 0x57, 0xc3, 0xce, 0x68, 0x38, 0xe8, 0x8d, 0x7b, 0x38, 0xbc, 0x60, 0x01, 0x76, 0x99,
	0x4f, 0x89, 0xc0, 0xc2, 0x99, 0x62, 0x9b, 0xfb, 0x2f, 0xa8, 0x08, 0x19, 0xf7, 0x35, 0x98, 0xe4,
	0x14, 0xe7, 0xc4, 0x0d, 0xa9, 0x75, 0xbc, 0x76, 0x8c, 0x2e, 0x58, 0x30, 0x48, 0x78, 0xcb, 0x99,
	0x76, 0x37, 0x34, 0x32, 0xe1, 0xbd, 0x80, 0x87, 0x12, 0x87, 0x0b, 0x22, 0x02, 0xea, 0x33, 0xdf,
	0xc1, 0x36, 0xa7, 0xf3, 0x39, 0xb3, 0x19, 0xf5, 0xa5, 0x56, 0xae, 0x82, 0xfa, 0x4e, 0x1b, 0x3c,
	0xb0, 0x3e, 0x8f, 0xa9, 0xd1, 0x06, 0xea, 0x6e, 0x19, 0x74, 0x06, 0xf7, 0x99, 0x9f, 0x5b, 0xdb,
	0xfe, 0xc7, 0xaf, 0xad, 0x9c, 0x18, 0xb3, 0xad, 0xb5, 0xe0, 0xed, 0xf4, 0xe5, 0x95, 0x1c, 0x7b,
	0x91, 0x2b, 0x59, 0xe0, 0x52, 0xcc, 0xe7, 0xda, 0x41, 0x52, 0x27, 0x68, 0x59, 0x47, 0x89, 0x3c,
	0xe6, 0x8f, 0x33, 0x71, 0x38, 0x47, 0x35, 0x58, 0x8a, 0x42, 0x8a, 0xa7, 0xf2, 0xe1, 0x83, 0x53,
	0xad, 0x92, 0xff, 0xe7, 0x7b, 0x51, 0x48, 0x3b, 0xf1, 0xb8, 0xf6, 0x07, 0x80, 0x95, 0xb7, 0xd7,
	0x8a, 0x3e, 0x83, 0xef, 0x59, 0xac, 0xaa, 0xa0, 0x3b, 0xf0, 0x28, 0x37, 0x1f, 0xf4, 0x9f, 0xf4,
	0x4c, 0x4b, 0x05, 0xe8, 0x36, 0x54, 0x73, 0xe3, 0xee, 0xa4, 0xd3, 0xef, 0xaa, 0x3b, 0xe8, 0x16,
	0x3c, 0xcc, 0x4d, 0x4d, 0xab, 0x67, 0xaa, 0xbb, 0x37, 0x92, 0x07, 0xe6, 0x93, 0xee, 0xf3, 0xe1,
	0x48, 0x2d, 0xa0, 0xfb, 0xb0, 0xf6, 0xee, 0x15, 0xf1, 0xb3, 0xfe, 0xf8, 0x7c, 0x38, 0x19, 0xe3,
	0xc9, 0xd3, 0x44, 0x54, 0x8b, 0xad, 0x9f, 0xe0, 0x2e, 0x5d, 0x4a, 0xf4, 0x45, 0xae, 0xbd, 0x77,
	0x1e, 0x52, 0xed, 0xcf, 0x7f, 0xff, 0x3a, 0xae, 0x82, 0x7a, 0xb9, 0x75, 0xff, 0xe3, 0x9e, 0x6a,
	0x2b, 0xce, 0xec, 0x78, 0x97, 0x57, 0xba, 0xf2, 0xfa, 0x4a, 0x57, 0xde, 0x5c, 0xe9, 0xe0, 0x97,
	0x95, 0x0e, 0x7e, 0x5f, 0xe9, 0xe0, 0xd5, 0x4a, 0x07, 0x97, 0x2b, 0x1d, 0xfc, 0xb3, 0xd2, 0xc1,
	0x7f, 0x2b, 0x5d, 0x79, 0xb3, 0xd2, 0xc1, 0xaf, 0xd7, 0xba, 0x72, 0x79, 0xad, 0x2b, 0xaf, 0xaf,
	0x75, 0xe5, 0xf9, 0x43, 0x87, 0xc9, 0x45, 0x34, 0x6d, 0xd8, 0xdc, 0x33, 0x1c, 0xce, 0x1d, 0x97,
	0x1a, 0xdb, 0x33, 0xf1, 0x03, 0x07, 0xf1, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x30, 0xd6, 0xd8,
	0xe4, 0xa6, 0x05, 0x00, 0x00,
}

func (x ScaleImageCalculatorOptions_ScaleAlgorithm) String() string {
	s, ok := ScaleImageCalculatorOptions_ScaleAlgorithm_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ScaleImageCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScaleImageCalculatorOptions)
	if !ok {
		that2, ok := that.(ScaleImageCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TargetWidth != that1.TargetWidth {
		return false
	}
	if this.TargetHeight != that1.TargetHeight {
		return false
	}
	if this.TargetMaxArea != that1.TargetMaxArea {
		return false
	}
	if this.PreserveAspectRatio != nil && that1.PreserveAspectRatio != nil {
		if *this.PreserveAspectRatio != *that1.PreserveAspectRatio {
			return false
		}
	} else if this.PreserveAspectRatio != nil {
		return false
	} else if that1.PreserveAspectRatio != nil {
		return false
	}
	if this.MinAspectRatio != nil && that1.MinAspectRatio != nil {
		if *this.MinAspectRatio != *that1.MinAspectRatio {
			return false
		}
	} else if this.MinAspectRatio != nil {
		return false
	} else if that1.MinAspectRatio != nil {
		return false
	}
	if this.MaxAspectRatio != nil && that1.MaxAspectRatio != nil {
		if *this.MaxAspectRatio != *that1.MaxAspectRatio {
			return false
		}
	} else if this.MaxAspectRatio != nil {
		return false
	} else if that1.MaxAspectRatio != nil {
		return false
	}
	if this.OutputFormat != that1.OutputFormat {
		return false
	}
	if this.Algorithm != nil && that1.Algorithm != nil {
		if *this.Algorithm != *that1.Algorithm {
			return false
		}
	} else if this.Algorithm != nil {
		return false
	} else if that1.Algorithm != nil {
		return false
	}
	if this.AlignmentBoundary != nil && that1.AlignmentBoundary != nil {
		if *this.AlignmentBoundary != *that1.AlignmentBoundary {
			return false
		}
	} else if this.AlignmentBoundary != nil {
		return false
	} else if that1.AlignmentBoundary != nil {
		return false
	}
	if this.SetAlignmentPadding != nil && that1.SetAlignmentPadding != nil {
		if *this.SetAlignmentPadding != *that1.SetAlignmentPadding {
			return false
		}
	} else if this.SetAlignmentPadding != nil {
		return false
	} else if that1.SetAlignmentPadding != nil {
		return false
	}
	if this.OBSOLETESkipLinearRgbConversion != nil && that1.OBSOLETESkipLinearRgbConversion != nil {
		if *this.OBSOLETESkipLinearRgbConversion != *that1.OBSOLETESkipLinearRgbConversion {
			return false
		}
	} else if this.OBSOLETESkipLinearRgbConversion != nil {
		return false
	} else if that1.OBSOLETESkipLinearRgbConversion != nil {
		return false
	}
	if this.PostSharpeningCoefficient != nil && that1.PostSharpeningCoefficient != nil {
		if *this.PostSharpeningCoefficient != *that1.PostSharpeningCoefficient {
			return false
		}
	} else if this.PostSharpeningCoefficient != nil {
		return false
	} else if that1.PostSharpeningCoefficient != nil {
		return false
	}
	if this.InputFormat != that1.InputFormat {
		return false
	}
	if this.ScaleToMultipleOf != nil && that1.ScaleToMultipleOf != nil {
		if *this.ScaleToMultipleOf != *that1.ScaleToMultipleOf {
			return false
		}
	} else if this.ScaleToMultipleOf != nil {
		return false
	} else if that1.ScaleToMultipleOf != nil {
		return false
	}
	if this.UseBt709 != nil && that1.UseBt709 != nil {
		if *this.UseBt709 != *that1.UseBt709 {
			return false
		}
	} else if this.UseBt709 != nil {
		return false
	} else if that1.UseBt709 != nil {
		return false
	}
	return true
}
func (this *ScaleImageCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&image.ScaleImageCalculatorOptions{")
	s = append(s, "TargetWidth: "+fmt.Sprintf("%#v", this.TargetWidth)+",\n")
	s = append(s, "TargetHeight: "+fmt.Sprintf("%#v", this.TargetHeight)+",\n")
	s = append(s, "TargetMaxArea: "+fmt.Sprintf("%#v", this.TargetMaxArea)+",\n")
	if this.PreserveAspectRatio != nil {
		s = append(s, "PreserveAspectRatio: "+valueToGoStringScaleImageCalculator(this.PreserveAspectRatio, "bool")+",\n")
	}
	if this.MinAspectRatio != nil {
		s = append(s, "MinAspectRatio: "+valueToGoStringScaleImageCalculator(this.MinAspectRatio, "string")+",\n")
	}
	if this.MaxAspectRatio != nil {
		s = append(s, "MaxAspectRatio: "+valueToGoStringScaleImageCalculator(this.MaxAspectRatio, "string")+",\n")
	}
	s = append(s, "OutputFormat: "+fmt.Sprintf("%#v", this.OutputFormat)+",\n")
	if this.Algorithm != nil {
		s = append(s, "Algorithm: "+valueToGoStringScaleImageCalculator(this.Algorithm, "ScaleImageCalculatorOptions_ScaleAlgorithm")+",\n")
	}
	if this.AlignmentBoundary != nil {
		s = append(s, "AlignmentBoundary: "+valueToGoStringScaleImageCalculator(this.AlignmentBoundary, "int32")+",\n")
	}
	if this.SetAlignmentPadding != nil {
		s = append(s, "SetAlignmentPadding: "+valueToGoStringScaleImageCalculator(this.SetAlignmentPadding, "bool")+",\n")
	}
	if this.OBSOLETESkipLinearRgbConversion != nil {
		s = append(s, "OBSOLETESkipLinearRgbConversion: "+valueToGoStringScaleImageCalculator(this.OBSOLETESkipLinearRgbConversion, "bool")+",\n")
	}
	if this.PostSharpeningCoefficient != nil {
		s = append(s, "PostSharpeningCoefficient: "+valueToGoStringScaleImageCalculator(this.PostSharpeningCoefficient, "float32")+",\n")
	}
	s = append(s, "InputFormat: "+fmt.Sprintf("%#v", this.InputFormat)+",\n")
	if this.ScaleToMultipleOf != nil {
		s = append(s, "ScaleToMultipleOf: "+valueToGoStringScaleImageCalculator(this.ScaleToMultipleOf, "int32")+",\n")
	}
	if this.UseBt709 != nil {
		s = append(s, "UseBt709: "+valueToGoStringScaleImageCalculator(this.UseBt709, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringScaleImageCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ScaleImageCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScaleImageCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScaleImageCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintScaleImageCalculator(dAtA, i, uint64(m.TargetMaxArea))
	i--
	dAtA[i] = 0x78
	if m.UseBt709 != nil {
		i--
		if *m.UseBt709 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.ScaleToMultipleOf != nil {
		i = encodeVarintScaleImageCalculator(dAtA, i, uint64(*m.ScaleToMultipleOf))
		i--
		dAtA[i] = 0x68
	}
	i = encodeVarintScaleImageCalculator(dAtA, i, uint64(m.InputFormat))
	i--
	dAtA[i] = 0x60
	if m.PostSharpeningCoefficient != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.PostSharpeningCoefficient))))
		i--
		dAtA[i] = 0x5d
	}
	if m.OBSOLETESkipLinearRgbConversion != nil {
		i--
		if *m.OBSOLETESkipLinearRgbConversion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.SetAlignmentPadding != nil {
		i--
		if *m.SetAlignmentPadding {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.AlignmentBoundary != nil {
		i = encodeVarintScaleImageCalculator(dAtA, i, uint64(*m.AlignmentBoundary))
		i--
		dAtA[i] = 0x40
	}
	if m.Algorithm != nil {
		i = encodeVarintScaleImageCalculator(dAtA, i, uint64(*m.Algorithm))
		i--
		dAtA[i] = 0x38
	}
	i = encodeVarintScaleImageCalculator(dAtA, i, uint64(m.OutputFormat))
	i--
	dAtA[i] = 0x30
	if m.MaxAspectRatio != nil {
		i -= len(*m.MaxAspectRatio)
		copy(dAtA[i:], *m.MaxAspectRatio)
		i = encodeVarintScaleImageCalculator(dAtA, i, uint64(len(*m.MaxAspectRatio)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MinAspectRatio != nil {
		i -= len(*m.MinAspectRatio)
		copy(dAtA[i:], *m.MinAspectRatio)
		i = encodeVarintScaleImageCalculator(dAtA, i, uint64(len(*m.MinAspectRatio)))
		i--
		dAtA[i] = 0x22
	}
	if m.PreserveAspectRatio != nil {
		i--
		if *m.PreserveAspectRatio {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	i = encodeVarintScaleImageCalculator(dAtA, i, uint64(m.TargetHeight))
	i--
	dAtA[i] = 0x10
	i = encodeVarintScaleImageCalculator(dAtA, i, uint64(m.TargetWidth))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintScaleImageCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovScaleImageCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ScaleImageCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovScaleImageCalculator(uint64(m.TargetWidth))
	n += 1 + sovScaleImageCalculator(uint64(m.TargetHeight))
	if m.PreserveAspectRatio != nil {
		n += 2
	}
	if m.MinAspectRatio != nil {
		l = len(*m.MinAspectRatio)
		n += 1 + l + sovScaleImageCalculator(uint64(l))
	}
	if m.MaxAspectRatio != nil {
		l = len(*m.MaxAspectRatio)
		n += 1 + l + sovScaleImageCalculator(uint64(l))
	}
	n += 1 + sovScaleImageCalculator(uint64(m.OutputFormat))
	if m.Algorithm != nil {
		n += 1 + sovScaleImageCalculator(uint64(*m.Algorithm))
	}
	if m.AlignmentBoundary != nil {
		n += 1 + sovScaleImageCalculator(uint64(*m.AlignmentBoundary))
	}
	if m.SetAlignmentPadding != nil {
		n += 2
	}
	if m.OBSOLETESkipLinearRgbConversion != nil {
		n += 2
	}
	if m.PostSharpeningCoefficient != nil {
		n += 5
	}
	n += 1 + sovScaleImageCalculator(uint64(m.InputFormat))
	if m.ScaleToMultipleOf != nil {
		n += 1 + sovScaleImageCalculator(uint64(*m.ScaleToMultipleOf))
	}
	if m.UseBt709 != nil {
		n += 2
	}
	n += 1 + sovScaleImageCalculator(uint64(m.TargetMaxArea))
	return n
}

func sovScaleImageCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozScaleImageCalculator(x uint64) (n int) {
	return sovScaleImageCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ScaleImageCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScaleImageCalculatorOptions{`,
		`TargetWidth:` + fmt.Sprintf("%v", this.TargetWidth) + `,`,
		`TargetHeight:` + fmt.Sprintf("%v", this.TargetHeight) + `,`,
		`PreserveAspectRatio:` + valueToStringScaleImageCalculator(this.PreserveAspectRatio) + `,`,
		`MinAspectRatio:` + valueToStringScaleImageCalculator(this.MinAspectRatio) + `,`,
		`MaxAspectRatio:` + valueToStringScaleImageCalculator(this.MaxAspectRatio) + `,`,
		`OutputFormat:` + fmt.Sprintf("%v", this.OutputFormat) + `,`,
		`Algorithm:` + valueToStringScaleImageCalculator(this.Algorithm) + `,`,
		`AlignmentBoundary:` + valueToStringScaleImageCalculator(this.AlignmentBoundary) + `,`,
		`SetAlignmentPadding:` + valueToStringScaleImageCalculator(this.SetAlignmentPadding) + `,`,
		`OBSOLETESkipLinearRgbConversion:` + valueToStringScaleImageCalculator(this.OBSOLETESkipLinearRgbConversion) + `,`,
		`PostSharpeningCoefficient:` + valueToStringScaleImageCalculator(this.PostSharpeningCoefficient) + `,`,
		`InputFormat:` + fmt.Sprintf("%v", this.InputFormat) + `,`,
		`ScaleToMultipleOf:` + valueToStringScaleImageCalculator(this.ScaleToMultipleOf) + `,`,
		`UseBt709:` + valueToStringScaleImageCalculator(this.UseBt709) + `,`,
		`TargetMaxArea:` + fmt.Sprintf("%v", this.TargetMaxArea) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringScaleImageCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ScaleImageCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScaleImageCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScaleImageCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScaleImageCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetWidth", wireType)
			}
			m.TargetWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScaleImageCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetWidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetHeight", wireType)
			}
			m.TargetHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScaleImageCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreserveAspectRatio", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScaleImageCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.PreserveAspectRatio = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAspectRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScaleImageCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScaleImageCalculator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScaleImageCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MinAspectRatio = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAspectRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScaleImageCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScaleImageCalculator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScaleImageCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MaxAspectRatio = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputFormat", wireType)
			}
			m.OutputFormat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScaleImageCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputFormat |= formats.ImageFormat_Format(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			var v ScaleImageCalculatorOptions_ScaleAlgorithm
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScaleImageCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ScaleImageCalculatorOptions_ScaleAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Algorithm = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlignmentBoundary", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScaleImageCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AlignmentBoundary = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetAlignmentPadding", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScaleImageCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.SetAlignmentPadding = &b
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OBSOLETESkipLinearRgbConversion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScaleImageCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.OBSOLETESkipLinearRgbConversion = &b
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostSharpeningCoefficient", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.PostSharpeningCoefficient = &v2
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputFormat", wireType)
			}
			m.InputFormat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScaleImageCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputFormat |= formats.ImageFormat_Format(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleToMultipleOf", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScaleImageCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ScaleToMultipleOf = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseBt709", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScaleImageCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UseBt709 = &b
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetMaxArea", wireType)
			}
			m.TargetMaxArea = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScaleImageCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetMaxArea |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScaleImageCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScaleImageCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScaleImageCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScaleImageCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScaleImageCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScaleImageCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthScaleImageCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupScaleImageCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthScaleImageCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthScaleImageCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScaleImageCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupScaleImageCalculator = fmt.Errorf("proto: unexpected end of group")
)
