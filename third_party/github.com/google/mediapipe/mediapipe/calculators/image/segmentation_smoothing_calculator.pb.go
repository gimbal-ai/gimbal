// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/image/segmentation_smoothing_calculator.proto

package image

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SegmentationSmoothingCalculatorOptions struct {
	CombineWithPreviousRatio *float32 `protobuf:"fixed32,1,opt,name=combine_with_previous_ratio,json=combineWithPreviousRatio,def=0" json:"combine_with_previous_ratio,omitempty"`
}

func (m *SegmentationSmoothingCalculatorOptions) Reset() {
	*m = SegmentationSmoothingCalculatorOptions{}
}
func (*SegmentationSmoothingCalculatorOptions) ProtoMessage() {}
func (*SegmentationSmoothingCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_82a60868470a55ea, []int{0}
}
func (m *SegmentationSmoothingCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentationSmoothingCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentationSmoothingCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentationSmoothingCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentationSmoothingCalculatorOptions.Merge(m, src)
}
func (m *SegmentationSmoothingCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *SegmentationSmoothingCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentationSmoothingCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentationSmoothingCalculatorOptions proto.InternalMessageInfo

const Default_SegmentationSmoothingCalculatorOptions_CombineWithPreviousRatio float32 = 0

func (m *SegmentationSmoothingCalculatorOptions) GetCombineWithPreviousRatio() float32 {
	if m != nil && m.CombineWithPreviousRatio != nil {
		return *m.CombineWithPreviousRatio
	}
	return Default_SegmentationSmoothingCalculatorOptions_CombineWithPreviousRatio
}

var E_SegmentationSmoothingCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*SegmentationSmoothingCalculatorOptions)(nil),
	Field:         377425128,
	Name:          "mediapipe.SegmentationSmoothingCalculatorOptions.ext",
	Tag:           "bytes,377425128,opt,name=ext",
	Filename:      "mediapipe/calculators/image/segmentation_smoothing_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_SegmentationSmoothingCalculatorOptions_Ext)
	proto.RegisterType((*SegmentationSmoothingCalculatorOptions)(nil), "mediapipe.SegmentationSmoothingCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/image/segmentation_smoothing_calculator.proto", fileDescriptor_82a60868470a55ea)
}

var fileDescriptor_82a60868470a55ea = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xb1, 0x4a, 0xc4, 0x40,
	0x10, 0x86, 0x77, 0xb5, 0x32, 0x76, 0x57, 0x05, 0x95, 0x41, 0x44, 0xc4, 0x2a, 0xab, 0xd7, 0x08,
	0x56, 0xe2, 0x3d, 0x80, 0x92, 0x2b, 0x04, 0x9b, 0xb0, 0x17, 0xd7, 0xcd, 0x62, 0x36, 0x13, 0x36,
	0x1b, 0xcf, 0xd2, 0x47, 0xb0, 0xf5, 0x0d, 0xec, 0x7d, 0x09, 0xcb, 0xd8, 0x5d, 0x69, 0x36, 0xcd,
	0x95, 0xf7, 0x00, 0x16, 0x12, 0x38, 0x93, 0x43, 0x41, 0xac, 0xe7, 0xfb, 0xbf, 0xf9, 0x99, 0xf1,
	0x46, 0x5a, 0xdc, 0x28, 0x9e, 0xab, 0x5c, 0xb0, 0x98, 0xa7, 0x71, 0x99, 0x72, 0x8b, 0xa6, 0x60,
	0x4a, 0x73, 0x29, 0x58, 0x21, 0xa4, 0x16, 0x99, 0xe5, 0x56, 0x61, 0x16, 0x15, 0x1a, 0xd1, 0x26,
	0x2a, 0x93, 0x51, 0x0f, 0x06, 0xb9, 0x41, 0x8b, 0x83, 0x8d, 0x4e, 0xb2, 0xb5, 0xdf, 0xfb, 0x6e,
	0x0d, 0xd7, 0x62, 0x8a, 0xe6, 0x8e, 0xfd, 0x0c, 0xec, 0xbd, 0x53, 0xef, 0x60, 0xbc, 0x22, 0x1f,
	0x7f, 0xbb, 0x47, 0x1d, 0x79, 0x91, 0xb7, 0x83, 0x62, 0x70, 0xe6, 0x6d, 0xc7, 0xa8, 0x27, 0x2a,
	0x13, 0xd1, 0x54, 0xd9, 0x24, 0xca, 0x8d, 0xb8, 0x57, 0x58, 0x16, 0x91, 0x69, 0x93, 0x3e, 0xdd,
	0xa5, 0x87, 0x6b, 0xa7, 0xf4, 0x28, 0xf4, 0x97, 0xd4, 0x95, 0xb2, 0xc9, 0xe5, 0x92, 0x09, 0x5b,
	0x64, 0x28, 0xbc, 0x75, 0xf1, 0x60, 0x07, 0x3b, 0x41, 0x57, 0x2d, 0xf8, 0xb5, 0xc6, 0x9f, 0x3f,
	0x7f, 0xbe, 0xb6, 0xae, 0xcd, 0xe1, 0xf1, 0x0a, 0xf7, 0xbf, 0x8e, 0x61, 0xeb, 0x3f, 0xd7, 0x55,
	0x0d, 0x64, 0x56, 0x03, 0x59, 0xd4, 0x40, 0x1f, 0x1d, 0xd0, 0x17, 0x07, 0xf4, 0xcd, 0x01, 0xad,
	0x1c, 0xd0, 0x0f, 0x07, 0x74, 0xee, 0x80, 0x2c, 0x1c, 0xd0, 0xa7, 0x06, 0x48, 0xd5, 0x00, 0x99,
	0x35, 0x40, 0xae, 0x4f, 0xa4, 0xb2, 0x49, 0x39, 0x09, 0x62, 0xd4, 0x4c, 0x22, 0xca, 0x54, 0xb0,
	0xfe, 0x82, 0x7f, 0xfc, 0xe6, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x5a, 0x0d, 0x33, 0xb9, 0x01,
	0x00, 0x00,
}

func (this *SegmentationSmoothingCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SegmentationSmoothingCalculatorOptions)
	if !ok {
		that2, ok := that.(SegmentationSmoothingCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CombineWithPreviousRatio != nil && that1.CombineWithPreviousRatio != nil {
		if *this.CombineWithPreviousRatio != *that1.CombineWithPreviousRatio {
			return false
		}
	} else if this.CombineWithPreviousRatio != nil {
		return false
	} else if that1.CombineWithPreviousRatio != nil {
		return false
	}
	return true
}
func (this *SegmentationSmoothingCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&image.SegmentationSmoothingCalculatorOptions{")
	if this.CombineWithPreviousRatio != nil {
		s = append(s, "CombineWithPreviousRatio: "+valueToGoStringSegmentationSmoothingCalculator(this.CombineWithPreviousRatio, "float32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSegmentationSmoothingCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SegmentationSmoothingCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentationSmoothingCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentationSmoothingCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CombineWithPreviousRatio != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.CombineWithPreviousRatio))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func encodeVarintSegmentationSmoothingCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovSegmentationSmoothingCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SegmentationSmoothingCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CombineWithPreviousRatio != nil {
		n += 5
	}
	return n
}

func sovSegmentationSmoothingCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSegmentationSmoothingCalculator(x uint64) (n int) {
	return sovSegmentationSmoothingCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SegmentationSmoothingCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SegmentationSmoothingCalculatorOptions{`,
		`CombineWithPreviousRatio:` + valueToStringSegmentationSmoothingCalculator(this.CombineWithPreviousRatio) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSegmentationSmoothingCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SegmentationSmoothingCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSegmentationSmoothingCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentationSmoothingCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentationSmoothingCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombineWithPreviousRatio", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.CombineWithPreviousRatio = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipSegmentationSmoothingCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSegmentationSmoothingCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSegmentationSmoothingCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSegmentationSmoothingCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSegmentationSmoothingCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSegmentationSmoothingCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSegmentationSmoothingCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSegmentationSmoothingCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSegmentationSmoothingCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSegmentationSmoothingCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSegmentationSmoothingCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSegmentationSmoothingCalculator = fmt.Errorf("proto: unexpected end of group")
)
