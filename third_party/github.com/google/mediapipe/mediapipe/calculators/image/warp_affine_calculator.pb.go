// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/image/warp_affine_calculator.proto

package image

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	gpu "github.com/google/mediapipe/mediapipe/gpu"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WarpAffineCalculatorOptions_BorderMode int32

const (
	BORDER_UNSPECIFIED WarpAffineCalculatorOptions_BorderMode = 0
	BORDER_ZERO        WarpAffineCalculatorOptions_BorderMode = 1
	BORDER_REPLICATE   WarpAffineCalculatorOptions_BorderMode = 2
)

var WarpAffineCalculatorOptions_BorderMode_name = map[int32]string{
	0: "BORDER_UNSPECIFIED",
	1: "BORDER_ZERO",
	2: "BORDER_REPLICATE",
}

var WarpAffineCalculatorOptions_BorderMode_value = map[string]int32{
	"BORDER_UNSPECIFIED": 0,
	"BORDER_ZERO":        1,
	"BORDER_REPLICATE":   2,
}

func (x WarpAffineCalculatorOptions_BorderMode) Enum() *WarpAffineCalculatorOptions_BorderMode {
	p := new(WarpAffineCalculatorOptions_BorderMode)
	*p = x
	return p
}

func (x WarpAffineCalculatorOptions_BorderMode) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(WarpAffineCalculatorOptions_BorderMode_name, int32(x))
}

func (x *WarpAffineCalculatorOptions_BorderMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WarpAffineCalculatorOptions_BorderMode_value, data, "WarpAffineCalculatorOptions_BorderMode")
	if err != nil {
		return err
	}
	*x = WarpAffineCalculatorOptions_BorderMode(value)
	return nil
}

func (WarpAffineCalculatorOptions_BorderMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5b227256a19aa7d0, []int{0, 0}
}

type WarpAffineCalculatorOptions_Interpolation int32

const (
	INTER_UNSPECIFIED WarpAffineCalculatorOptions_Interpolation = 0
	INTER_LINEAR      WarpAffineCalculatorOptions_Interpolation = 1
	INTER_CUBIC       WarpAffineCalculatorOptions_Interpolation = 2
)

var WarpAffineCalculatorOptions_Interpolation_name = map[int32]string{
	0: "INTER_UNSPECIFIED",
	1: "INTER_LINEAR",
	2: "INTER_CUBIC",
}

var WarpAffineCalculatorOptions_Interpolation_value = map[string]int32{
	"INTER_UNSPECIFIED": 0,
	"INTER_LINEAR":      1,
	"INTER_CUBIC":       2,
}

func (x WarpAffineCalculatorOptions_Interpolation) Enum() *WarpAffineCalculatorOptions_Interpolation {
	p := new(WarpAffineCalculatorOptions_Interpolation)
	*p = x
	return p
}

func (x WarpAffineCalculatorOptions_Interpolation) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(WarpAffineCalculatorOptions_Interpolation_name, int32(x))
}

func (x *WarpAffineCalculatorOptions_Interpolation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WarpAffineCalculatorOptions_Interpolation_value, data, "WarpAffineCalculatorOptions_Interpolation")
	if err != nil {
		return err
	}
	*x = WarpAffineCalculatorOptions_Interpolation(value)
	return nil
}

func (WarpAffineCalculatorOptions_Interpolation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5b227256a19aa7d0, []int{0, 1}
}

type WarpAffineCalculatorOptions struct {
	BorderMode    WarpAffineCalculatorOptions_BorderMode    `protobuf:"varint,1,opt,name=border_mode,json=borderMode,enum=mediapipe.WarpAffineCalculatorOptions_BorderMode" json:"border_mode"`
	GpuOrigin     gpu.GpuOrigin_Mode                        `protobuf:"varint,2,opt,name=gpu_origin,json=gpuOrigin,enum=mediapipe.GpuOrigin_Mode" json:"gpu_origin"`
	Interpolation WarpAffineCalculatorOptions_Interpolation `protobuf:"varint,3,opt,name=interpolation,enum=mediapipe.WarpAffineCalculatorOptions_Interpolation" json:"interpolation"`
}

func (m *WarpAffineCalculatorOptions) Reset()      { *m = WarpAffineCalculatorOptions{} }
func (*WarpAffineCalculatorOptions) ProtoMessage() {}
func (*WarpAffineCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b227256a19aa7d0, []int{0}
}
func (m *WarpAffineCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WarpAffineCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WarpAffineCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WarpAffineCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WarpAffineCalculatorOptions.Merge(m, src)
}
func (m *WarpAffineCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *WarpAffineCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_WarpAffineCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_WarpAffineCalculatorOptions proto.InternalMessageInfo

func (m *WarpAffineCalculatorOptions) GetBorderMode() WarpAffineCalculatorOptions_BorderMode {
	if m != nil {
		return m.BorderMode
	}
	return BORDER_UNSPECIFIED
}

func (m *WarpAffineCalculatorOptions) GetGpuOrigin() gpu.GpuOrigin_Mode {
	if m != nil {
		return m.GpuOrigin
	}
	return gpu.ORIGIN_MODE_DEFAULT
}

func (m *WarpAffineCalculatorOptions) GetInterpolation() WarpAffineCalculatorOptions_Interpolation {
	if m != nil {
		return m.Interpolation
	}
	return INTER_UNSPECIFIED
}

var E_WarpAffineCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*WarpAffineCalculatorOptions)(nil),
	Field:         373693895,
	Name:          "mediapipe.WarpAffineCalculatorOptions.ext",
	Tag:           "bytes,373693895,opt,name=ext",
	Filename:      "mediapipe/calculators/image/warp_affine_calculator.proto",
}

func init() {
	proto.RegisterEnum("mediapipe.WarpAffineCalculatorOptions_BorderMode", WarpAffineCalculatorOptions_BorderMode_name, WarpAffineCalculatorOptions_BorderMode_value)
	proto.RegisterEnum("mediapipe.WarpAffineCalculatorOptions_Interpolation", WarpAffineCalculatorOptions_Interpolation_name, WarpAffineCalculatorOptions_Interpolation_value)
	proto.RegisterExtension(E_WarpAffineCalculatorOptions_Ext)
	proto.RegisterType((*WarpAffineCalculatorOptions)(nil), "mediapipe.WarpAffineCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/image/warp_affine_calculator.proto", fileDescriptor_5b227256a19aa7d0)
}

var fileDescriptor_5b227256a19aa7d0 = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0xef, 0xd2, 0x2e, 0x7d, 0xa1, 0x60, 0x4e, 0x80, 0x42, 0x41, 0x07, 0x8a, 0x10, 0x62,
	0xb2, 0x45, 0x84, 0x04, 0x13, 0x52, 0xec, 0x1a, 0x74, 0xa2, 0x24, 0x95, 0x69, 0x05, 0xca, 0x62,
	0x2e, 0xc9, 0xc5, 0x9c, 0x88, 0x73, 0xa7, 0xab, 0xa3, 0x32, 0xf2, 0x05, 0x90, 0x18, 0xf9, 0x08,
	0xcc, 0xac, 0x7c, 0x00, 0x3a, 0x66, 0xec, 0x84, 0x88, 0xb3, 0x30, 0xf6, 0x23, 0x20, 0xc7, 0xc1,
	0x76, 0x5b, 0xa9, 0xea, 0x70, 0xcb, 0xff, 0xdd, 0xff, 0xf7, 0x7f, 0xef, 0xee, 0xc1, 0xb3, 0x58,
	0x0c, 0x25, 0xd7, 0x52, 0x0b, 0x67, 0xc0, 0xc7, 0x83, 0xe9, 0x98, 0x27, 0xca, 0x1c, 0x38, 0x32,
	0xe6, 0x91, 0x70, 0x0e, 0xb9, 0xd1, 0x21, 0x1f, 0x8d, 0xe4, 0x44, 0x84, 0x65, 0xd5, 0xd6, 0x46,
	0x25, 0x8a, 0x6c, 0x14, 0xce, 0xad, 0x07, 0x25, 0x64, 0x64, 0x78, 0x2c, 0x0e, 0x95, 0xf9, 0xe8,
	0x9c, 0x35, 0x6c, 0xd1, 0xf2, 0x56, 0xa4, 0xa7, 0xd9, 0x09, 0x95, 0x91, 0x91, 0x9c, 0xe4, 0xf5,
	0xe6, 0x97, 0x75, 0xb8, 0xf3, 0x96, 0x1b, 0xdd, 0x5e, 0x06, 0x7a, 0x85, 0xbd, 0xab, 0x13, 0xa9,
	0x26, 0x07, 0xe4, 0x1d, 0xd4, 0xfb, 0xca, 0x0c, 0x85, 0x09, 0x63, 0x35, 0x14, 0x0d, 0x7c, 0x1f,
	0x3f, 0xba, 0xda, 0x7a, 0x6c, 0x17, 0x54, 0xfb, 0x02, 0xb3, 0xed, 0x2e, 0x9d, 0xaf, 0xd5, 0x50,
	0xb8, 0xeb, 0x47, 0xbf, 0xef, 0xa1, 0x00, 0xfa, 0x85, 0x42, 0x9e, 0x03, 0x94, 0xdd, 0x34, 0x6a,
	0x4b, 0xf0, 0xed, 0x0a, 0xf8, 0xa5, 0x9e, 0x76, 0xf3, 0x4e, 0x2b, 0x80, 0x8d, 0xe8, 0xbf, 0x4a,
	0xde, 0xc3, 0xa6, 0x9c, 0x24, 0xc2, 0x68, 0x35, 0xe6, 0x59, 0x5c, 0x63, 0x6d, 0x89, 0x78, 0x72,
	0xc9, 0xde, 0x58, 0xd5, 0xbb, 0xa2, 0x9f, 0x06, 0x36, 0x5f, 0x01, 0x94, 0x13, 0x90, 0x5b, 0x40,
	0xdc, 0x6e, 0xb0, 0xed, 0x07, 0xe1, 0x7e, 0xe7, 0xcd, 0xae, 0xef, 0xb1, 0x17, 0xcc, 0xdf, 0xb6,
	0x10, 0xb9, 0x06, 0xf5, 0x95, 0xde, 0xf3, 0x83, 0xae, 0x85, 0xc9, 0x0d, 0xb0, 0x56, 0x42, 0xe0,
	0xef, 0xee, 0x30, 0xaf, 0xbd, 0xe7, 0x5b, 0xb5, 0x26, 0x83, 0xcd, 0x53, 0x91, 0xe4, 0x26, 0x5c,
	0x67, 0x9d, 0xbd, 0x73, 0x38, 0x0b, 0xae, 0xe4, 0xf2, 0x0e, 0xeb, 0xf8, 0xed, 0xc0, 0xc2, 0x59,
	0x40, 0xae, 0x78, 0xfb, 0x2e, 0xf3, 0xac, 0x5a, 0xab, 0x07, 0x6b, 0xe2, 0x53, 0x42, 0xee, 0x56,
	0x26, 0x3d, 0x37, 0x5f, 0xe3, 0xd7, 0xcf, 0x6f, 0x3f, 0xb2, 0xdf, 0xaa, 0xb7, 0x1e, 0x5e, 0xee,
	0x45, 0x82, 0x0c, 0xea, 0xc6, 0xb3, 0x39, 0x45, 0xc7, 0x73, 0x8a, 0x4e, 0xe6, 0x14, 0x7f, 0x4e,
	0x29, 0xfe, 0x9e, 0x52, 0x7c, 0x94, 0x52, 0x3c, 0x4b, 0x29, 0xfe, 0x93, 0x52, 0xfc, 0x37, 0xa5,
	0xe8, 0x24, 0xa5, 0xf8, 0xeb, 0x82, 0xa2, 0xd9, 0x82, 0xa2, 0xe3, 0x05, 0x45, 0xbd, 0xa7, 0x91,
	0x4c, 0x3e, 0x4c, 0xfb, 0xf6, 0x40, 0xc5, 0x4e, 0xa4, 0x54, 0x34, 0x16, 0x4e, 0xb9, 0x77, 0x17,
	0x2c, 0xfb, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x06, 0x46, 0x2d, 0xdb, 0x0a, 0x03, 0x00, 0x00,
}

func (x WarpAffineCalculatorOptions_BorderMode) String() string {
	s, ok := WarpAffineCalculatorOptions_BorderMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x WarpAffineCalculatorOptions_Interpolation) String() string {
	s, ok := WarpAffineCalculatorOptions_Interpolation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *WarpAffineCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WarpAffineCalculatorOptions)
	if !ok {
		that2, ok := that.(WarpAffineCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BorderMode != that1.BorderMode {
		return false
	}
	if this.GpuOrigin != that1.GpuOrigin {
		return false
	}
	if this.Interpolation != that1.Interpolation {
		return false
	}
	return true
}
func (this *WarpAffineCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&image.WarpAffineCalculatorOptions{")
	s = append(s, "BorderMode: "+fmt.Sprintf("%#v", this.BorderMode)+",\n")
	s = append(s, "GpuOrigin: "+fmt.Sprintf("%#v", this.GpuOrigin)+",\n")
	s = append(s, "Interpolation: "+fmt.Sprintf("%#v", this.Interpolation)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringWarpAffineCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *WarpAffineCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WarpAffineCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WarpAffineCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintWarpAffineCalculator(dAtA, i, uint64(m.Interpolation))
	i--
	dAtA[i] = 0x18
	i = encodeVarintWarpAffineCalculator(dAtA, i, uint64(m.GpuOrigin))
	i--
	dAtA[i] = 0x10
	i = encodeVarintWarpAffineCalculator(dAtA, i, uint64(m.BorderMode))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintWarpAffineCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovWarpAffineCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WarpAffineCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovWarpAffineCalculator(uint64(m.BorderMode))
	n += 1 + sovWarpAffineCalculator(uint64(m.GpuOrigin))
	n += 1 + sovWarpAffineCalculator(uint64(m.Interpolation))
	return n
}

func sovWarpAffineCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWarpAffineCalculator(x uint64) (n int) {
	return sovWarpAffineCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *WarpAffineCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WarpAffineCalculatorOptions{`,
		`BorderMode:` + fmt.Sprintf("%v", this.BorderMode) + `,`,
		`GpuOrigin:` + fmt.Sprintf("%v", this.GpuOrigin) + `,`,
		`Interpolation:` + fmt.Sprintf("%v", this.Interpolation) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringWarpAffineCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *WarpAffineCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWarpAffineCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WarpAffineCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WarpAffineCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorderMode", wireType)
			}
			m.BorderMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWarpAffineCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorderMode |= WarpAffineCalculatorOptions_BorderMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpuOrigin", wireType)
			}
			m.GpuOrigin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWarpAffineCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GpuOrigin |= gpu.GpuOrigin_Mode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interpolation", wireType)
			}
			m.Interpolation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWarpAffineCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interpolation |= WarpAffineCalculatorOptions_Interpolation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWarpAffineCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWarpAffineCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWarpAffineCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWarpAffineCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWarpAffineCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWarpAffineCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWarpAffineCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWarpAffineCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWarpAffineCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWarpAffineCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWarpAffineCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWarpAffineCalculator = fmt.Errorf("proto: unexpected end of group")
)
