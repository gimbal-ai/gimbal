// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/tensor/audio_to_tensor_calculator.proto

package tensor

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AudioToTensorCalculatorOptions_FlushMode int32

const (
	FLUSH_MODE_NONE                         AudioToTensorCalculatorOptions_FlushMode = 0
	FLUSH_MODE_ENTIRE_TAIL_AT_TIMESTAMP_MAX AudioToTensorCalculatorOptions_FlushMode = 1
	FLUSH_MODE_PROCEED_AS_USUAL             AudioToTensorCalculatorOptions_FlushMode = 2
)

var AudioToTensorCalculatorOptions_FlushMode_name = map[int32]string{
	0: "FLUSH_MODE_NONE",
	1: "FLUSH_MODE_ENTIRE_TAIL_AT_TIMESTAMP_MAX",
	2: "FLUSH_MODE_PROCEED_AS_USUAL",
}

var AudioToTensorCalculatorOptions_FlushMode_value = map[string]int32{
	"FLUSH_MODE_NONE":                         0,
	"FLUSH_MODE_ENTIRE_TAIL_AT_TIMESTAMP_MAX": 1,
	"FLUSH_MODE_PROCEED_AS_USUAL":             2,
}

func (x AudioToTensorCalculatorOptions_FlushMode) Enum() *AudioToTensorCalculatorOptions_FlushMode {
	p := new(AudioToTensorCalculatorOptions_FlushMode)
	*p = x
	return p
}

func (x AudioToTensorCalculatorOptions_FlushMode) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(AudioToTensorCalculatorOptions_FlushMode_name, int32(x))
}

func (x *AudioToTensorCalculatorOptions_FlushMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AudioToTensorCalculatorOptions_FlushMode_value, data, "AudioToTensorCalculatorOptions_FlushMode")
	if err != nil {
		return err
	}
	*x = AudioToTensorCalculatorOptions_FlushMode(value)
	return nil
}

func (AudioToTensorCalculatorOptions_FlushMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab52d94dade10931, []int{0, 0}
}

type AudioToTensorCalculatorOptions_DftTensorFormat int32

const (
	A2T_DFT_TENSOR_FORMAT_UNKNOWN AudioToTensorCalculatorOptions_DftTensorFormat = 0
	A2T_WITHOUT_DC_AND_NYQUIST    AudioToTensorCalculatorOptions_DftTensorFormat = 1
	A2T_WITH_NYQUIST              AudioToTensorCalculatorOptions_DftTensorFormat = 2
	A2T_WITH_DC_AND_NYQUIST       AudioToTensorCalculatorOptions_DftTensorFormat = 3
)

var AudioToTensorCalculatorOptions_DftTensorFormat_name = map[int32]string{
	0: "A2T_DFT_TENSOR_FORMAT_UNKNOWN",
	1: "A2T_WITHOUT_DC_AND_NYQUIST",
	2: "A2T_WITH_NYQUIST",
	3: "A2T_WITH_DC_AND_NYQUIST",
}

var AudioToTensorCalculatorOptions_DftTensorFormat_value = map[string]int32{
	"A2T_DFT_TENSOR_FORMAT_UNKNOWN": 0,
	"A2T_WITHOUT_DC_AND_NYQUIST":    1,
	"A2T_WITH_NYQUIST":              2,
	"A2T_WITH_DC_AND_NYQUIST":       3,
}

func (x AudioToTensorCalculatorOptions_DftTensorFormat) Enum() *AudioToTensorCalculatorOptions_DftTensorFormat {
	p := new(AudioToTensorCalculatorOptions_DftTensorFormat)
	*p = x
	return p
}

func (x AudioToTensorCalculatorOptions_DftTensorFormat) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(AudioToTensorCalculatorOptions_DftTensorFormat_name, int32(x))
}

func (x *AudioToTensorCalculatorOptions_DftTensorFormat) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AudioToTensorCalculatorOptions_DftTensorFormat_value, data, "AudioToTensorCalculatorOptions_DftTensorFormat")
	if err != nil {
		return err
	}
	*x = AudioToTensorCalculatorOptions_DftTensorFormat(value)
	return nil
}

func (AudioToTensorCalculatorOptions_DftTensorFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab52d94dade10931, []int{0, 1}
}

type AudioToTensorCalculatorOptions struct {
	NumChannels                 int64                                           `protobuf:"varint,1,opt,name=num_channels,json=numChannels" json:"num_channels"`
	NumSamples                  int64                                           `protobuf:"varint,2,opt,name=num_samples,json=numSamples" json:"num_samples"`
	NumOverlappingSamples       *int64                                          `protobuf:"varint,3,opt,name=num_overlapping_samples,json=numOverlappingSamples,def=0" json:"num_overlapping_samples,omitempty"`
	TargetSampleRate            float64                                         `protobuf:"fixed64,4,opt,name=target_sample_rate,json=targetSampleRate" json:"target_sample_rate"`
	StreamMode                  *bool                                           `protobuf:"varint,5,opt,name=stream_mode,json=streamMode,def=1" json:"stream_mode,omitempty"`
	CheckInconsistentTimestamps *bool                                           `protobuf:"varint,6,opt,name=check_inconsistent_timestamps,json=checkInconsistentTimestamps,def=1" json:"check_inconsistent_timestamps,omitempty"`
	FftSize                     int64                                           `protobuf:"varint,7,opt,name=fft_size,json=fftSize" json:"fft_size"`
	PaddingSamplesBefore        int64                                           `protobuf:"varint,8,opt,name=padding_samples_before,json=paddingSamplesBefore" json:"padding_samples_before"`
	PaddingSamplesAfter         int64                                           `protobuf:"varint,9,opt,name=padding_samples_after,json=paddingSamplesAfter" json:"padding_samples_after"`
	FlushMode                   *AudioToTensorCalculatorOptions_FlushMode       `protobuf:"varint,10,opt,name=flush_mode,json=flushMode,enum=mediapipe.AudioToTensorCalculatorOptions_FlushMode,def=1" json:"flush_mode,omitempty"`
	DftTensorFormat             *AudioToTensorCalculatorOptions_DftTensorFormat `protobuf:"varint,11,opt,name=dft_tensor_format,json=dftTensorFormat,enum=mediapipe.AudioToTensorCalculatorOptions_DftTensorFormat,def=2" json:"dft_tensor_format,omitempty"`
	VolumeGainDb                float64                                         `protobuf:"fixed64,12,opt,name=volume_gain_db,json=volumeGainDb" json:"volume_gain_db"`
	SourceSampleRate            float64                                         `protobuf:"fixed64,13,opt,name=source_sample_rate,json=sourceSampleRate" json:"source_sample_rate"`
}

func (m *AudioToTensorCalculatorOptions) Reset()      { *m = AudioToTensorCalculatorOptions{} }
func (*AudioToTensorCalculatorOptions) ProtoMessage() {}
func (*AudioToTensorCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab52d94dade10931, []int{0}
}
func (m *AudioToTensorCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AudioToTensorCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AudioToTensorCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AudioToTensorCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioToTensorCalculatorOptions.Merge(m, src)
}
func (m *AudioToTensorCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *AudioToTensorCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioToTensorCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_AudioToTensorCalculatorOptions proto.InternalMessageInfo

const Default_AudioToTensorCalculatorOptions_NumOverlappingSamples int64 = 0
const Default_AudioToTensorCalculatorOptions_StreamMode bool = true
const Default_AudioToTensorCalculatorOptions_CheckInconsistentTimestamps bool = true
const Default_AudioToTensorCalculatorOptions_FlushMode AudioToTensorCalculatorOptions_FlushMode = FLUSH_MODE_ENTIRE_TAIL_AT_TIMESTAMP_MAX
const Default_AudioToTensorCalculatorOptions_DftTensorFormat AudioToTensorCalculatorOptions_DftTensorFormat = A2T_WITH_NYQUIST

func (m *AudioToTensorCalculatorOptions) GetNumChannels() int64 {
	if m != nil {
		return m.NumChannels
	}
	return 0
}

func (m *AudioToTensorCalculatorOptions) GetNumSamples() int64 {
	if m != nil {
		return m.NumSamples
	}
	return 0
}

func (m *AudioToTensorCalculatorOptions) GetNumOverlappingSamples() int64 {
	if m != nil && m.NumOverlappingSamples != nil {
		return *m.NumOverlappingSamples
	}
	return Default_AudioToTensorCalculatorOptions_NumOverlappingSamples
}

func (m *AudioToTensorCalculatorOptions) GetTargetSampleRate() float64 {
	if m != nil {
		return m.TargetSampleRate
	}
	return 0
}

func (m *AudioToTensorCalculatorOptions) GetStreamMode() bool {
	if m != nil && m.StreamMode != nil {
		return *m.StreamMode
	}
	return Default_AudioToTensorCalculatorOptions_StreamMode
}

func (m *AudioToTensorCalculatorOptions) GetCheckInconsistentTimestamps() bool {
	if m != nil && m.CheckInconsistentTimestamps != nil {
		return *m.CheckInconsistentTimestamps
	}
	return Default_AudioToTensorCalculatorOptions_CheckInconsistentTimestamps
}

func (m *AudioToTensorCalculatorOptions) GetFftSize() int64 {
	if m != nil {
		return m.FftSize
	}
	return 0
}

func (m *AudioToTensorCalculatorOptions) GetPaddingSamplesBefore() int64 {
	if m != nil {
		return m.PaddingSamplesBefore
	}
	return 0
}

func (m *AudioToTensorCalculatorOptions) GetPaddingSamplesAfter() int64 {
	if m != nil {
		return m.PaddingSamplesAfter
	}
	return 0
}

func (m *AudioToTensorCalculatorOptions) GetFlushMode() AudioToTensorCalculatorOptions_FlushMode {
	if m != nil && m.FlushMode != nil {
		return *m.FlushMode
	}
	return Default_AudioToTensorCalculatorOptions_FlushMode
}

func (m *AudioToTensorCalculatorOptions) GetDftTensorFormat() AudioToTensorCalculatorOptions_DftTensorFormat {
	if m != nil && m.DftTensorFormat != nil {
		return *m.DftTensorFormat
	}
	return Default_AudioToTensorCalculatorOptions_DftTensorFormat
}

func (m *AudioToTensorCalculatorOptions) GetVolumeGainDb() float64 {
	if m != nil {
		return m.VolumeGainDb
	}
	return 0
}

func (m *AudioToTensorCalculatorOptions) GetSourceSampleRate() float64 {
	if m != nil {
		return m.SourceSampleRate
	}
	return 0
}

var E_AudioToTensorCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*AudioToTensorCalculatorOptions)(nil),
	Field:         448635064,
	Name:          "mediapipe.AudioToTensorCalculatorOptions.ext",
	Tag:           "bytes,448635064,opt,name=ext",
	Filename:      "mediapipe/calculators/tensor/audio_to_tensor_calculator.proto",
}

func init() {
	proto.RegisterEnum("mediapipe.AudioToTensorCalculatorOptions_FlushMode", AudioToTensorCalculatorOptions_FlushMode_name, AudioToTensorCalculatorOptions_FlushMode_value)
	proto.RegisterEnum("mediapipe.AudioToTensorCalculatorOptions_DftTensorFormat", AudioToTensorCalculatorOptions_DftTensorFormat_name, AudioToTensorCalculatorOptions_DftTensorFormat_value)
	proto.RegisterExtension(E_AudioToTensorCalculatorOptions_Ext)
	proto.RegisterType((*AudioToTensorCalculatorOptions)(nil), "mediapipe.AudioToTensorCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/tensor/audio_to_tensor_calculator.proto", fileDescriptor_ab52d94dade10931)
}

var fileDescriptor_ab52d94dade10931 = []byte{
	// 768 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4f, 0x6f, 0xe3, 0x44,
	0x18, 0x87, 0x3d, 0x4d, 0x61, 0x9b, 0x69, 0xd9, 0x9a, 0xd9, 0x5d, 0xd6, 0xda, 0xb2, 0x6e, 0xa8,
	0x40, 0x1b, 0x40, 0x4a, 0x50, 0xb8, 0xec, 0x46, 0xe2, 0xe0, 0x26, 0x0e, 0x8d, 0x68, 0xec, 0xc5,
	0x76, 0xb4, 0x80, 0x84, 0x46, 0x13, 0x7b, 0x9c, 0x58, 0x6b, 0xcf, 0x58, 0xf6, 0x78, 0x17, 0x2d,
	0x17, 0x6e, 0x5c, 0x39, 0xf1, 0x19, 0xf8, 0x08, 0x5c, 0xb9, 0xf5, 0xd8, 0x0b, 0x52, 0x4f, 0x88,
	0xa6, 0x17, 0x8e, 0x3d, 0x71, 0x5e, 0x39, 0xce, 0x1f, 0x37, 0x95, 0xaa, 0x1e, 0x3d, 0xef, 0xf3,
	0xbc, 0x9e, 0xf9, 0xcd, 0xab, 0x81, 0x5f, 0x45, 0xd4, 0x0b, 0x48, 0x1c, 0xc4, 0xb4, 0xe9, 0x92,
	0xd0, 0xcd, 0x42, 0x22, 0x78, 0x92, 0x36, 0x05, 0x65, 0x29, 0x4f, 0x9a, 0x24, 0xf3, 0x02, 0x8e,
	0x05, 0xc7, 0xc5, 0x37, 0x5e, 0x21, 0x8d, 0x38, 0xe1, 0x82, 0xa3, 0xea, 0x52, 0x7f, 0xf4, 0xf1,
	0xaa, 0x93, 0x9f, 0x90, 0x88, 0xbe, 0xe6, 0xc9, 0xcb, 0xe6, 0xba, 0x70, 0xf0, 0x7b, 0x15, 0xaa,
	0x5a, 0xde, 0xd5, 0xe1, 0xce, 0xac, 0x67, 0x67, 0x49, 0x98, 0xb1, 0x08, 0x38, 0x4b, 0xd1, 0x13,
	0xb8, 0xc3, 0xb2, 0x08, 0xbb, 0x13, 0xc2, 0x18, 0x0d, 0x53, 0x05, 0xd4, 0x40, 0xbd, 0x72, 0xb8,
	0x79, 0xf2, 0xcf, 0xbe, 0x64, 0x6d, 0xb3, 0x2c, 0xea, 0xcc, 0x0b, 0xe8, 0x13, 0x98, 0x7f, 0xe2,
	0x94, 0x44, 0x71, 0x48, 0x53, 0x65, 0xa3, 0xc4, 0x41, 0x96, 0x45, 0x76, 0xb1, 0x8e, 0x9e, 0xc1,
	0x87, 0x39, 0xc6, 0x5f, 0xd1, 0x24, 0x24, 0x71, 0x1c, 0xb0, 0xf1, 0x52, 0xa9, 0xe4, 0x4a, 0x1b,
	0x7c, 0x61, 0x3d, 0x60, 0x59, 0x64, 0xae, 0x80, 0x85, 0xda, 0x82, 0x48, 0x90, 0x64, 0x4c, 0xc5,
	0xdc, 0xc0, 0x09, 0x11, 0x54, 0xd9, 0xac, 0x81, 0x3a, 0x98, 0xff, 0x48, 0x2e, 0xea, 0x85, 0x60,
	0x11, 0x41, 0xf3, 0x5d, 0xa5, 0x22, 0xa1, 0x24, 0xc2, 0x11, 0xf7, 0xa8, 0xf2, 0x4e, 0x0d, 0xd4,
	0xb7, 0xda, 0x9b, 0x22, 0xc9, 0xa8, 0x05, 0x8b, 0xc2, 0x80, 0x7b, 0x14, 0x1d, 0xc1, 0xc7, 0xee,
	0x84, 0xba, 0x2f, 0x71, 0xc0, 0x5c, 0xce, 0xd2, 0x20, 0x15, 0x94, 0x09, 0x2c, 0x82, 0x88, 0xa6,
	0x82, 0x44, 0x71, 0xaa, 0xbc, 0x5b, 0x12, 0xf7, 0x66, 0x68, 0xbf, 0x44, 0x3a, 0x4b, 0x10, 0xed,
	0xc3, 0x2d, 0xdf, 0x17, 0x38, 0x0d, 0xde, 0x50, 0xe5, 0x4e, 0x29, 0x83, 0x3b, 0xbe, 0x2f, 0xec,
	0xe0, 0x0d, 0x45, 0x6d, 0xf8, 0x41, 0x4c, 0x3c, 0xaf, 0x74, 0x70, 0x3c, 0xa2, 0x3e, 0x4f, 0xa8,
	0xb2, 0x55, 0xc2, 0xef, 0xcf, 0x99, 0xf9, 0xd9, 0x0f, 0x67, 0x04, 0x7a, 0x0a, 0x1f, 0xac, 0xbb,
	0xc4, 0x17, 0x34, 0x51, 0xaa, 0x25, 0xf5, 0xde, 0x55, 0x55, 0xcb, 0x01, 0xf4, 0x33, 0x84, 0x7e,
	0x98, 0xa5, 0x93, 0x22, 0x06, 0x58, 0x03, 0xf5, 0xbb, 0xad, 0x2f, 0x1b, 0xcb, 0x21, 0x69, 0xdc,
	0x3c, 0x05, 0x8d, 0x5e, 0xee, 0xe6, 0x49, 0xb5, 0x9f, 0xf4, 0x8e, 0x87, 0xf6, 0x11, 0x1e, 0x98,
	0x5d, 0x1d, 0xeb, 0x86, 0xd3, 0xb7, 0x74, 0xec, 0x68, 0xfd, 0x63, 0xac, 0x39, 0xd8, 0xe9, 0x0f,
	0x74, 0xdb, 0xd1, 0x06, 0xcf, 0xf1, 0x40, 0xfb, 0xce, 0xaa, 0xfa, 0x0b, 0x07, 0xbd, 0x86, 0xef,
	0x7b, 0xbe, 0x58, 0x8c, 0xad, 0xcf, 0x93, 0x88, 0x08, 0x65, 0x7b, 0xb6, 0x87, 0x67, 0xb7, 0xdf,
	0x43, 0xd7, 0x17, 0x45, 0xa9, 0x37, 0x6b, 0xd0, 0x96, 0xb5, 0x96, 0x83, 0x5f, 0xf4, 0x9d, 0x23,
	0x6c, 0x7c, 0xff, 0xed, 0xb0, 0x6f, 0x3b, 0xd6, 0xae, 0x77, 0x15, 0x41, 0x9f, 0xc1, 0xbb, 0xaf,
	0x78, 0x98, 0x45, 0x14, 0x8f, 0x49, 0xc0, 0xb0, 0x37, 0x52, 0x76, 0x4a, 0xd3, 0xb2, 0x53, 0xd4,
	0xbe, 0x26, 0x01, 0xeb, 0x8e, 0xf2, 0xe9, 0x4a, 0x79, 0x96, 0xb8, 0xf4, 0xca, 0x74, 0xbd, 0x57,
	0x9e, 0xae, 0xa2, 0xbe, 0x9a, 0xae, 0x03, 0x06, 0xab, 0xcb, 0x64, 0xd0, 0x3d, 0xb8, 0x5b, 0xca,
	0xc6, 0x30, 0x0d, 0x5d, 0x96, 0xd0, 0xe7, 0xf0, 0xb6, 0x81, 0xc9, 0x00, 0xed, 0xc3, 0xbd, 0x12,
	0xfc, 0xdc, 0x32, 0x3b, 0xba, 0xde, 0xc5, 0x9a, 0x8d, 0x87, 0xf6, 0x50, 0x3b, 0x96, 0x37, 0x0e,
	0x7e, 0x05, 0x70, 0x77, 0x2d, 0x06, 0xf4, 0x11, 0x7c, 0x9c, 0x07, 0xd1, 0xed, 0x39, 0xd8, 0xd1,
	0x0d, 0xdb, 0xb4, 0x70, 0xcf, 0xb4, 0x06, 0x9a, 0x83, 0x87, 0xc6, 0x37, 0x86, 0xf9, 0xc2, 0x90,
	0x25, 0xa4, 0xc2, 0x47, 0x8b, 0xac, 0xcc, 0xa1, 0x83, 0xbb, 0x1d, 0xac, 0x19, 0xdd, 0x45, 0x6a,
	0x32, 0x40, 0xf7, 0xe1, 0xb5, 0x2c, 0xe5, 0x0d, 0xb4, 0x07, 0x1f, 0x2e, 0x57, 0xd7, 0x94, 0x4a,
	0xeb, 0x47, 0x58, 0xa1, 0x3f, 0x09, 0xf4, 0x61, 0xe9, 0xfa, 0xae, 0xdd, 0x98, 0xf2, 0xe7, 0x5f,
	0xff, 0xff, 0x9d, 0xbf, 0x17, 0xdb, 0xad, 0x4f, 0x6f, 0x7d, 0xcd, 0x56, 0xde, 0xf7, 0x90, 0x9d,
	0x9e, 0xab, 0xd2, 0xd9, 0xb9, 0x2a, 0x5d, 0x9e, 0xab, 0xe0, 0x97, 0xa9, 0x0a, 0xfe, 0x98, 0xaa,
	0xe0, 0x64, 0xaa, 0x82, 0xd3, 0xa9, 0x0a, 0xfe, 0x9d, 0xaa, 0xe0, 0xbf, 0xa9, 0x2a, 0x5d, 0x4e,
	0x55, 0xf0, 0xdb, 0x85, 0x2a, 0x9d, 0x5e, 0xa8, 0xd2, 0xd9, 0x85, 0x2a, 0xfd, 0xf0, 0x74, 0x1c,
	0x88, 0x49, 0x36, 0x6a, 0xb8, 0x3c, 0x6a, 0x8e, 0x39, 0x1f, 0x87, 0xb4, 0xb9, 0x7a, 0x06, 0x6f,
	0x7a, 0x5a, 0xdf, 0x06, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x17, 0x94, 0x45, 0x79, 0x05, 0x00, 0x00,
}

func (x AudioToTensorCalculatorOptions_FlushMode) String() string {
	s, ok := AudioToTensorCalculatorOptions_FlushMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AudioToTensorCalculatorOptions_DftTensorFormat) String() string {
	s, ok := AudioToTensorCalculatorOptions_DftTensorFormat_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *AudioToTensorCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AudioToTensorCalculatorOptions)
	if !ok {
		that2, ok := that.(AudioToTensorCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NumChannels != that1.NumChannels {
		return false
	}
	if this.NumSamples != that1.NumSamples {
		return false
	}
	if this.NumOverlappingSamples != nil && that1.NumOverlappingSamples != nil {
		if *this.NumOverlappingSamples != *that1.NumOverlappingSamples {
			return false
		}
	} else if this.NumOverlappingSamples != nil {
		return false
	} else if that1.NumOverlappingSamples != nil {
		return false
	}
	if this.TargetSampleRate != that1.TargetSampleRate {
		return false
	}
	if this.StreamMode != nil && that1.StreamMode != nil {
		if *this.StreamMode != *that1.StreamMode {
			return false
		}
	} else if this.StreamMode != nil {
		return false
	} else if that1.StreamMode != nil {
		return false
	}
	if this.CheckInconsistentTimestamps != nil && that1.CheckInconsistentTimestamps != nil {
		if *this.CheckInconsistentTimestamps != *that1.CheckInconsistentTimestamps {
			return false
		}
	} else if this.CheckInconsistentTimestamps != nil {
		return false
	} else if that1.CheckInconsistentTimestamps != nil {
		return false
	}
	if this.FftSize != that1.FftSize {
		return false
	}
	if this.PaddingSamplesBefore != that1.PaddingSamplesBefore {
		return false
	}
	if this.PaddingSamplesAfter != that1.PaddingSamplesAfter {
		return false
	}
	if this.FlushMode != nil && that1.FlushMode != nil {
		if *this.FlushMode != *that1.FlushMode {
			return false
		}
	} else if this.FlushMode != nil {
		return false
	} else if that1.FlushMode != nil {
		return false
	}
	if this.DftTensorFormat != nil && that1.DftTensorFormat != nil {
		if *this.DftTensorFormat != *that1.DftTensorFormat {
			return false
		}
	} else if this.DftTensorFormat != nil {
		return false
	} else if that1.DftTensorFormat != nil {
		return false
	}
	if this.VolumeGainDb != that1.VolumeGainDb {
		return false
	}
	if this.SourceSampleRate != that1.SourceSampleRate {
		return false
	}
	return true
}
func (this *AudioToTensorCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&tensor.AudioToTensorCalculatorOptions{")
	s = append(s, "NumChannels: "+fmt.Sprintf("%#v", this.NumChannels)+",\n")
	s = append(s, "NumSamples: "+fmt.Sprintf("%#v", this.NumSamples)+",\n")
	if this.NumOverlappingSamples != nil {
		s = append(s, "NumOverlappingSamples: "+valueToGoStringAudioToTensorCalculator(this.NumOverlappingSamples, "int64")+",\n")
	}
	s = append(s, "TargetSampleRate: "+fmt.Sprintf("%#v", this.TargetSampleRate)+",\n")
	if this.StreamMode != nil {
		s = append(s, "StreamMode: "+valueToGoStringAudioToTensorCalculator(this.StreamMode, "bool")+",\n")
	}
	if this.CheckInconsistentTimestamps != nil {
		s = append(s, "CheckInconsistentTimestamps: "+valueToGoStringAudioToTensorCalculator(this.CheckInconsistentTimestamps, "bool")+",\n")
	}
	s = append(s, "FftSize: "+fmt.Sprintf("%#v", this.FftSize)+",\n")
	s = append(s, "PaddingSamplesBefore: "+fmt.Sprintf("%#v", this.PaddingSamplesBefore)+",\n")
	s = append(s, "PaddingSamplesAfter: "+fmt.Sprintf("%#v", this.PaddingSamplesAfter)+",\n")
	if this.FlushMode != nil {
		s = append(s, "FlushMode: "+valueToGoStringAudioToTensorCalculator(this.FlushMode, "AudioToTensorCalculatorOptions_FlushMode")+",\n")
	}
	if this.DftTensorFormat != nil {
		s = append(s, "DftTensorFormat: "+valueToGoStringAudioToTensorCalculator(this.DftTensorFormat, "AudioToTensorCalculatorOptions_DftTensorFormat")+",\n")
	}
	s = append(s, "VolumeGainDb: "+fmt.Sprintf("%#v", this.VolumeGainDb)+",\n")
	s = append(s, "SourceSampleRate: "+fmt.Sprintf("%#v", this.SourceSampleRate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAudioToTensorCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AudioToTensorCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioToTensorCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AudioToTensorCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SourceSampleRate))))
	i--
	dAtA[i] = 0x69
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.VolumeGainDb))))
	i--
	dAtA[i] = 0x61
	if m.DftTensorFormat != nil {
		i = encodeVarintAudioToTensorCalculator(dAtA, i, uint64(*m.DftTensorFormat))
		i--
		dAtA[i] = 0x58
	}
	if m.FlushMode != nil {
		i = encodeVarintAudioToTensorCalculator(dAtA, i, uint64(*m.FlushMode))
		i--
		dAtA[i] = 0x50
	}
	i = encodeVarintAudioToTensorCalculator(dAtA, i, uint64(m.PaddingSamplesAfter))
	i--
	dAtA[i] = 0x48
	i = encodeVarintAudioToTensorCalculator(dAtA, i, uint64(m.PaddingSamplesBefore))
	i--
	dAtA[i] = 0x40
	i = encodeVarintAudioToTensorCalculator(dAtA, i, uint64(m.FftSize))
	i--
	dAtA[i] = 0x38
	if m.CheckInconsistentTimestamps != nil {
		i--
		if *m.CheckInconsistentTimestamps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.StreamMode != nil {
		i--
		if *m.StreamMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TargetSampleRate))))
	i--
	dAtA[i] = 0x21
	if m.NumOverlappingSamples != nil {
		i = encodeVarintAudioToTensorCalculator(dAtA, i, uint64(*m.NumOverlappingSamples))
		i--
		dAtA[i] = 0x18
	}
	i = encodeVarintAudioToTensorCalculator(dAtA, i, uint64(m.NumSamples))
	i--
	dAtA[i] = 0x10
	i = encodeVarintAudioToTensorCalculator(dAtA, i, uint64(m.NumChannels))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintAudioToTensorCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovAudioToTensorCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AudioToTensorCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAudioToTensorCalculator(uint64(m.NumChannels))
	n += 1 + sovAudioToTensorCalculator(uint64(m.NumSamples))
	if m.NumOverlappingSamples != nil {
		n += 1 + sovAudioToTensorCalculator(uint64(*m.NumOverlappingSamples))
	}
	n += 9
	if m.StreamMode != nil {
		n += 2
	}
	if m.CheckInconsistentTimestamps != nil {
		n += 2
	}
	n += 1 + sovAudioToTensorCalculator(uint64(m.FftSize))
	n += 1 + sovAudioToTensorCalculator(uint64(m.PaddingSamplesBefore))
	n += 1 + sovAudioToTensorCalculator(uint64(m.PaddingSamplesAfter))
	if m.FlushMode != nil {
		n += 1 + sovAudioToTensorCalculator(uint64(*m.FlushMode))
	}
	if m.DftTensorFormat != nil {
		n += 1 + sovAudioToTensorCalculator(uint64(*m.DftTensorFormat))
	}
	n += 9
	n += 9
	return n
}

func sovAudioToTensorCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAudioToTensorCalculator(x uint64) (n int) {
	return sovAudioToTensorCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AudioToTensorCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AudioToTensorCalculatorOptions{`,
		`NumChannels:` + fmt.Sprintf("%v", this.NumChannels) + `,`,
		`NumSamples:` + fmt.Sprintf("%v", this.NumSamples) + `,`,
		`NumOverlappingSamples:` + valueToStringAudioToTensorCalculator(this.NumOverlappingSamples) + `,`,
		`TargetSampleRate:` + fmt.Sprintf("%v", this.TargetSampleRate) + `,`,
		`StreamMode:` + valueToStringAudioToTensorCalculator(this.StreamMode) + `,`,
		`CheckInconsistentTimestamps:` + valueToStringAudioToTensorCalculator(this.CheckInconsistentTimestamps) + `,`,
		`FftSize:` + fmt.Sprintf("%v", this.FftSize) + `,`,
		`PaddingSamplesBefore:` + fmt.Sprintf("%v", this.PaddingSamplesBefore) + `,`,
		`PaddingSamplesAfter:` + fmt.Sprintf("%v", this.PaddingSamplesAfter) + `,`,
		`FlushMode:` + valueToStringAudioToTensorCalculator(this.FlushMode) + `,`,
		`DftTensorFormat:` + valueToStringAudioToTensorCalculator(this.DftTensorFormat) + `,`,
		`VolumeGainDb:` + fmt.Sprintf("%v", this.VolumeGainDb) + `,`,
		`SourceSampleRate:` + fmt.Sprintf("%v", this.SourceSampleRate) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAudioToTensorCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AudioToTensorCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudioToTensorCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioToTensorCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioToTensorCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumChannels", wireType)
			}
			m.NumChannels = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudioToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumChannels |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSamples", wireType)
			}
			m.NumSamples = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudioToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSamples |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOverlappingSamples", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudioToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumOverlappingSamples = &v
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSampleRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TargetSampleRate = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudioToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.StreamMode = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckInconsistentTimestamps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudioToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CheckInconsistentTimestamps = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FftSize", wireType)
			}
			m.FftSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudioToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FftSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaddingSamplesBefore", wireType)
			}
			m.PaddingSamplesBefore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudioToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaddingSamplesBefore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaddingSamplesAfter", wireType)
			}
			m.PaddingSamplesAfter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudioToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaddingSamplesAfter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushMode", wireType)
			}
			var v AudioToTensorCalculatorOptions_FlushMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudioToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= AudioToTensorCalculatorOptions_FlushMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlushMode = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DftTensorFormat", wireType)
			}
			var v AudioToTensorCalculatorOptions_DftTensorFormat
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudioToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= AudioToTensorCalculatorOptions_DftTensorFormat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DftTensorFormat = &v
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeGainDb", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.VolumeGainDb = float64(math.Float64frombits(v))
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceSampleRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SourceSampleRate = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipAudioToTensorCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAudioToTensorCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAudioToTensorCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAudioToTensorCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudioToTensorCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudioToTensorCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAudioToTensorCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAudioToTensorCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAudioToTensorCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAudioToTensorCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAudioToTensorCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAudioToTensorCalculator = fmt.Errorf("proto: unexpected end of group")
)
