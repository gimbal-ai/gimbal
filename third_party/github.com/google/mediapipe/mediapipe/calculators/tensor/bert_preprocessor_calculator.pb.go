// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/tensor/bert_preprocessor_calculator.proto

package tensor

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BertPreprocessorCalculatorOptions struct {
	BertMaxSeqLen          int32 `protobuf:"varint,1,opt,name=bert_max_seq_len,json=bertMaxSeqLen" json:"bert_max_seq_len"`
	HasDynamicInputTensors bool  `protobuf:"varint,2,opt,name=has_dynamic_input_tensors,json=hasDynamicInputTensors" json:"has_dynamic_input_tensors"`
}

func (m *BertPreprocessorCalculatorOptions) Reset()      { *m = BertPreprocessorCalculatorOptions{} }
func (*BertPreprocessorCalculatorOptions) ProtoMessage() {}
func (*BertPreprocessorCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_48415e164cb0b070, []int{0}
}
func (m *BertPreprocessorCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BertPreprocessorCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BertPreprocessorCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BertPreprocessorCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BertPreprocessorCalculatorOptions.Merge(m, src)
}
func (m *BertPreprocessorCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *BertPreprocessorCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BertPreprocessorCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BertPreprocessorCalculatorOptions proto.InternalMessageInfo

func (m *BertPreprocessorCalculatorOptions) GetBertMaxSeqLen() int32 {
	if m != nil {
		return m.BertMaxSeqLen
	}
	return 0
}

func (m *BertPreprocessorCalculatorOptions) GetHasDynamicInputTensors() bool {
	if m != nil {
		return m.HasDynamicInputTensors
	}
	return false
}

var E_BertPreprocessorCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*BertPreprocessorCalculatorOptions)(nil),
	Field:         462509271,
	Name:          "mediapipe.BertPreprocessorCalculatorOptions.ext",
	Tag:           "bytes,462509271,opt,name=ext",
	Filename:      "mediapipe/calculators/tensor/bert_preprocessor_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_BertPreprocessorCalculatorOptions_Ext)
	proto.RegisterType((*BertPreprocessorCalculatorOptions)(nil), "mediapipe.BertPreprocessorCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/tensor/bert_preprocessor_calculator.proto", fileDescriptor_48415e164cb0b070)
}

var fileDescriptor_48415e164cb0b070 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x31, 0x4b, 0x33, 0x31,
	0x1c, 0xc6, 0x93, 0xf7, 0x55, 0xd0, 0x13, 0x41, 0x6e, 0x90, 0x2a, 0xf2, 0xb7, 0x8a, 0x43, 0x07,
	0xbd, 0x83, 0x4e, 0x6e, 0x85, 0xea, 0x22, 0x28, 0x4a, 0x75, 0x72, 0x89, 0xe9, 0xf5, 0x6f, 0x7b,
	0x78, 0x97, 0xa4, 0x49, 0x8a, 0x75, 0xf3, 0x23, 0xf8, 0x31, 0xf4, 0x83, 0x08, 0x1d, 0xbb, 0xd9,
	0x41, 0xc4, 0xa6, 0x8b, 0x63, 0x17, 0x77, 0x39, 0x2b, 0x6d, 0x51, 0xd0, 0x39, 0xbf, 0xe7, 0x97,
	0xe7, 0x49, 0xbc, 0x52, 0x8a, 0xb5, 0x98, 0xab, 0x58, 0x61, 0x18, 0xf1, 0x24, 0x6a, 0x25, 0xdc,
	0x4a, 0x6d, 0x42, 0x8b, 0xc2, 0x48, 0x1d, 0x56, 0x51, 0x5b, 0xa6, 0x34, 0x2a, 0x2d, 0x23, 0x34,
	0x46, 0x6a, 0x36, 0x81, 0x02, 0xa5, 0xa5, 0x95, 0xfe, 0xfc, 0x58, 0xb0, 0xba, 0x35, 0x71, 0x5d,
	0x6a, 0x9e, 0xe2, 0xb5, 0xd4, 0x57, 0xe1, 0xf7, 0xc0, 0xe6, 0x3b, 0xf5, 0x36, 0xca, 0xa8, 0xed,
	0xc9, 0x94, 0x76, 0x6f, 0x0c, 0x1d, 0x2b, 0x1b, 0x4b, 0x61, 0xfc, 0x1d, 0x6f, 0xe9, 0xf3, 0xf2,
	0x94, 0xb7, 0x99, 0xc1, 0x26, 0x4b, 0x50, 0xe4, 0x68, 0x9e, 0x16, 0x66, 0xcb, 0x33, 0x9d, 0x97,
	0x75, 0x52, 0x59, 0xcc, 0x4e, 0x8f, 0x78, 0xfb, 0x14, 0x9b, 0x87, 0x28, 0xfc, 0x92, 0xb7, 0xd2,
	0xe0, 0x86, 0xd5, 0x6e, 0x04, 0x4f, 0xe3, 0x88, 0xc5, 0x42, 0xb5, 0x2c, 0x1b, 0x8d, 0x30, 0xb9,
	0x7f, 0x79, 0x5a, 0x98, 0xfb, 0xca, 0x2d, 0x37, 0xb8, 0xd9, 0x1f, 0x51, 0x07, 0x19, 0x74, 0x36,
	0x62, 0x8a, 0x17, 0xde, 0x7f, 0x6c, 0x5b, 0x7f, 0x2d, 0x18, 0x6f, 0x08, 0x7e, 0x94, 0xca, 0x3d,
	0x3d, 0x3c, 0x3e, 0x67, 0x25, 0x16, 0x8a, 0xdb, 0x53, 0xdc, 0x9f, 0x63, 0x2a, 0x99, 0xba, 0x2c,
	0xba, 0x7d, 0x20, 0xbd, 0x3e, 0x90, 0x61, 0x1f, 0xe8, 0xad, 0x03, 0x7a, 0xef, 0x80, 0x76, 0x1c,
	0xd0, 0xae, 0x03, 0xfa, 0xea, 0x80, 0xbe, 0x39, 0x20, 0x43, 0x07, 0xf4, 0x6e, 0x00, 0xa4, 0x3b,
	0x00, 0xd2, 0x1b, 0x00, 0x39, 0xdf, 0xad, 0xc7, 0xb6, 0xd1, 0xaa, 0x06, 0x91, 0x4c, 0xc3, 0xba,
	0x94, 0xf5, 0x04, 0xc3, 0xc9, 0x2b, 0xff, 0xf6, 0x77, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfe,
	0xbc, 0x86, 0x66, 0xda, 0x01, 0x00, 0x00,
}

func (this *BertPreprocessorCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BertPreprocessorCalculatorOptions)
	if !ok {
		that2, ok := that.(BertPreprocessorCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BertMaxSeqLen != that1.BertMaxSeqLen {
		return false
	}
	if this.HasDynamicInputTensors != that1.HasDynamicInputTensors {
		return false
	}
	return true
}
func (this *BertPreprocessorCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensor.BertPreprocessorCalculatorOptions{")
	s = append(s, "BertMaxSeqLen: "+fmt.Sprintf("%#v", this.BertMaxSeqLen)+",\n")
	s = append(s, "HasDynamicInputTensors: "+fmt.Sprintf("%#v", this.HasDynamicInputTensors)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBertPreprocessorCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BertPreprocessorCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BertPreprocessorCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BertPreprocessorCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.HasDynamicInputTensors {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintBertPreprocessorCalculator(dAtA, i, uint64(m.BertMaxSeqLen))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintBertPreprocessorCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovBertPreprocessorCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BertPreprocessorCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovBertPreprocessorCalculator(uint64(m.BertMaxSeqLen))
	n += 2
	return n
}

func sovBertPreprocessorCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBertPreprocessorCalculator(x uint64) (n int) {
	return sovBertPreprocessorCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BertPreprocessorCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BertPreprocessorCalculatorOptions{`,
		`BertMaxSeqLen:` + fmt.Sprintf("%v", this.BertMaxSeqLen) + `,`,
		`HasDynamicInputTensors:` + fmt.Sprintf("%v", this.HasDynamicInputTensors) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBertPreprocessorCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BertPreprocessorCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertPreprocessorCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BertPreprocessorCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BertPreprocessorCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BertMaxSeqLen", wireType)
			}
			m.BertMaxSeqLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertPreprocessorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BertMaxSeqLen |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasDynamicInputTensors", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertPreprocessorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasDynamicInputTensors = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBertPreprocessorCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBertPreprocessorCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBertPreprocessorCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBertPreprocessorCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBertPreprocessorCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBertPreprocessorCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBertPreprocessorCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBertPreprocessorCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBertPreprocessorCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBertPreprocessorCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBertPreprocessorCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBertPreprocessorCalculator = fmt.Errorf("proto: unexpected end of group")
)
