// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/tensor/feedback_tensors_calculator.proto

package tensor

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation int32

const (
	FEEDBACK_NONE      FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation = 0
	FEEDBACK_PREPENDED FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation = 1
	FEEDBACK_APPENDED  FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation = 2
)

var FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation_name = map[int32]string{
	0: "FEEDBACK_NONE",
	1: "FEEDBACK_PREPENDED",
	2: "FEEDBACK_APPENDED",
}

var FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation_value = map[string]int32{
	"FEEDBACK_NONE":      0,
	"FEEDBACK_PREPENDED": 1,
	"FEEDBACK_APPENDED":  2,
}

func (x FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation) Enum() *FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation {
	p := new(FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation)
	*p = x
	return p
}

func (x FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation_name, int32(x))
}

func (x *FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation_value, data, "FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation")
	if err != nil {
		return err
	}
	*x = FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation(value)
	return nil
}

func (FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_28f51b59b3f27194, []int{0, 0}
}

type FeedbackTensorsCalculatorOptions struct {
	FeedbackTensorShape *FeedbackTensorsCalculatorOptions_TensorShape             `protobuf:"bytes,1,opt,name=feedback_tensor_shape,json=feedbackTensorShape" json:"feedback_tensor_shape,omitempty"`
	NumFeedbackTensors  *int32                                                    `protobuf:"varint,2,opt,name=num_feedback_tensors,json=numFeedbackTensors,def=1" json:"num_feedback_tensors,omitempty"`
	Location            *FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation `protobuf:"varint,3,opt,name=location,enum=mediapipe.FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation,def=2" json:"location,omitempty"`
}

func (m *FeedbackTensorsCalculatorOptions) Reset()      { *m = FeedbackTensorsCalculatorOptions{} }
func (*FeedbackTensorsCalculatorOptions) ProtoMessage() {}
func (*FeedbackTensorsCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_28f51b59b3f27194, []int{0}
}
func (m *FeedbackTensorsCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedbackTensorsCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedbackTensorsCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedbackTensorsCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedbackTensorsCalculatorOptions.Merge(m, src)
}
func (m *FeedbackTensorsCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *FeedbackTensorsCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedbackTensorsCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FeedbackTensorsCalculatorOptions proto.InternalMessageInfo

const Default_FeedbackTensorsCalculatorOptions_NumFeedbackTensors int32 = 1
const Default_FeedbackTensorsCalculatorOptions_Location FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation = FEEDBACK_APPENDED

func (m *FeedbackTensorsCalculatorOptions) GetFeedbackTensorShape() *FeedbackTensorsCalculatorOptions_TensorShape {
	if m != nil {
		return m.FeedbackTensorShape
	}
	return nil
}

func (m *FeedbackTensorsCalculatorOptions) GetNumFeedbackTensors() int32 {
	if m != nil && m.NumFeedbackTensors != nil {
		return *m.NumFeedbackTensors
	}
	return Default_FeedbackTensorsCalculatorOptions_NumFeedbackTensors
}

func (m *FeedbackTensorsCalculatorOptions) GetLocation() FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return Default_FeedbackTensorsCalculatorOptions_Location
}

var E_FeedbackTensorsCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*FeedbackTensorsCalculatorOptions)(nil),
	Field:         474496252,
	Name:          "mediapipe.FeedbackTensorsCalculatorOptions.ext",
	Tag:           "bytes,474496252,opt,name=ext",
	Filename:      "mediapipe/calculators/tensor/feedback_tensors_calculator.proto",
}

type FeedbackTensorsCalculatorOptions_TensorShape struct {
	Dims []int32 `protobuf:"varint,1,rep,packed,name=dims" json:"dims,omitempty"`
}

func (m *FeedbackTensorsCalculatorOptions_TensorShape) Reset() {
	*m = FeedbackTensorsCalculatorOptions_TensorShape{}
}
func (*FeedbackTensorsCalculatorOptions_TensorShape) ProtoMessage() {}
func (*FeedbackTensorsCalculatorOptions_TensorShape) Descriptor() ([]byte, []int) {
	return fileDescriptor_28f51b59b3f27194, []int{0, 0}
}
func (m *FeedbackTensorsCalculatorOptions_TensorShape) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedbackTensorsCalculatorOptions_TensorShape) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedbackTensorsCalculatorOptions_TensorShape.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedbackTensorsCalculatorOptions_TensorShape) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedbackTensorsCalculatorOptions_TensorShape.Merge(m, src)
}
func (m *FeedbackTensorsCalculatorOptions_TensorShape) XXX_Size() int {
	return m.Size()
}
func (m *FeedbackTensorsCalculatorOptions_TensorShape) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedbackTensorsCalculatorOptions_TensorShape.DiscardUnknown(m)
}

var xxx_messageInfo_FeedbackTensorsCalculatorOptions_TensorShape proto.InternalMessageInfo

func (m *FeedbackTensorsCalculatorOptions_TensorShape) GetDims() []int32 {
	if m != nil {
		return m.Dims
	}
	return nil
}

func init() {
	proto.RegisterEnum("mediapipe.FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation", FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation_name, FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation_value)
	proto.RegisterExtension(E_FeedbackTensorsCalculatorOptions_Ext)
	proto.RegisterType((*FeedbackTensorsCalculatorOptions)(nil), "mediapipe.FeedbackTensorsCalculatorOptions")
	proto.RegisterType((*FeedbackTensorsCalculatorOptions_TensorShape)(nil), "mediapipe.FeedbackTensorsCalculatorOptions.TensorShape")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/tensor/feedback_tensors_calculator.proto", fileDescriptor_28f51b59b3f27194)
}

var fileDescriptor_28f51b59b3f27194 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0xcb, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f,
	0x2a, 0xd6, 0x2f, 0x49, 0xcd, 0x2b, 0xce, 0x2f, 0xd2, 0x4f, 0x4b, 0x4d, 0x4d, 0x49, 0x4a, 0x4c,
	0xce, 0x8e, 0x87, 0xf0, 0x8b, 0xe3, 0x11, 0x6a, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38,
	0xe1, 0xfa, 0xa5, 0x54, 0x10, 0x46, 0xa5, 0x15, 0x25, 0xe6, 0xa6, 0x96, 0xe7, 0x17, 0x65, 0xeb,
	0xa3, 0x6b, 0x50, 0x9a, 0xcb, 0xc2, 0xa5, 0xe0, 0x06, 0x35, 0x36, 0x04, 0x62, 0xaa, 0x33, 0x5c,
	0x8d, 0x7f, 0x41, 0x49, 0x66, 0x7e, 0x5e, 0xb1, 0x50, 0x36, 0x97, 0x28, 0x9a, 0xd5, 0xf1, 0xc5,
	0x19, 0x89, 0x05, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0xe6, 0x7a, 0x70, 0xab, 0xf4,
	0x08, 0x99, 0xa5, 0x07, 0x91, 0x08, 0x06, 0x69, 0x0f, 0x12, 0x4e, 0x43, 0x51, 0x0d, 0x16, 0x14,
	0x32, 0xe6, 0x12, 0xc9, 0x2b, 0xcd, 0x8d, 0x47, 0xf7, 0xab, 0x04, 0x93, 0x02, 0xa3, 0x06, 0xab,
	0x15, 0xa3, 0x61, 0x90, 0x50, 0x5e, 0x69, 0x2e, 0x9a, 0x35, 0x42, 0x45, 0x5c, 0x1c, 0x39, 0xf9,
	0xc9, 0x89, 0x20, 0x2b, 0x24, 0x98, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0x9c, 0x49, 0x71, 0x14, 0x9a,
	0x02, 0x1f, 0xa8, 0x51, 0x56, 0x82, 0x6e, 0xae, 0xae, 0x2e, 0x4e, 0x8e, 0xce, 0xde, 0xf1, 0x8e,
	0x01, 0x01, 0xae, 0x7e, 0x2e, 0xae, 0x2e, 0x41, 0x70, 0x7b, 0xa4, 0x54, 0xb9, 0xb8, 0x91, 0xdd,
	0x2d, 0xc6, 0xc5, 0x92, 0x92, 0x99, 0x5b, 0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0xea, 0xc4, 0x24,
	0xc0, 0x18, 0x04, 0xe6, 0x2b, 0x45, 0x73, 0x89, 0xe3, 0x30, 0x5e, 0x48, 0x90, 0x8b, 0x17, 0x6e,
	0x81, 0x9f, 0xbf, 0x9f, 0xab, 0x00, 0x83, 0x90, 0x18, 0x97, 0x10, 0x5c, 0x28, 0x20, 0xc8, 0x15,
	0x62, 0xa9, 0x00, 0xa3, 0x90, 0x28, 0x17, 0xa6, 0x5b, 0x04, 0x98, 0x8c, 0xe2, 0xb9, 0x98, 0x53,
	0x2b, 0x4a, 0x84, 0x64, 0x90, 0x3c, 0x8b, 0xe1, 0x3b, 0x89, 0x3f, 0x3f, 0x17, 0x3c, 0x82, 0xc4,
	0x94, 0x36, 0x09, 0x81, 0x12, 0x04, 0x32, 0xd9, 0x29, 0xef, 0xc2, 0x43, 0x39, 0x86, 0x1b, 0x0f,
	0xe5, 0x18, 0x3e, 0x3c, 0x94, 0x63, 0x6c, 0x78, 0x24, 0xc7, 0xb8, 0xe2, 0x91, 0x1c, 0xe3, 0x89,
	0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0xf8, 0xe2, 0x91, 0x1c, 0xc3,
	0x87, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c,
	0x43, 0x94, 0x45, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x7a, 0x7e,
	0x7e, 0x7a, 0x4e, 0xaa, 0x3e, 0x22, 0x35, 0xe2, 0x4b, 0xe2, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x0e, 0x1a, 0x2c, 0x55, 0x01, 0x03, 0x00, 0x00,
}

func (x FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation) String() string {
	s, ok := FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *FeedbackTensorsCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeedbackTensorsCalculatorOptions)
	if !ok {
		that2, ok := that.(FeedbackTensorsCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FeedbackTensorShape.Equal(that1.FeedbackTensorShape) {
		return false
	}
	if this.NumFeedbackTensors != nil && that1.NumFeedbackTensors != nil {
		if *this.NumFeedbackTensors != *that1.NumFeedbackTensors {
			return false
		}
	} else if this.NumFeedbackTensors != nil {
		return false
	} else if that1.NumFeedbackTensors != nil {
		return false
	}
	if this.Location != nil && that1.Location != nil {
		if *this.Location != *that1.Location {
			return false
		}
	} else if this.Location != nil {
		return false
	} else if that1.Location != nil {
		return false
	}
	return true
}
func (this *FeedbackTensorsCalculatorOptions_TensorShape) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeedbackTensorsCalculatorOptions_TensorShape)
	if !ok {
		that2, ok := that.(FeedbackTensorsCalculatorOptions_TensorShape)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Dims) != len(that1.Dims) {
		return false
	}
	for i := range this.Dims {
		if this.Dims[i] != that1.Dims[i] {
			return false
		}
	}
	return true
}
func (this *FeedbackTensorsCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensor.FeedbackTensorsCalculatorOptions{")
	if this.FeedbackTensorShape != nil {
		s = append(s, "FeedbackTensorShape: "+fmt.Sprintf("%#v", this.FeedbackTensorShape)+",\n")
	}
	if this.NumFeedbackTensors != nil {
		s = append(s, "NumFeedbackTensors: "+valueToGoStringFeedbackTensorsCalculator(this.NumFeedbackTensors, "int32")+",\n")
	}
	if this.Location != nil {
		s = append(s, "Location: "+valueToGoStringFeedbackTensorsCalculator(this.Location, "FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FeedbackTensorsCalculatorOptions_TensorShape) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensor.FeedbackTensorsCalculatorOptions_TensorShape{")
	if this.Dims != nil {
		s = append(s, "Dims: "+fmt.Sprintf("%#v", this.Dims)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFeedbackTensorsCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FeedbackTensorsCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedbackTensorsCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedbackTensorsCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Location != nil {
		i = encodeVarintFeedbackTensorsCalculator(dAtA, i, uint64(*m.Location))
		i--
		dAtA[i] = 0x18
	}
	if m.NumFeedbackTensors != nil {
		i = encodeVarintFeedbackTensorsCalculator(dAtA, i, uint64(*m.NumFeedbackTensors))
		i--
		dAtA[i] = 0x10
	}
	if m.FeedbackTensorShape != nil {
		{
			size, err := m.FeedbackTensorShape.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFeedbackTensorsCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeedbackTensorsCalculatorOptions_TensorShape) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedbackTensorsCalculatorOptions_TensorShape) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedbackTensorsCalculatorOptions_TensorShape) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dims) > 0 {
		dAtA3 := make([]byte, len(m.Dims)*10)
		var j2 int
		for _, num1 := range m.Dims {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintFeedbackTensorsCalculator(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFeedbackTensorsCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovFeedbackTensorsCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FeedbackTensorsCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeedbackTensorShape != nil {
		l = m.FeedbackTensorShape.Size()
		n += 1 + l + sovFeedbackTensorsCalculator(uint64(l))
	}
	if m.NumFeedbackTensors != nil {
		n += 1 + sovFeedbackTensorsCalculator(uint64(*m.NumFeedbackTensors))
	}
	if m.Location != nil {
		n += 1 + sovFeedbackTensorsCalculator(uint64(*m.Location))
	}
	return n
}

func (m *FeedbackTensorsCalculatorOptions_TensorShape) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dims) > 0 {
		l = 0
		for _, e := range m.Dims {
			l += sovFeedbackTensorsCalculator(uint64(e))
		}
		n += 1 + sovFeedbackTensorsCalculator(uint64(l)) + l
	}
	return n
}

func sovFeedbackTensorsCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFeedbackTensorsCalculator(x uint64) (n int) {
	return sovFeedbackTensorsCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FeedbackTensorsCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeedbackTensorsCalculatorOptions{`,
		`FeedbackTensorShape:` + strings.Replace(fmt.Sprintf("%v", this.FeedbackTensorShape), "FeedbackTensorsCalculatorOptions_TensorShape", "FeedbackTensorsCalculatorOptions_TensorShape", 1) + `,`,
		`NumFeedbackTensors:` + valueToStringFeedbackTensorsCalculator(this.NumFeedbackTensors) + `,`,
		`Location:` + valueToStringFeedbackTensorsCalculator(this.Location) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeedbackTensorsCalculatorOptions_TensorShape) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeedbackTensorsCalculatorOptions_TensorShape{`,
		`Dims:` + fmt.Sprintf("%v", this.Dims) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFeedbackTensorsCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FeedbackTensorsCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeedbackTensorsCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedbackTensorsCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedbackTensorsCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedbackTensorShape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedbackTensorsCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeedbackTensorsCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeedbackTensorsCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeedbackTensorShape == nil {
				m.FeedbackTensorShape = &FeedbackTensorsCalculatorOptions_TensorShape{}
			}
			if err := m.FeedbackTensorShape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumFeedbackTensors", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedbackTensorsCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumFeedbackTensors = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var v FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedbackTensorsCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= FeedbackTensorsCalculatorOptions_FeedbackTensorsLocation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Location = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFeedbackTensorsCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeedbackTensorsCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedbackTensorsCalculatorOptions_TensorShape) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeedbackTensorsCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorShape: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorShape: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFeedbackTensorsCalculator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dims = append(m.Dims, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFeedbackTensorsCalculator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFeedbackTensorsCalculator
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFeedbackTensorsCalculator
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Dims) == 0 {
					m.Dims = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFeedbackTensorsCalculator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dims = append(m.Dims, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dims", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeedbackTensorsCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeedbackTensorsCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFeedbackTensorsCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFeedbackTensorsCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeedbackTensorsCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeedbackTensorsCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFeedbackTensorsCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFeedbackTensorsCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFeedbackTensorsCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFeedbackTensorsCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFeedbackTensorsCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFeedbackTensorsCalculator = fmt.Errorf("proto: unexpected end of group")
)
