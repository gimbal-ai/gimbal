// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/tensor/image_to_tensor_calculator.proto

package tensor

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	gpu "github.com/google/mediapipe/mediapipe/gpu"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ImageToTensorCalculatorOptions_BorderMode int32

const (
	BORDER_UNSPECIFIED ImageToTensorCalculatorOptions_BorderMode = 0
	BORDER_ZERO        ImageToTensorCalculatorOptions_BorderMode = 1
	BORDER_REPLICATE   ImageToTensorCalculatorOptions_BorderMode = 2
)

var ImageToTensorCalculatorOptions_BorderMode_name = map[int32]string{
	0: "BORDER_UNSPECIFIED",
	1: "BORDER_ZERO",
	2: "BORDER_REPLICATE",
}

var ImageToTensorCalculatorOptions_BorderMode_value = map[string]int32{
	"BORDER_UNSPECIFIED": 0,
	"BORDER_ZERO":        1,
	"BORDER_REPLICATE":   2,
}

func (x ImageToTensorCalculatorOptions_BorderMode) Enum() *ImageToTensorCalculatorOptions_BorderMode {
	p := new(ImageToTensorCalculatorOptions_BorderMode)
	*p = x
	return p
}

func (x ImageToTensorCalculatorOptions_BorderMode) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(ImageToTensorCalculatorOptions_BorderMode_name, int32(x))
}

func (x *ImageToTensorCalculatorOptions_BorderMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ImageToTensorCalculatorOptions_BorderMode_value, data, "ImageToTensorCalculatorOptions_BorderMode")
	if err != nil {
		return err
	}
	*x = ImageToTensorCalculatorOptions_BorderMode(value)
	return nil
}

func (ImageToTensorCalculatorOptions_BorderMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e6dd9555dd89111, []int{0, 0}
}

type ImageToTensorCalculatorOptions struct {
	OutputTensorWidth  int32 `protobuf:"varint,1,opt,name=output_tensor_width,json=outputTensorWidth" json:"output_tensor_width"`
	OutputTensorHeight int32 `protobuf:"varint,2,opt,name=output_tensor_height,json=outputTensorHeight" json:"output_tensor_height"`
	KeepAspectRatio    bool  `protobuf:"varint,3,opt,name=keep_aspect_ratio,json=keepAspectRatio" json:"keep_aspect_ratio"`
	// Types that are valid to be assigned to Range:
	//	*ImageToTensorCalculatorOptions_OutputTensorFloatRange
	//	*ImageToTensorCalculatorOptions_OutputTensorIntRange
	//	*ImageToTensorCalculatorOptions_OutputTensorUintRange
	Range      isImageToTensorCalculatorOptions_Range    `protobuf_oneof:"range"`
	GpuOrigin  gpu.GpuOrigin_Mode                        `protobuf:"varint,5,opt,name=gpu_origin,json=gpuOrigin,enum=mediapipe.GpuOrigin_Mode" json:"gpu_origin"`
	BorderMode ImageToTensorCalculatorOptions_BorderMode `protobuf:"varint,6,opt,name=border_mode,json=borderMode,enum=mediapipe.ImageToTensorCalculatorOptions_BorderMode" json:"border_mode"`
}

func (m *ImageToTensorCalculatorOptions) Reset()      { *m = ImageToTensorCalculatorOptions{} }
func (*ImageToTensorCalculatorOptions) ProtoMessage() {}
func (*ImageToTensorCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e6dd9555dd89111, []int{0}
}
func (m *ImageToTensorCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageToTensorCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageToTensorCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageToTensorCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageToTensorCalculatorOptions.Merge(m, src)
}
func (m *ImageToTensorCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *ImageToTensorCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageToTensorCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ImageToTensorCalculatorOptions proto.InternalMessageInfo

type isImageToTensorCalculatorOptions_Range interface {
	isImageToTensorCalculatorOptions_Range()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ImageToTensorCalculatorOptions_OutputTensorFloatRange struct {
	OutputTensorFloatRange *ImageToTensorCalculatorOptions_FloatRange `protobuf:"bytes,4,opt,name=output_tensor_float_range,json=outputTensorFloatRange,oneof" json:"output_tensor_float_range,omitempty"`
}
type ImageToTensorCalculatorOptions_OutputTensorIntRange struct {
	OutputTensorIntRange *ImageToTensorCalculatorOptions_IntRange `protobuf:"bytes,7,opt,name=output_tensor_int_range,json=outputTensorIntRange,oneof" json:"output_tensor_int_range,omitempty"`
}
type ImageToTensorCalculatorOptions_OutputTensorUintRange struct {
	OutputTensorUintRange *ImageToTensorCalculatorOptions_UIntRange `protobuf:"bytes,8,opt,name=output_tensor_uint_range,json=outputTensorUintRange,oneof" json:"output_tensor_uint_range,omitempty"`
}

func (*ImageToTensorCalculatorOptions_OutputTensorFloatRange) isImageToTensorCalculatorOptions_Range() {
}
func (*ImageToTensorCalculatorOptions_OutputTensorIntRange) isImageToTensorCalculatorOptions_Range() {
}
func (*ImageToTensorCalculatorOptions_OutputTensorUintRange) isImageToTensorCalculatorOptions_Range() {
}

func (m *ImageToTensorCalculatorOptions) GetRange() isImageToTensorCalculatorOptions_Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *ImageToTensorCalculatorOptions) GetOutputTensorWidth() int32 {
	if m != nil {
		return m.OutputTensorWidth
	}
	return 0
}

func (m *ImageToTensorCalculatorOptions) GetOutputTensorHeight() int32 {
	if m != nil {
		return m.OutputTensorHeight
	}
	return 0
}

func (m *ImageToTensorCalculatorOptions) GetKeepAspectRatio() bool {
	if m != nil {
		return m.KeepAspectRatio
	}
	return false
}

func (m *ImageToTensorCalculatorOptions) GetOutputTensorFloatRange() *ImageToTensorCalculatorOptions_FloatRange {
	if x, ok := m.GetRange().(*ImageToTensorCalculatorOptions_OutputTensorFloatRange); ok {
		return x.OutputTensorFloatRange
	}
	return nil
}

func (m *ImageToTensorCalculatorOptions) GetOutputTensorIntRange() *ImageToTensorCalculatorOptions_IntRange {
	if x, ok := m.GetRange().(*ImageToTensorCalculatorOptions_OutputTensorIntRange); ok {
		return x.OutputTensorIntRange
	}
	return nil
}

func (m *ImageToTensorCalculatorOptions) GetOutputTensorUintRange() *ImageToTensorCalculatorOptions_UIntRange {
	if x, ok := m.GetRange().(*ImageToTensorCalculatorOptions_OutputTensorUintRange); ok {
		return x.OutputTensorUintRange
	}
	return nil
}

func (m *ImageToTensorCalculatorOptions) GetGpuOrigin() gpu.GpuOrigin_Mode {
	if m != nil {
		return m.GpuOrigin
	}
	return gpu.ORIGIN_MODE_DEFAULT
}

func (m *ImageToTensorCalculatorOptions) GetBorderMode() ImageToTensorCalculatorOptions_BorderMode {
	if m != nil {
		return m.BorderMode
	}
	return BORDER_UNSPECIFIED
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ImageToTensorCalculatorOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ImageToTensorCalculatorOptions_OutputTensorFloatRange)(nil),
		(*ImageToTensorCalculatorOptions_OutputTensorIntRange)(nil),
		(*ImageToTensorCalculatorOptions_OutputTensorUintRange)(nil),
	}
}

var E_ImageToTensorCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*ImageToTensorCalculatorOptions)(nil),
	Field:         334361939,
	Name:          "mediapipe.ImageToTensorCalculatorOptions.ext",
	Tag:           "bytes,334361939,opt,name=ext",
	Filename:      "mediapipe/calculators/tensor/image_to_tensor_calculator.proto",
}

type ImageToTensorCalculatorOptions_FloatRange struct {
	Min float32 `protobuf:"fixed32,1,opt,name=min" json:"min"`
	Max float32 `protobuf:"fixed32,2,opt,name=max" json:"max"`
}

func (m *ImageToTensorCalculatorOptions_FloatRange) Reset() {
	*m = ImageToTensorCalculatorOptions_FloatRange{}
}
func (*ImageToTensorCalculatorOptions_FloatRange) ProtoMessage() {}
func (*ImageToTensorCalculatorOptions_FloatRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e6dd9555dd89111, []int{0, 0}
}
func (m *ImageToTensorCalculatorOptions_FloatRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageToTensorCalculatorOptions_FloatRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageToTensorCalculatorOptions_FloatRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageToTensorCalculatorOptions_FloatRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageToTensorCalculatorOptions_FloatRange.Merge(m, src)
}
func (m *ImageToTensorCalculatorOptions_FloatRange) XXX_Size() int {
	return m.Size()
}
func (m *ImageToTensorCalculatorOptions_FloatRange) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageToTensorCalculatorOptions_FloatRange.DiscardUnknown(m)
}

var xxx_messageInfo_ImageToTensorCalculatorOptions_FloatRange proto.InternalMessageInfo

func (m *ImageToTensorCalculatorOptions_FloatRange) GetMin() float32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *ImageToTensorCalculatorOptions_FloatRange) GetMax() float32 {
	if m != nil {
		return m.Max
	}
	return 0
}

type ImageToTensorCalculatorOptions_IntRange struct {
	Min int64 `protobuf:"varint,1,opt,name=min" json:"min"`
	Max int64 `protobuf:"varint,2,opt,name=max" json:"max"`
}

func (m *ImageToTensorCalculatorOptions_IntRange) Reset() {
	*m = ImageToTensorCalculatorOptions_IntRange{}
}
func (*ImageToTensorCalculatorOptions_IntRange) ProtoMessage() {}
func (*ImageToTensorCalculatorOptions_IntRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e6dd9555dd89111, []int{0, 1}
}
func (m *ImageToTensorCalculatorOptions_IntRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageToTensorCalculatorOptions_IntRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageToTensorCalculatorOptions_IntRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageToTensorCalculatorOptions_IntRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageToTensorCalculatorOptions_IntRange.Merge(m, src)
}
func (m *ImageToTensorCalculatorOptions_IntRange) XXX_Size() int {
	return m.Size()
}
func (m *ImageToTensorCalculatorOptions_IntRange) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageToTensorCalculatorOptions_IntRange.DiscardUnknown(m)
}

var xxx_messageInfo_ImageToTensorCalculatorOptions_IntRange proto.InternalMessageInfo

func (m *ImageToTensorCalculatorOptions_IntRange) GetMin() int64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *ImageToTensorCalculatorOptions_IntRange) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

type ImageToTensorCalculatorOptions_UIntRange struct {
	Min uint64 `protobuf:"varint,1,opt,name=min" json:"min"`
	Max uint64 `protobuf:"varint,2,opt,name=max" json:"max"`
}

func (m *ImageToTensorCalculatorOptions_UIntRange) Reset() {
	*m = ImageToTensorCalculatorOptions_UIntRange{}
}
func (*ImageToTensorCalculatorOptions_UIntRange) ProtoMessage() {}
func (*ImageToTensorCalculatorOptions_UIntRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e6dd9555dd89111, []int{0, 2}
}
func (m *ImageToTensorCalculatorOptions_UIntRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageToTensorCalculatorOptions_UIntRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageToTensorCalculatorOptions_UIntRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageToTensorCalculatorOptions_UIntRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageToTensorCalculatorOptions_UIntRange.Merge(m, src)
}
func (m *ImageToTensorCalculatorOptions_UIntRange) XXX_Size() int {
	return m.Size()
}
func (m *ImageToTensorCalculatorOptions_UIntRange) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageToTensorCalculatorOptions_UIntRange.DiscardUnknown(m)
}

var xxx_messageInfo_ImageToTensorCalculatorOptions_UIntRange proto.InternalMessageInfo

func (m *ImageToTensorCalculatorOptions_UIntRange) GetMin() uint64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *ImageToTensorCalculatorOptions_UIntRange) GetMax() uint64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func init() {
	proto.RegisterEnum("mediapipe.ImageToTensorCalculatorOptions_BorderMode", ImageToTensorCalculatorOptions_BorderMode_name, ImageToTensorCalculatorOptions_BorderMode_value)
	proto.RegisterExtension(E_ImageToTensorCalculatorOptions_Ext)
	proto.RegisterType((*ImageToTensorCalculatorOptions)(nil), "mediapipe.ImageToTensorCalculatorOptions")
	proto.RegisterType((*ImageToTensorCalculatorOptions_FloatRange)(nil), "mediapipe.ImageToTensorCalculatorOptions.FloatRange")
	proto.RegisterType((*ImageToTensorCalculatorOptions_IntRange)(nil), "mediapipe.ImageToTensorCalculatorOptions.IntRange")
	proto.RegisterType((*ImageToTensorCalculatorOptions_UIntRange)(nil), "mediapipe.ImageToTensorCalculatorOptions.UIntRange")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/tensor/image_to_tensor_calculator.proto", fileDescriptor_8e6dd9555dd89111)
}

var fileDescriptor_8e6dd9555dd89111 = []byte{
	// 608 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x4d, 0x4f, 0x13, 0x41,
	0x18, 0xc7, 0x77, 0x68, 0x91, 0xf2, 0x90, 0x48, 0x19, 0x11, 0x97, 0xc6, 0x8c, 0x0d, 0xf1, 0x50,
	0x2f, 0x5d, 0x53, 0x89, 0x31, 0xbe, 0x25, 0x14, 0x16, 0x69, 0x7c, 0x29, 0x59, 0x69, 0x4c, 0x30,
	0x66, 0xb3, 0xb4, 0xc3, 0x76, 0x42, 0x77, 0x67, 0xdd, 0xce, 0x06, 0x8e, 0x7e, 0x04, 0xaf, 0x9e,
	0xbc, 0xfa, 0x0d, 0xfc, 0x0a, 0x1c, 0x49, 0xbc, 0x70, 0x32, 0xb2, 0x5c, 0x8c, 0x27, 0x3e, 0x82,
	0xd9, 0x69, 0xbb, 0x3b, 0x55, 0x21, 0x78, 0xe8, 0xa1, 0xff, 0x67, 0x7e, 0xcf, 0x6f, 0xf7, 0x99,
	0x27, 0x0b, 0x4f, 0x3c, 0xda, 0x61, 0x4e, 0xc0, 0x02, 0x6a, 0xb4, 0x9d, 0x5e, 0x3b, 0xea, 0x39,
	0x82, 0x87, 0x7d, 0x43, 0x50, 0xbf, 0xcf, 0x43, 0x83, 0x79, 0x8e, 0x4b, 0x6d, 0xc1, 0xed, 0xc1,
	0x7f, 0x3b, 0x3b, 0x52, 0x0d, 0x42, 0x2e, 0x38, 0x9e, 0x4e, 0xf1, 0xd2, 0xed, 0xac, 0xd3, 0x6e,
	0xe8, 0x78, 0x74, 0x9f, 0x87, 0x7b, 0xc6, 0x9f, 0x40, 0x89, 0x64, 0xa7, 0xdc, 0x20, 0x4a, 0x7e,
	0x36, 0x0f, 0x99, 0xcb, 0xfc, 0x41, 0x7d, 0xe9, 0x53, 0x01, 0x48, 0x23, 0xb1, 0x6e, 0xf1, 0x2d,
	0xe9, 0x5c, 0x4d, 0x3b, 0x34, 0x03, 0xc1, 0xb8, 0xdf, 0xc7, 0xcb, 0x70, 0x8d, 0x47, 0x22, 0x88,
	0xc4, 0xe8, 0xa9, 0xf6, 0x59, 0x47, 0x74, 0x75, 0x54, 0x46, 0x95, 0xc9, 0x7a, 0xfe, 0xf0, 0xfb,
	0x2d, 0xcd, 0x9a, 0x1b, 0x1c, 0x18, 0x74, 0x78, 0x93, 0x94, 0xf1, 0x7d, 0x98, 0x1f, 0xa7, 0xba,
	0x94, 0xb9, 0x5d, 0xa1, 0x4f, 0x28, 0x18, 0x56, 0xb1, 0x0d, 0x59, 0xc7, 0x77, 0x61, 0x6e, 0x8f,
	0xd2, 0xc0, 0x76, 0xfa, 0x01, 0x6d, 0x0b, 0x3b, 0x74, 0x04, 0xe3, 0x7a, 0xae, 0x8c, 0x2a, 0x85,
	0x21, 0x34, 0x9b, 0x94, 0x57, 0x64, 0xd5, 0x4a, 0x8a, 0xf8, 0x3d, 0x2c, 0x8e, 0x9b, 0x76, 0x7b,
	0xdc, 0x49, 0x48, 0xdf, 0xa5, 0x7a, 0xbe, 0x8c, 0x2a, 0x33, 0xb5, 0xe5, 0x6a, 0x3a, 0x86, 0xea,
	0xc5, 0x6f, 0x5b, 0x5d, 0x4f, 0x60, 0x2b, 0x61, 0x37, 0x34, 0x6b, 0x41, 0x7d, 0xc0, 0xac, 0x82,
	0xf7, 0xe0, 0xc6, 0xb8, 0x92, 0xf9, 0x23, 0xe1, 0x94, 0x14, 0xd6, 0x2e, 0x2f, 0x6c, 0xf8, 0xa9,
	0x6e, 0x5e, 0xd5, 0x8d, 0x72, 0xec, 0x83, 0x3e, 0x2e, 0x8b, 0x32, 0x5b, 0x41, 0xda, 0xee, 0x5d,
	0xde, 0xd6, 0x52, 0x74, 0xd7, 0x55, 0x5d, 0x8b, 0x8d, 0x7c, 0x4f, 0x01, 0xb2, 0x35, 0xd1, 0x27,
	0xcb, 0xa8, 0x72, 0xb5, 0xb6, 0xa8, 0x18, 0x9e, 0x05, 0x51, 0x73, 0xb0, 0x42, 0x2f, 0x79, 0x87,
	0x0e, 0x6f, 0x65, 0xda, 0x1d, 0xa5, 0xf8, 0x2d, 0xcc, 0xec, 0xf0, 0xb0, 0x43, 0x43, 0xdb, 0xe3,
	0x1d, 0xaa, 0x5f, 0x91, 0x0d, 0xfe, 0xe3, 0x06, 0xea, 0x12, 0x56, 0x7a, 0xc3, 0x4e, 0x9a, 0x94,
	0x1e, 0x03, 0x28, 0xf7, 0xb0, 0x00, 0x39, 0x8f, 0xf9, 0x72, 0x15, 0x27, 0x86, 0x87, 0x93, 0x40,
	0xe6, 0xce, 0x81, 0xdc, 0xb5, 0x2c, 0x77, 0x0e, 0x4a, 0x0f, 0xa1, 0x90, 0x8e, 0x55, 0x61, 0x73,
	0xe7, 0xb0, 0x39, 0x95, 0x7d, 0x04, 0xd3, 0xad, 0x7f, 0xc1, 0xf9, 0x73, 0xe0, 0xbc, 0x02, 0x2f,
	0x3d, 0x07, 0xc8, 0x5e, 0x0b, 0x2f, 0x00, 0xae, 0x37, 0xad, 0x35, 0xd3, 0xb2, 0x5b, 0xaf, 0x5e,
	0x6f, 0x9a, 0xab, 0x8d, 0xf5, 0x86, 0xb9, 0x56, 0xd4, 0xf0, 0x2c, 0xcc, 0x0c, 0xf3, 0x6d, 0xd3,
	0x6a, 0x16, 0x11, 0x9e, 0x87, 0xe2, 0x30, 0xb0, 0xcc, 0xcd, 0x17, 0x8d, 0xd5, 0x95, 0x2d, 0xb3,
	0x38, 0x51, 0x7b, 0x07, 0x39, 0x7a, 0x20, 0xf0, 0x4d, 0x65, 0xa4, 0x7f, 0x4d, 0x51, 0xff, 0xf6,
	0xeb, 0xeb, 0x67, 0x24, 0xb7, 0xe3, 0xce, 0xa5, 0x47, 0x6f, 0x25, 0x7d, 0xeb, 0x53, 0x30, 0x29,
	0x97, 0xab, 0xee, 0x1f, 0x9d, 0x10, 0xed, 0xf8, 0x84, 0x68, 0x67, 0x27, 0x04, 0x7d, 0x88, 0x09,
	0xfa, 0x12, 0x13, 0x74, 0x18, 0x13, 0x74, 0x14, 0x13, 0xf4, 0x23, 0x26, 0xe8, 0x67, 0x4c, 0xb4,
	0xb3, 0x98, 0xa0, 0x8f, 0xa7, 0x44, 0x3b, 0x3a, 0x25, 0xda, 0xf1, 0x29, 0xd1, 0xb6, 0x1f, 0xb8,
	0x4c, 0x74, 0xa3, 0x9d, 0x6a, 0x9b, 0x7b, 0x86, 0xcb, 0xb9, 0xdb, 0xa3, 0x46, 0xf6, 0x0d, 0xba,
	0xe8, 0xeb, 0xf7, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x03, 0xa1, 0xfe, 0x1c, 0x05, 0x00, 0x00,
}

func (x ImageToTensorCalculatorOptions_BorderMode) String() string {
	s, ok := ImageToTensorCalculatorOptions_BorderMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ImageToTensorCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageToTensorCalculatorOptions)
	if !ok {
		that2, ok := that.(ImageToTensorCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OutputTensorWidth != that1.OutputTensorWidth {
		return false
	}
	if this.OutputTensorHeight != that1.OutputTensorHeight {
		return false
	}
	if this.KeepAspectRatio != that1.KeepAspectRatio {
		return false
	}
	if that1.Range == nil {
		if this.Range != nil {
			return false
		}
	} else if this.Range == nil {
		return false
	} else if !this.Range.Equal(that1.Range) {
		return false
	}
	if this.GpuOrigin != that1.GpuOrigin {
		return false
	}
	if this.BorderMode != that1.BorderMode {
		return false
	}
	return true
}
func (this *ImageToTensorCalculatorOptions_OutputTensorFloatRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageToTensorCalculatorOptions_OutputTensorFloatRange)
	if !ok {
		that2, ok := that.(ImageToTensorCalculatorOptions_OutputTensorFloatRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutputTensorFloatRange.Equal(that1.OutputTensorFloatRange) {
		return false
	}
	return true
}
func (this *ImageToTensorCalculatorOptions_OutputTensorIntRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageToTensorCalculatorOptions_OutputTensorIntRange)
	if !ok {
		that2, ok := that.(ImageToTensorCalculatorOptions_OutputTensorIntRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutputTensorIntRange.Equal(that1.OutputTensorIntRange) {
		return false
	}
	return true
}
func (this *ImageToTensorCalculatorOptions_OutputTensorUintRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageToTensorCalculatorOptions_OutputTensorUintRange)
	if !ok {
		that2, ok := that.(ImageToTensorCalculatorOptions_OutputTensorUintRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutputTensorUintRange.Equal(that1.OutputTensorUintRange) {
		return false
	}
	return true
}
func (this *ImageToTensorCalculatorOptions_FloatRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageToTensorCalculatorOptions_FloatRange)
	if !ok {
		that2, ok := that.(ImageToTensorCalculatorOptions_FloatRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Min != that1.Min {
		return false
	}
	if this.Max != that1.Max {
		return false
	}
	return true
}
func (this *ImageToTensorCalculatorOptions_IntRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageToTensorCalculatorOptions_IntRange)
	if !ok {
		that2, ok := that.(ImageToTensorCalculatorOptions_IntRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Min != that1.Min {
		return false
	}
	if this.Max != that1.Max {
		return false
	}
	return true
}
func (this *ImageToTensorCalculatorOptions_UIntRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageToTensorCalculatorOptions_UIntRange)
	if !ok {
		that2, ok := that.(ImageToTensorCalculatorOptions_UIntRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Min != that1.Min {
		return false
	}
	if this.Max != that1.Max {
		return false
	}
	return true
}
func (this *ImageToTensorCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&tensor.ImageToTensorCalculatorOptions{")
	s = append(s, "OutputTensorWidth: "+fmt.Sprintf("%#v", this.OutputTensorWidth)+",\n")
	s = append(s, "OutputTensorHeight: "+fmt.Sprintf("%#v", this.OutputTensorHeight)+",\n")
	s = append(s, "KeepAspectRatio: "+fmt.Sprintf("%#v", this.KeepAspectRatio)+",\n")
	if this.Range != nil {
		s = append(s, "Range: "+fmt.Sprintf("%#v", this.Range)+",\n")
	}
	s = append(s, "GpuOrigin: "+fmt.Sprintf("%#v", this.GpuOrigin)+",\n")
	s = append(s, "BorderMode: "+fmt.Sprintf("%#v", this.BorderMode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageToTensorCalculatorOptions_OutputTensorFloatRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensor.ImageToTensorCalculatorOptions_OutputTensorFloatRange{` +
		`OutputTensorFloatRange:` + fmt.Sprintf("%#v", this.OutputTensorFloatRange) + `}`}, ", ")
	return s
}
func (this *ImageToTensorCalculatorOptions_OutputTensorIntRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensor.ImageToTensorCalculatorOptions_OutputTensorIntRange{` +
		`OutputTensorIntRange:` + fmt.Sprintf("%#v", this.OutputTensorIntRange) + `}`}, ", ")
	return s
}
func (this *ImageToTensorCalculatorOptions_OutputTensorUintRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensor.ImageToTensorCalculatorOptions_OutputTensorUintRange{` +
		`OutputTensorUintRange:` + fmt.Sprintf("%#v", this.OutputTensorUintRange) + `}`}, ", ")
	return s
}
func (this *ImageToTensorCalculatorOptions_FloatRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensor.ImageToTensorCalculatorOptions_FloatRange{")
	s = append(s, "Min: "+fmt.Sprintf("%#v", this.Min)+",\n")
	s = append(s, "Max: "+fmt.Sprintf("%#v", this.Max)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageToTensorCalculatorOptions_IntRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensor.ImageToTensorCalculatorOptions_IntRange{")
	s = append(s, "Min: "+fmt.Sprintf("%#v", this.Min)+",\n")
	s = append(s, "Max: "+fmt.Sprintf("%#v", this.Max)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageToTensorCalculatorOptions_UIntRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensor.ImageToTensorCalculatorOptions_UIntRange{")
	s = append(s, "Min: "+fmt.Sprintf("%#v", this.Min)+",\n")
	s = append(s, "Max: "+fmt.Sprintf("%#v", this.Max)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringImageToTensorCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ImageToTensorCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageToTensorCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageToTensorCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Range != nil {
		{
			size := m.Range.Size()
			i -= size
			if _, err := m.Range.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	i = encodeVarintImageToTensorCalculator(dAtA, i, uint64(m.BorderMode))
	i--
	dAtA[i] = 0x30
	i = encodeVarintImageToTensorCalculator(dAtA, i, uint64(m.GpuOrigin))
	i--
	dAtA[i] = 0x28
	i--
	if m.KeepAspectRatio {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintImageToTensorCalculator(dAtA, i, uint64(m.OutputTensorHeight))
	i--
	dAtA[i] = 0x10
	i = encodeVarintImageToTensorCalculator(dAtA, i, uint64(m.OutputTensorWidth))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ImageToTensorCalculatorOptions_OutputTensorFloatRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageToTensorCalculatorOptions_OutputTensorFloatRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutputTensorFloatRange != nil {
		{
			size, err := m.OutputTensorFloatRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImageToTensorCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ImageToTensorCalculatorOptions_OutputTensorIntRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageToTensorCalculatorOptions_OutputTensorIntRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutputTensorIntRange != nil {
		{
			size, err := m.OutputTensorIntRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImageToTensorCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ImageToTensorCalculatorOptions_OutputTensorUintRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageToTensorCalculatorOptions_OutputTensorUintRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutputTensorUintRange != nil {
		{
			size, err := m.OutputTensorUintRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImageToTensorCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ImageToTensorCalculatorOptions_FloatRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageToTensorCalculatorOptions_FloatRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageToTensorCalculatorOptions_FloatRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Max))))
	i--
	dAtA[i] = 0x15
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Min))))
	i--
	dAtA[i] = 0xd
	return len(dAtA) - i, nil
}

func (m *ImageToTensorCalculatorOptions_IntRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageToTensorCalculatorOptions_IntRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageToTensorCalculatorOptions_IntRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintImageToTensorCalculator(dAtA, i, uint64(m.Max))
	i--
	dAtA[i] = 0x10
	i = encodeVarintImageToTensorCalculator(dAtA, i, uint64(m.Min))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ImageToTensorCalculatorOptions_UIntRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageToTensorCalculatorOptions_UIntRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageToTensorCalculatorOptions_UIntRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintImageToTensorCalculator(dAtA, i, uint64(m.Max))
	i--
	dAtA[i] = 0x10
	i = encodeVarintImageToTensorCalculator(dAtA, i, uint64(m.Min))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintImageToTensorCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovImageToTensorCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImageToTensorCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovImageToTensorCalculator(uint64(m.OutputTensorWidth))
	n += 1 + sovImageToTensorCalculator(uint64(m.OutputTensorHeight))
	n += 2
	if m.Range != nil {
		n += m.Range.Size()
	}
	n += 1 + sovImageToTensorCalculator(uint64(m.GpuOrigin))
	n += 1 + sovImageToTensorCalculator(uint64(m.BorderMode))
	return n
}

func (m *ImageToTensorCalculatorOptions_OutputTensorFloatRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutputTensorFloatRange != nil {
		l = m.OutputTensorFloatRange.Size()
		n += 1 + l + sovImageToTensorCalculator(uint64(l))
	}
	return n
}
func (m *ImageToTensorCalculatorOptions_OutputTensorIntRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutputTensorIntRange != nil {
		l = m.OutputTensorIntRange.Size()
		n += 1 + l + sovImageToTensorCalculator(uint64(l))
	}
	return n
}
func (m *ImageToTensorCalculatorOptions_OutputTensorUintRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutputTensorUintRange != nil {
		l = m.OutputTensorUintRange.Size()
		n += 1 + l + sovImageToTensorCalculator(uint64(l))
	}
	return n
}
func (m *ImageToTensorCalculatorOptions_FloatRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	n += 5
	return n
}

func (m *ImageToTensorCalculatorOptions_IntRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovImageToTensorCalculator(uint64(m.Min))
	n += 1 + sovImageToTensorCalculator(uint64(m.Max))
	return n
}

func (m *ImageToTensorCalculatorOptions_UIntRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovImageToTensorCalculator(uint64(m.Min))
	n += 1 + sovImageToTensorCalculator(uint64(m.Max))
	return n
}

func sovImageToTensorCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImageToTensorCalculator(x uint64) (n int) {
	return sovImageToTensorCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ImageToTensorCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageToTensorCalculatorOptions{`,
		`OutputTensorWidth:` + fmt.Sprintf("%v", this.OutputTensorWidth) + `,`,
		`OutputTensorHeight:` + fmt.Sprintf("%v", this.OutputTensorHeight) + `,`,
		`KeepAspectRatio:` + fmt.Sprintf("%v", this.KeepAspectRatio) + `,`,
		`Range:` + fmt.Sprintf("%v", this.Range) + `,`,
		`GpuOrigin:` + fmt.Sprintf("%v", this.GpuOrigin) + `,`,
		`BorderMode:` + fmt.Sprintf("%v", this.BorderMode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageToTensorCalculatorOptions_OutputTensorFloatRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageToTensorCalculatorOptions_OutputTensorFloatRange{`,
		`OutputTensorFloatRange:` + strings.Replace(fmt.Sprintf("%v", this.OutputTensorFloatRange), "ImageToTensorCalculatorOptions_FloatRange", "ImageToTensorCalculatorOptions_FloatRange", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageToTensorCalculatorOptions_OutputTensorIntRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageToTensorCalculatorOptions_OutputTensorIntRange{`,
		`OutputTensorIntRange:` + strings.Replace(fmt.Sprintf("%v", this.OutputTensorIntRange), "ImageToTensorCalculatorOptions_IntRange", "ImageToTensorCalculatorOptions_IntRange", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageToTensorCalculatorOptions_OutputTensorUintRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageToTensorCalculatorOptions_OutputTensorUintRange{`,
		`OutputTensorUintRange:` + strings.Replace(fmt.Sprintf("%v", this.OutputTensorUintRange), "ImageToTensorCalculatorOptions_UIntRange", "ImageToTensorCalculatorOptions_UIntRange", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageToTensorCalculatorOptions_FloatRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageToTensorCalculatorOptions_FloatRange{`,
		`Min:` + fmt.Sprintf("%v", this.Min) + `,`,
		`Max:` + fmt.Sprintf("%v", this.Max) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageToTensorCalculatorOptions_IntRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageToTensorCalculatorOptions_IntRange{`,
		`Min:` + fmt.Sprintf("%v", this.Min) + `,`,
		`Max:` + fmt.Sprintf("%v", this.Max) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageToTensorCalculatorOptions_UIntRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageToTensorCalculatorOptions_UIntRange{`,
		`Min:` + fmt.Sprintf("%v", this.Min) + `,`,
		`Max:` + fmt.Sprintf("%v", this.Max) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringImageToTensorCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ImageToTensorCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImageToTensorCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageToTensorCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageToTensorCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputTensorWidth", wireType)
			}
			m.OutputTensorWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputTensorWidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputTensorHeight", wireType)
			}
			m.OutputTensorHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputTensorHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepAspectRatio", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeepAspectRatio = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputTensorFloatRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImageToTensorCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImageToTensorCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ImageToTensorCalculatorOptions_FloatRange{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Range = &ImageToTensorCalculatorOptions_OutputTensorFloatRange{v}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpuOrigin", wireType)
			}
			m.GpuOrigin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GpuOrigin |= gpu.GpuOrigin_Mode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorderMode", wireType)
			}
			m.BorderMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorderMode |= ImageToTensorCalculatorOptions_BorderMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputTensorIntRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImageToTensorCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImageToTensorCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ImageToTensorCalculatorOptions_IntRange{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Range = &ImageToTensorCalculatorOptions_OutputTensorIntRange{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputTensorUintRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImageToTensorCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImageToTensorCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ImageToTensorCalculatorOptions_UIntRange{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Range = &ImageToTensorCalculatorOptions_OutputTensorUintRange{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImageToTensorCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImageToTensorCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageToTensorCalculatorOptions_FloatRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImageToTensorCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FloatRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FloatRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Min = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Max = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipImageToTensorCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImageToTensorCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageToTensorCalculatorOptions_IntRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImageToTensorCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			m.Min = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Min |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImageToTensorCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImageToTensorCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageToTensorCalculatorOptions_UIntRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImageToTensorCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UIntRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UIntRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			m.Min = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Min |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageToTensorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImageToTensorCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImageToTensorCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImageToTensorCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImageToTensorCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImageToTensorCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImageToTensorCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImageToTensorCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImageToTensorCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImageToTensorCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImageToTensorCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImageToTensorCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImageToTensorCalculator = fmt.Errorf("proto: unexpected end of group")
)
