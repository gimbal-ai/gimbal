// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/tensor/regex_preprocessor_calculator.proto

package tensor

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RegexPreprocessorCalculatorOptions struct {
	MaxSeqLen int32 `protobuf:"varint,1,opt,name=max_seq_len,json=maxSeqLen" json:"max_seq_len"`
}

func (m *RegexPreprocessorCalculatorOptions) Reset()      { *m = RegexPreprocessorCalculatorOptions{} }
func (*RegexPreprocessorCalculatorOptions) ProtoMessage() {}
func (*RegexPreprocessorCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_b72919e4d84c5e40, []int{0}
}
func (m *RegexPreprocessorCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegexPreprocessorCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegexPreprocessorCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegexPreprocessorCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegexPreprocessorCalculatorOptions.Merge(m, src)
}
func (m *RegexPreprocessorCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *RegexPreprocessorCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RegexPreprocessorCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RegexPreprocessorCalculatorOptions proto.InternalMessageInfo

func (m *RegexPreprocessorCalculatorOptions) GetMaxSeqLen() int32 {
	if m != nil {
		return m.MaxSeqLen
	}
	return 0
}

var E_RegexPreprocessorCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*RegexPreprocessorCalculatorOptions)(nil),
	Field:         463716697,
	Name:          "mediapipe.RegexPreprocessorCalculatorOptions.ext",
	Tag:           "bytes,463716697,opt,name=ext",
	Filename:      "mediapipe/calculators/tensor/regex_preprocessor_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_RegexPreprocessorCalculatorOptions_Ext)
	proto.RegisterType((*RegexPreprocessorCalculatorOptions)(nil), "mediapipe.RegexPreprocessorCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/tensor/regex_preprocessor_calculator.proto", fileDescriptor_b72919e4d84c5e40)
}

var fileDescriptor_b72919e4d84c5e40 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0xd0, 0xb1, 0x4a, 0xf4, 0x40,
	0x14, 0x05, 0xe0, 0x19, 0xfe, 0xdf, 0x62, 0xb3, 0x5d, 0xaa, 0x45, 0xe4, 0x2a, 0xcb, 0x16, 0x36,
	0x66, 0x60, 0x2b, 0x4b, 0x59, 0x5b, 0x41, 0x89, 0x9d, 0x4d, 0x18, 0xe3, 0x35, 0x06, 0x93, 0xdc,
	0xd9, 0x99, 0x59, 0x4c, 0x29, 0xbe, 0x80, 0x3e, 0x86, 0x8d, 0xef, 0xb1, 0x65, 0xca, 0xb5, 0x50,
	0xcc, 0xa4, 0xb1, 0xdc, 0x47, 0x90, 0x34, 0xc9, 0xa2, 0xa0, 0xfd, 0x39, 0xdf, 0xbd, 0x1c, 0xef,
	0x28, 0xc7, 0xab, 0x54, 0xaa, 0x54, 0xa1, 0x88, 0x65, 0x16, 0x2f, 0x32, 0x69, 0x49, 0x1b, 0x61,
	0xb1, 0x30, 0xa4, 0x85, 0xc6, 0x04, 0xcb, 0x48, 0x69, 0x54, 0x9a, 0x62, 0x34, 0x86, 0x74, 0xd4,
	0xa7, 0x02, 0xa5, 0xc9, 0x92, 0x3f, 0xe8, 0x84, 0xed, 0x49, 0x8f, 0x5d, 0x6b, 0x99, 0xe3, 0x1d,
	0xe9, 0x5b, 0xf1, 0xbd, 0x30, 0x7e, 0xe1, 0xde, 0x38, 0x6c, 0xe1, 0xb3, 0x0d, 0xf7, 0xb8, 0x4b,
	0x9d, 0x2a, 0x9b, 0x52, 0x61, 0xfc, 0x89, 0x37, 0xcc, 0x65, 0x19, 0x19, 0x9c, 0x47, 0x19, 0x16,
	0x23, 0xbe, 0xc7, 0xf7, 0xb7, 0x66, 0xff, 0x97, 0xef, 0xbb, 0x2c, 0x1c, 0xe4, 0xb2, 0x3c, 0xc7,
	0xf9, 0x09, 0x16, 0x53, 0xe9, 0xfd, 0xc3, 0xd2, 0xfa, 0x3b, 0x41, 0x77, 0x3a, 0xf8, 0x41, 0x8d,
	0x5e, 0x1f, 0x1e, 0xdf, 0xda, 0xfe, 0x70, 0x7a, 0xb0, 0x91, 0xfb, 0xfb, 0x87, 0xb0, 0xb5, 0x67,
	0x45, 0x55, 0x03, 0x5b, 0xd5, 0xc0, 0xd6, 0x35, 0xf0, 0x7b, 0x07, 0xfc, 0xd9, 0x01, 0x5f, 0x3a,
	0xe0, 0x95, 0x03, 0xfe, 0xe1, 0x80, 0x7f, 0x3a, 0x60, 0x6b, 0x07, 0xfc, 0xa9, 0x01, 0x56, 0x35,
	0xc0, 0x56, 0x0d, 0xb0, 0x8b, 0xc3, 0x24, 0xb5, 0x37, 0x8b, 0xcb, 0x20, 0xa6, 0x5c, 0x24, 0x44,
	0x49, 0x86, 0xa2, 0x5f, 0xe7, 0xb7, 0xd1, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x29, 0x53, 0xf7,
	0xcf, 0x93, 0x01, 0x00, 0x00,
}

func (this *RegexPreprocessorCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegexPreprocessorCalculatorOptions)
	if !ok {
		that2, ok := that.(RegexPreprocessorCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxSeqLen != that1.MaxSeqLen {
		return false
	}
	return true
}
func (this *RegexPreprocessorCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensor.RegexPreprocessorCalculatorOptions{")
	s = append(s, "MaxSeqLen: "+fmt.Sprintf("%#v", this.MaxSeqLen)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRegexPreprocessorCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RegexPreprocessorCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegexPreprocessorCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegexPreprocessorCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintRegexPreprocessorCalculator(dAtA, i, uint64(m.MaxSeqLen))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintRegexPreprocessorCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovRegexPreprocessorCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegexPreprocessorCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRegexPreprocessorCalculator(uint64(m.MaxSeqLen))
	return n
}

func sovRegexPreprocessorCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRegexPreprocessorCalculator(x uint64) (n int) {
	return sovRegexPreprocessorCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RegexPreprocessorCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegexPreprocessorCalculatorOptions{`,
		`MaxSeqLen:` + fmt.Sprintf("%v", this.MaxSeqLen) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRegexPreprocessorCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RegexPreprocessorCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegexPreprocessorCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegexPreprocessorCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegexPreprocessorCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSeqLen", wireType)
			}
			m.MaxSeqLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegexPreprocessorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSeqLen |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegexPreprocessorCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegexPreprocessorCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegexPreprocessorCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegexPreprocessorCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegexPreprocessorCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegexPreprocessorCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRegexPreprocessorCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRegexPreprocessorCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRegexPreprocessorCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRegexPreprocessorCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegexPreprocessorCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRegexPreprocessorCalculator = fmt.Errorf("proto: unexpected end of group")
)
