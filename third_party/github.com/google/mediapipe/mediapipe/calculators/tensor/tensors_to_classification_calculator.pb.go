// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/tensor/tensors_to_classification_calculator.proto

package tensor

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	framework "github.com/google/mediapipe/mediapipe/framework"
	util "github.com/google/mediapipe/mediapipe/util"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TensorsToClassificationCalculatorOptions struct {
	MinScoreThreshold     float32                                            `protobuf:"fixed32,1,opt,name=min_score_threshold,json=minScoreThreshold" json:"min_score_threshold"`
	TopK                  int32                                              `protobuf:"varint,2,opt,name=top_k,json=topK" json:"top_k"`
	SortByDescendingScore bool                                               `protobuf:"varint,9,opt,name=sort_by_descending_score,json=sortByDescendingScore" json:"sort_by_descending_score"`
	LabelMapPath          string                                             `protobuf:"bytes,3,opt,name=label_map_path,json=labelMapPath" json:"label_map_path"`
	LabelMap              *TensorsToClassificationCalculatorOptions_LabelMap `protobuf:"bytes,5,opt,name=label_map,json=labelMap" json:"label_map,omitempty"`
	LabelItems            map[int64]*util.LabelMapItem                       `protobuf:"bytes,6,rep,name=label_items,json=labelItems" json:"label_items,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BinaryClassification  bool                                               `protobuf:"varint,4,opt,name=binary_classification,json=binaryClassification" json:"binary_classification"`
	IgnoreClasses         []int32                                            `protobuf:"varint,7,rep,packed,name=ignore_classes,json=ignoreClasses" json:"ignore_classes,omitempty"`
	AllowClasses          []int32                                            `protobuf:"varint,8,rep,packed,name=allow_classes,json=allowClasses" json:"allow_classes,omitempty"`
}

func (m *TensorsToClassificationCalculatorOptions) Reset() {
	*m = TensorsToClassificationCalculatorOptions{}
}
func (*TensorsToClassificationCalculatorOptions) ProtoMessage() {}
func (*TensorsToClassificationCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_e351490a9e6589d1, []int{0}
}
func (m *TensorsToClassificationCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TensorsToClassificationCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TensorsToClassificationCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TensorsToClassificationCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TensorsToClassificationCalculatorOptions.Merge(m, src)
}
func (m *TensorsToClassificationCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *TensorsToClassificationCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TensorsToClassificationCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TensorsToClassificationCalculatorOptions proto.InternalMessageInfo

func (m *TensorsToClassificationCalculatorOptions) GetMinScoreThreshold() float32 {
	if m != nil {
		return m.MinScoreThreshold
	}
	return 0
}

func (m *TensorsToClassificationCalculatorOptions) GetTopK() int32 {
	if m != nil {
		return m.TopK
	}
	return 0
}

func (m *TensorsToClassificationCalculatorOptions) GetSortByDescendingScore() bool {
	if m != nil {
		return m.SortByDescendingScore
	}
	return false
}

func (m *TensorsToClassificationCalculatorOptions) GetLabelMapPath() string {
	if m != nil {
		return m.LabelMapPath
	}
	return ""
}

func (m *TensorsToClassificationCalculatorOptions) GetLabelMap() *TensorsToClassificationCalculatorOptions_LabelMap {
	if m != nil {
		return m.LabelMap
	}
	return nil
}

func (m *TensorsToClassificationCalculatorOptions) GetLabelItems() map[int64]*util.LabelMapItem {
	if m != nil {
		return m.LabelItems
	}
	return nil
}

func (m *TensorsToClassificationCalculatorOptions) GetBinaryClassification() bool {
	if m != nil {
		return m.BinaryClassification
	}
	return false
}

func (m *TensorsToClassificationCalculatorOptions) GetIgnoreClasses() []int32 {
	if m != nil {
		return m.IgnoreClasses
	}
	return nil
}

func (m *TensorsToClassificationCalculatorOptions) GetAllowClasses() []int32 {
	if m != nil {
		return m.AllowClasses
	}
	return nil
}

var E_TensorsToClassificationCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*TensorsToClassificationCalculatorOptions)(nil),
	Field:         335742638,
	Name:          "mediapipe.TensorsToClassificationCalculatorOptions.ext",
	Tag:           "bytes,335742638,opt,name=ext",
	Filename:      "mediapipe/calculators/tensor/tensors_to_classification_calculator.proto",
}

type TensorsToClassificationCalculatorOptions_LabelMap struct {
	Entries []*TensorsToClassificationCalculatorOptions_LabelMap_Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *TensorsToClassificationCalculatorOptions_LabelMap) Reset() {
	*m = TensorsToClassificationCalculatorOptions_LabelMap{}
}
func (*TensorsToClassificationCalculatorOptions_LabelMap) ProtoMessage() {}
func (*TensorsToClassificationCalculatorOptions_LabelMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_e351490a9e6589d1, []int{0, 0}
}
func (m *TensorsToClassificationCalculatorOptions_LabelMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TensorsToClassificationCalculatorOptions_LabelMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TensorsToClassificationCalculatorOptions_LabelMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TensorsToClassificationCalculatorOptions_LabelMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TensorsToClassificationCalculatorOptions_LabelMap.Merge(m, src)
}
func (m *TensorsToClassificationCalculatorOptions_LabelMap) XXX_Size() int {
	return m.Size()
}
func (m *TensorsToClassificationCalculatorOptions_LabelMap) XXX_DiscardUnknown() {
	xxx_messageInfo_TensorsToClassificationCalculatorOptions_LabelMap.DiscardUnknown(m)
}

var xxx_messageInfo_TensorsToClassificationCalculatorOptions_LabelMap proto.InternalMessageInfo

func (m *TensorsToClassificationCalculatorOptions_LabelMap) GetEntries() []*TensorsToClassificationCalculatorOptions_LabelMap_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type TensorsToClassificationCalculatorOptions_LabelMap_Entry struct {
	Id    int32  `protobuf:"varint,1,opt,name=id" json:"id"`
	Label string `protobuf:"bytes,2,opt,name=label" json:"label"`
}

func (m *TensorsToClassificationCalculatorOptions_LabelMap_Entry) Reset() {
	*m = TensorsToClassificationCalculatorOptions_LabelMap_Entry{}
}
func (*TensorsToClassificationCalculatorOptions_LabelMap_Entry) ProtoMessage() {}
func (*TensorsToClassificationCalculatorOptions_LabelMap_Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e351490a9e6589d1, []int{0, 0, 0}
}
func (m *TensorsToClassificationCalculatorOptions_LabelMap_Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TensorsToClassificationCalculatorOptions_LabelMap_Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TensorsToClassificationCalculatorOptions_LabelMap_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TensorsToClassificationCalculatorOptions_LabelMap_Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TensorsToClassificationCalculatorOptions_LabelMap_Entry.Merge(m, src)
}
func (m *TensorsToClassificationCalculatorOptions_LabelMap_Entry) XXX_Size() int {
	return m.Size()
}
func (m *TensorsToClassificationCalculatorOptions_LabelMap_Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_TensorsToClassificationCalculatorOptions_LabelMap_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_TensorsToClassificationCalculatorOptions_LabelMap_Entry proto.InternalMessageInfo

func (m *TensorsToClassificationCalculatorOptions_LabelMap_Entry) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TensorsToClassificationCalculatorOptions_LabelMap_Entry) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func init() {
	proto.RegisterExtension(E_TensorsToClassificationCalculatorOptions_Ext)
	proto.RegisterType((*TensorsToClassificationCalculatorOptions)(nil), "mediapipe.TensorsToClassificationCalculatorOptions")
	proto.RegisterMapType((map[int64]*util.LabelMapItem)(nil), "mediapipe.TensorsToClassificationCalculatorOptions.LabelItemsEntry")
	proto.RegisterType((*TensorsToClassificationCalculatorOptions_LabelMap)(nil), "mediapipe.TensorsToClassificationCalculatorOptions.LabelMap")
	proto.RegisterType((*TensorsToClassificationCalculatorOptions_LabelMap_Entry)(nil), "mediapipe.TensorsToClassificationCalculatorOptions.LabelMap.Entry")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/tensor/tensors_to_classification_calculator.proto", fileDescriptor_e351490a9e6589d1)
}

var fileDescriptor_e351490a9e6589d1 = []byte{
	// 606 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x4f, 0x6b, 0xd4, 0x40,
	0x18, 0xc6, 0x33, 0xbb, 0x8d, 0xdd, 0x9d, 0x6d, 0xab, 0x8e, 0xad, 0xc6, 0x45, 0xc6, 0x20, 0x82,
	0x51, 0x70, 0x03, 0xab, 0x87, 0x56, 0xf4, 0xb2, 0xab, 0x88, 0xa8, 0x28, 0xb1, 0x17, 0xa5, 0x10,
	0x66, 0x93, 0x69, 0x76, 0xe8, 0x24, 0x13, 0x32, 0xb3, 0xd6, 0xbd, 0xf9, 0x01, 0x14, 0xfc, 0x08,
	0x42, 0x2f, 0x9e, 0xfc, 0x1c, 0x3d, 0xf6, 0xd8, 0x93, 0xd8, 0xf4, 0xe2, 0xb1, 0x1f, 0x41, 0xf2,
	0x77, 0xdb, 0x0a, 0x22, 0xf5, 0xb4, 0xec, 0xfb, 0x3c, 0xf3, 0x7b, 0xf3, 0x3e, 0xf3, 0x32, 0xf0,
	0x69, 0x48, 0x7d, 0x46, 0x62, 0x16, 0x53, 0xdb, 0x23, 0xdc, 0x9b, 0x70, 0xa2, 0x44, 0x22, 0x6d,
	0x45, 0x23, 0x29, 0x92, 0xf2, 0x47, 0xba, 0x4a, 0xb8, 0x1e, 0x27, 0x52, 0xb2, 0x4d, 0xe6, 0x11,
	0xc5, 0x44, 0xe4, 0xce, 0xcc, 0xbd, 0x38, 0x11, 0x4a, 0xa0, 0x76, 0x0d, 0xea, 0xde, 0x9c, 0x31,
	0x37, 0x13, 0x12, 0xd2, 0x6d, 0x91, 0x6c, 0xd9, 0xa7, 0x0f, 0x74, 0xf1, 0xcc, 0x35, 0x51, 0x8c,
	0xdb, 0x9c, 0x8c, 0x28, 0x77, 0x43, 0x12, 0x17, 0xfa, 0x8d, 0x9d, 0x79, 0x68, 0xad, 0x17, 0xfd,
	0xd7, 0xc5, 0xf0, 0x44, 0xf7, 0x61, 0xcd, 0x7a, 0x15, 0x67, 0xff, 0x25, 0xba, 0x0f, 0x2f, 0x85,
	0x2c, 0x72, 0xa5, 0x27, 0x12, 0xea, 0xaa, 0x71, 0x42, 0xe5, 0x58, 0x70, 0xdf, 0x00, 0x26, 0xb0,
	0x1a, 0x83, 0xb9, 0xdd, 0x1f, 0xd7, 0x35, 0xe7, 0x62, 0xc8, 0xa2, 0x37, 0x99, 0xbe, 0x5e, 0xc9,
	0xe8, 0x2a, 0xd4, 0x95, 0x88, 0xdd, 0x2d, 0xa3, 0x61, 0x02, 0x4b, 0x2f, 0x7d, 0x73, 0x4a, 0xc4,
	0xcf, 0xd1, 0x23, 0x68, 0x48, 0x91, 0x28, 0x77, 0x34, 0x75, 0x7d, 0x2a, 0x3d, 0x1a, 0xf9, 0x2c,
	0x0a, 0x0a, 0xbe, 0xd1, 0x36, 0x81, 0xd5, 0x2a, 0xdd, 0x2b, 0x99, 0x6b, 0x30, 0x7d, 0x5c, 0x7b,
	0xf2, 0x16, 0xe8, 0x0e, 0x5c, 0xaa, 0xe7, 0x71, 0x63, 0xa2, 0xc6, 0x46, 0xd3, 0x04, 0x56, 0xbb,
	0x3c, 0xb4, 0x90, 0x6b, 0x2f, 0x49, 0xfc, 0x9a, 0xa8, 0x31, 0x7a, 0x0b, 0xdb, 0xb5, 0xd7, 0xd0,
	0x4d, 0x60, 0x75, 0xfa, 0x0f, 0x7b, 0x75, 0x38, 0xbd, 0x7f, 0xcd, 0xa0, 0xf7, 0xa2, 0x84, 0x3a,
	0xad, 0x0a, 0x8f, 0x7c, 0xd8, 0x29, 0xd0, 0x4c, 0xd1, 0x50, 0x1a, 0xe7, 0xcc, 0xa6, 0xd5, 0xe9,
	0x0f, 0xcf, 0x0c, 0x7f, 0x96, 0x51, 0x9e, 0x44, 0x2a, 0x99, 0x3a, 0x90, 0xd7, 0x05, 0xb4, 0x06,
	0x57, 0x46, 0x2c, 0x22, 0xc9, 0xf4, 0xd4, 0x92, 0x18, 0x73, 0xc7, 0x82, 0x5a, 0x2e, 0x2c, 0x27,
	0xfb, 0xa0, 0xdb, 0x70, 0x89, 0x05, 0x51, 0x76, 0x69, 0xf9, 0x51, 0x2a, 0x8d, 0x79, 0xb3, 0x69,
	0xe9, 0x83, 0xc6, 0x05, 0xe0, 0x2c, 0x16, 0xca, 0xb0, 0x10, 0xd0, 0x2d, 0xb8, 0x48, 0x38, 0x17,
	0xdb, 0xb5, 0xb3, 0x55, 0x3b, 0x17, 0x72, 0xa1, 0x34, 0x76, 0x77, 0x00, 0x6c, 0x55, 0x59, 0xa0,
	0x0d, 0x38, 0x4f, 0x23, 0x95, 0x30, 0x2a, 0x0d, 0x90, 0x4f, 0x3f, 0xf8, 0x9f, 0x68, 0x7b, 0xc5,
	0xf0, 0x15, 0xb2, 0xbb, 0x06, 0xf5, 0xbc, 0x82, 0x96, 0x61, 0x83, 0x15, 0xeb, 0x56, 0xad, 0x51,
	0x83, 0xf9, 0xa8, 0x0b, 0xf5, 0x3c, 0xa6, 0x7c, 0xbf, 0xaa, 0xcb, 0x2f, 0x4a, 0xdd, 0x0d, 0x78,
	0xfe, 0x54, 0xa6, 0xe8, 0x32, 0x6c, 0x6e, 0xd1, 0x69, 0x4e, 0x69, 0x96, 0xe6, 0xac, 0x80, 0xee,
	0x42, 0xfd, 0x3d, 0xe1, 0x13, 0x9a, 0x63, 0x3a, 0xfd, 0x2b, 0xc7, 0x26, 0xa8, 0x3e, 0x2c, 0xa3,
	0x38, 0x85, 0xeb, 0x41, 0x63, 0x15, 0xf4, 0x03, 0xd8, 0xa4, 0x1f, 0x14, 0xba, 0x76, 0xcc, 0xfa,
	0xc7, 0x54, 0xc6, 0xf7, 0xcf, 0x9f, 0xbe, 0x82, 0x1c, 0x79, 0xef, 0x0c, 0xa1, 0x38, 0x59, 0x87,
	0x41, 0xb4, 0x77, 0x80, 0xb5, 0xfd, 0x03, 0xac, 0x1d, 0x1d, 0x60, 0xf0, 0x31, 0xc5, 0xe0, 0x5b,
	0x8a, 0xc1, 0x6e, 0x8a, 0xc1, 0x5e, 0x8a, 0xc1, 0xcf, 0x14, 0x83, 0x5f, 0x29, 0xd6, 0x8e, 0x52,
	0x0c, 0xbe, 0x1c, 0x62, 0x6d, 0xef, 0x10, 0x6b, 0xfb, 0x87, 0x58, 0x7b, 0xb7, 0x1a, 0x30, 0x35,
	0x9e, 0x8c, 0x7a, 0x9e, 0x08, 0xed, 0x40, 0x88, 0x80, 0x53, 0x7b, 0xf6, 0x1a, 0xfc, 0xed, 0x45,
	0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x71, 0x26, 0xdc, 0x7c, 0xb0, 0x04, 0x00, 0x00,
}

func (this *TensorsToClassificationCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TensorsToClassificationCalculatorOptions)
	if !ok {
		that2, ok := that.(TensorsToClassificationCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinScoreThreshold != that1.MinScoreThreshold {
		return false
	}
	if this.TopK != that1.TopK {
		return false
	}
	if this.SortByDescendingScore != that1.SortByDescendingScore {
		return false
	}
	if this.LabelMapPath != that1.LabelMapPath {
		return false
	}
	if !this.LabelMap.Equal(that1.LabelMap) {
		return false
	}
	if len(this.LabelItems) != len(that1.LabelItems) {
		return false
	}
	for i := range this.LabelItems {
		if !this.LabelItems[i].Equal(that1.LabelItems[i]) {
			return false
		}
	}
	if this.BinaryClassification != that1.BinaryClassification {
		return false
	}
	if len(this.IgnoreClasses) != len(that1.IgnoreClasses) {
		return false
	}
	for i := range this.IgnoreClasses {
		if this.IgnoreClasses[i] != that1.IgnoreClasses[i] {
			return false
		}
	}
	if len(this.AllowClasses) != len(that1.AllowClasses) {
		return false
	}
	for i := range this.AllowClasses {
		if this.AllowClasses[i] != that1.AllowClasses[i] {
			return false
		}
	}
	return true
}
func (this *TensorsToClassificationCalculatorOptions_LabelMap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TensorsToClassificationCalculatorOptions_LabelMap)
	if !ok {
		that2, ok := that.(TensorsToClassificationCalculatorOptions_LabelMap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Entries) != len(that1.Entries) {
		return false
	}
	for i := range this.Entries {
		if !this.Entries[i].Equal(that1.Entries[i]) {
			return false
		}
	}
	return true
}
func (this *TensorsToClassificationCalculatorOptions_LabelMap_Entry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TensorsToClassificationCalculatorOptions_LabelMap_Entry)
	if !ok {
		that2, ok := that.(TensorsToClassificationCalculatorOptions_LabelMap_Entry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	return true
}
func (this *TensorsToClassificationCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&tensor.TensorsToClassificationCalculatorOptions{")
	s = append(s, "MinScoreThreshold: "+fmt.Sprintf("%#v", this.MinScoreThreshold)+",\n")
	s = append(s, "TopK: "+fmt.Sprintf("%#v", this.TopK)+",\n")
	s = append(s, "SortByDescendingScore: "+fmt.Sprintf("%#v", this.SortByDescendingScore)+",\n")
	s = append(s, "LabelMapPath: "+fmt.Sprintf("%#v", this.LabelMapPath)+",\n")
	if this.LabelMap != nil {
		s = append(s, "LabelMap: "+fmt.Sprintf("%#v", this.LabelMap)+",\n")
	}
	keysForLabelItems := make([]int64, 0, len(this.LabelItems))
	for k, _ := range this.LabelItems {
		keysForLabelItems = append(keysForLabelItems, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForLabelItems)
	mapStringForLabelItems := "map[int64]*util.LabelMapItem{"
	for _, k := range keysForLabelItems {
		mapStringForLabelItems += fmt.Sprintf("%#v: %#v,", k, this.LabelItems[k])
	}
	mapStringForLabelItems += "}"
	if this.LabelItems != nil {
		s = append(s, "LabelItems: "+mapStringForLabelItems+",\n")
	}
	s = append(s, "BinaryClassification: "+fmt.Sprintf("%#v", this.BinaryClassification)+",\n")
	if this.IgnoreClasses != nil {
		s = append(s, "IgnoreClasses: "+fmt.Sprintf("%#v", this.IgnoreClasses)+",\n")
	}
	if this.AllowClasses != nil {
		s = append(s, "AllowClasses: "+fmt.Sprintf("%#v", this.AllowClasses)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TensorsToClassificationCalculatorOptions_LabelMap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensor.TensorsToClassificationCalculatorOptions_LabelMap{")
	if this.Entries != nil {
		s = append(s, "Entries: "+fmt.Sprintf("%#v", this.Entries)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TensorsToClassificationCalculatorOptions_LabelMap_Entry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensor.TensorsToClassificationCalculatorOptions_LabelMap_Entry{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTensorsToClassificationCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TensorsToClassificationCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorsToClassificationCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TensorsToClassificationCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.SortByDescendingScore {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x48
	if len(m.AllowClasses) > 0 {
		dAtA2 := make([]byte, len(m.AllowClasses)*10)
		var j1 int
		for _, num1 := range m.AllowClasses {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTensorsToClassificationCalculator(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x42
	}
	if len(m.IgnoreClasses) > 0 {
		dAtA4 := make([]byte, len(m.IgnoreClasses)*10)
		var j3 int
		for _, num1 := range m.IgnoreClasses {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTensorsToClassificationCalculator(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LabelItems) > 0 {
		for k := range m.LabelItems {
			v := m.LabelItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTensorsToClassificationCalculator(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTensorsToClassificationCalculator(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTensorsToClassificationCalculator(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.LabelMap != nil {
		{
			size, err := m.LabelMap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTensorsToClassificationCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	i--
	if m.BinaryClassification {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i -= len(m.LabelMapPath)
	copy(dAtA[i:], m.LabelMapPath)
	i = encodeVarintTensorsToClassificationCalculator(dAtA, i, uint64(len(m.LabelMapPath)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintTensorsToClassificationCalculator(dAtA, i, uint64(m.TopK))
	i--
	dAtA[i] = 0x10
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MinScoreThreshold))))
	i--
	dAtA[i] = 0xd
	return len(dAtA) - i, nil
}

func (m *TensorsToClassificationCalculatorOptions_LabelMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorsToClassificationCalculatorOptions_LabelMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TensorsToClassificationCalculatorOptions_LabelMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTensorsToClassificationCalculator(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TensorsToClassificationCalculatorOptions_LabelMap_Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorsToClassificationCalculatorOptions_LabelMap_Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TensorsToClassificationCalculatorOptions_LabelMap_Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Label)
	copy(dAtA[i:], m.Label)
	i = encodeVarintTensorsToClassificationCalculator(dAtA, i, uint64(len(m.Label)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintTensorsToClassificationCalculator(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintTensorsToClassificationCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovTensorsToClassificationCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TensorsToClassificationCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	n += 1 + sovTensorsToClassificationCalculator(uint64(m.TopK))
	l = len(m.LabelMapPath)
	n += 1 + l + sovTensorsToClassificationCalculator(uint64(l))
	n += 2
	if m.LabelMap != nil {
		l = m.LabelMap.Size()
		n += 1 + l + sovTensorsToClassificationCalculator(uint64(l))
	}
	if len(m.LabelItems) > 0 {
		for k, v := range m.LabelItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTensorsToClassificationCalculator(uint64(l))
			}
			mapEntrySize := 1 + sovTensorsToClassificationCalculator(uint64(k)) + l
			n += mapEntrySize + 1 + sovTensorsToClassificationCalculator(uint64(mapEntrySize))
		}
	}
	if len(m.IgnoreClasses) > 0 {
		l = 0
		for _, e := range m.IgnoreClasses {
			l += sovTensorsToClassificationCalculator(uint64(e))
		}
		n += 1 + sovTensorsToClassificationCalculator(uint64(l)) + l
	}
	if len(m.AllowClasses) > 0 {
		l = 0
		for _, e := range m.AllowClasses {
			l += sovTensorsToClassificationCalculator(uint64(e))
		}
		n += 1 + sovTensorsToClassificationCalculator(uint64(l)) + l
	}
	n += 2
	return n
}

func (m *TensorsToClassificationCalculatorOptions_LabelMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovTensorsToClassificationCalculator(uint64(l))
		}
	}
	return n
}

func (m *TensorsToClassificationCalculatorOptions_LabelMap_Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTensorsToClassificationCalculator(uint64(m.Id))
	l = len(m.Label)
	n += 1 + l + sovTensorsToClassificationCalculator(uint64(l))
	return n
}

func sovTensorsToClassificationCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTensorsToClassificationCalculator(x uint64) (n int) {
	return sovTensorsToClassificationCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TensorsToClassificationCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabelItems := make([]int64, 0, len(this.LabelItems))
	for k, _ := range this.LabelItems {
		keysForLabelItems = append(keysForLabelItems, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForLabelItems)
	mapStringForLabelItems := "map[int64]*util.LabelMapItem{"
	for _, k := range keysForLabelItems {
		mapStringForLabelItems += fmt.Sprintf("%v: %v,", k, this.LabelItems[k])
	}
	mapStringForLabelItems += "}"
	s := strings.Join([]string{`&TensorsToClassificationCalculatorOptions{`,
		`MinScoreThreshold:` + fmt.Sprintf("%v", this.MinScoreThreshold) + `,`,
		`TopK:` + fmt.Sprintf("%v", this.TopK) + `,`,
		`LabelMapPath:` + fmt.Sprintf("%v", this.LabelMapPath) + `,`,
		`BinaryClassification:` + fmt.Sprintf("%v", this.BinaryClassification) + `,`,
		`LabelMap:` + strings.Replace(fmt.Sprintf("%v", this.LabelMap), "TensorsToClassificationCalculatorOptions_LabelMap", "TensorsToClassificationCalculatorOptions_LabelMap", 1) + `,`,
		`LabelItems:` + mapStringForLabelItems + `,`,
		`IgnoreClasses:` + fmt.Sprintf("%v", this.IgnoreClasses) + `,`,
		`AllowClasses:` + fmt.Sprintf("%v", this.AllowClasses) + `,`,
		`SortByDescendingScore:` + fmt.Sprintf("%v", this.SortByDescendingScore) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TensorsToClassificationCalculatorOptions_LabelMap) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEntries := "[]*TensorsToClassificationCalculatorOptions_LabelMap_Entry{"
	for _, f := range this.Entries {
		repeatedStringForEntries += strings.Replace(fmt.Sprintf("%v", f), "TensorsToClassificationCalculatorOptions_LabelMap_Entry", "TensorsToClassificationCalculatorOptions_LabelMap_Entry", 1) + ","
	}
	repeatedStringForEntries += "}"
	s := strings.Join([]string{`&TensorsToClassificationCalculatorOptions_LabelMap{`,
		`Entries:` + repeatedStringForEntries + `,`,
		`}`,
	}, "")
	return s
}
func (this *TensorsToClassificationCalculatorOptions_LabelMap_Entry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TensorsToClassificationCalculatorOptions_LabelMap_Entry{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTensorsToClassificationCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TensorsToClassificationCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTensorsToClassificationCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorsToClassificationCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorsToClassificationCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinScoreThreshold", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MinScoreThreshold = float32(math.Float32frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopK", wireType)
			}
			m.TopK = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorsToClassificationCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopK |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelMapPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorsToClassificationCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTensorsToClassificationCalculator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTensorsToClassificationCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelMapPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryClassification", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorsToClassificationCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BinaryClassification = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorsToClassificationCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTensorsToClassificationCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTensorsToClassificationCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelMap == nil {
				m.LabelMap = &TensorsToClassificationCalculatorOptions_LabelMap{}
			}
			if err := m.LabelMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorsToClassificationCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTensorsToClassificationCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTensorsToClassificationCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelItems == nil {
				m.LabelItems = make(map[int64]*util.LabelMapItem)
			}
			var mapkey int64
			var mapvalue *util.LabelMapItem
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTensorsToClassificationCalculator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTensorsToClassificationCalculator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTensorsToClassificationCalculator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTensorsToClassificationCalculator
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTensorsToClassificationCalculator
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &util.LabelMapItem{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTensorsToClassificationCalculator(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTensorsToClassificationCalculator
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LabelItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTensorsToClassificationCalculator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IgnoreClasses = append(m.IgnoreClasses, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTensorsToClassificationCalculator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTensorsToClassificationCalculator
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTensorsToClassificationCalculator
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IgnoreClasses) == 0 {
					m.IgnoreClasses = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTensorsToClassificationCalculator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IgnoreClasses = append(m.IgnoreClasses, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreClasses", wireType)
			}
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTensorsToClassificationCalculator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllowClasses = append(m.AllowClasses, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTensorsToClassificationCalculator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTensorsToClassificationCalculator
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTensorsToClassificationCalculator
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AllowClasses) == 0 {
					m.AllowClasses = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTensorsToClassificationCalculator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllowClasses = append(m.AllowClasses, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowClasses", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortByDescendingScore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorsToClassificationCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SortByDescendingScore = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTensorsToClassificationCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTensorsToClassificationCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TensorsToClassificationCalculatorOptions_LabelMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTensorsToClassificationCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorsToClassificationCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTensorsToClassificationCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTensorsToClassificationCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &TensorsToClassificationCalculatorOptions_LabelMap_Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTensorsToClassificationCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTensorsToClassificationCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TensorsToClassificationCalculatorOptions_LabelMap_Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTensorsToClassificationCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorsToClassificationCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorsToClassificationCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTensorsToClassificationCalculator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTensorsToClassificationCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTensorsToClassificationCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTensorsToClassificationCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTensorsToClassificationCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTensorsToClassificationCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTensorsToClassificationCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTensorsToClassificationCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTensorsToClassificationCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTensorsToClassificationCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTensorsToClassificationCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTensorsToClassificationCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTensorsToClassificationCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTensorsToClassificationCalculator = fmt.Errorf("proto: unexpected end of group")
)
