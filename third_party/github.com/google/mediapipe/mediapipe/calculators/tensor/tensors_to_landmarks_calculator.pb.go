// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/tensor/tensors_to_landmarks_calculator.proto

package tensor

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TensorsToLandmarksCalculatorOptions_Activation int32

const (
	ACTIVATION_NONE    TensorsToLandmarksCalculatorOptions_Activation = 0
	ACTIVATION_SIGMOID TensorsToLandmarksCalculatorOptions_Activation = 1
)

var TensorsToLandmarksCalculatorOptions_Activation_name = map[int32]string{
	0: "ACTIVATION_NONE",
	1: "ACTIVATION_SIGMOID",
}

var TensorsToLandmarksCalculatorOptions_Activation_value = map[string]int32{
	"ACTIVATION_NONE":    0,
	"ACTIVATION_SIGMOID": 1,
}

func (x TensorsToLandmarksCalculatorOptions_Activation) Enum() *TensorsToLandmarksCalculatorOptions_Activation {
	p := new(TensorsToLandmarksCalculatorOptions_Activation)
	*p = x
	return p
}

func (x TensorsToLandmarksCalculatorOptions_Activation) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(TensorsToLandmarksCalculatorOptions_Activation_name, int32(x))
}

func (x *TensorsToLandmarksCalculatorOptions_Activation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TensorsToLandmarksCalculatorOptions_Activation_value, data, "TensorsToLandmarksCalculatorOptions_Activation")
	if err != nil {
		return err
	}
	*x = TensorsToLandmarksCalculatorOptions_Activation(value)
	return nil
}

func (TensorsToLandmarksCalculatorOptions_Activation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_81a789d7c67a97c5, []int{0, 0}
}

type TensorsToLandmarksCalculatorOptions struct {
	NumLandmarks         int32                                           `protobuf:"varint,1,opt,name=num_landmarks,json=numLandmarks" json:"num_landmarks"`
	InputImageWidth      int32                                           `protobuf:"varint,2,opt,name=input_image_width,json=inputImageWidth" json:"input_image_width"`
	InputImageHeight     int32                                           `protobuf:"varint,3,opt,name=input_image_height,json=inputImageHeight" json:"input_image_height"`
	FlipVertically       *bool                                           `protobuf:"varint,4,opt,name=flip_vertically,json=flipVertically,def=0" json:"flip_vertically,omitempty"`
	FlipHorizontally     *bool                                           `protobuf:"varint,6,opt,name=flip_horizontally,json=flipHorizontally,def=0" json:"flip_horizontally,omitempty"`
	NormalizeZ           *float32                                        `protobuf:"fixed32,5,opt,name=normalize_z,json=normalizeZ,def=1" json:"normalize_z,omitempty"`
	VisibilityActivation *TensorsToLandmarksCalculatorOptions_Activation `protobuf:"varint,7,opt,name=visibility_activation,json=visibilityActivation,enum=mediapipe.TensorsToLandmarksCalculatorOptions_Activation,def=0" json:"visibility_activation,omitempty"`
	PresenceActivation   *TensorsToLandmarksCalculatorOptions_Activation `protobuf:"varint,8,opt,name=presence_activation,json=presenceActivation,enum=mediapipe.TensorsToLandmarksCalculatorOptions_Activation,def=0" json:"presence_activation,omitempty"`
}

func (m *TensorsToLandmarksCalculatorOptions) Reset()      { *m = TensorsToLandmarksCalculatorOptions{} }
func (*TensorsToLandmarksCalculatorOptions) ProtoMessage() {}
func (*TensorsToLandmarksCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_81a789d7c67a97c5, []int{0}
}
func (m *TensorsToLandmarksCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TensorsToLandmarksCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TensorsToLandmarksCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TensorsToLandmarksCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TensorsToLandmarksCalculatorOptions.Merge(m, src)
}
func (m *TensorsToLandmarksCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *TensorsToLandmarksCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TensorsToLandmarksCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TensorsToLandmarksCalculatorOptions proto.InternalMessageInfo

const Default_TensorsToLandmarksCalculatorOptions_FlipVertically bool = false
const Default_TensorsToLandmarksCalculatorOptions_FlipHorizontally bool = false
const Default_TensorsToLandmarksCalculatorOptions_NormalizeZ float32 = 1
const Default_TensorsToLandmarksCalculatorOptions_VisibilityActivation TensorsToLandmarksCalculatorOptions_Activation = ACTIVATION_NONE
const Default_TensorsToLandmarksCalculatorOptions_PresenceActivation TensorsToLandmarksCalculatorOptions_Activation = ACTIVATION_NONE

func (m *TensorsToLandmarksCalculatorOptions) GetNumLandmarks() int32 {
	if m != nil {
		return m.NumLandmarks
	}
	return 0
}

func (m *TensorsToLandmarksCalculatorOptions) GetInputImageWidth() int32 {
	if m != nil {
		return m.InputImageWidth
	}
	return 0
}

func (m *TensorsToLandmarksCalculatorOptions) GetInputImageHeight() int32 {
	if m != nil {
		return m.InputImageHeight
	}
	return 0
}

func (m *TensorsToLandmarksCalculatorOptions) GetFlipVertically() bool {
	if m != nil && m.FlipVertically != nil {
		return *m.FlipVertically
	}
	return Default_TensorsToLandmarksCalculatorOptions_FlipVertically
}

func (m *TensorsToLandmarksCalculatorOptions) GetFlipHorizontally() bool {
	if m != nil && m.FlipHorizontally != nil {
		return *m.FlipHorizontally
	}
	return Default_TensorsToLandmarksCalculatorOptions_FlipHorizontally
}

func (m *TensorsToLandmarksCalculatorOptions) GetNormalizeZ() float32 {
	if m != nil && m.NormalizeZ != nil {
		return *m.NormalizeZ
	}
	return Default_TensorsToLandmarksCalculatorOptions_NormalizeZ
}

func (m *TensorsToLandmarksCalculatorOptions) GetVisibilityActivation() TensorsToLandmarksCalculatorOptions_Activation {
	if m != nil && m.VisibilityActivation != nil {
		return *m.VisibilityActivation
	}
	return Default_TensorsToLandmarksCalculatorOptions_VisibilityActivation
}

func (m *TensorsToLandmarksCalculatorOptions) GetPresenceActivation() TensorsToLandmarksCalculatorOptions_Activation {
	if m != nil && m.PresenceActivation != nil {
		return *m.PresenceActivation
	}
	return Default_TensorsToLandmarksCalculatorOptions_PresenceActivation
}

var E_TensorsToLandmarksCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*TensorsToLandmarksCalculatorOptions)(nil),
	Field:         335742640,
	Name:          "mediapipe.TensorsToLandmarksCalculatorOptions.ext",
	Tag:           "bytes,335742640,opt,name=ext",
	Filename:      "mediapipe/calculators/tensor/tensors_to_landmarks_calculator.proto",
}

func init() {
	proto.RegisterEnum("mediapipe.TensorsToLandmarksCalculatorOptions_Activation", TensorsToLandmarksCalculatorOptions_Activation_name, TensorsToLandmarksCalculatorOptions_Activation_value)
	proto.RegisterExtension(E_TensorsToLandmarksCalculatorOptions_Ext)
	proto.RegisterType((*TensorsToLandmarksCalculatorOptions)(nil), "mediapipe.TensorsToLandmarksCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/tensor/tensors_to_landmarks_calculator.proto", fileDescriptor_81a789d7c67a97c5)
}

var fileDescriptor_81a789d7c67a97c5 = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xc1, 0x6e, 0xd3, 0x30,
	0x1c, 0xc6, 0xe3, 0x6d, 0x85, 0xe1, 0xc1, 0xda, 0x79, 0x80, 0x22, 0x84, 0x4c, 0x55, 0x38, 0x94,
	0x4b, 0x0a, 0x3d, 0xb1, 0xde, 0xda, 0x81, 0x58, 0x25, 0x68, 0xa5, 0x50, 0x0d, 0x69, 0x97, 0xc8,
	0x4d, 0xdd, 0xc4, 0x9a, 0x63, 0x47, 0x8e, 0xd3, 0xb1, 0x72, 0x80, 0x07, 0x00, 0x89, 0x47, 0xe0,
	0xc8, 0x91, 0xc7, 0xd8, 0xb1, 0xc7, 0x49, 0x48, 0x88, 0xa6, 0x17, 0x8e, 0x7b, 0x04, 0x94, 0xc2,
	0x92, 0x68, 0x48, 0x08, 0x24, 0x4e, 0x91, 0xfc, 0x7d, 0xbf, 0xef, 0xfb, 0xc7, 0xc9, 0x1f, 0x76,
	0x02, 0x3a, 0x62, 0x24, 0x64, 0x21, 0x6d, 0xb8, 0x84, 0xbb, 0x31, 0x27, 0x5a, 0xaa, 0xa8, 0xa1,
	0xa9, 0x88, 0xa4, 0xfa, 0xf5, 0x88, 0x1c, 0x2d, 0x1d, 0x4e, 0xc4, 0x28, 0x20, 0xea, 0x30, 0x72,
	0x72, 0x9f, 0x15, 0x2a, 0xa9, 0x25, 0xba, 0x92, 0x65, 0xdc, 0xba, 0x97, 0xc7, 0x8d, 0x15, 0x09,
	0xe8, 0x91, 0x54, 0x87, 0x8d, 0x8b, 0x40, 0xed, 0x4b, 0x09, 0xde, 0x1d, 0xfc, 0x8c, 0x1e, 0xc8,
	0x67, 0xe7, 0xc1, 0xbb, 0x99, 0xad, 0x1f, 0x6a, 0x26, 0x45, 0x84, 0xee, 0xc3, 0x6b, 0x22, 0x0e,
	0xf2, 0x6a, 0x13, 0x54, 0x41, 0xbd, 0xd4, 0x59, 0x3b, 0xf9, 0x7a, 0xc7, 0xb0, 0xaf, 0x8a, 0x38,
	0xc8, 0x58, 0xf4, 0x00, 0x6e, 0x31, 0x11, 0xc6, 0xda, 0x61, 0x01, 0xf1, 0xa8, 0x73, 0xc4, 0x46,
	0xda, 0x37, 0x57, 0x0a, 0xf6, 0xf2, 0x52, 0xee, 0xa6, 0xea, 0xcb, 0x54, 0x44, 0x4d, 0x88, 0x8a,
	0x84, 0x4f, 0x99, 0xe7, 0x6b, 0x73, 0xb5, 0x80, 0x54, 0x72, 0x64, 0x6f, 0xa9, 0x22, 0x0b, 0x96,
	0xc7, 0x9c, 0x85, 0xce, 0x84, 0x2a, 0xcd, 0x5c, 0xc2, 0xf9, 0xb1, 0xb9, 0x56, 0x05, 0xf5, 0xf5,
	0x56, 0x69, 0x4c, 0x78, 0x44, 0xed, 0xcd, 0x54, 0xdd, 0xcf, 0x44, 0xd4, 0x84, 0x5b, 0x4b, 0xbf,
	0x2f, 0x15, 0x9b, 0x4a, 0xa1, 0x97, 0xc4, 0xa5, 0x22, 0x51, 0x49, 0xf5, 0xbd, 0x82, 0x8c, 0x6a,
	0x70, 0x43, 0x48, 0x15, 0x10, 0xce, 0xa6, 0xd4, 0x99, 0x9a, 0xa5, 0x2a, 0xa8, 0xaf, 0xb4, 0xc0,
	0x43, 0x1b, 0x66, 0xa7, 0x07, 0xe8, 0x0d, 0xbc, 0x31, 0x61, 0x11, 0x1b, 0x32, 0xce, 0xf4, 0xb1,
	0x43, 0x5c, 0xcd, 0x26, 0x24, 0xbd, 0x32, 0xf3, 0x72, 0x15, 0xd4, 0x37, 0x9b, 0x3b, 0x56, 0xf6,
	0x19, 0xac, 0xbf, 0xb8, 0x67, 0xab, 0x9d, 0x05, 0xb4, 0xca, 0xed, 0xdd, 0x41, 0x77, 0xbf, 0x3d,
	0xe8, 0xf6, 0x7b, 0x4e, 0xaf, 0xdf, 0x7b, 0x62, 0x5f, 0xcf, 0x8b, 0x72, 0x1b, 0x7a, 0x0d, 0xb7,
	0x43, 0x45, 0x23, 0x2a, 0x5c, 0x5a, 0xac, 0x5f, 0xff, 0xef, 0xf5, 0xe8, 0xbc, 0x26, 0x37, 0xd5,
	0x76, 0x20, 0x2c, 0x8c, 0xb2, 0x0d, 0x2f, 0x42, 0x15, 0x03, 0xdd, 0x84, 0xa8, 0x70, 0xf8, 0xa2,
	0xfb, 0xf4, 0x79, 0xbf, 0xfb, 0xb8, 0x02, 0x9a, 0x43, 0xb8, 0x4a, 0x5f, 0x69, 0x74, 0xbb, 0x30,
	0xe1, 0x6f, 0xf3, 0x98, 0x9f, 0xdf, 0xbf, 0xfb, 0x98, 0xfe, 0x69, 0x1b, 0x4d, 0xeb, 0xdf, 0xde,
	0xc4, 0x4e, 0xc3, 0x3b, 0x62, 0x36, 0xc7, 0xc6, 0xe9, 0x1c, 0x1b, 0x67, 0x73, 0x0c, 0xde, 0x26,
	0x18, 0x7c, 0x4a, 0x30, 0x38, 0x49, 0x30, 0x98, 0x25, 0x18, 0x7c, 0x4b, 0x30, 0xf8, 0x9e, 0x60,
	0xe3, 0x2c, 0xc1, 0xe0, 0xc3, 0x02, 0x1b, 0xb3, 0x05, 0x36, 0x4e, 0x17, 0xd8, 0x38, 0x78, 0xe4,
	0x31, 0xed, 0xc7, 0x43, 0xcb, 0x95, 0x41, 0xc3, 0x93, 0xd2, 0xe3, 0xb4, 0x91, 0xef, 0xd2, 0x9f,
	0x96, 0xf4, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x9d, 0x7f, 0xb8, 0xc3, 0x03, 0x00, 0x00,
}

func (x TensorsToLandmarksCalculatorOptions_Activation) String() string {
	s, ok := TensorsToLandmarksCalculatorOptions_Activation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *TensorsToLandmarksCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TensorsToLandmarksCalculatorOptions)
	if !ok {
		that2, ok := that.(TensorsToLandmarksCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NumLandmarks != that1.NumLandmarks {
		return false
	}
	if this.InputImageWidth != that1.InputImageWidth {
		return false
	}
	if this.InputImageHeight != that1.InputImageHeight {
		return false
	}
	if this.FlipVertically != nil && that1.FlipVertically != nil {
		if *this.FlipVertically != *that1.FlipVertically {
			return false
		}
	} else if this.FlipVertically != nil {
		return false
	} else if that1.FlipVertically != nil {
		return false
	}
	if this.FlipHorizontally != nil && that1.FlipHorizontally != nil {
		if *this.FlipHorizontally != *that1.FlipHorizontally {
			return false
		}
	} else if this.FlipHorizontally != nil {
		return false
	} else if that1.FlipHorizontally != nil {
		return false
	}
	if this.NormalizeZ != nil && that1.NormalizeZ != nil {
		if *this.NormalizeZ != *that1.NormalizeZ {
			return false
		}
	} else if this.NormalizeZ != nil {
		return false
	} else if that1.NormalizeZ != nil {
		return false
	}
	if this.VisibilityActivation != nil && that1.VisibilityActivation != nil {
		if *this.VisibilityActivation != *that1.VisibilityActivation {
			return false
		}
	} else if this.VisibilityActivation != nil {
		return false
	} else if that1.VisibilityActivation != nil {
		return false
	}
	if this.PresenceActivation != nil && that1.PresenceActivation != nil {
		if *this.PresenceActivation != *that1.PresenceActivation {
			return false
		}
	} else if this.PresenceActivation != nil {
		return false
	} else if that1.PresenceActivation != nil {
		return false
	}
	return true
}
func (this *TensorsToLandmarksCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&tensor.TensorsToLandmarksCalculatorOptions{")
	s = append(s, "NumLandmarks: "+fmt.Sprintf("%#v", this.NumLandmarks)+",\n")
	s = append(s, "InputImageWidth: "+fmt.Sprintf("%#v", this.InputImageWidth)+",\n")
	s = append(s, "InputImageHeight: "+fmt.Sprintf("%#v", this.InputImageHeight)+",\n")
	if this.FlipVertically != nil {
		s = append(s, "FlipVertically: "+valueToGoStringTensorsToLandmarksCalculator(this.FlipVertically, "bool")+",\n")
	}
	if this.FlipHorizontally != nil {
		s = append(s, "FlipHorizontally: "+valueToGoStringTensorsToLandmarksCalculator(this.FlipHorizontally, "bool")+",\n")
	}
	if this.NormalizeZ != nil {
		s = append(s, "NormalizeZ: "+valueToGoStringTensorsToLandmarksCalculator(this.NormalizeZ, "float32")+",\n")
	}
	if this.VisibilityActivation != nil {
		s = append(s, "VisibilityActivation: "+valueToGoStringTensorsToLandmarksCalculator(this.VisibilityActivation, "TensorsToLandmarksCalculatorOptions_Activation")+",\n")
	}
	if this.PresenceActivation != nil {
		s = append(s, "PresenceActivation: "+valueToGoStringTensorsToLandmarksCalculator(this.PresenceActivation, "TensorsToLandmarksCalculatorOptions_Activation")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTensorsToLandmarksCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TensorsToLandmarksCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorsToLandmarksCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TensorsToLandmarksCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PresenceActivation != nil {
		i = encodeVarintTensorsToLandmarksCalculator(dAtA, i, uint64(*m.PresenceActivation))
		i--
		dAtA[i] = 0x40
	}
	if m.VisibilityActivation != nil {
		i = encodeVarintTensorsToLandmarksCalculator(dAtA, i, uint64(*m.VisibilityActivation))
		i--
		dAtA[i] = 0x38
	}
	if m.FlipHorizontally != nil {
		i--
		if *m.FlipHorizontally {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.NormalizeZ != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.NormalizeZ))))
		i--
		dAtA[i] = 0x2d
	}
	if m.FlipVertically != nil {
		i--
		if *m.FlipVertically {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	i = encodeVarintTensorsToLandmarksCalculator(dAtA, i, uint64(m.InputImageHeight))
	i--
	dAtA[i] = 0x18
	i = encodeVarintTensorsToLandmarksCalculator(dAtA, i, uint64(m.InputImageWidth))
	i--
	dAtA[i] = 0x10
	i = encodeVarintTensorsToLandmarksCalculator(dAtA, i, uint64(m.NumLandmarks))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintTensorsToLandmarksCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovTensorsToLandmarksCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TensorsToLandmarksCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTensorsToLandmarksCalculator(uint64(m.NumLandmarks))
	n += 1 + sovTensorsToLandmarksCalculator(uint64(m.InputImageWidth))
	n += 1 + sovTensorsToLandmarksCalculator(uint64(m.InputImageHeight))
	if m.FlipVertically != nil {
		n += 2
	}
	if m.NormalizeZ != nil {
		n += 5
	}
	if m.FlipHorizontally != nil {
		n += 2
	}
	if m.VisibilityActivation != nil {
		n += 1 + sovTensorsToLandmarksCalculator(uint64(*m.VisibilityActivation))
	}
	if m.PresenceActivation != nil {
		n += 1 + sovTensorsToLandmarksCalculator(uint64(*m.PresenceActivation))
	}
	return n
}

func sovTensorsToLandmarksCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTensorsToLandmarksCalculator(x uint64) (n int) {
	return sovTensorsToLandmarksCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TensorsToLandmarksCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TensorsToLandmarksCalculatorOptions{`,
		`NumLandmarks:` + fmt.Sprintf("%v", this.NumLandmarks) + `,`,
		`InputImageWidth:` + fmt.Sprintf("%v", this.InputImageWidth) + `,`,
		`InputImageHeight:` + fmt.Sprintf("%v", this.InputImageHeight) + `,`,
		`FlipVertically:` + valueToStringTensorsToLandmarksCalculator(this.FlipVertically) + `,`,
		`NormalizeZ:` + valueToStringTensorsToLandmarksCalculator(this.NormalizeZ) + `,`,
		`FlipHorizontally:` + valueToStringTensorsToLandmarksCalculator(this.FlipHorizontally) + `,`,
		`VisibilityActivation:` + valueToStringTensorsToLandmarksCalculator(this.VisibilityActivation) + `,`,
		`PresenceActivation:` + valueToStringTensorsToLandmarksCalculator(this.PresenceActivation) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTensorsToLandmarksCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TensorsToLandmarksCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTensorsToLandmarksCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorsToLandmarksCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorsToLandmarksCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumLandmarks", wireType)
			}
			m.NumLandmarks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorsToLandmarksCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumLandmarks |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputImageWidth", wireType)
			}
			m.InputImageWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorsToLandmarksCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputImageWidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputImageHeight", wireType)
			}
			m.InputImageHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorsToLandmarksCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputImageHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlipVertically", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorsToLandmarksCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FlipVertically = &b
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalizeZ", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.NormalizeZ = &v2
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlipHorizontally", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorsToLandmarksCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FlipHorizontally = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityActivation", wireType)
			}
			var v TensorsToLandmarksCalculatorOptions_Activation
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorsToLandmarksCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= TensorsToLandmarksCalculatorOptions_Activation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VisibilityActivation = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PresenceActivation", wireType)
			}
			var v TensorsToLandmarksCalculatorOptions_Activation
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorsToLandmarksCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= TensorsToLandmarksCalculatorOptions_Activation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PresenceActivation = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTensorsToLandmarksCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTensorsToLandmarksCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTensorsToLandmarksCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTensorsToLandmarksCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTensorsToLandmarksCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTensorsToLandmarksCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTensorsToLandmarksCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTensorsToLandmarksCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTensorsToLandmarksCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTensorsToLandmarksCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTensorsToLandmarksCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTensorsToLandmarksCalculator = fmt.Errorf("proto: unexpected end of group")
)
