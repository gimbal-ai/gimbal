# Copyright Â© 2023- Gimlet Labs, Inc.
# All Rights Reserved.
#
# NOTICE:  All information contained herein is, and remains
# the property of Gimlet Labs, Inc. and its suppliers,
# if any.  The intellectual and technical concepts contained
# herein are proprietary to Gimlet Labs, Inc. and its suppliers and
# may be covered by U.S. and Foreign Patents, patents in process,
# and are protected by trade secret or copyright law. Dissemination
# of this information or reproduction of this material is strictly
# forbidden unless prior written permission is obtained from
# Gimlet Labs, Inc.
#
# SPDX-License-Identifier: Proprietary

load("@build_stack_rules_proto//rules:proto_compile.bzl", "proto_compile")
load("@build_stack_rules_proto//rules/cc:proto_cc_library.bzl", "proto_cc_library")
load("@build_stack_rules_proto//rules/go:proto_go_library.bzl", "proto_go_library")
load("@rules_proto//proto:defs.bzl", "proto_library")

proto_library(
    name = "util_proto",
    srcs = [
        "annotation_overlay_calculator.proto",
        "association_calculator.proto",
        "collection_has_min_size_calculator.proto",
        "detection_label_id_to_text_calculator.proto",
        "detections_to_rects_calculator.proto",
        "detections_to_render_data_calculator.proto",
        "face_to_rect_calculator.proto",
        "filter_detections_calculator.proto",
        "flat_color_image_calculator.proto",
        "labels_to_render_data_calculator.proto",
        "landmark_projection_calculator.proto",
        "landmarks_refinement_calculator.proto",
        "landmarks_smoothing_calculator.proto",
        "landmarks_to_detection_calculator.proto",
        "landmarks_to_floats_calculator.proto",
        "landmarks_to_render_data_calculator.proto",
        "latency.proto",
        "local_file_contents_calculator.proto",
        "logic_calculator.proto",
        "non_max_suppression_calculator.proto",
        "packet_frequency.proto",
        "packet_frequency_calculator.proto",
        "packet_latency_calculator.proto",
        "rect_to_render_data_calculator.proto",
        "rect_to_render_scale_calculator.proto",
        "rect_transformation_calculator.proto",
        "refine_landmarks_from_heatmap_calculator.proto",
        "thresholding_calculator.proto",
        "timed_box_list_id_to_label_calculator.proto",
        "timed_box_list_to_render_data_calculator.proto",
        "top_k_scores_calculator.proto",
        "visibility_copy_calculator.proto",
        "visibility_smoothing_calculator.proto",
    ],
    strip_import_prefix = "/third_party/github.com/google/mediapipe",
    visibility = ["//visibility:public"],
    deps = [
        "//third_party/github.com/google/mediapipe/mediapipe/framework:framework_proto",
        "//third_party/github.com/google/mediapipe/mediapipe/util:util_proto",
    ],
)

proto_cc_library(
    name = "util_cc_library",
    srcs = [
        "annotation_overlay_calculator.pb.cc",
        "association_calculator.pb.cc",
        "collection_has_min_size_calculator.pb.cc",
        "detection_label_id_to_text_calculator.pb.cc",
        "detections_to_rects_calculator.pb.cc",
        "detections_to_render_data_calculator.pb.cc",
        "face_to_rect_calculator.pb.cc",
        "filter_detections_calculator.pb.cc",
        "flat_color_image_calculator.pb.cc",
        "labels_to_render_data_calculator.pb.cc",
        "landmark_projection_calculator.pb.cc",
        "landmarks_refinement_calculator.pb.cc",
        "landmarks_smoothing_calculator.pb.cc",
        "landmarks_to_detection_calculator.pb.cc",
        "landmarks_to_floats_calculator.pb.cc",
        "landmarks_to_render_data_calculator.pb.cc",
        "latency.pb.cc",
        "local_file_contents_calculator.pb.cc",
        "logic_calculator.pb.cc",
        "non_max_suppression_calculator.pb.cc",
        "packet_frequency.pb.cc",
        "packet_frequency_calculator.pb.cc",
        "packet_latency_calculator.pb.cc",
        "rect_to_render_data_calculator.pb.cc",
        "rect_to_render_scale_calculator.pb.cc",
        "rect_transformation_calculator.pb.cc",
        "refine_landmarks_from_heatmap_calculator.pb.cc",
        "thresholding_calculator.pb.cc",
        "timed_box_list_id_to_label_calculator.pb.cc",
        "timed_box_list_to_render_data_calculator.pb.cc",
        "top_k_scores_calculator.pb.cc",
        "visibility_copy_calculator.pb.cc",
        "visibility_smoothing_calculator.pb.cc",
    ],
    hdrs = [
        "annotation_overlay_calculator.pb.h",
        "association_calculator.pb.h",
        "collection_has_min_size_calculator.pb.h",
        "detection_label_id_to_text_calculator.pb.h",
        "detections_to_rects_calculator.pb.h",
        "detections_to_render_data_calculator.pb.h",
        "face_to_rect_calculator.pb.h",
        "filter_detections_calculator.pb.h",
        "flat_color_image_calculator.pb.h",
        "labels_to_render_data_calculator.pb.h",
        "landmark_projection_calculator.pb.h",
        "landmarks_refinement_calculator.pb.h",
        "landmarks_smoothing_calculator.pb.h",
        "landmarks_to_detection_calculator.pb.h",
        "landmarks_to_floats_calculator.pb.h",
        "landmarks_to_render_data_calculator.pb.h",
        "latency.pb.h",
        "local_file_contents_calculator.pb.h",
        "logic_calculator.pb.h",
        "non_max_suppression_calculator.pb.h",
        "packet_frequency.pb.h",
        "packet_frequency_calculator.pb.h",
        "packet_latency_calculator.pb.h",
        "rect_to_render_data_calculator.pb.h",
        "rect_to_render_scale_calculator.pb.h",
        "rect_transformation_calculator.pb.h",
        "refine_landmarks_from_heatmap_calculator.pb.h",
        "thresholding_calculator.pb.h",
        "timed_box_list_id_to_label_calculator.pb.h",
        "timed_box_list_to_render_data_calculator.pb.h",
        "top_k_scores_calculator.pb.h",
        "visibility_copy_calculator.pb.h",
        "visibility_smoothing_calculator.pb.h",
    ],
    strip_include_prefix = "/third_party/github.com/google/mediapipe",
    visibility = ["//visibility:public"],
    deps = [
        "//third_party/github.com/google/mediapipe/mediapipe/framework:framework_cc_library",
        "//third_party/github.com/google/mediapipe/mediapipe/util:util_cc_library",
        "@com_google_protobuf//:protobuf",
    ],
)

proto_compile(
    name = "util_cpp_compile",
    output_mappings = [
        "annotation_overlay_calculator.pb.cc=mediapipe/calculators/util/annotation_overlay_calculator.pb.cc",
        "annotation_overlay_calculator.pb.h=mediapipe/calculators/util/annotation_overlay_calculator.pb.h",
        "association_calculator.pb.cc=mediapipe/calculators/util/association_calculator.pb.cc",
        "association_calculator.pb.h=mediapipe/calculators/util/association_calculator.pb.h",
        "collection_has_min_size_calculator.pb.cc=mediapipe/calculators/util/collection_has_min_size_calculator.pb.cc",
        "collection_has_min_size_calculator.pb.h=mediapipe/calculators/util/collection_has_min_size_calculator.pb.h",
        "detection_label_id_to_text_calculator.pb.cc=mediapipe/calculators/util/detection_label_id_to_text_calculator.pb.cc",
        "detection_label_id_to_text_calculator.pb.h=mediapipe/calculators/util/detection_label_id_to_text_calculator.pb.h",
        "detections_to_rects_calculator.pb.cc=mediapipe/calculators/util/detections_to_rects_calculator.pb.cc",
        "detections_to_rects_calculator.pb.h=mediapipe/calculators/util/detections_to_rects_calculator.pb.h",
        "detections_to_render_data_calculator.pb.cc=mediapipe/calculators/util/detections_to_render_data_calculator.pb.cc",
        "detections_to_render_data_calculator.pb.h=mediapipe/calculators/util/detections_to_render_data_calculator.pb.h",
        "face_to_rect_calculator.pb.cc=mediapipe/calculators/util/face_to_rect_calculator.pb.cc",
        "face_to_rect_calculator.pb.h=mediapipe/calculators/util/face_to_rect_calculator.pb.h",
        "filter_detections_calculator.pb.cc=mediapipe/calculators/util/filter_detections_calculator.pb.cc",
        "filter_detections_calculator.pb.h=mediapipe/calculators/util/filter_detections_calculator.pb.h",
        "flat_color_image_calculator.pb.cc=mediapipe/calculators/util/flat_color_image_calculator.pb.cc",
        "flat_color_image_calculator.pb.h=mediapipe/calculators/util/flat_color_image_calculator.pb.h",
        "labels_to_render_data_calculator.pb.cc=mediapipe/calculators/util/labels_to_render_data_calculator.pb.cc",
        "labels_to_render_data_calculator.pb.h=mediapipe/calculators/util/labels_to_render_data_calculator.pb.h",
        "landmark_projection_calculator.pb.cc=mediapipe/calculators/util/landmark_projection_calculator.pb.cc",
        "landmark_projection_calculator.pb.h=mediapipe/calculators/util/landmark_projection_calculator.pb.h",
        "landmarks_refinement_calculator.pb.cc=mediapipe/calculators/util/landmarks_refinement_calculator.pb.cc",
        "landmarks_refinement_calculator.pb.h=mediapipe/calculators/util/landmarks_refinement_calculator.pb.h",
        "landmarks_smoothing_calculator.pb.cc=mediapipe/calculators/util/landmarks_smoothing_calculator.pb.cc",
        "landmarks_smoothing_calculator.pb.h=mediapipe/calculators/util/landmarks_smoothing_calculator.pb.h",
        "landmarks_to_detection_calculator.pb.cc=mediapipe/calculators/util/landmarks_to_detection_calculator.pb.cc",
        "landmarks_to_detection_calculator.pb.h=mediapipe/calculators/util/landmarks_to_detection_calculator.pb.h",
        "landmarks_to_floats_calculator.pb.cc=mediapipe/calculators/util/landmarks_to_floats_calculator.pb.cc",
        "landmarks_to_floats_calculator.pb.h=mediapipe/calculators/util/landmarks_to_floats_calculator.pb.h",
        "landmarks_to_render_data_calculator.pb.cc=mediapipe/calculators/util/landmarks_to_render_data_calculator.pb.cc",
        "landmarks_to_render_data_calculator.pb.h=mediapipe/calculators/util/landmarks_to_render_data_calculator.pb.h",
        "latency.pb.cc=mediapipe/calculators/util/latency.pb.cc",
        "latency.pb.h=mediapipe/calculators/util/latency.pb.h",
        "local_file_contents_calculator.pb.cc=mediapipe/calculators/util/local_file_contents_calculator.pb.cc",
        "local_file_contents_calculator.pb.h=mediapipe/calculators/util/local_file_contents_calculator.pb.h",
        "logic_calculator.pb.cc=mediapipe/calculators/util/logic_calculator.pb.cc",
        "logic_calculator.pb.h=mediapipe/calculators/util/logic_calculator.pb.h",
        "non_max_suppression_calculator.pb.cc=mediapipe/calculators/util/non_max_suppression_calculator.pb.cc",
        "non_max_suppression_calculator.pb.h=mediapipe/calculators/util/non_max_suppression_calculator.pb.h",
        "packet_frequency.pb.cc=mediapipe/calculators/util/packet_frequency.pb.cc",
        "packet_frequency.pb.h=mediapipe/calculators/util/packet_frequency.pb.h",
        "packet_frequency_calculator.pb.cc=mediapipe/calculators/util/packet_frequency_calculator.pb.cc",
        "packet_frequency_calculator.pb.h=mediapipe/calculators/util/packet_frequency_calculator.pb.h",
        "packet_latency_calculator.pb.cc=mediapipe/calculators/util/packet_latency_calculator.pb.cc",
        "packet_latency_calculator.pb.h=mediapipe/calculators/util/packet_latency_calculator.pb.h",
        "rect_to_render_data_calculator.pb.cc=mediapipe/calculators/util/rect_to_render_data_calculator.pb.cc",
        "rect_to_render_data_calculator.pb.h=mediapipe/calculators/util/rect_to_render_data_calculator.pb.h",
        "rect_to_render_scale_calculator.pb.cc=mediapipe/calculators/util/rect_to_render_scale_calculator.pb.cc",
        "rect_to_render_scale_calculator.pb.h=mediapipe/calculators/util/rect_to_render_scale_calculator.pb.h",
        "rect_transformation_calculator.pb.cc=mediapipe/calculators/util/rect_transformation_calculator.pb.cc",
        "rect_transformation_calculator.pb.h=mediapipe/calculators/util/rect_transformation_calculator.pb.h",
        "refine_landmarks_from_heatmap_calculator.pb.cc=mediapipe/calculators/util/refine_landmarks_from_heatmap_calculator.pb.cc",
        "refine_landmarks_from_heatmap_calculator.pb.h=mediapipe/calculators/util/refine_landmarks_from_heatmap_calculator.pb.h",
        "thresholding_calculator.pb.cc=mediapipe/calculators/util/thresholding_calculator.pb.cc",
        "thresholding_calculator.pb.h=mediapipe/calculators/util/thresholding_calculator.pb.h",
        "timed_box_list_id_to_label_calculator.pb.cc=mediapipe/calculators/util/timed_box_list_id_to_label_calculator.pb.cc",
        "timed_box_list_id_to_label_calculator.pb.h=mediapipe/calculators/util/timed_box_list_id_to_label_calculator.pb.h",
        "timed_box_list_to_render_data_calculator.pb.cc=mediapipe/calculators/util/timed_box_list_to_render_data_calculator.pb.cc",
        "timed_box_list_to_render_data_calculator.pb.h=mediapipe/calculators/util/timed_box_list_to_render_data_calculator.pb.h",
        "top_k_scores_calculator.pb.cc=mediapipe/calculators/util/top_k_scores_calculator.pb.cc",
        "top_k_scores_calculator.pb.h=mediapipe/calculators/util/top_k_scores_calculator.pb.h",
        "visibility_copy_calculator.pb.cc=mediapipe/calculators/util/visibility_copy_calculator.pb.cc",
        "visibility_copy_calculator.pb.h=mediapipe/calculators/util/visibility_copy_calculator.pb.h",
        "visibility_smoothing_calculator.pb.cc=mediapipe/calculators/util/visibility_smoothing_calculator.pb.cc",
        "visibility_smoothing_calculator.pb.h=mediapipe/calculators/util/visibility_smoothing_calculator.pb.h",
    ],
    outputs = [
        "annotation_overlay_calculator.pb.cc",
        "annotation_overlay_calculator.pb.h",
        "association_calculator.pb.cc",
        "association_calculator.pb.h",
        "collection_has_min_size_calculator.pb.cc",
        "collection_has_min_size_calculator.pb.h",
        "detection_label_id_to_text_calculator.pb.cc",
        "detection_label_id_to_text_calculator.pb.h",
        "detections_to_rects_calculator.pb.cc",
        "detections_to_rects_calculator.pb.h",
        "detections_to_render_data_calculator.pb.cc",
        "detections_to_render_data_calculator.pb.h",
        "face_to_rect_calculator.pb.cc",
        "face_to_rect_calculator.pb.h",
        "filter_detections_calculator.pb.cc",
        "filter_detections_calculator.pb.h",
        "flat_color_image_calculator.pb.cc",
        "flat_color_image_calculator.pb.h",
        "labels_to_render_data_calculator.pb.cc",
        "labels_to_render_data_calculator.pb.h",
        "landmark_projection_calculator.pb.cc",
        "landmark_projection_calculator.pb.h",
        "landmarks_refinement_calculator.pb.cc",
        "landmarks_refinement_calculator.pb.h",
        "landmarks_smoothing_calculator.pb.cc",
        "landmarks_smoothing_calculator.pb.h",
        "landmarks_to_detection_calculator.pb.cc",
        "landmarks_to_detection_calculator.pb.h",
        "landmarks_to_floats_calculator.pb.cc",
        "landmarks_to_floats_calculator.pb.h",
        "landmarks_to_render_data_calculator.pb.cc",
        "landmarks_to_render_data_calculator.pb.h",
        "latency.pb.cc",
        "latency.pb.h",
        "local_file_contents_calculator.pb.cc",
        "local_file_contents_calculator.pb.h",
        "logic_calculator.pb.cc",
        "logic_calculator.pb.h",
        "non_max_suppression_calculator.pb.cc",
        "non_max_suppression_calculator.pb.h",
        "packet_frequency.pb.cc",
        "packet_frequency.pb.h",
        "packet_frequency_calculator.pb.cc",
        "packet_frequency_calculator.pb.h",
        "packet_latency_calculator.pb.cc",
        "packet_latency_calculator.pb.h",
        "rect_to_render_data_calculator.pb.cc",
        "rect_to_render_data_calculator.pb.h",
        "rect_to_render_scale_calculator.pb.cc",
        "rect_to_render_scale_calculator.pb.h",
        "rect_transformation_calculator.pb.cc",
        "rect_transformation_calculator.pb.h",
        "refine_landmarks_from_heatmap_calculator.pb.cc",
        "refine_landmarks_from_heatmap_calculator.pb.h",
        "thresholding_calculator.pb.cc",
        "thresholding_calculator.pb.h",
        "timed_box_list_id_to_label_calculator.pb.cc",
        "timed_box_list_id_to_label_calculator.pb.h",
        "timed_box_list_to_render_data_calculator.pb.cc",
        "timed_box_list_to_render_data_calculator.pb.h",
        "top_k_scores_calculator.pb.cc",
        "top_k_scores_calculator.pb.h",
        "visibility_copy_calculator.pb.cc",
        "visibility_copy_calculator.pb.h",
        "visibility_smoothing_calculator.pb.cc",
        "visibility_smoothing_calculator.pb.h",
    ],
    plugins = ["@build_stack_rules_proto//plugin/builtin:cpp"],
    proto = "util_proto",
    visibility = ["//visibility:public"],
)

proto_compile(
    name = "util_go_compile",
    output_mappings = [
        "annotation_overlay_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/annotation_overlay_calculator.pb.go",
        "association_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/association_calculator.pb.go",
        "collection_has_min_size_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/collection_has_min_size_calculator.pb.go",
        "detection_label_id_to_text_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/detection_label_id_to_text_calculator.pb.go",
        "detections_to_rects_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/detections_to_rects_calculator.pb.go",
        "detections_to_render_data_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/detections_to_render_data_calculator.pb.go",
        "face_to_rect_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/face_to_rect_calculator.pb.go",
        "filter_detections_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/filter_detections_calculator.pb.go",
        "flat_color_image_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/flat_color_image_calculator.pb.go",
        "labels_to_render_data_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/labels_to_render_data_calculator.pb.go",
        "landmark_projection_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/landmark_projection_calculator.pb.go",
        "landmarks_refinement_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/landmarks_refinement_calculator.pb.go",
        "landmarks_smoothing_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/landmarks_smoothing_calculator.pb.go",
        "landmarks_to_detection_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/landmarks_to_detection_calculator.pb.go",
        "landmarks_to_floats_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/landmarks_to_floats_calculator.pb.go",
        "landmarks_to_render_data_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/landmarks_to_render_data_calculator.pb.go",
        "latency.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/latency.pb.go",
        "local_file_contents_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/local_file_contents_calculator.pb.go",
        "logic_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/logic_calculator.pb.go",
        "non_max_suppression_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/non_max_suppression_calculator.pb.go",
        "packet_frequency.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/packet_frequency.pb.go",
        "packet_frequency_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/packet_frequency_calculator.pb.go",
        "packet_latency_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/packet_latency_calculator.pb.go",
        "rect_to_render_data_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/rect_to_render_data_calculator.pb.go",
        "rect_to_render_scale_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/rect_to_render_scale_calculator.pb.go",
        "rect_transformation_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/rect_transformation_calculator.pb.go",
        "refine_landmarks_from_heatmap_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/refine_landmarks_from_heatmap_calculator.pb.go",
        "thresholding_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/thresholding_calculator.pb.go",
        "timed_box_list_id_to_label_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/timed_box_list_id_to_label_calculator.pb.go",
        "timed_box_list_to_render_data_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/timed_box_list_to_render_data_calculator.pb.go",
        "top_k_scores_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/top_k_scores_calculator.pb.go",
        "visibility_copy_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/visibility_copy_calculator.pb.go",
        "visibility_smoothing_calculator.pb.go=github.com/google/mediapipe/mediapipe/calculators/util/visibility_smoothing_calculator.pb.go",
    ],
    outputs = [
        "annotation_overlay_calculator.pb.go",
        "association_calculator.pb.go",
        "collection_has_min_size_calculator.pb.go",
        "detection_label_id_to_text_calculator.pb.go",
        "detections_to_rects_calculator.pb.go",
        "detections_to_render_data_calculator.pb.go",
        "face_to_rect_calculator.pb.go",
        "filter_detections_calculator.pb.go",
        "flat_color_image_calculator.pb.go",
        "labels_to_render_data_calculator.pb.go",
        "landmark_projection_calculator.pb.go",
        "landmarks_refinement_calculator.pb.go",
        "landmarks_smoothing_calculator.pb.go",
        "landmarks_to_detection_calculator.pb.go",
        "landmarks_to_floats_calculator.pb.go",
        "landmarks_to_render_data_calculator.pb.go",
        "latency.pb.go",
        "local_file_contents_calculator.pb.go",
        "logic_calculator.pb.go",
        "non_max_suppression_calculator.pb.go",
        "packet_frequency.pb.go",
        "packet_frequency_calculator.pb.go",
        "packet_latency_calculator.pb.go",
        "rect_to_render_data_calculator.pb.go",
        "rect_to_render_scale_calculator.pb.go",
        "rect_transformation_calculator.pb.go",
        "refine_landmarks_from_heatmap_calculator.pb.go",
        "thresholding_calculator.pb.go",
        "timed_box_list_id_to_label_calculator.pb.go",
        "timed_box_list_to_render_data_calculator.pb.go",
        "top_k_scores_calculator.pb.go",
        "visibility_copy_calculator.pb.go",
        "visibility_smoothing_calculator.pb.go",
    ],
    plugins = ["@build_stack_rules_proto//plugin/gogo/protobuf:protoc-gen-gogoslick"],
    proto = "util_proto",
    visibility = ["//visibility:public"],
)

proto_go_library(
    name = "util_go_proto",
    srcs = [
        "annotation_overlay_calculator.pb.go",
        "association_calculator.pb.go",
        "collection_has_min_size_calculator.pb.go",
        "detection_label_id_to_text_calculator.pb.go",
        "detections_to_rects_calculator.pb.go",
        "detections_to_render_data_calculator.pb.go",
        "face_to_rect_calculator.pb.go",
        "filter_detections_calculator.pb.go",
        "flat_color_image_calculator.pb.go",
        "labels_to_render_data_calculator.pb.go",
        "landmark_projection_calculator.pb.go",
        "landmarks_refinement_calculator.pb.go",
        "landmarks_smoothing_calculator.pb.go",
        "landmarks_to_detection_calculator.pb.go",
        "landmarks_to_floats_calculator.pb.go",
        "landmarks_to_render_data_calculator.pb.go",
        "latency.pb.go",
        "local_file_contents_calculator.pb.go",
        "logic_calculator.pb.go",
        "non_max_suppression_calculator.pb.go",
        "packet_frequency.pb.go",
        "packet_frequency_calculator.pb.go",
        "packet_latency_calculator.pb.go",
        "rect_to_render_data_calculator.pb.go",
        "rect_to_render_scale_calculator.pb.go",
        "rect_transformation_calculator.pb.go",
        "refine_landmarks_from_heatmap_calculator.pb.go",
        "thresholding_calculator.pb.go",
        "timed_box_list_id_to_label_calculator.pb.go",
        "timed_box_list_to_render_data_calculator.pb.go",
        "top_k_scores_calculator.pb.go",
        "visibility_copy_calculator.pb.go",
        "visibility_smoothing_calculator.pb.go",
    ],
    importpath = "github.com/google/mediapipe/mediapipe/calculators/util",
    visibility = ["//visibility:public"],
    deps = [
        "//third_party/github.com/google/mediapipe/mediapipe/framework:framework_go_proto",
        "//third_party/github.com/google/mediapipe/mediapipe/util:util_go_proto",
        "@com_github_gogo_protobuf//proto",
        "@com_github_gogo_protobuf//protoc-gen-gogo/descriptor",
        "@com_github_gogo_protobuf//sortkeys",
        "@com_github_gogo_protobuf//types",
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//status",
    ],
)
