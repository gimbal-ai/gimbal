// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/annotation_overlay_calculator.proto

package util

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	util "github.com/google/mediapipe/mediapipe/util"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AnnotationOverlayCalculatorOptions struct {
	CanvasWidthPx        *int32      `protobuf:"varint,2,opt,name=canvas_width_px,json=canvasWidthPx,def=1920" json:"canvas_width_px,omitempty"`
	CanvasHeightPx       *int32      `protobuf:"varint,3,opt,name=canvas_height_px,json=canvasHeightPx,def=1080" json:"canvas_height_px,omitempty"`
	CanvasColor          *util.Color `protobuf:"bytes,4,opt,name=canvas_color,json=canvasColor" json:"canvas_color,omitempty"`
	FlipTextVertically   *bool       `protobuf:"varint,5,opt,name=flip_text_vertically,json=flipTextVertically,def=0" json:"flip_text_vertically,omitempty"`
	GpuUsesTopLeftOrigin *bool       `protobuf:"varint,6,opt,name=gpu_uses_top_left_origin,json=gpuUsesTopLeftOrigin,def=1" json:"gpu_uses_top_left_origin,omitempty"`
	GpuScaleFactor       *float32    `protobuf:"fixed32,7,opt,name=gpu_scale_factor,json=gpuScaleFactor,def=1" json:"gpu_scale_factor,omitempty"`
}

func (m *AnnotationOverlayCalculatorOptions) Reset()      { *m = AnnotationOverlayCalculatorOptions{} }
func (*AnnotationOverlayCalculatorOptions) ProtoMessage() {}
func (*AnnotationOverlayCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2ef80019f0277a, []int{0}
}
func (m *AnnotationOverlayCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnnotationOverlayCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnnotationOverlayCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnnotationOverlayCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnnotationOverlayCalculatorOptions.Merge(m, src)
}
func (m *AnnotationOverlayCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *AnnotationOverlayCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_AnnotationOverlayCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_AnnotationOverlayCalculatorOptions proto.InternalMessageInfo

const Default_AnnotationOverlayCalculatorOptions_CanvasWidthPx int32 = 1920
const Default_AnnotationOverlayCalculatorOptions_CanvasHeightPx int32 = 1080
const Default_AnnotationOverlayCalculatorOptions_FlipTextVertically bool = false
const Default_AnnotationOverlayCalculatorOptions_GpuUsesTopLeftOrigin bool = true
const Default_AnnotationOverlayCalculatorOptions_GpuScaleFactor float32 = 1

func (m *AnnotationOverlayCalculatorOptions) GetCanvasWidthPx() int32 {
	if m != nil && m.CanvasWidthPx != nil {
		return *m.CanvasWidthPx
	}
	return Default_AnnotationOverlayCalculatorOptions_CanvasWidthPx
}

func (m *AnnotationOverlayCalculatorOptions) GetCanvasHeightPx() int32 {
	if m != nil && m.CanvasHeightPx != nil {
		return *m.CanvasHeightPx
	}
	return Default_AnnotationOverlayCalculatorOptions_CanvasHeightPx
}

func (m *AnnotationOverlayCalculatorOptions) GetCanvasColor() *util.Color {
	if m != nil {
		return m.CanvasColor
	}
	return nil
}

func (m *AnnotationOverlayCalculatorOptions) GetFlipTextVertically() bool {
	if m != nil && m.FlipTextVertically != nil {
		return *m.FlipTextVertically
	}
	return Default_AnnotationOverlayCalculatorOptions_FlipTextVertically
}

func (m *AnnotationOverlayCalculatorOptions) GetGpuUsesTopLeftOrigin() bool {
	if m != nil && m.GpuUsesTopLeftOrigin != nil {
		return *m.GpuUsesTopLeftOrigin
	}
	return Default_AnnotationOverlayCalculatorOptions_GpuUsesTopLeftOrigin
}

func (m *AnnotationOverlayCalculatorOptions) GetGpuScaleFactor() float32 {
	if m != nil && m.GpuScaleFactor != nil {
		return *m.GpuScaleFactor
	}
	return Default_AnnotationOverlayCalculatorOptions_GpuScaleFactor
}

var E_AnnotationOverlayCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*AnnotationOverlayCalculatorOptions)(nil),
	Field:         250607623,
	Name:          "mediapipe.AnnotationOverlayCalculatorOptions.ext",
	Tag:           "bytes,250607623,opt,name=ext",
	Filename:      "mediapipe/calculators/util/annotation_overlay_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_AnnotationOverlayCalculatorOptions_Ext)
	proto.RegisterType((*AnnotationOverlayCalculatorOptions)(nil), "mediapipe.AnnotationOverlayCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/annotation_overlay_calculator.proto", fileDescriptor_0b2ef80019f0277a)
}

var fileDescriptor_0b2ef80019f0277a = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x8b, 0xd3, 0x4e,
	0x18, 0xc7, 0x33, 0xdb, 0xf6, 0xf7, 0xd3, 0xac, 0xae, 0x65, 0xd8, 0x43, 0x28, 0x32, 0x94, 0xc5,
	0x43, 0x41, 0x4d, 0xba, 0x15, 0xfc, 0x53, 0x44, 0xd0, 0x05, 0xf1, 0x20, 0x74, 0x89, 0xab, 0x82,
	0x97, 0x71, 0xcc, 0x4e, 0xd2, 0xc1, 0x69, 0x66, 0x98, 0x79, 0xd2, 0x66, 0x6f, 0xde, 0xbc, 0xfa,
	0x32, 0x7c, 0x13, 0xe2, 0xd5, 0x63, 0x8f, 0x7b, 0xb4, 0xe9, 0xc5, 0x63, 0x5f, 0x82, 0x24, 0xad,
	0xe9, 0xb2, 0x20, 0x1e, 0x33, 0x9f, 0xcf, 0xf7, 0x79, 0xe6, 0xc9, 0x3c, 0xee, 0x93, 0x09, 0x3f,
	0x15, 0x4c, 0x0b, 0xcd, 0x83, 0x88, 0xc9, 0x28, 0x93, 0x0c, 0x94, 0xb1, 0x41, 0x06, 0x42, 0x06,
	0x2c, 0x4d, 0x15, 0x30, 0x10, 0x2a, 0xa5, 0x6a, 0xca, 0x8d, 0x64, 0x67, 0x74, 0xeb, 0xf8, 0xda,
	0x28, 0x50, 0xf8, 0x6a, 0x9d, 0xef, 0xdc, 0xda, 0x96, 0x8a, 0x0d, 0x9b, 0xf0, 0x99, 0x32, 0x1f,
	0x83, 0xcb, 0x81, 0x4e, 0x67, 0x6b, 0x55, 0x4d, 0x22, 0x25, 0xff, 0xb0, 0x83, 0x6f, 0x0d, 0xf7,
	0xe0, 0x69, 0xdd, 0x74, 0xb4, 0xee, 0x79, 0x54, 0x57, 0x18, 0xe9, 0xf2, 0xd8, 0xe2, 0x3b, 0xee,
	0x8d, 0x88, 0xa5, 0x53, 0x66, 0xe9, 0x4c, 0x9c, 0xc2, 0x98, 0xea, 0xdc, 0xdb, 0xe9, 0xa2, 0x5e,
	0x6b, 0xd8, 0x3c, 0x7c, 0x34, 0xe8, 0x87, 0xd7, 0xd7, 0xf0, 0x6d, 0xc9, 0x8e, 0x73, 0xec, 0xbb,
	0xed, 0x8d, 0x3d, 0xe6, 0x22, 0x19, 0x43, 0xa9, 0x37, 0x36, 0x7a, 0xff, 0x61, 0x3f, 0xdc, 0x5b,
	0xd3, 0x17, 0x15, 0x3c, 0xce, 0xf1, 0x3d, 0xf7, 0xda, 0xc6, 0xaf, 0xae, 0xe6, 0x35, 0xbb, 0xa8,
	0xb7, 0x3b, 0x68, 0xfb, 0xf5, 0xbd, 0xfd, 0xa3, 0xf2, 0x3c, 0xdc, 0x5d, 0x5b, 0xd5, 0x07, 0x7e,
	0xe0, 0xee, 0xc7, 0x52, 0x68, 0x0a, 0x3c, 0x07, 0x3a, 0xe5, 0x06, 0x44, 0xc4, 0xa4, 0x3c, 0xf3,
	0x5a, 0x5d, 0xd4, 0xbb, 0x32, 0x6c, 0xc5, 0x4c, 0x5a, 0x1e, 0xe2, 0x52, 0x39, 0xe1, 0x39, 0xbc,
	0xa9, 0x05, 0xfc, 0xd8, 0xf5, 0x12, 0x9d, 0xd1, 0xcc, 0x72, 0x4b, 0x41, 0x69, 0x2a, 0x79, 0x0c,
	0x54, 0x19, 0x91, 0x88, 0xd4, 0xfb, 0xaf, 0x0a, 0x37, 0xc1, 0x64, 0x3c, 0xdc, 0x4f, 0x74, 0xf6,
	0xda, 0x72, 0x7b, 0xa2, 0xf4, 0x4b, 0x1e, 0xc3, 0xa8, 0x32, 0xf0, 0x6d, 0xb7, 0x5d, 0xa6, 0x6d,
	0xc4, 0x24, 0xa7, 0x31, 0x8b, 0x40, 0x19, 0xef, 0xff, 0x2e, 0xea, 0xed, 0x0c, 0xd1, 0x61, 0xb8,
	0x97, 0xe8, 0xec, 0x55, 0x49, 0x9e, 0x57, 0x60, 0xf0, 0xde, 0x6d, 0xf0, 0x1c, 0xf0, 0xcd, 0x8b,
	0x93, 0x5c, 0xfe, 0xb7, 0xde, 0xe7, 0xd5, 0xf7, 0x59, 0x35, 0xf0, 0xdd, 0x0b, 0xda, 0xbf, 0xdf,
	0x24, 0x2c, 0x4b, 0x3f, 0x93, 0xf3, 0x05, 0x71, 0xce, 0x17, 0xc4, 0x59, 0x2d, 0x08, 0xfa, 0x54,
	0x10, 0xf4, 0xb5, 0x20, 0xe8, 0x47, 0x41, 0xd0, 0xbc, 0x20, 0xe8, 0x67, 0x41, 0xd0, 0xaf, 0x82,
	0x38, 0xab, 0x82, 0xa0, 0x2f, 0x4b, 0xe2, 0xcc, 0x97, 0xc4, 0x39, 0x5f, 0x12, 0xe7, 0xdd, 0xfd,
	0x44, 0xc0, 0x38, 0xfb, 0xe0, 0x47, 0x6a, 0x12, 0x24, 0x4a, 0x25, 0x92, 0x07, 0xdb, 0x1d, 0xf9,
	0xfb, 0x7a, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x50, 0xc5, 0x94, 0xbb, 0x02, 0x00, 0x00,
}

func (this *AnnotationOverlayCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AnnotationOverlayCalculatorOptions)
	if !ok {
		that2, ok := that.(AnnotationOverlayCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CanvasWidthPx != nil && that1.CanvasWidthPx != nil {
		if *this.CanvasWidthPx != *that1.CanvasWidthPx {
			return false
		}
	} else if this.CanvasWidthPx != nil {
		return false
	} else if that1.CanvasWidthPx != nil {
		return false
	}
	if this.CanvasHeightPx != nil && that1.CanvasHeightPx != nil {
		if *this.CanvasHeightPx != *that1.CanvasHeightPx {
			return false
		}
	} else if this.CanvasHeightPx != nil {
		return false
	} else if that1.CanvasHeightPx != nil {
		return false
	}
	if !this.CanvasColor.Equal(that1.CanvasColor) {
		return false
	}
	if this.FlipTextVertically != nil && that1.FlipTextVertically != nil {
		if *this.FlipTextVertically != *that1.FlipTextVertically {
			return false
		}
	} else if this.FlipTextVertically != nil {
		return false
	} else if that1.FlipTextVertically != nil {
		return false
	}
	if this.GpuUsesTopLeftOrigin != nil && that1.GpuUsesTopLeftOrigin != nil {
		if *this.GpuUsesTopLeftOrigin != *that1.GpuUsesTopLeftOrigin {
			return false
		}
	} else if this.GpuUsesTopLeftOrigin != nil {
		return false
	} else if that1.GpuUsesTopLeftOrigin != nil {
		return false
	}
	if this.GpuScaleFactor != nil && that1.GpuScaleFactor != nil {
		if *this.GpuScaleFactor != *that1.GpuScaleFactor {
			return false
		}
	} else if this.GpuScaleFactor != nil {
		return false
	} else if that1.GpuScaleFactor != nil {
		return false
	}
	return true
}
func (this *AnnotationOverlayCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&util.AnnotationOverlayCalculatorOptions{")
	if this.CanvasWidthPx != nil {
		s = append(s, "CanvasWidthPx: "+valueToGoStringAnnotationOverlayCalculator(this.CanvasWidthPx, "int32")+",\n")
	}
	if this.CanvasHeightPx != nil {
		s = append(s, "CanvasHeightPx: "+valueToGoStringAnnotationOverlayCalculator(this.CanvasHeightPx, "int32")+",\n")
	}
	if this.CanvasColor != nil {
		s = append(s, "CanvasColor: "+fmt.Sprintf("%#v", this.CanvasColor)+",\n")
	}
	if this.FlipTextVertically != nil {
		s = append(s, "FlipTextVertically: "+valueToGoStringAnnotationOverlayCalculator(this.FlipTextVertically, "bool")+",\n")
	}
	if this.GpuUsesTopLeftOrigin != nil {
		s = append(s, "GpuUsesTopLeftOrigin: "+valueToGoStringAnnotationOverlayCalculator(this.GpuUsesTopLeftOrigin, "bool")+",\n")
	}
	if this.GpuScaleFactor != nil {
		s = append(s, "GpuScaleFactor: "+valueToGoStringAnnotationOverlayCalculator(this.GpuScaleFactor, "float32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAnnotationOverlayCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AnnotationOverlayCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnnotationOverlayCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnnotationOverlayCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GpuScaleFactor != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.GpuScaleFactor))))
		i--
		dAtA[i] = 0x3d
	}
	if m.GpuUsesTopLeftOrigin != nil {
		i--
		if *m.GpuUsesTopLeftOrigin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.FlipTextVertically != nil {
		i--
		if *m.FlipTextVertically {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.CanvasColor != nil {
		{
			size, err := m.CanvasColor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnnotationOverlayCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CanvasHeightPx != nil {
		i = encodeVarintAnnotationOverlayCalculator(dAtA, i, uint64(*m.CanvasHeightPx))
		i--
		dAtA[i] = 0x18
	}
	if m.CanvasWidthPx != nil {
		i = encodeVarintAnnotationOverlayCalculator(dAtA, i, uint64(*m.CanvasWidthPx))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func encodeVarintAnnotationOverlayCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovAnnotationOverlayCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AnnotationOverlayCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanvasWidthPx != nil {
		n += 1 + sovAnnotationOverlayCalculator(uint64(*m.CanvasWidthPx))
	}
	if m.CanvasHeightPx != nil {
		n += 1 + sovAnnotationOverlayCalculator(uint64(*m.CanvasHeightPx))
	}
	if m.CanvasColor != nil {
		l = m.CanvasColor.Size()
		n += 1 + l + sovAnnotationOverlayCalculator(uint64(l))
	}
	if m.FlipTextVertically != nil {
		n += 2
	}
	if m.GpuUsesTopLeftOrigin != nil {
		n += 2
	}
	if m.GpuScaleFactor != nil {
		n += 5
	}
	return n
}

func sovAnnotationOverlayCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAnnotationOverlayCalculator(x uint64) (n int) {
	return sovAnnotationOverlayCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AnnotationOverlayCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AnnotationOverlayCalculatorOptions{`,
		`CanvasWidthPx:` + valueToStringAnnotationOverlayCalculator(this.CanvasWidthPx) + `,`,
		`CanvasHeightPx:` + valueToStringAnnotationOverlayCalculator(this.CanvasHeightPx) + `,`,
		`CanvasColor:` + strings.Replace(fmt.Sprintf("%v", this.CanvasColor), "Color", "util.Color", 1) + `,`,
		`FlipTextVertically:` + valueToStringAnnotationOverlayCalculator(this.FlipTextVertically) + `,`,
		`GpuUsesTopLeftOrigin:` + valueToStringAnnotationOverlayCalculator(this.GpuUsesTopLeftOrigin) + `,`,
		`GpuScaleFactor:` + valueToStringAnnotationOverlayCalculator(this.GpuScaleFactor) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAnnotationOverlayCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AnnotationOverlayCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnnotationOverlayCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnotationOverlayCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnotationOverlayCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanvasWidthPx", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnotationOverlayCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanvasWidthPx = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanvasHeightPx", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnotationOverlayCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanvasHeightPx = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanvasColor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnotationOverlayCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnnotationOverlayCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnnotationOverlayCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CanvasColor == nil {
				m.CanvasColor = &util.Color{}
			}
			if err := m.CanvasColor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlipTextVertically", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnotationOverlayCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FlipTextVertically = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpuUsesTopLeftOrigin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnotationOverlayCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.GpuUsesTopLeftOrigin = &b
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpuScaleFactor", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.GpuScaleFactor = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipAnnotationOverlayCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnnotationOverlayCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAnnotationOverlayCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAnnotationOverlayCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnnotationOverlayCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnnotationOverlayCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAnnotationOverlayCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAnnotationOverlayCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAnnotationOverlayCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAnnotationOverlayCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAnnotationOverlayCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAnnotationOverlayCalculator = fmt.Errorf("proto: unexpected end of group")
)
