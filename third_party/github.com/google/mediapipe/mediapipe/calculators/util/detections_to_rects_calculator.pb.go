// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/detections_to_rects_calculator.proto

package util

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DetectionsToRectsCalculatorOptions_ConversionMode int32

const (
	DEFAULT          DetectionsToRectsCalculatorOptions_ConversionMode = 0
	USE_BOUNDING_BOX DetectionsToRectsCalculatorOptions_ConversionMode = 1
	USE_KEYPOINTS    DetectionsToRectsCalculatorOptions_ConversionMode = 2
)

var DetectionsToRectsCalculatorOptions_ConversionMode_name = map[int32]string{
	0: "DEFAULT",
	1: "USE_BOUNDING_BOX",
	2: "USE_KEYPOINTS",
}

var DetectionsToRectsCalculatorOptions_ConversionMode_value = map[string]int32{
	"DEFAULT":          0,
	"USE_BOUNDING_BOX": 1,
	"USE_KEYPOINTS":    2,
}

func (x DetectionsToRectsCalculatorOptions_ConversionMode) Enum() *DetectionsToRectsCalculatorOptions_ConversionMode {
	p := new(DetectionsToRectsCalculatorOptions_ConversionMode)
	*p = x
	return p
}

func (x DetectionsToRectsCalculatorOptions_ConversionMode) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(DetectionsToRectsCalculatorOptions_ConversionMode_name, int32(x))
}

func (x *DetectionsToRectsCalculatorOptions_ConversionMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DetectionsToRectsCalculatorOptions_ConversionMode_value, data, "DetectionsToRectsCalculatorOptions_ConversionMode")
	if err != nil {
		return err
	}
	*x = DetectionsToRectsCalculatorOptions_ConversionMode(value)
	return nil
}

func (DetectionsToRectsCalculatorOptions_ConversionMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1fc3b6898602554a, []int{0, 0}
}

type DetectionsToRectsCalculatorOptions struct {
	RotationVectorStartKeypointIndex int32                                             `protobuf:"varint,1,opt,name=rotation_vector_start_keypoint_index,json=rotationVectorStartKeypointIndex" json:"rotation_vector_start_keypoint_index"`
	RotationVectorEndKeypointIndex   int32                                             `protobuf:"varint,2,opt,name=rotation_vector_end_keypoint_index,json=rotationVectorEndKeypointIndex" json:"rotation_vector_end_keypoint_index"`
	RotationVectorTargetAngle        float32                                           `protobuf:"fixed32,3,opt,name=rotation_vector_target_angle,json=rotationVectorTargetAngle" json:"rotation_vector_target_angle"`
	RotationVectorTargetAngleDegrees float32                                           `protobuf:"fixed32,4,opt,name=rotation_vector_target_angle_degrees,json=rotationVectorTargetAngleDegrees" json:"rotation_vector_target_angle_degrees"`
	OutputZeroRectForEmptyDetections bool                                              `protobuf:"varint,5,opt,name=output_zero_rect_for_empty_detections,json=outputZeroRectForEmptyDetections" json:"output_zero_rect_for_empty_detections"`
	ConversionMode                   DetectionsToRectsCalculatorOptions_ConversionMode `protobuf:"varint,6,opt,name=conversion_mode,json=conversionMode,enum=mediapipe.DetectionsToRectsCalculatorOptions_ConversionMode" json:"conversion_mode"`
}

func (m *DetectionsToRectsCalculatorOptions) Reset()      { *m = DetectionsToRectsCalculatorOptions{} }
func (*DetectionsToRectsCalculatorOptions) ProtoMessage() {}
func (*DetectionsToRectsCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc3b6898602554a, []int{0}
}
func (m *DetectionsToRectsCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetectionsToRectsCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DetectionsToRectsCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DetectionsToRectsCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectionsToRectsCalculatorOptions.Merge(m, src)
}
func (m *DetectionsToRectsCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *DetectionsToRectsCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectionsToRectsCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_DetectionsToRectsCalculatorOptions proto.InternalMessageInfo

func (m *DetectionsToRectsCalculatorOptions) GetRotationVectorStartKeypointIndex() int32 {
	if m != nil {
		return m.RotationVectorStartKeypointIndex
	}
	return 0
}

func (m *DetectionsToRectsCalculatorOptions) GetRotationVectorEndKeypointIndex() int32 {
	if m != nil {
		return m.RotationVectorEndKeypointIndex
	}
	return 0
}

func (m *DetectionsToRectsCalculatorOptions) GetRotationVectorTargetAngle() float32 {
	if m != nil {
		return m.RotationVectorTargetAngle
	}
	return 0
}

func (m *DetectionsToRectsCalculatorOptions) GetRotationVectorTargetAngleDegrees() float32 {
	if m != nil {
		return m.RotationVectorTargetAngleDegrees
	}
	return 0
}

func (m *DetectionsToRectsCalculatorOptions) GetOutputZeroRectForEmptyDetections() bool {
	if m != nil {
		return m.OutputZeroRectForEmptyDetections
	}
	return false
}

func (m *DetectionsToRectsCalculatorOptions) GetConversionMode() DetectionsToRectsCalculatorOptions_ConversionMode {
	if m != nil {
		return m.ConversionMode
	}
	return DEFAULT
}

var E_DetectionsToRectsCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*DetectionsToRectsCalculatorOptions)(nil),
	Field:         262691807,
	Name:          "mediapipe.DetectionsToRectsCalculatorOptions.ext",
	Tag:           "bytes,262691807,opt,name=ext",
	Filename:      "mediapipe/calculators/util/detections_to_rects_calculator.proto",
}

func init() {
	proto.RegisterEnum("mediapipe.DetectionsToRectsCalculatorOptions_ConversionMode", DetectionsToRectsCalculatorOptions_ConversionMode_name, DetectionsToRectsCalculatorOptions_ConversionMode_value)
	proto.RegisterExtension(E_DetectionsToRectsCalculatorOptions_Ext)
	proto.RegisterType((*DetectionsToRectsCalculatorOptions)(nil), "mediapipe.DetectionsToRectsCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/detections_to_rects_calculator.proto", fileDescriptor_1fc3b6898602554a)
}

var fileDescriptor_1fc3b6898602554a = []byte{
	// 518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0xbd, 0x69, 0xf3, 0xfb, 0xc1, 0x56, 0x84, 0x60, 0x71, 0x30, 0xa8, 0x5a, 0xac, 0xa8,
	0x48, 0xb9, 0x10, 0x4b, 0x39, 0x70, 0x42, 0x42, 0x4d, 0xe3, 0xa0, 0xa8, 0x90, 0x54, 0xf9, 0x83,
	0xa0, 0x97, 0xc5, 0xd8, 0x53, 0x63, 0xc5, 0xf1, 0x5a, 0xeb, 0x75, 0x69, 0x91, 0x90, 0x78, 0x04,
	0x5e, 0x81, 0x1b, 0x6f, 0xc0, 0x2b, 0xf4, 0x98, 0x1b, 0x3d, 0x01, 0x71, 0x2e, 0x1c, 0xfb, 0x08,
	0x68, 0x93, 0xd4, 0x8e, 0x03, 0x15, 0xe2, 0xe8, 0xd1, 0x67, 0x3e, 0x9e, 0xd1, 0x77, 0x07, 0x3f,
	0x1e, 0x83, 0xe3, 0x59, 0xa1, 0x17, 0x82, 0x61, 0x5b, 0xbe, 0x1d, 0xfb, 0x96, 0x60, 0x3c, 0x32,
	0x62, 0xe1, 0xf9, 0x86, 0x03, 0x02, 0x6c, 0xe1, 0xb1, 0x20, 0xa2, 0x82, 0x51, 0x0e, 0xb6, 0x88,
	0x68, 0x06, 0xd5, 0x42, 0xce, 0x04, 0x53, 0xaf, 0xa7, 0x82, 0xbb, 0x3b, 0x99, 0xeb, 0x88, 0x5b,
	0x63, 0x78, 0xcb, 0xf8, 0xc8, 0x58, 0x6f, 0xa8, 0x7c, 0x2d, 0xe2, 0x4a, 0x33, 0x35, 0x0f, 0x58,
	0x4f, 0x7a, 0xf7, 0x52, 0xaa, 0x1b, 0xce, 0xeb, 0xea, 0x00, 0xef, 0x70, 0x26, 0x2c, 0xf9, 0x41,
	0x8f, 0xc1, 0x16, 0x8c, 0xd3, 0x48, 0x58, 0x5c, 0xd0, 0x11, 0x9c, 0x86, 0xcc, 0x0b, 0x04, 0xf5,
	0x02, 0x07, 0x4e, 0x34, 0xa4, 0xa3, 0x6a, 0xb1, 0xb1, 0x79, 0xf6, 0xed, 0x9e, 0xd2, 0xd3, 0x2f,
	0x3b, 0x9e, 0xcf, 0x1b, 0xfa, 0x92, 0xdf, 0x5f, 0xe2, 0x6d, 0x49, 0xab, 0x07, 0xb8, 0xb2, 0x6e,
	0x85, 0xc0, 0x59, 0x77, 0x16, 0x56, 0x9c, 0x24, 0xef, 0x34, 0x03, 0x27, 0x6f, 0x34, 0xf1, 0xf6,
	0xba, 0x51, 0x58, 0xdc, 0x05, 0x41, 0xad, 0xc0, 0xf5, 0x41, 0xdb, 0xd0, 0x51, 0xb5, 0xb0, 0x74,
	0xdd, 0xc9, 0xbb, 0x06, 0x73, 0x6e, 0x57, 0x62, 0x7f, 0x5a, 0x77, 0x55, 0x43, 0x1d, 0x70, 0x39,
	0x40, 0xa4, 0x6d, 0xae, 0xe8, 0xf4, 0x2b, 0x75, 0xcd, 0x05, 0xad, 0x0e, 0xf1, 0x7d, 0x16, 0x8b,
	0x30, 0x16, 0xf4, 0x1d, 0xf0, 0x45, 0x84, 0xf4, 0x48, 0xee, 0x3c, 0x0e, 0xc5, 0x29, 0xcd, 0xf2,
	0xd5, 0x8a, 0x3a, 0xaa, 0x5e, 0xbb, 0xd4, 0x2e, 0x5a, 0x0e, 0x81, 0xcf, 0xb3, 0x69, 0x31, 0x6e,
	0x4a, 0x3c, 0xcb, 0x4c, 0x1d, 0xe1, 0x9b, 0x36, 0x0b, 0x8e, 0x81, 0x47, 0x72, 0xdc, 0x31, 0x73,
	0x40, 0xfb, 0x4f, 0x47, 0xd5, 0x52, 0xfd, 0x51, 0x2d, 0x7d, 0x02, 0xb5, 0xbf, 0x67, 0x5c, 0xdb,
	0x4b, 0x25, 0xcf, 0x98, 0x03, 0xcb, 0xdf, 0x97, 0xec, 0x5c, 0xb5, 0xd2, 0xc2, 0xa5, 0x3c, 0xa7,
	0x6e, 0xe1, 0xff, 0x9b, 0x66, 0x6b, 0x77, 0xf8, 0x74, 0x50, 0x56, 0xd4, 0xdb, 0xb8, 0x3c, 0xec,
	0x9b, 0xb4, 0xd1, 0x1d, 0x76, 0x9a, 0xed, 0xce, 0x13, 0xda, 0xe8, 0xbe, 0x28, 0x23, 0xf5, 0x16,
	0xbe, 0x21, 0xab, 0xfb, 0xe6, 0xcb, 0x83, 0x6e, 0xbb, 0x33, 0xe8, 0x97, 0x0b, 0xf5, 0x57, 0x78,
	0x03, 0x4e, 0x84, 0xba, 0xbd, 0x32, 0xe2, 0x6f, 0x13, 0x69, 0xdf, 0xbf, 0x7c, 0x7a, 0xaf, 0xa3,
	0xea, 0x56, 0xfd, 0xc1, 0x3f, 0x6d, 0xd2, 0x93, 0xea, 0x86, 0x3f, 0x99, 0x12, 0xe5, 0x7c, 0x4a,
	0x94, 0x8b, 0x29, 0x41, 0x1f, 0x12, 0x82, 0x3e, 0x27, 0x04, 0x9d, 0x25, 0x04, 0x4d, 0x12, 0x82,
	0x7e, 0x24, 0x04, 0xfd, 0x4c, 0x88, 0x72, 0x91, 0x10, 0xf4, 0x71, 0x46, 0x94, 0xc9, 0x8c, 0x28,
	0xe7, 0x33, 0xa2, 0x1c, 0x3e, 0x74, 0x3d, 0xf1, 0x26, 0x7e, 0x5d, 0xb3, 0xd9, 0xd8, 0x70, 0x19,
	0x73, 0x7d, 0x30, 0xb2, 0x3b, 0xba, 0xfa, 0x3a, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xda, 0x68,
	0x51, 0x9b, 0xba, 0x03, 0x00, 0x00,
}

func (x DetectionsToRectsCalculatorOptions_ConversionMode) String() string {
	s, ok := DetectionsToRectsCalculatorOptions_ConversionMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *DetectionsToRectsCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionsToRectsCalculatorOptions)
	if !ok {
		that2, ok := that.(DetectionsToRectsCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RotationVectorStartKeypointIndex != that1.RotationVectorStartKeypointIndex {
		return false
	}
	if this.RotationVectorEndKeypointIndex != that1.RotationVectorEndKeypointIndex {
		return false
	}
	if this.RotationVectorTargetAngle != that1.RotationVectorTargetAngle {
		return false
	}
	if this.RotationVectorTargetAngleDegrees != that1.RotationVectorTargetAngleDegrees {
		return false
	}
	if this.OutputZeroRectForEmptyDetections != that1.OutputZeroRectForEmptyDetections {
		return false
	}
	if this.ConversionMode != that1.ConversionMode {
		return false
	}
	return true
}
func (this *DetectionsToRectsCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&util.DetectionsToRectsCalculatorOptions{")
	s = append(s, "RotationVectorStartKeypointIndex: "+fmt.Sprintf("%#v", this.RotationVectorStartKeypointIndex)+",\n")
	s = append(s, "RotationVectorEndKeypointIndex: "+fmt.Sprintf("%#v", this.RotationVectorEndKeypointIndex)+",\n")
	s = append(s, "RotationVectorTargetAngle: "+fmt.Sprintf("%#v", this.RotationVectorTargetAngle)+",\n")
	s = append(s, "RotationVectorTargetAngleDegrees: "+fmt.Sprintf("%#v", this.RotationVectorTargetAngleDegrees)+",\n")
	s = append(s, "OutputZeroRectForEmptyDetections: "+fmt.Sprintf("%#v", this.OutputZeroRectForEmptyDetections)+",\n")
	s = append(s, "ConversionMode: "+fmt.Sprintf("%#v", this.ConversionMode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDetectionsToRectsCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DetectionsToRectsCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetectionsToRectsCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionsToRectsCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintDetectionsToRectsCalculator(dAtA, i, uint64(m.ConversionMode))
	i--
	dAtA[i] = 0x30
	i--
	if m.OutputZeroRectForEmptyDetections {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RotationVectorTargetAngleDegrees))))
	i--
	dAtA[i] = 0x25
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RotationVectorTargetAngle))))
	i--
	dAtA[i] = 0x1d
	i = encodeVarintDetectionsToRectsCalculator(dAtA, i, uint64(m.RotationVectorEndKeypointIndex))
	i--
	dAtA[i] = 0x10
	i = encodeVarintDetectionsToRectsCalculator(dAtA, i, uint64(m.RotationVectorStartKeypointIndex))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintDetectionsToRectsCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovDetectionsToRectsCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DetectionsToRectsCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovDetectionsToRectsCalculator(uint64(m.RotationVectorStartKeypointIndex))
	n += 1 + sovDetectionsToRectsCalculator(uint64(m.RotationVectorEndKeypointIndex))
	n += 5
	n += 5
	n += 2
	n += 1 + sovDetectionsToRectsCalculator(uint64(m.ConversionMode))
	return n
}

func sovDetectionsToRectsCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDetectionsToRectsCalculator(x uint64) (n int) {
	return sovDetectionsToRectsCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DetectionsToRectsCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionsToRectsCalculatorOptions{`,
		`RotationVectorStartKeypointIndex:` + fmt.Sprintf("%v", this.RotationVectorStartKeypointIndex) + `,`,
		`RotationVectorEndKeypointIndex:` + fmt.Sprintf("%v", this.RotationVectorEndKeypointIndex) + `,`,
		`RotationVectorTargetAngle:` + fmt.Sprintf("%v", this.RotationVectorTargetAngle) + `,`,
		`RotationVectorTargetAngleDegrees:` + fmt.Sprintf("%v", this.RotationVectorTargetAngleDegrees) + `,`,
		`OutputZeroRectForEmptyDetections:` + fmt.Sprintf("%v", this.OutputZeroRectForEmptyDetections) + `,`,
		`ConversionMode:` + fmt.Sprintf("%v", this.ConversionMode) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDetectionsToRectsCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DetectionsToRectsCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDetectionsToRectsCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetectionsToRectsCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetectionsToRectsCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RotationVectorStartKeypointIndex", wireType)
			}
			m.RotationVectorStartKeypointIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetectionsToRectsCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RotationVectorStartKeypointIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RotationVectorEndKeypointIndex", wireType)
			}
			m.RotationVectorEndKeypointIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetectionsToRectsCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RotationVectorEndKeypointIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RotationVectorTargetAngle", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RotationVectorTargetAngle = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RotationVectorTargetAngleDegrees", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RotationVectorTargetAngleDegrees = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputZeroRectForEmptyDetections", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetectionsToRectsCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutputZeroRectForEmptyDetections = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversionMode", wireType)
			}
			m.ConversionMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetectionsToRectsCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConversionMode |= DetectionsToRectsCalculatorOptions_ConversionMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDetectionsToRectsCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDetectionsToRectsCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDetectionsToRectsCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDetectionsToRectsCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDetectionsToRectsCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDetectionsToRectsCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDetectionsToRectsCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDetectionsToRectsCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDetectionsToRectsCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDetectionsToRectsCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDetectionsToRectsCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDetectionsToRectsCalculator = fmt.Errorf("proto: unexpected end of group")
)
