// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/detections_to_render_data_calculator.proto

package util

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	util "github.com/google/mediapipe/mediapipe/util"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DetectionsToRenderDataCalculatorOptions struct {
	ProduceEmptyPacket *bool                       `protobuf:"varint,1,opt,name=produce_empty_packet,json=produceEmptyPacket,def=1" json:"produce_empty_packet,omitempty"`
	TextDelimiter      *string                     `protobuf:"bytes,2,opt,name=text_delimiter,json=textDelimiter,def=," json:"text_delimiter,omitempty"`
	OneLabelPerLine    *bool                       `protobuf:"varint,3,opt,name=one_label_per_line,json=oneLabelPerLine,def=0" json:"one_label_per_line,omitempty"`
	Text               *util.RenderAnnotation_Text `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	Thickness          *float64                    `protobuf:"fixed64,5,opt,name=thickness,def=1" json:"thickness,omitempty"`
	Color              *util.Color                 `protobuf:"bytes,6,opt,name=color" json:"color,omitempty"`
	SceneClass         *string                     `protobuf:"bytes,7,opt,name=scene_class,json=sceneClass,def=DETECTION" json:"scene_class,omitempty"`
	RenderDetectionId  *bool                       `protobuf:"varint,8,opt,name=render_detection_id,json=renderDetectionId,def=0" json:"render_detection_id,omitempty"`
}

func (m *DetectionsToRenderDataCalculatorOptions) Reset() {
	*m = DetectionsToRenderDataCalculatorOptions{}
}
func (*DetectionsToRenderDataCalculatorOptions) ProtoMessage() {}
func (*DetectionsToRenderDataCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d40e9dfe28555f4, []int{0}
}
func (m *DetectionsToRenderDataCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetectionsToRenderDataCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DetectionsToRenderDataCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DetectionsToRenderDataCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectionsToRenderDataCalculatorOptions.Merge(m, src)
}
func (m *DetectionsToRenderDataCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *DetectionsToRenderDataCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectionsToRenderDataCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_DetectionsToRenderDataCalculatorOptions proto.InternalMessageInfo

const Default_DetectionsToRenderDataCalculatorOptions_ProduceEmptyPacket bool = true
const Default_DetectionsToRenderDataCalculatorOptions_TextDelimiter string = ","
const Default_DetectionsToRenderDataCalculatorOptions_OneLabelPerLine bool = false
const Default_DetectionsToRenderDataCalculatorOptions_Thickness float64 = 1
const Default_DetectionsToRenderDataCalculatorOptions_SceneClass string = "DETECTION"
const Default_DetectionsToRenderDataCalculatorOptions_RenderDetectionId bool = false

func (m *DetectionsToRenderDataCalculatorOptions) GetProduceEmptyPacket() bool {
	if m != nil && m.ProduceEmptyPacket != nil {
		return *m.ProduceEmptyPacket
	}
	return Default_DetectionsToRenderDataCalculatorOptions_ProduceEmptyPacket
}

func (m *DetectionsToRenderDataCalculatorOptions) GetTextDelimiter() string {
	if m != nil && m.TextDelimiter != nil {
		return *m.TextDelimiter
	}
	return Default_DetectionsToRenderDataCalculatorOptions_TextDelimiter
}

func (m *DetectionsToRenderDataCalculatorOptions) GetOneLabelPerLine() bool {
	if m != nil && m.OneLabelPerLine != nil {
		return *m.OneLabelPerLine
	}
	return Default_DetectionsToRenderDataCalculatorOptions_OneLabelPerLine
}

func (m *DetectionsToRenderDataCalculatorOptions) GetText() *util.RenderAnnotation_Text {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *DetectionsToRenderDataCalculatorOptions) GetThickness() float64 {
	if m != nil && m.Thickness != nil {
		return *m.Thickness
	}
	return Default_DetectionsToRenderDataCalculatorOptions_Thickness
}

func (m *DetectionsToRenderDataCalculatorOptions) GetColor() *util.Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *DetectionsToRenderDataCalculatorOptions) GetSceneClass() string {
	if m != nil && m.SceneClass != nil {
		return *m.SceneClass
	}
	return Default_DetectionsToRenderDataCalculatorOptions_SceneClass
}

func (m *DetectionsToRenderDataCalculatorOptions) GetRenderDetectionId() bool {
	if m != nil && m.RenderDetectionId != nil {
		return *m.RenderDetectionId
	}
	return Default_DetectionsToRenderDataCalculatorOptions_RenderDetectionId
}

var E_DetectionsToRenderDataCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*DetectionsToRenderDataCalculatorOptions)(nil),
	Field:         248360806,
	Name:          "mediapipe.DetectionsToRenderDataCalculatorOptions.ext",
	Tag:           "bytes,248360806,opt,name=ext",
	Filename:      "mediapipe/calculators/util/detections_to_render_data_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_DetectionsToRenderDataCalculatorOptions_Ext)
	proto.RegisterType((*DetectionsToRenderDataCalculatorOptions)(nil), "mediapipe.DetectionsToRenderDataCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/detections_to_render_data_calculator.proto", fileDescriptor_5d40e9dfe28555f4)
}

var fileDescriptor_5d40e9dfe28555f4 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x8a, 0x13, 0x41,
	0x10, 0xc6, 0xa7, 0xdd, 0xac, 0x6e, 0x7a, 0xf1, 0x5f, 0xeb, 0x61, 0x08, 0xd2, 0x0e, 0x22, 0x1a,
	0x44, 0x32, 0x18, 0x74, 0x0f, 0xb9, 0x69, 0x92, 0xc3, 0xc2, 0xe2, 0x2e, 0x43, 0x4e, 0x5e, 0x9a,
	0xde, 0x9e, 0xda, 0x6c, 0x93, 0x4e, 0xf7, 0xd0, 0xd3, 0xd1, 0xf5, 0xe6, 0xd1, 0xa3, 0x8f, 0xe1,
	0x13, 0xf8, 0x0c, 0x1e, 0x73, 0xdc, 0x93, 0x98, 0x09, 0x88, 0xc7, 0x7d, 0x04, 0x99, 0x8e, 0x99,
	0x0c, 0x01, 0xc1, 0x6b, 0x7d, 0xbf, 0xf9, 0xaa, 0xbe, 0xaa, 0x69, 0x3c, 0x9c, 0x42, 0x2a, 0x79,
	0x26, 0x33, 0x88, 0x05, 0x57, 0x62, 0xa6, 0xb8, 0x33, 0x36, 0x8f, 0x67, 0x4e, 0xaa, 0x38, 0x05,
	0x07, 0xc2, 0x49, 0xa3, 0x73, 0xe6, 0x0c, 0xb3, 0xa0, 0x53, 0xb0, 0x2c, 0xe5, 0x8e, 0xb3, 0x0d,
	0xda, 0xc9, 0xac, 0x71, 0x86, 0x34, 0x2b, 0x9b, 0xd6, 0xe3, 0x8d, 0xe3, 0x99, 0xe5, 0x53, 0xf8,
	0x60, 0xec, 0x24, 0xde, 0xfe, 0xa0, 0xd5, 0xda, 0x50, 0xbe, 0x97, 0x30, 0xaa, 0xd2, 0xa2, 0x2d,
	0xad, 0xd6, 0x79, 0x45, 0x3c, 0xfa, 0xdc, 0xc0, 0x4f, 0x07, 0xd5, 0x74, 0x23, 0x93, 0x78, 0x62,
	0xc0, 0x1d, 0xef, 0x57, 0x8d, 0x8e, 0x33, 0x2f, 0x92, 0x03, 0x7c, 0x3f, 0xb3, 0x26, 0x9d, 0x09,
	0x60, 0x30, 0xcd, 0xdc, 0x47, 0x96, 0x71, 0x31, 0x01, 0x17, 0xa2, 0x08, 0xb5, 0xf7, 0x7a, 0x0d,
	0x67, 0x67, 0x90, 0x90, 0xbf, 0xc4, 0xb0, 0x04, 0x4e, 0xbc, 0x4e, 0xda, 0xf8, 0x96, 0x83, 0x0b,
	0xc7, 0x52, 0x50, 0x72, 0x2a, 0x1d, 0xd8, 0xf0, 0x5a, 0x84, 0xda, 0xcd, 0x1e, 0x7a, 0x9e, 0xdc,
	0x2c, 0x85, 0xc1, 0xba, 0x4e, 0xba, 0x98, 0x18, 0x0d, 0x4c, 0xf1, 0x53, 0x50, 0x2c, 0x03, 0xcb,
	0x94, 0xd4, 0x10, 0xee, 0x78, 0xff, 0xdd, 0x33, 0xae, 0x72, 0x48, 0x6e, 0x1b, 0x0d, 0x47, 0xa5,
	0x7e, 0x02, 0xf6, 0x48, 0x6a, 0x20, 0x2f, 0x71, 0xa3, 0x34, 0x09, 0x1b, 0x11, 0x6a, 0xef, 0x77,
	0xa3, 0x4e, 0x15, 0xb9, 0xb3, 0xca, 0xf2, 0x5a, 0x6b, 0xe3, 0x78, 0x99, 0xa0, 0x33, 0x82, 0x0b,
	0x97, 0x78, 0x9a, 0x3c, 0xc4, 0x4d, 0x77, 0x2e, 0xc5, 0x44, 0x43, 0x9e, 0x87, 0xbb, 0x11, 0x6a,
	0xa3, 0x1e, 0x7a, 0x91, 0x6c, 0x6a, 0xe4, 0x09, 0xde, 0xf5, 0x9b, 0x0c, 0xaf, 0x7b, 0xdf, 0x3b,
	0x35, 0xdf, 0x7e, 0x59, 0x4f, 0x56, 0x32, 0x79, 0x86, 0xf7, 0x73, 0x01, 0x1a, 0x98, 0x50, 0x3c,
	0xcf, 0xc3, 0x1b, 0x3e, 0x59, 0x73, 0x30, 0x1c, 0x0d, 0xfb, 0xa3, 0xc3, 0xe3, 0xb7, 0x09, 0xf6,
	0x6a, 0xbf, 0x14, 0xc9, 0x2b, 0x7c, 0x6f, 0x7d, 0x81, 0xf5, 0xca, 0x99, 0x4c, 0xc3, 0xbd, 0x7a,
	0xbe, 0xbb, 0x2b, 0xa2, 0xba, 0xc9, 0x61, 0xda, 0x05, 0xbc, 0x53, 0x8e, 0xfc, 0xa0, 0x3e, 0xc2,
	0xf6, 0x71, 0xc2, 0x5f, 0x3f, 0xbe, 0xbd, 0xf7, 0x93, 0x76, 0x6b, 0xd8, 0x7f, 0x5e, 0x36, 0x29,
	0xfd, 0xdf, 0xa8, 0xf9, 0x82, 0x06, 0x97, 0x0b, 0x1a, 0x5c, 0x2d, 0x28, 0xfa, 0x54, 0x50, 0xf4,
	0xb5, 0xa0, 0xe8, 0x7b, 0x41, 0xd1, 0xbc, 0xa0, 0xe8, 0x67, 0x41, 0xd1, 0xef, 0x82, 0x06, 0x57,
	0x05, 0x45, 0x5f, 0x96, 0x34, 0x98, 0x2f, 0x69, 0x70, 0xb9, 0xa4, 0xc1, 0xbb, 0x83, 0xb1, 0x74,
	0xe7, 0xb3, 0xd3, 0x8e, 0x30, 0xd3, 0x78, 0x6c, 0xcc, 0x58, 0x41, 0xbc, 0xf9, 0xe9, 0xfe, 0xfd,
	0x24, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xa7, 0x48, 0xb2, 0x2f, 0x03, 0x00, 0x00,
}

func (this *DetectionsToRenderDataCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionsToRenderDataCalculatorOptions)
	if !ok {
		that2, ok := that.(DetectionsToRenderDataCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProduceEmptyPacket != nil && that1.ProduceEmptyPacket != nil {
		if *this.ProduceEmptyPacket != *that1.ProduceEmptyPacket {
			return false
		}
	} else if this.ProduceEmptyPacket != nil {
		return false
	} else if that1.ProduceEmptyPacket != nil {
		return false
	}
	if this.TextDelimiter != nil && that1.TextDelimiter != nil {
		if *this.TextDelimiter != *that1.TextDelimiter {
			return false
		}
	} else if this.TextDelimiter != nil {
		return false
	} else if that1.TextDelimiter != nil {
		return false
	}
	if this.OneLabelPerLine != nil && that1.OneLabelPerLine != nil {
		if *this.OneLabelPerLine != *that1.OneLabelPerLine {
			return false
		}
	} else if this.OneLabelPerLine != nil {
		return false
	} else if that1.OneLabelPerLine != nil {
		return false
	}
	if !this.Text.Equal(that1.Text) {
		return false
	}
	if this.Thickness != nil && that1.Thickness != nil {
		if *this.Thickness != *that1.Thickness {
			return false
		}
	} else if this.Thickness != nil {
		return false
	} else if that1.Thickness != nil {
		return false
	}
	if !this.Color.Equal(that1.Color) {
		return false
	}
	if this.SceneClass != nil && that1.SceneClass != nil {
		if *this.SceneClass != *that1.SceneClass {
			return false
		}
	} else if this.SceneClass != nil {
		return false
	} else if that1.SceneClass != nil {
		return false
	}
	if this.RenderDetectionId != nil && that1.RenderDetectionId != nil {
		if *this.RenderDetectionId != *that1.RenderDetectionId {
			return false
		}
	} else if this.RenderDetectionId != nil {
		return false
	} else if that1.RenderDetectionId != nil {
		return false
	}
	return true
}
func (this *DetectionsToRenderDataCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&util.DetectionsToRenderDataCalculatorOptions{")
	if this.ProduceEmptyPacket != nil {
		s = append(s, "ProduceEmptyPacket: "+valueToGoStringDetectionsToRenderDataCalculator(this.ProduceEmptyPacket, "bool")+",\n")
	}
	if this.TextDelimiter != nil {
		s = append(s, "TextDelimiter: "+valueToGoStringDetectionsToRenderDataCalculator(this.TextDelimiter, "string")+",\n")
	}
	if this.OneLabelPerLine != nil {
		s = append(s, "OneLabelPerLine: "+valueToGoStringDetectionsToRenderDataCalculator(this.OneLabelPerLine, "bool")+",\n")
	}
	if this.Text != nil {
		s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	}
	if this.Thickness != nil {
		s = append(s, "Thickness: "+valueToGoStringDetectionsToRenderDataCalculator(this.Thickness, "float64")+",\n")
	}
	if this.Color != nil {
		s = append(s, "Color: "+fmt.Sprintf("%#v", this.Color)+",\n")
	}
	if this.SceneClass != nil {
		s = append(s, "SceneClass: "+valueToGoStringDetectionsToRenderDataCalculator(this.SceneClass, "string")+",\n")
	}
	if this.RenderDetectionId != nil {
		s = append(s, "RenderDetectionId: "+valueToGoStringDetectionsToRenderDataCalculator(this.RenderDetectionId, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDetectionsToRenderDataCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DetectionsToRenderDataCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetectionsToRenderDataCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionsToRenderDataCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RenderDetectionId != nil {
		i--
		if *m.RenderDetectionId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.SceneClass != nil {
		i -= len(*m.SceneClass)
		copy(dAtA[i:], *m.SceneClass)
		i = encodeVarintDetectionsToRenderDataCalculator(dAtA, i, uint64(len(*m.SceneClass)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Color != nil {
		{
			size, err := m.Color.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDetectionsToRenderDataCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Thickness != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Thickness))))
		i--
		dAtA[i] = 0x29
	}
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDetectionsToRenderDataCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.OneLabelPerLine != nil {
		i--
		if *m.OneLabelPerLine {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.TextDelimiter != nil {
		i -= len(*m.TextDelimiter)
		copy(dAtA[i:], *m.TextDelimiter)
		i = encodeVarintDetectionsToRenderDataCalculator(dAtA, i, uint64(len(*m.TextDelimiter)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProduceEmptyPacket != nil {
		i--
		if *m.ProduceEmptyPacket {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDetectionsToRenderDataCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovDetectionsToRenderDataCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DetectionsToRenderDataCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProduceEmptyPacket != nil {
		n += 2
	}
	if m.TextDelimiter != nil {
		l = len(*m.TextDelimiter)
		n += 1 + l + sovDetectionsToRenderDataCalculator(uint64(l))
	}
	if m.OneLabelPerLine != nil {
		n += 2
	}
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovDetectionsToRenderDataCalculator(uint64(l))
	}
	if m.Thickness != nil {
		n += 9
	}
	if m.Color != nil {
		l = m.Color.Size()
		n += 1 + l + sovDetectionsToRenderDataCalculator(uint64(l))
	}
	if m.SceneClass != nil {
		l = len(*m.SceneClass)
		n += 1 + l + sovDetectionsToRenderDataCalculator(uint64(l))
	}
	if m.RenderDetectionId != nil {
		n += 2
	}
	return n
}

func sovDetectionsToRenderDataCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDetectionsToRenderDataCalculator(x uint64) (n int) {
	return sovDetectionsToRenderDataCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DetectionsToRenderDataCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionsToRenderDataCalculatorOptions{`,
		`ProduceEmptyPacket:` + valueToStringDetectionsToRenderDataCalculator(this.ProduceEmptyPacket) + `,`,
		`TextDelimiter:` + valueToStringDetectionsToRenderDataCalculator(this.TextDelimiter) + `,`,
		`OneLabelPerLine:` + valueToStringDetectionsToRenderDataCalculator(this.OneLabelPerLine) + `,`,
		`Text:` + strings.Replace(fmt.Sprintf("%v", this.Text), "RenderAnnotation_Text", "util.RenderAnnotation_Text", 1) + `,`,
		`Thickness:` + valueToStringDetectionsToRenderDataCalculator(this.Thickness) + `,`,
		`Color:` + strings.Replace(fmt.Sprintf("%v", this.Color), "Color", "util.Color", 1) + `,`,
		`SceneClass:` + valueToStringDetectionsToRenderDataCalculator(this.SceneClass) + `,`,
		`RenderDetectionId:` + valueToStringDetectionsToRenderDataCalculator(this.RenderDetectionId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDetectionsToRenderDataCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DetectionsToRenderDataCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDetectionsToRenderDataCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetectionsToRenderDataCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetectionsToRenderDataCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProduceEmptyPacket", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetectionsToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ProduceEmptyPacket = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextDelimiter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetectionsToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDetectionsToRenderDataCalculator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDetectionsToRenderDataCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TextDelimiter = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneLabelPerLine", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetectionsToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.OneLabelPerLine = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetectionsToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDetectionsToRenderDataCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDetectionsToRenderDataCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &util.RenderAnnotation_Text{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thickness", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Thickness = &v2
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetectionsToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDetectionsToRenderDataCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDetectionsToRenderDataCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Color == nil {
				m.Color = &util.Color{}
			}
			if err := m.Color.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetectionsToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDetectionsToRenderDataCalculator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDetectionsToRenderDataCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SceneClass = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderDetectionId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetectionsToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.RenderDetectionId = &b
		default:
			iNdEx = preIndex
			skippy, err := skipDetectionsToRenderDataCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDetectionsToRenderDataCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDetectionsToRenderDataCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDetectionsToRenderDataCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDetectionsToRenderDataCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDetectionsToRenderDataCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDetectionsToRenderDataCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDetectionsToRenderDataCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDetectionsToRenderDataCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDetectionsToRenderDataCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDetectionsToRenderDataCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDetectionsToRenderDataCalculator = fmt.Errorf("proto: unexpected end of group")
)
