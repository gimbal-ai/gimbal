// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/face_to_rect_calculator.proto

package util

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FaceToRectCalculatorOptions struct {
	EyeLandmarkSize   int32   `protobuf:"varint,1,opt,name=eye_landmark_size,json=eyeLandmarkSize,proto3" json:"eye_landmark_size,omitempty"`
	NoseLandmarkSize  int32   `protobuf:"varint,2,opt,name=nose_landmark_size,json=noseLandmarkSize,proto3" json:"nose_landmark_size,omitempty"`
	MouthLandmarkSize int32   `protobuf:"varint,3,opt,name=mouth_landmark_size,json=mouthLandmarkSize,proto3" json:"mouth_landmark_size,omitempty"`
	EyeToMouthMix     float32 `protobuf:"fixed32,4,opt,name=eye_to_mouth_mix,json=eyeToMouthMix,proto3" json:"eye_to_mouth_mix,omitempty"`
	EyeToMouthScale   float32 `protobuf:"fixed32,5,opt,name=eye_to_mouth_scale,json=eyeToMouthScale,proto3" json:"eye_to_mouth_scale,omitempty"`
	EyeToEyeScale     float32 `protobuf:"fixed32,6,opt,name=eye_to_eye_scale,json=eyeToEyeScale,proto3" json:"eye_to_eye_scale,omitempty"`
}

func (m *FaceToRectCalculatorOptions) Reset()      { *m = FaceToRectCalculatorOptions{} }
func (*FaceToRectCalculatorOptions) ProtoMessage() {}
func (*FaceToRectCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d27b82ebbc356c7, []int{0}
}
func (m *FaceToRectCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FaceToRectCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FaceToRectCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FaceToRectCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaceToRectCalculatorOptions.Merge(m, src)
}
func (m *FaceToRectCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *FaceToRectCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FaceToRectCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FaceToRectCalculatorOptions proto.InternalMessageInfo

func (m *FaceToRectCalculatorOptions) GetEyeLandmarkSize() int32 {
	if m != nil {
		return m.EyeLandmarkSize
	}
	return 0
}

func (m *FaceToRectCalculatorOptions) GetNoseLandmarkSize() int32 {
	if m != nil {
		return m.NoseLandmarkSize
	}
	return 0
}

func (m *FaceToRectCalculatorOptions) GetMouthLandmarkSize() int32 {
	if m != nil {
		return m.MouthLandmarkSize
	}
	return 0
}

func (m *FaceToRectCalculatorOptions) GetEyeToMouthMix() float32 {
	if m != nil {
		return m.EyeToMouthMix
	}
	return 0
}

func (m *FaceToRectCalculatorOptions) GetEyeToMouthScale() float32 {
	if m != nil {
		return m.EyeToMouthScale
	}
	return 0
}

func (m *FaceToRectCalculatorOptions) GetEyeToEyeScale() float32 {
	if m != nil {
		return m.EyeToEyeScale
	}
	return 0
}

func init() {
	proto.RegisterType((*FaceToRectCalculatorOptions)(nil), "mediapipe.FaceToRectCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/face_to_rect_calculator.proto", fileDescriptor_6d27b82ebbc356c7)
}

var fileDescriptor_6d27b82ebbc356c7 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xd1, 0xbf, 0x4a, 0x3b, 0x41,
	0x10, 0x07, 0xf0, 0xdb, 0xfc, 0x7e, 0x09, 0xb8, 0x20, 0x49, 0xce, 0x26, 0x20, 0x0c, 0xc1, 0xc6,
	0xa0, 0x92, 0x2b, 0x04, 0xb1, 0x56, 0xb4, 0x32, 0x08, 0x49, 0x2a, 0x9b, 0x63, 0xb3, 0x19, 0x93,
	0xc5, 0xbd, 0xcc, 0x71, 0xb7, 0x07, 0xb9, 0x54, 0x3e, 0x82, 0x4f, 0x21, 0x3e, 0x8a, 0x65, 0xca,
	0x94, 0x66, 0xd3, 0x58, 0xe6, 0x11, 0xe4, 0x2e, 0x92, 0x7f, 0x60, 0xb5, 0x30, 0xdf, 0xcf, 0x0c,
	0x0b, 0x5f, 0x7e, 0x1d, 0x60, 0x5f, 0x89, 0x50, 0x85, 0xe8, 0x49, 0xa1, 0x65, 0xa2, 0x85, 0xa1,
	0x28, 0xf6, 0x12, 0xa3, 0xb4, 0xf7, 0x2c, 0x24, 0xfa, 0x86, 0xfc, 0x08, 0xa5, 0xf1, 0x37, 0x69,
	0x33, 0x8c, 0xc8, 0x90, 0x7b, 0xb0, 0xde, 0x3c, 0x79, 0x2f, 0xf0, 0xe3, 0x7b, 0x21, 0xb1, 0x4b,
	0x6d, 0x94, 0xe6, 0x76, 0x2d, 0x1f, 0x43, 0xa3, 0x68, 0x14, 0xbb, 0x67, 0xbc, 0x8a, 0x29, 0xfa,
	0x5a, 0x8c, 0xfa, 0x81, 0x88, 0x5e, 0xfc, 0x58, 0x4d, 0xb0, 0xc6, 0xea, 0xac, 0x51, 0x6c, 0x97,
	0x31, 0xc5, 0x87, 0xdf, 0x79, 0x47, 0x4d, 0xd0, 0xbd, 0xe0, 0xee, 0x88, 0xe2, 0x7d, 0x5c, 0xc8,
	0x71, 0x25, 0x4b, 0x76, 0x74, 0x93, 0x1f, 0x05, 0x94, 0x98, 0xe1, 0x1e, 0xff, 0x97, 0xf3, 0x6a,
	0x1e, 0xed, 0xf8, 0x53, 0x5e, 0xc9, 0x7e, 0x62, 0xc8, 0x5f, 0xad, 0x05, 0x6a, 0x5c, 0xfb, 0x5f,
	0x67, 0x8d, 0x42, 0xfb, 0x10, 0x53, 0xec, 0x52, 0x2b, 0x9b, 0xb6, 0xd4, 0xd8, 0x3d, 0xe7, 0xee,
	0x0e, 0x8c, 0xa5, 0xd0, 0x58, 0x2b, 0xe6, 0xb4, 0xbc, 0xa1, 0x9d, 0x6c, 0xbc, 0x75, 0x35, 0x7b,
	0x56, 0xb4, 0xb4, 0x75, 0xf5, 0x2e, 0xc5, 0x1c, 0xde, 0xe8, 0xe9, 0x1c, 0x9c, 0xd9, 0x1c, 0x9c,
	0xe5, 0x1c, 0xd8, 0xab, 0x05, 0xf6, 0x61, 0x81, 0x7d, 0x5a, 0x60, 0x53, 0x0b, 0xec, 0xcb, 0x02,
	0xfb, 0xb6, 0xe0, 0x2c, 0x2d, 0xb0, 0xb7, 0x05, 0x38, 0xd3, 0x05, 0x38, 0xb3, 0x05, 0x38, 0x4f,
	0x57, 0x03, 0x65, 0x86, 0x49, 0xaf, 0x29, 0x29, 0xf0, 0x06, 0x44, 0x03, 0x8d, 0xde, 0xa6, 0xb5,
	0xbf, 0xfb, 0xeb, 0x95, 0xf2, 0xa2, 0x2e, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfc, 0xd2, 0x5f,
	0xb7, 0xe4, 0x01, 0x00, 0x00,
}

func (this *FaceToRectCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FaceToRectCalculatorOptions)
	if !ok {
		that2, ok := that.(FaceToRectCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EyeLandmarkSize != that1.EyeLandmarkSize {
		return false
	}
	if this.NoseLandmarkSize != that1.NoseLandmarkSize {
		return false
	}
	if this.MouthLandmarkSize != that1.MouthLandmarkSize {
		return false
	}
	if this.EyeToMouthMix != that1.EyeToMouthMix {
		return false
	}
	if this.EyeToMouthScale != that1.EyeToMouthScale {
		return false
	}
	if this.EyeToEyeScale != that1.EyeToEyeScale {
		return false
	}
	return true
}
func (this *FaceToRectCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&util.FaceToRectCalculatorOptions{")
	s = append(s, "EyeLandmarkSize: "+fmt.Sprintf("%#v", this.EyeLandmarkSize)+",\n")
	s = append(s, "NoseLandmarkSize: "+fmt.Sprintf("%#v", this.NoseLandmarkSize)+",\n")
	s = append(s, "MouthLandmarkSize: "+fmt.Sprintf("%#v", this.MouthLandmarkSize)+",\n")
	s = append(s, "EyeToMouthMix: "+fmt.Sprintf("%#v", this.EyeToMouthMix)+",\n")
	s = append(s, "EyeToMouthScale: "+fmt.Sprintf("%#v", this.EyeToMouthScale)+",\n")
	s = append(s, "EyeToEyeScale: "+fmt.Sprintf("%#v", this.EyeToEyeScale)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFaceToRectCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FaceToRectCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FaceToRectCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FaceToRectCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EyeToEyeScale != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EyeToEyeScale))))
		i--
		dAtA[i] = 0x35
	}
	if m.EyeToMouthScale != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EyeToMouthScale))))
		i--
		dAtA[i] = 0x2d
	}
	if m.EyeToMouthMix != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EyeToMouthMix))))
		i--
		dAtA[i] = 0x25
	}
	if m.MouthLandmarkSize != 0 {
		i = encodeVarintFaceToRectCalculator(dAtA, i, uint64(m.MouthLandmarkSize))
		i--
		dAtA[i] = 0x18
	}
	if m.NoseLandmarkSize != 0 {
		i = encodeVarintFaceToRectCalculator(dAtA, i, uint64(m.NoseLandmarkSize))
		i--
		dAtA[i] = 0x10
	}
	if m.EyeLandmarkSize != 0 {
		i = encodeVarintFaceToRectCalculator(dAtA, i, uint64(m.EyeLandmarkSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFaceToRectCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovFaceToRectCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FaceToRectCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EyeLandmarkSize != 0 {
		n += 1 + sovFaceToRectCalculator(uint64(m.EyeLandmarkSize))
	}
	if m.NoseLandmarkSize != 0 {
		n += 1 + sovFaceToRectCalculator(uint64(m.NoseLandmarkSize))
	}
	if m.MouthLandmarkSize != 0 {
		n += 1 + sovFaceToRectCalculator(uint64(m.MouthLandmarkSize))
	}
	if m.EyeToMouthMix != 0 {
		n += 5
	}
	if m.EyeToMouthScale != 0 {
		n += 5
	}
	if m.EyeToEyeScale != 0 {
		n += 5
	}
	return n
}

func sovFaceToRectCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFaceToRectCalculator(x uint64) (n int) {
	return sovFaceToRectCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FaceToRectCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FaceToRectCalculatorOptions{`,
		`EyeLandmarkSize:` + fmt.Sprintf("%v", this.EyeLandmarkSize) + `,`,
		`NoseLandmarkSize:` + fmt.Sprintf("%v", this.NoseLandmarkSize) + `,`,
		`MouthLandmarkSize:` + fmt.Sprintf("%v", this.MouthLandmarkSize) + `,`,
		`EyeToMouthMix:` + fmt.Sprintf("%v", this.EyeToMouthMix) + `,`,
		`EyeToMouthScale:` + fmt.Sprintf("%v", this.EyeToMouthScale) + `,`,
		`EyeToEyeScale:` + fmt.Sprintf("%v", this.EyeToEyeScale) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFaceToRectCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FaceToRectCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceToRectCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FaceToRectCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FaceToRectCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EyeLandmarkSize", wireType)
			}
			m.EyeLandmarkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceToRectCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EyeLandmarkSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoseLandmarkSize", wireType)
			}
			m.NoseLandmarkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceToRectCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoseLandmarkSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MouthLandmarkSize", wireType)
			}
			m.MouthLandmarkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceToRectCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MouthLandmarkSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EyeToMouthMix", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EyeToMouthMix = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EyeToMouthScale", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EyeToMouthScale = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EyeToEyeScale", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EyeToEyeScale = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipFaceToRectCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFaceToRectCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFaceToRectCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFaceToRectCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFaceToRectCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFaceToRectCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFaceToRectCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFaceToRectCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFaceToRectCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFaceToRectCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFaceToRectCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFaceToRectCalculator = fmt.Errorf("proto: unexpected end of group")
)
