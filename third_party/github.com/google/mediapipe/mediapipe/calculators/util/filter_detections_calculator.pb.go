// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/filter_detections_calculator.proto

package util

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FilterDetectionsCalculatorOptions struct {
	MinScore     float32 `protobuf:"fixed32,1,opt,name=min_score,json=minScore" json:"min_score"`
	MinPixelSize float32 `protobuf:"fixed32,2,opt,name=min_pixel_size,json=minPixelSize" json:"min_pixel_size"`
	MaxPixelSize float32 `protobuf:"fixed32,3,opt,name=max_pixel_size,json=maxPixelSize" json:"max_pixel_size"`
}

func (m *FilterDetectionsCalculatorOptions) Reset()      { *m = FilterDetectionsCalculatorOptions{} }
func (*FilterDetectionsCalculatorOptions) ProtoMessage() {}
func (*FilterDetectionsCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_945d26e29aa6f30f, []int{0}
}
func (m *FilterDetectionsCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilterDetectionsCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilterDetectionsCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilterDetectionsCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterDetectionsCalculatorOptions.Merge(m, src)
}
func (m *FilterDetectionsCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *FilterDetectionsCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterDetectionsCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FilterDetectionsCalculatorOptions proto.InternalMessageInfo

func (m *FilterDetectionsCalculatorOptions) GetMinScore() float32 {
	if m != nil {
		return m.MinScore
	}
	return 0
}

func (m *FilterDetectionsCalculatorOptions) GetMinPixelSize() float32 {
	if m != nil {
		return m.MinPixelSize
	}
	return 0
}

func (m *FilterDetectionsCalculatorOptions) GetMaxPixelSize() float32 {
	if m != nil {
		return m.MaxPixelSize
	}
	return 0
}

var E_FilterDetectionsCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*FilterDetectionsCalculatorOptions)(nil),
	Field:         395478132,
	Name:          "mediapipe.FilterDetectionsCalculatorOptions.ext",
	Tag:           "bytes,395478132,opt,name=ext",
	Filename:      "mediapipe/calculators/util/filter_detections_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_FilterDetectionsCalculatorOptions_Ext)
	proto.RegisterType((*FilterDetectionsCalculatorOptions)(nil), "mediapipe.FilterDetectionsCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/filter_detections_calculator.proto", fileDescriptor_945d26e29aa6f30f)
}

var fileDescriptor_945d26e29aa6f30f = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0xcd, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f,
	0x2a, 0xd6, 0x2f, 0x2d, 0xc9, 0xcc, 0xd1, 0x4f, 0xcb, 0xcc, 0x29, 0x49, 0x2d, 0x8a, 0x4f, 0x49,
	0x2d, 0x49, 0x4d, 0x2e, 0xc9, 0xcc, 0xcf, 0x2b, 0x8e, 0x47, 0x28, 0xd1, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x84, 0x6b, 0x97, 0x52, 0x41, 0x98, 0x94, 0x56, 0x94, 0x98, 0x9b, 0x5a, 0x9e,
	0x5f, 0x94, 0xad, 0x8f, 0xae, 0x41, 0xa9, 0x81, 0x89, 0x4b, 0xd1, 0x0d, 0x6c, 0xae, 0x0b, 0xdc,
	0x58, 0x67, 0xb8, 0x22, 0xff, 0x02, 0xb0, 0x80, 0x90, 0x22, 0x17, 0x67, 0x6e, 0x66, 0x5e, 0x7c,
	0x71, 0x72, 0x7e, 0x51, 0xaa, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x93, 0x13, 0xcb, 0x89, 0x7b, 0xf2,
	0x0c, 0x41, 0x1c, 0xb9, 0x99, 0x79, 0xc1, 0x20, 0x51, 0x21, 0x2d, 0x2e, 0x3e, 0x90, 0x92, 0x82,
	0xcc, 0x8a, 0xd4, 0x9c, 0xf8, 0xe2, 0xcc, 0xaa, 0x54, 0x09, 0x26, 0x24, 0x75, 0x3c, 0xb9, 0x99,
	0x79, 0x01, 0x20, 0xa9, 0xe0, 0xcc, 0x2a, 0x88, 0xda, 0xc4, 0x0a, 0x64, 0xb5, 0xcc, 0x28, 0x6a,
	0x13, 0x2b, 0xe0, 0x6a, 0x8d, 0x12, 0xb8, 0x98, 0x53, 0x2b, 0x4a, 0x84, 0x64, 0xf4, 0xe0, 0xde,
	0xd1, 0xc3, 0x70, 0x9f, 0xc4, 0x97, 0x8e, 0x53, 0x7b, 0x40, 0xce, 0xe2, 0x36, 0xd2, 0x41, 0x52,
	0x47, 0xd0, 0x5f, 0x41, 0x20, 0xa3, 0x9d, 0x72, 0x2e, 0x3c, 0x94, 0x63, 0xb8, 0xf1, 0x50, 0x8e,
	0xe1, 0xc3, 0x43, 0x39, 0xc6, 0x86, 0x47, 0x72, 0x8c, 0x2b, 0x1e, 0xc9, 0x31, 0x9e, 0x78, 0x24,
	0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x2f, 0x1e, 0xc9, 0x31, 0x7c, 0x78,
	0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44,
	0x99, 0xa5, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xa7, 0xe7, 0xe7, 0xa7,
	0xe7, 0xa4, 0xea, 0x23, 0x02, 0x1c, 0x77, 0x24, 0x02, 0x02, 0x00, 0x00, 0xff, 0xff, 0x31, 0x5a,
	0x7f, 0x62, 0xe1, 0x01, 0x00, 0x00,
}

func (this *FilterDetectionsCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilterDetectionsCalculatorOptions)
	if !ok {
		that2, ok := that.(FilterDetectionsCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinScore != that1.MinScore {
		return false
	}
	if this.MinPixelSize != that1.MinPixelSize {
		return false
	}
	if this.MaxPixelSize != that1.MaxPixelSize {
		return false
	}
	return true
}
func (this *FilterDetectionsCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&util.FilterDetectionsCalculatorOptions{")
	s = append(s, "MinScore: "+fmt.Sprintf("%#v", this.MinScore)+",\n")
	s = append(s, "MinPixelSize: "+fmt.Sprintf("%#v", this.MinPixelSize)+",\n")
	s = append(s, "MaxPixelSize: "+fmt.Sprintf("%#v", this.MaxPixelSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFilterDetectionsCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FilterDetectionsCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterDetectionsCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterDetectionsCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MaxPixelSize))))
	i--
	dAtA[i] = 0x1d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MinPixelSize))))
	i--
	dAtA[i] = 0x15
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MinScore))))
	i--
	dAtA[i] = 0xd
	return len(dAtA) - i, nil
}

func encodeVarintFilterDetectionsCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovFilterDetectionsCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FilterDetectionsCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	n += 5
	n += 5
	return n
}

func sovFilterDetectionsCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFilterDetectionsCalculator(x uint64) (n int) {
	return sovFilterDetectionsCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FilterDetectionsCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FilterDetectionsCalculatorOptions{`,
		`MinScore:` + fmt.Sprintf("%v", this.MinScore) + `,`,
		`MinPixelSize:` + fmt.Sprintf("%v", this.MinPixelSize) + `,`,
		`MaxPixelSize:` + fmt.Sprintf("%v", this.MaxPixelSize) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFilterDetectionsCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FilterDetectionsCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilterDetectionsCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterDetectionsCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterDetectionsCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MinScore = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPixelSize", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MinPixelSize = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPixelSize", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MaxPixelSize = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipFilterDetectionsCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFilterDetectionsCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFilterDetectionsCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFilterDetectionsCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilterDetectionsCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilterDetectionsCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFilterDetectionsCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFilterDetectionsCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFilterDetectionsCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFilterDetectionsCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFilterDetectionsCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFilterDetectionsCalculator = fmt.Errorf("proto: unexpected end of group")
)
