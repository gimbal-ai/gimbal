// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/flat_color_image_calculator.proto

package util

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	util "github.com/google/mediapipe/mediapipe/util"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FlatColorImageCalculatorOptions struct {
	OutputWidth  int32       `protobuf:"varint,1,opt,name=output_width,json=outputWidth" json:"output_width"`
	OutputHeight int32       `protobuf:"varint,2,opt,name=output_height,json=outputHeight" json:"output_height"`
	Color        *util.Color `protobuf:"bytes,3,opt,name=color" json:"color,omitempty"`
}

func (m *FlatColorImageCalculatorOptions) Reset()      { *m = FlatColorImageCalculatorOptions{} }
func (*FlatColorImageCalculatorOptions) ProtoMessage() {}
func (*FlatColorImageCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd60576d7e1da5e7, []int{0}
}
func (m *FlatColorImageCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlatColorImageCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlatColorImageCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlatColorImageCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlatColorImageCalculatorOptions.Merge(m, src)
}
func (m *FlatColorImageCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *FlatColorImageCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FlatColorImageCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FlatColorImageCalculatorOptions proto.InternalMessageInfo

func (m *FlatColorImageCalculatorOptions) GetOutputWidth() int32 {
	if m != nil {
		return m.OutputWidth
	}
	return 0
}

func (m *FlatColorImageCalculatorOptions) GetOutputHeight() int32 {
	if m != nil {
		return m.OutputHeight
	}
	return 0
}

func (m *FlatColorImageCalculatorOptions) GetColor() *util.Color {
	if m != nil {
		return m.Color
	}
	return nil
}

var E_FlatColorImageCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*FlatColorImageCalculatorOptions)(nil),
	Field:         515548435,
	Name:          "mediapipe.FlatColorImageCalculatorOptions.ext",
	Tag:           "bytes,515548435,opt,name=ext",
	Filename:      "mediapipe/calculators/util/flat_color_image_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_FlatColorImageCalculatorOptions_Ext)
	proto.RegisterType((*FlatColorImageCalculatorOptions)(nil), "mediapipe.FlatColorImageCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/flat_color_image_calculator.proto", fileDescriptor_fd60576d7e1da5e7)
}

var fileDescriptor_fd60576d7e1da5e7 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0xc9, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f,
	0x2a, 0xd6, 0x2f, 0x2d, 0xc9, 0xcc, 0xd1, 0x4f, 0xcb, 0x49, 0x2c, 0x89, 0x4f, 0xce, 0xcf, 0xc9,
	0x2f, 0x8a, 0xcf, 0xcc, 0x4d, 0x4c, 0x4f, 0x8d, 0x47, 0xa8, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x84, 0xeb, 0x96, 0x52, 0x41, 0x18, 0x94, 0x56, 0x94, 0x98, 0x9b, 0x5a, 0x9e, 0x5f,
	0x94, 0xad, 0x8f, 0xae, 0x41, 0x4a, 0x0a, 0xa1, 0x0a, 0x6c, 0x05, 0xd8, 0x74, 0x88, 0x9c, 0xd2,
	0x5f, 0x46, 0x2e, 0x79, 0xb7, 0x9c, 0xc4, 0x12, 0x67, 0x90, 0x98, 0x27, 0xc8, 0x42, 0x67, 0xb8,
	0x76, 0xff, 0x82, 0x92, 0xcc, 0xfc, 0xbc, 0x62, 0x21, 0x75, 0x2e, 0x9e, 0xfc, 0xd2, 0x92, 0x82,
	0xd2, 0x92, 0xf8, 0xf2, 0xcc, 0x94, 0x92, 0x0c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x56, 0x27, 0x96,
	0x13, 0xf7, 0xe4, 0x19, 0x82, 0xb8, 0x21, 0x32, 0xe1, 0x20, 0x09, 0x21, 0x4d, 0x2e, 0x5e, 0xa8,
	0xc2, 0x8c, 0xd4, 0xcc, 0xf4, 0x8c, 0x12, 0x09, 0x26, 0x24, 0x95, 0x50, 0x33, 0x3c, 0xc0, 0x32,
	0x42, 0x6a, 0x5c, 0xac, 0x60, 0x67, 0x48, 0x30, 0x2b, 0x30, 0x6a, 0x70, 0x1b, 0x09, 0xe8, 0xc1,
	0xdd, 0xa8, 0x07, 0x76, 0x4a, 0x10, 0x44, 0xda, 0x28, 0x8e, 0x8b, 0x39, 0xb5, 0xa2, 0x44, 0x48,
	0x06, 0x59, 0x1e, 0xdd, 0x81, 0x12, 0x93, 0x4f, 0xbd, 0xfa, 0xca, 0x08, 0x36, 0x47, 0x0b, 0x49,
	0x1d, 0x01, 0x6f, 0x05, 0x81, 0x0c, 0x76, 0xca, 0xb9, 0xf0, 0x50, 0x8e, 0xe1, 0xc6, 0x43, 0x39,
	0x86, 0x0f, 0x0f, 0xe5, 0x18, 0x1b, 0x1e, 0xc9, 0x31, 0xae, 0x78, 0x24, 0xc7, 0x78, 0xe2, 0x91,
	0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xbe, 0x78, 0x24, 0xc7, 0xf0, 0xe1,
	0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10,
	0x65, 0x96, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x9f, 0x9e, 0x9f, 0x9f,
	0x9e, 0x93, 0xaa, 0x8f, 0x08, 0x63, 0xdc, 0x91, 0x0b, 0x08, 0x00, 0x00, 0xff, 0xff, 0x38, 0x4e,
	0x4e, 0x64, 0xf9, 0x01, 0x00, 0x00,
}

func (this *FlatColorImageCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlatColorImageCalculatorOptions)
	if !ok {
		that2, ok := that.(FlatColorImageCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OutputWidth != that1.OutputWidth {
		return false
	}
	if this.OutputHeight != that1.OutputHeight {
		return false
	}
	if !this.Color.Equal(that1.Color) {
		return false
	}
	return true
}
func (this *FlatColorImageCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&util.FlatColorImageCalculatorOptions{")
	s = append(s, "OutputWidth: "+fmt.Sprintf("%#v", this.OutputWidth)+",\n")
	s = append(s, "OutputHeight: "+fmt.Sprintf("%#v", this.OutputHeight)+",\n")
	if this.Color != nil {
		s = append(s, "Color: "+fmt.Sprintf("%#v", this.Color)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFlatColorImageCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FlatColorImageCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlatColorImageCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlatColorImageCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Color != nil {
		{
			size, err := m.Color.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlatColorImageCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintFlatColorImageCalculator(dAtA, i, uint64(m.OutputHeight))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlatColorImageCalculator(dAtA, i, uint64(m.OutputWidth))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintFlatColorImageCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlatColorImageCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FlatColorImageCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlatColorImageCalculator(uint64(m.OutputWidth))
	n += 1 + sovFlatColorImageCalculator(uint64(m.OutputHeight))
	if m.Color != nil {
		l = m.Color.Size()
		n += 1 + l + sovFlatColorImageCalculator(uint64(l))
	}
	return n
}

func sovFlatColorImageCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlatColorImageCalculator(x uint64) (n int) {
	return sovFlatColorImageCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FlatColorImageCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlatColorImageCalculatorOptions{`,
		`OutputWidth:` + fmt.Sprintf("%v", this.OutputWidth) + `,`,
		`OutputHeight:` + fmt.Sprintf("%v", this.OutputHeight) + `,`,
		`Color:` + strings.Replace(fmt.Sprintf("%v", this.Color), "Color", "util.Color", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFlatColorImageCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FlatColorImageCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlatColorImageCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlatColorImageCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlatColorImageCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputWidth", wireType)
			}
			m.OutputWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlatColorImageCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputWidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputHeight", wireType)
			}
			m.OutputHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlatColorImageCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlatColorImageCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlatColorImageCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlatColorImageCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Color == nil {
				m.Color = &util.Color{}
			}
			if err := m.Color.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlatColorImageCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlatColorImageCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlatColorImageCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlatColorImageCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlatColorImageCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlatColorImageCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlatColorImageCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFlatColorImageCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFlatColorImageCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFlatColorImageCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlatColorImageCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFlatColorImageCalculator = fmt.Errorf("proto: unexpected end of group")
)
