// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/landmark_projection_calculator.proto

package util

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LandmarkProjectionCalculatorOptions struct {
	IgnoreRotation *bool `protobuf:"varint,1,opt,name=ignore_rotation,json=ignoreRotation,def=0" json:"ignore_rotation,omitempty"`
}

func (m *LandmarkProjectionCalculatorOptions) Reset()      { *m = LandmarkProjectionCalculatorOptions{} }
func (*LandmarkProjectionCalculatorOptions) ProtoMessage() {}
func (*LandmarkProjectionCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5450f9e68f51475, []int{0}
}
func (m *LandmarkProjectionCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LandmarkProjectionCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LandmarkProjectionCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LandmarkProjectionCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LandmarkProjectionCalculatorOptions.Merge(m, src)
}
func (m *LandmarkProjectionCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *LandmarkProjectionCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_LandmarkProjectionCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_LandmarkProjectionCalculatorOptions proto.InternalMessageInfo

const Default_LandmarkProjectionCalculatorOptions_IgnoreRotation bool = false

func (m *LandmarkProjectionCalculatorOptions) GetIgnoreRotation() bool {
	if m != nil && m.IgnoreRotation != nil {
		return *m.IgnoreRotation
	}
	return Default_LandmarkProjectionCalculatorOptions_IgnoreRotation
}

var E_LandmarkProjectionCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*LandmarkProjectionCalculatorOptions)(nil),
	Field:         263371892,
	Name:          "mediapipe.LandmarkProjectionCalculatorOptions.ext",
	Tag:           "bytes,263371892,opt,name=ext",
	Filename:      "mediapipe/calculators/util/landmark_projection_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_LandmarkProjectionCalculatorOptions_Ext)
	proto.RegisterType((*LandmarkProjectionCalculatorOptions)(nil), "mediapipe.LandmarkProjectionCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/landmark_projection_calculator.proto", fileDescriptor_a5450f9e68f51475)
}

var fileDescriptor_a5450f9e68f51475 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0xcf, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f,
	0x2a, 0xd6, 0x2f, 0x2d, 0xc9, 0xcc, 0xd1, 0xcf, 0x49, 0xcc, 0x4b, 0xc9, 0x4d, 0x2c, 0xca, 0x8e,
	0x2f, 0x28, 0xca, 0xcf, 0x4a, 0x4d, 0x2e, 0xc9, 0xcc, 0xcf, 0x8b, 0x47, 0x28, 0xd2, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x1b, 0x20, 0xa5, 0x82, 0x30, 0x2b, 0xad, 0x28, 0x31, 0x37,
	0xb5, 0x3c, 0xbf, 0x28, 0x5b, 0x1f, 0x5d, 0x83, 0xd2, 0x0e, 0x46, 0x2e, 0x65, 0x1f, 0xa8, 0xc9,
	0x01, 0x70, 0x83, 0x9d, 0xe1, 0xca, 0xfc, 0x0b, 0x40, 0xfc, 0x62, 0x21, 0x3d, 0x2e, 0xfe, 0xcc,
	0xf4, 0xbc, 0xfc, 0xa2, 0xd4, 0xf8, 0xa2, 0xfc, 0x92, 0x44, 0x90, 0x98, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0x87, 0x15, 0x6b, 0x5a, 0x62, 0x4e, 0x71, 0x6a, 0x10, 0x1f, 0x44, 0x36, 0x08, 0x2a, 0x69,
	0x94, 0xc8, 0xc5, 0x9c, 0x5a, 0x51, 0x22, 0x24, 0xa3, 0x07, 0x77, 0x85, 0x1e, 0x86, 0xa1, 0x12,
	0x5f, 0x7e, 0x9c, 0xaa, 0x55, 0x60, 0xd4, 0xe0, 0x36, 0xd2, 0x43, 0x52, 0x46, 0x84, 0x6b, 0x82,
	0x40, 0x66, 0x3b, 0xe5, 0x5c, 0x78, 0x28, 0xc7, 0x70, 0xe3, 0xa1, 0x1c, 0xc3, 0x87, 0x87, 0x72,
	0x8c, 0x0d, 0x8f, 0xe4, 0x18, 0x57, 0x3c, 0x92, 0x63, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23,
	0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x5f, 0x3c, 0x92, 0x63, 0xf8, 0xf0, 0x48, 0x8e, 0x71, 0xc2,
	0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0x32, 0x4b, 0xcf, 0x2c,
	0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x47,
	0x04, 0x14, 0xee, 0xe0, 0x07, 0x04, 0x00, 0x00, 0xff, 0xff, 0x2f, 0xb4, 0xd6, 0x8a, 0x9b, 0x01,
	0x00, 0x00,
}

func (this *LandmarkProjectionCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarkProjectionCalculatorOptions)
	if !ok {
		that2, ok := that.(LandmarkProjectionCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IgnoreRotation != nil && that1.IgnoreRotation != nil {
		if *this.IgnoreRotation != *that1.IgnoreRotation {
			return false
		}
	} else if this.IgnoreRotation != nil {
		return false
	} else if that1.IgnoreRotation != nil {
		return false
	}
	return true
}
func (this *LandmarkProjectionCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&util.LandmarkProjectionCalculatorOptions{")
	if this.IgnoreRotation != nil {
		s = append(s, "IgnoreRotation: "+valueToGoStringLandmarkProjectionCalculator(this.IgnoreRotation, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLandmarkProjectionCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LandmarkProjectionCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LandmarkProjectionCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarkProjectionCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IgnoreRotation != nil {
		i--
		if *m.IgnoreRotation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLandmarkProjectionCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovLandmarkProjectionCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LandmarkProjectionCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IgnoreRotation != nil {
		n += 2
	}
	return n
}

func sovLandmarkProjectionCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLandmarkProjectionCalculator(x uint64) (n int) {
	return sovLandmarkProjectionCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LandmarkProjectionCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LandmarkProjectionCalculatorOptions{`,
		`IgnoreRotation:` + valueToStringLandmarkProjectionCalculator(this.IgnoreRotation) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLandmarkProjectionCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LandmarkProjectionCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmarkProjectionCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LandmarkProjectionCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LandmarkProjectionCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreRotation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarkProjectionCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IgnoreRotation = &b
		default:
			iNdEx = preIndex
			skippy, err := skipLandmarkProjectionCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmarkProjectionCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLandmarkProjectionCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLandmarkProjectionCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLandmarkProjectionCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLandmarkProjectionCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLandmarkProjectionCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLandmarkProjectionCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLandmarkProjectionCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLandmarkProjectionCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLandmarkProjectionCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLandmarkProjectionCalculator = fmt.Errorf("proto: unexpected end of group")
)
