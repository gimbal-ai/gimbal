// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/landmarks_refinement_calculator.proto

package util

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LandmarksRefinementCalculatorOptions struct {
	Refinement []*LandmarksRefinementCalculatorOptions_Refinement `protobuf:"bytes,1,rep,name=refinement" json:"refinement,omitempty"`
}

func (m *LandmarksRefinementCalculatorOptions) Reset()      { *m = LandmarksRefinementCalculatorOptions{} }
func (*LandmarksRefinementCalculatorOptions) ProtoMessage() {}
func (*LandmarksRefinementCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d589c36cf2dfdbb, []int{0}
}
func (m *LandmarksRefinementCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LandmarksRefinementCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LandmarksRefinementCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LandmarksRefinementCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LandmarksRefinementCalculatorOptions.Merge(m, src)
}
func (m *LandmarksRefinementCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *LandmarksRefinementCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_LandmarksRefinementCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_LandmarksRefinementCalculatorOptions proto.InternalMessageInfo

func (m *LandmarksRefinementCalculatorOptions) GetRefinement() []*LandmarksRefinementCalculatorOptions_Refinement {
	if m != nil {
		return m.Refinement
	}
	return nil
}

var E_LandmarksRefinementCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*LandmarksRefinementCalculatorOptions)(nil),
	Field:         381914658,
	Name:          "mediapipe.LandmarksRefinementCalculatorOptions.ext",
	Tag:           "bytes,381914658,opt,name=ext",
	Filename:      "mediapipe/calculators/util/landmarks_refinement_calculator.proto",
}

type LandmarksRefinementCalculatorOptions_ZRefinementNone struct {
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinementNone) Reset() {
	*m = LandmarksRefinementCalculatorOptions_ZRefinementNone{}
}
func (*LandmarksRefinementCalculatorOptions_ZRefinementNone) ProtoMessage() {}
func (*LandmarksRefinementCalculatorOptions_ZRefinementNone) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d589c36cf2dfdbb, []int{0, 0}
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinementNone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinementNone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LandmarksRefinementCalculatorOptions_ZRefinementNone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinementNone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LandmarksRefinementCalculatorOptions_ZRefinementNone.Merge(m, src)
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinementNone) XXX_Size() int {
	return m.Size()
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinementNone) XXX_DiscardUnknown() {
	xxx_messageInfo_LandmarksRefinementCalculatorOptions_ZRefinementNone.DiscardUnknown(m)
}

var xxx_messageInfo_LandmarksRefinementCalculatorOptions_ZRefinementNone proto.InternalMessageInfo

type LandmarksRefinementCalculatorOptions_ZRefinementCopy struct {
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinementCopy) Reset() {
	*m = LandmarksRefinementCalculatorOptions_ZRefinementCopy{}
}
func (*LandmarksRefinementCalculatorOptions_ZRefinementCopy) ProtoMessage() {}
func (*LandmarksRefinementCalculatorOptions_ZRefinementCopy) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d589c36cf2dfdbb, []int{0, 1}
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinementCopy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinementCopy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LandmarksRefinementCalculatorOptions_ZRefinementCopy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinementCopy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LandmarksRefinementCalculatorOptions_ZRefinementCopy.Merge(m, src)
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinementCopy) XXX_Size() int {
	return m.Size()
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinementCopy) XXX_DiscardUnknown() {
	xxx_messageInfo_LandmarksRefinementCalculatorOptions_ZRefinementCopy.DiscardUnknown(m)
}

var xxx_messageInfo_LandmarksRefinementCalculatorOptions_ZRefinementCopy proto.InternalMessageInfo

type LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage struct {
	IndexesForAverage []int32 `protobuf:"varint,1,rep,name=indexes_for_average,json=indexesForAverage" json:"indexes_for_average,omitempty"`
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage) Reset() {
	*m = LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage{}
}
func (*LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage) ProtoMessage() {}
func (*LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d589c36cf2dfdbb, []int{0, 2}
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage.Merge(m, src)
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage) XXX_Size() int {
	return m.Size()
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage) XXX_DiscardUnknown() {
	xxx_messageInfo_LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage.DiscardUnknown(m)
}

var xxx_messageInfo_LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage proto.InternalMessageInfo

func (m *LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage) GetIndexesForAverage() []int32 {
	if m != nil {
		return m.IndexesForAverage
	}
	return nil
}

type LandmarksRefinementCalculatorOptions_ZRefinement struct {
	// Types that are valid to be assigned to ZRefinementOptions:
	//	*LandmarksRefinementCalculatorOptions_ZRefinement_None
	//	*LandmarksRefinementCalculatorOptions_ZRefinement_Copy
	//	*LandmarksRefinementCalculatorOptions_ZRefinement_AssignAverage
	ZRefinementOptions isLandmarksRefinementCalculatorOptions_ZRefinement_ZRefinementOptions `protobuf_oneof:"z_refinement_options"`
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinement) Reset() {
	*m = LandmarksRefinementCalculatorOptions_ZRefinement{}
}
func (*LandmarksRefinementCalculatorOptions_ZRefinement) ProtoMessage() {}
func (*LandmarksRefinementCalculatorOptions_ZRefinement) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d589c36cf2dfdbb, []int{0, 3}
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LandmarksRefinementCalculatorOptions_ZRefinement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LandmarksRefinementCalculatorOptions_ZRefinement.Merge(m, src)
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinement) XXX_Size() int {
	return m.Size()
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinement) XXX_DiscardUnknown() {
	xxx_messageInfo_LandmarksRefinementCalculatorOptions_ZRefinement.DiscardUnknown(m)
}

var xxx_messageInfo_LandmarksRefinementCalculatorOptions_ZRefinement proto.InternalMessageInfo

type isLandmarksRefinementCalculatorOptions_ZRefinement_ZRefinementOptions interface {
	isLandmarksRefinementCalculatorOptions_ZRefinement_ZRefinementOptions()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type LandmarksRefinementCalculatorOptions_ZRefinement_None struct {
	None *LandmarksRefinementCalculatorOptions_ZRefinementNone `protobuf:"bytes,1,opt,name=none,oneof" json:"none,omitempty"`
}
type LandmarksRefinementCalculatorOptions_ZRefinement_Copy struct {
	Copy *LandmarksRefinementCalculatorOptions_ZRefinementCopy `protobuf:"bytes,2,opt,name=copy,oneof" json:"copy,omitempty"`
}
type LandmarksRefinementCalculatorOptions_ZRefinement_AssignAverage struct {
	AssignAverage *LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage `protobuf:"bytes,3,opt,name=assign_average,json=assignAverage,oneof" json:"assign_average,omitempty"`
}

func (*LandmarksRefinementCalculatorOptions_ZRefinement_None) isLandmarksRefinementCalculatorOptions_ZRefinement_ZRefinementOptions() {
}
func (*LandmarksRefinementCalculatorOptions_ZRefinement_Copy) isLandmarksRefinementCalculatorOptions_ZRefinement_ZRefinementOptions() {
}
func (*LandmarksRefinementCalculatorOptions_ZRefinement_AssignAverage) isLandmarksRefinementCalculatorOptions_ZRefinement_ZRefinementOptions() {
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinement) GetZRefinementOptions() isLandmarksRefinementCalculatorOptions_ZRefinement_ZRefinementOptions {
	if m != nil {
		return m.ZRefinementOptions
	}
	return nil
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinement) GetNone() *LandmarksRefinementCalculatorOptions_ZRefinementNone {
	if x, ok := m.GetZRefinementOptions().(*LandmarksRefinementCalculatorOptions_ZRefinement_None); ok {
		return x.None
	}
	return nil
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinement) GetCopy() *LandmarksRefinementCalculatorOptions_ZRefinementCopy {
	if x, ok := m.GetZRefinementOptions().(*LandmarksRefinementCalculatorOptions_ZRefinement_Copy); ok {
		return x.Copy
	}
	return nil
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinement) GetAssignAverage() *LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage {
	if x, ok := m.GetZRefinementOptions().(*LandmarksRefinementCalculatorOptions_ZRefinement_AssignAverage); ok {
		return x.AssignAverage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LandmarksRefinementCalculatorOptions_ZRefinement) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LandmarksRefinementCalculatorOptions_ZRefinement_None)(nil),
		(*LandmarksRefinementCalculatorOptions_ZRefinement_Copy)(nil),
		(*LandmarksRefinementCalculatorOptions_ZRefinement_AssignAverage)(nil),
	}
}

type LandmarksRefinementCalculatorOptions_Refinement struct {
	IndexesMapping []int32                                           `protobuf:"varint,1,rep,name=indexes_mapping,json=indexesMapping" json:"indexes_mapping,omitempty"`
	ZRefinement    *LandmarksRefinementCalculatorOptions_ZRefinement `protobuf:"bytes,2,opt,name=z_refinement,json=zRefinement" json:"z_refinement,omitempty"`
}

func (m *LandmarksRefinementCalculatorOptions_Refinement) Reset() {
	*m = LandmarksRefinementCalculatorOptions_Refinement{}
}
func (*LandmarksRefinementCalculatorOptions_Refinement) ProtoMessage() {}
func (*LandmarksRefinementCalculatorOptions_Refinement) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d589c36cf2dfdbb, []int{0, 4}
}
func (m *LandmarksRefinementCalculatorOptions_Refinement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LandmarksRefinementCalculatorOptions_Refinement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LandmarksRefinementCalculatorOptions_Refinement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LandmarksRefinementCalculatorOptions_Refinement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LandmarksRefinementCalculatorOptions_Refinement.Merge(m, src)
}
func (m *LandmarksRefinementCalculatorOptions_Refinement) XXX_Size() int {
	return m.Size()
}
func (m *LandmarksRefinementCalculatorOptions_Refinement) XXX_DiscardUnknown() {
	xxx_messageInfo_LandmarksRefinementCalculatorOptions_Refinement.DiscardUnknown(m)
}

var xxx_messageInfo_LandmarksRefinementCalculatorOptions_Refinement proto.InternalMessageInfo

func (m *LandmarksRefinementCalculatorOptions_Refinement) GetIndexesMapping() []int32 {
	if m != nil {
		return m.IndexesMapping
	}
	return nil
}

func (m *LandmarksRefinementCalculatorOptions_Refinement) GetZRefinement() *LandmarksRefinementCalculatorOptions_ZRefinement {
	if m != nil {
		return m.ZRefinement
	}
	return nil
}

func init() {
	proto.RegisterExtension(E_LandmarksRefinementCalculatorOptions_Ext)
	proto.RegisterType((*LandmarksRefinementCalculatorOptions)(nil), "mediapipe.LandmarksRefinementCalculatorOptions")
	proto.RegisterType((*LandmarksRefinementCalculatorOptions_ZRefinementNone)(nil), "mediapipe.LandmarksRefinementCalculatorOptions.ZRefinementNone")
	proto.RegisterType((*LandmarksRefinementCalculatorOptions_ZRefinementCopy)(nil), "mediapipe.LandmarksRefinementCalculatorOptions.ZRefinementCopy")
	proto.RegisterType((*LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage)(nil), "mediapipe.LandmarksRefinementCalculatorOptions.ZRefinementAssignAverage")
	proto.RegisterType((*LandmarksRefinementCalculatorOptions_ZRefinement)(nil), "mediapipe.LandmarksRefinementCalculatorOptions.ZRefinement")
	proto.RegisterType((*LandmarksRefinementCalculatorOptions_Refinement)(nil), "mediapipe.LandmarksRefinementCalculatorOptions.Refinement")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/landmarks_refinement_calculator.proto", fileDescriptor_2d589c36cf2dfdbb)
}

var fileDescriptor_2d589c36cf2dfdbb = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x3d, 0x8b, 0xd4, 0x40,
	0x18, 0xc7, 0x67, 0x6e, 0x55, 0xf0, 0x89, 0xde, 0x71, 0x51, 0x24, 0x04, 0x19, 0x44, 0x0e, 0xbc,
	0x2a, 0x81, 0x2d, 0x2c, 0xb4, 0xd0, 0xbb, 0x03, 0x59, 0xc4, 0x17, 0x08, 0xd8, 0x6c, 0x61, 0x18,
	0xb3, 0xb3, 0x71, 0xb8, 0x64, 0x66, 0x9c, 0x64, 0xf5, 0xee, 0x2a, 0x3f, 0x81, 0xd8, 0xd8, 0x59,
	0x59, 0xf9, 0x09, 0x2c, 0xfc, 0x00, 0x62, 0xb9, 0xe5, 0x95, 0x6e, 0xb6, 0xb1, 0xbc, 0x8f, 0x20,
	0x79, 0xd9, 0x64, 0x5c, 0x11, 0x6e, 0xd9, 0x32, 0xff, 0xe7, 0x79, 0x7e, 0xff, 0xe7, 0x25, 0x09,
	0x3c, 0x4c, 0xd9, 0x88, 0x53, 0xc5, 0x15, 0xf3, 0x23, 0x9a, 0x44, 0x93, 0x84, 0xe6, 0x52, 0x67,
	0xfe, 0x24, 0xe7, 0x89, 0x9f, 0x50, 0x31, 0x4a, 0xa9, 0x3e, 0xcc, 0x42, 0xcd, 0xc6, 0x5c, 0xb0,
	0x94, 0x89, 0x3c, 0xec, 0xb2, 0x3c, 0xa5, 0x65, 0x2e, 0xed, 0xcb, 0x2d, 0xc1, 0xdd, 0xe9, 0x60,
	0x63, 0x4d, 0x53, 0xf6, 0x4e, 0xea, 0x43, 0x7f, 0xb9, 0xe0, 0xf6, 0xf7, 0x4b, 0xb0, 0xf3, 0x64,
	0x81, 0x0e, 0x5a, 0xf2, 0x41, 0x9b, 0xf7, 0x5c, 0xe5, 0x5c, 0x8a, 0xcc, 0x1e, 0x02, 0x74, 0xc6,
	0x0e, 0xbe, 0xd5, 0xdb, 0xb5, 0xfa, 0xf7, 0xbc, 0xd6, 0xc3, 0x3b, 0x0f, 0xc4, 0xeb, 0x62, 0x81,
	0x41, 0x73, 0xb7, 0x61, 0x6b, 0xd8, 0x85, 0x9e, 0x49, 0xc1, 0x96, 0xa4, 0x03, 0xa9, 0x8e, 0xdd,
	0xc7, 0xe0, 0x18, 0xd2, 0x5e, 0x96, 0xf1, 0x58, 0xec, 0xbd, 0x65, 0x9a, 0xc6, 0xcc, 0xf6, 0xe0,
	0x1a, 0x17, 0x23, 0x76, 0xc4, 0xb2, 0x70, 0x2c, 0x75, 0x48, 0x6b, 0xb9, 0x6a, 0xf3, 0x62, 0xb0,
	0xdd, 0x84, 0x1e, 0x49, 0xdd, 0xe4, 0xbb, 0x3f, 0x36, 0xc0, 0x32, 0x60, 0xf6, 0x0b, 0xb8, 0x20,
	0xa4, 0x28, 0x0b, 0xf0, 0xae, 0xd5, 0x7f, 0xb0, 0xea, 0x5c, 0x4b, 0xdd, 0x0f, 0x50, 0x50, 0xe1,
	0x4a, 0x6c, 0x24, 0xd5, 0xb1, 0xb3, 0xb1, 0x36, 0xb6, 0xdc, 0x40, 0x89, 0x2d, 0x71, 0xf6, 0x1b,
	0xd8, 0xa4, 0xd5, 0xf8, 0xed, 0xa0, 0xbd, 0xca, 0x60, 0xb0, 0x86, 0xc1, 0x5f, 0xfb, 0x1c, 0xa0,
	0xe0, 0x2a, 0x35, 0x85, 0xfd, 0x1b, 0x70, 0xfd, 0xc4, 0x7c, 0xf3, 0x64, 0x4d, 0x70, 0x3f, 0x61,
	0x00, 0x63, 0x8f, 0x77, 0x60, 0x6b, 0x71, 0x87, 0x94, 0x2a, 0xc5, 0x45, 0xdc, 0xdc, 0x60, 0xb3,
	0x91, 0x9f, 0xd6, 0xaa, 0xfd, 0x12, 0xae, 0x98, 0xbc, 0x66, 0x43, 0xf7, 0xd7, 0x18, 0x20, 0xb0,
	0x4e, 0xba, 0x87, 0x7e, 0x04, 0x3d, 0x76, 0x94, 0xdb, 0x37, 0x0d, 0xe0, 0x3f, 0xd5, 0xce, 0x97,
	0xcf, 0x1f, 0xbe, 0xd5, 0x17, 0xf7, 0x57, 0x34, 0x0e, 0x4a, 0xfa, 0x7e, 0x32, 0x9d, 0x11, 0x74,
	0x3a, 0x23, 0xe8, 0x6c, 0x46, 0xf0, 0xfb, 0x82, 0xe0, 0xaf, 0x05, 0xc1, 0x3f, 0x0b, 0x82, 0xa7,
	0x05, 0xc1, 0xbf, 0x0a, 0x82, 0x7f, 0x17, 0x04, 0x9d, 0x15, 0x04, 0x7f, 0x9c, 0x13, 0x34, 0x9d,
	0x13, 0x74, 0x3a, 0x27, 0x68, 0x78, 0x37, 0xe6, 0xf9, 0xeb, 0xc9, 0x2b, 0x2f, 0x92, 0xa9, 0x1f,
	0x4b, 0x19, 0x27, 0xcc, 0xef, 0x3e, 0xd5, 0xff, 0xff, 0x01, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x0f, 0xaf, 0x46, 0x3c, 0x1e, 0x04, 0x00, 0x00,
}

func (this *LandmarksRefinementCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarksRefinementCalculatorOptions)
	if !ok {
		that2, ok := that.(LandmarksRefinementCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Refinement) != len(that1.Refinement) {
		return false
	}
	for i := range this.Refinement {
		if !this.Refinement[i].Equal(that1.Refinement[i]) {
			return false
		}
	}
	return true
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinementNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarksRefinementCalculatorOptions_ZRefinementNone)
	if !ok {
		that2, ok := that.(LandmarksRefinementCalculatorOptions_ZRefinementNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinementCopy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarksRefinementCalculatorOptions_ZRefinementCopy)
	if !ok {
		that2, ok := that.(LandmarksRefinementCalculatorOptions_ZRefinementCopy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage)
	if !ok {
		that2, ok := that.(LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.IndexesForAverage) != len(that1.IndexesForAverage) {
		return false
	}
	for i := range this.IndexesForAverage {
		if this.IndexesForAverage[i] != that1.IndexesForAverage[i] {
			return false
		}
	}
	return true
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarksRefinementCalculatorOptions_ZRefinement)
	if !ok {
		that2, ok := that.(LandmarksRefinementCalculatorOptions_ZRefinement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ZRefinementOptions == nil {
		if this.ZRefinementOptions != nil {
			return false
		}
	} else if this.ZRefinementOptions == nil {
		return false
	} else if !this.ZRefinementOptions.Equal(that1.ZRefinementOptions) {
		return false
	}
	return true
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinement_None) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarksRefinementCalculatorOptions_ZRefinement_None)
	if !ok {
		that2, ok := that.(LandmarksRefinementCalculatorOptions_ZRefinement_None)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.None.Equal(that1.None) {
		return false
	}
	return true
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinement_Copy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarksRefinementCalculatorOptions_ZRefinement_Copy)
	if !ok {
		that2, ok := that.(LandmarksRefinementCalculatorOptions_ZRefinement_Copy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Copy.Equal(that1.Copy) {
		return false
	}
	return true
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinement_AssignAverage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarksRefinementCalculatorOptions_ZRefinement_AssignAverage)
	if !ok {
		that2, ok := that.(LandmarksRefinementCalculatorOptions_ZRefinement_AssignAverage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AssignAverage.Equal(that1.AssignAverage) {
		return false
	}
	return true
}
func (this *LandmarksRefinementCalculatorOptions_Refinement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarksRefinementCalculatorOptions_Refinement)
	if !ok {
		that2, ok := that.(LandmarksRefinementCalculatorOptions_Refinement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.IndexesMapping) != len(that1.IndexesMapping) {
		return false
	}
	for i := range this.IndexesMapping {
		if this.IndexesMapping[i] != that1.IndexesMapping[i] {
			return false
		}
	}
	if !this.ZRefinement.Equal(that1.ZRefinement) {
		return false
	}
	return true
}
func (this *LandmarksRefinementCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&util.LandmarksRefinementCalculatorOptions{")
	if this.Refinement != nil {
		s = append(s, "Refinement: "+fmt.Sprintf("%#v", this.Refinement)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinementNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&util.LandmarksRefinementCalculatorOptions_ZRefinementNone{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinementCopy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&util.LandmarksRefinementCalculatorOptions_ZRefinementCopy{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&util.LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage{")
	if this.IndexesForAverage != nil {
		s = append(s, "IndexesForAverage: "+fmt.Sprintf("%#v", this.IndexesForAverage)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&util.LandmarksRefinementCalculatorOptions_ZRefinement{")
	if this.ZRefinementOptions != nil {
		s = append(s, "ZRefinementOptions: "+fmt.Sprintf("%#v", this.ZRefinementOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinement_None) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.LandmarksRefinementCalculatorOptions_ZRefinement_None{` +
		`None:` + fmt.Sprintf("%#v", this.None) + `}`}, ", ")
	return s
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinement_Copy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.LandmarksRefinementCalculatorOptions_ZRefinement_Copy{` +
		`Copy:` + fmt.Sprintf("%#v", this.Copy) + `}`}, ", ")
	return s
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinement_AssignAverage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.LandmarksRefinementCalculatorOptions_ZRefinement_AssignAverage{` +
		`AssignAverage:` + fmt.Sprintf("%#v", this.AssignAverage) + `}`}, ", ")
	return s
}
func (this *LandmarksRefinementCalculatorOptions_Refinement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&util.LandmarksRefinementCalculatorOptions_Refinement{")
	if this.IndexesMapping != nil {
		s = append(s, "IndexesMapping: "+fmt.Sprintf("%#v", this.IndexesMapping)+",\n")
	}
	if this.ZRefinement != nil {
		s = append(s, "ZRefinement: "+fmt.Sprintf("%#v", this.ZRefinement)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLandmarksRefinementCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LandmarksRefinementCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LandmarksRefinementCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarksRefinementCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Refinement) > 0 {
		for iNdEx := len(m.Refinement) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Refinement[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLandmarksRefinementCalculator(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinementNone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinementNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinementNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinementCopy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinementCopy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinementCopy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IndexesForAverage) > 0 {
		for iNdEx := len(m.IndexesForAverage) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintLandmarksRefinementCalculator(dAtA, i, uint64(m.IndexesForAverage[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ZRefinementOptions != nil {
		{
			size := m.ZRefinementOptions.Size()
			i -= size
			if _, err := m.ZRefinementOptions.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinement_None) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinement_None) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.None != nil {
		{
			size, err := m.None.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLandmarksRefinementCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinement_Copy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinement_Copy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Copy != nil {
		{
			size, err := m.Copy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLandmarksRefinementCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinement_AssignAverage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinement_AssignAverage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AssignAverage != nil {
		{
			size, err := m.AssignAverage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLandmarksRefinementCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *LandmarksRefinementCalculatorOptions_Refinement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LandmarksRefinementCalculatorOptions_Refinement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarksRefinementCalculatorOptions_Refinement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ZRefinement != nil {
		{
			size, err := m.ZRefinement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLandmarksRefinementCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IndexesMapping) > 0 {
		for iNdEx := len(m.IndexesMapping) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintLandmarksRefinementCalculator(dAtA, i, uint64(m.IndexesMapping[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintLandmarksRefinementCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovLandmarksRefinementCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LandmarksRefinementCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Refinement) > 0 {
		for _, e := range m.Refinement {
			l = e.Size()
			n += 1 + l + sovLandmarksRefinementCalculator(uint64(l))
		}
	}
	return n
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinementNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinementCopy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IndexesForAverage) > 0 {
		for _, e := range m.IndexesForAverage {
			n += 1 + sovLandmarksRefinementCalculator(uint64(e))
		}
	}
	return n
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ZRefinementOptions != nil {
		n += m.ZRefinementOptions.Size()
	}
	return n
}

func (m *LandmarksRefinementCalculatorOptions_ZRefinement_None) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.None != nil {
		l = m.None.Size()
		n += 1 + l + sovLandmarksRefinementCalculator(uint64(l))
	}
	return n
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinement_Copy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Copy != nil {
		l = m.Copy.Size()
		n += 1 + l + sovLandmarksRefinementCalculator(uint64(l))
	}
	return n
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinement_AssignAverage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssignAverage != nil {
		l = m.AssignAverage.Size()
		n += 1 + l + sovLandmarksRefinementCalculator(uint64(l))
	}
	return n
}
func (m *LandmarksRefinementCalculatorOptions_Refinement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IndexesMapping) > 0 {
		for _, e := range m.IndexesMapping {
			n += 1 + sovLandmarksRefinementCalculator(uint64(e))
		}
	}
	if m.ZRefinement != nil {
		l = m.ZRefinement.Size()
		n += 1 + l + sovLandmarksRefinementCalculator(uint64(l))
	}
	return n
}

func sovLandmarksRefinementCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLandmarksRefinementCalculator(x uint64) (n int) {
	return sovLandmarksRefinementCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LandmarksRefinementCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRefinement := "[]*LandmarksRefinementCalculatorOptions_Refinement{"
	for _, f := range this.Refinement {
		repeatedStringForRefinement += strings.Replace(fmt.Sprintf("%v", f), "LandmarksRefinementCalculatorOptions_Refinement", "LandmarksRefinementCalculatorOptions_Refinement", 1) + ","
	}
	repeatedStringForRefinement += "}"
	s := strings.Join([]string{`&LandmarksRefinementCalculatorOptions{`,
		`Refinement:` + repeatedStringForRefinement + `,`,
		`}`,
	}, "")
	return s
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinementNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LandmarksRefinementCalculatorOptions_ZRefinementNone{`,
		`}`,
	}, "")
	return s
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinementCopy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LandmarksRefinementCalculatorOptions_ZRefinementCopy{`,
		`}`,
	}, "")
	return s
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage{`,
		`IndexesForAverage:` + fmt.Sprintf("%v", this.IndexesForAverage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LandmarksRefinementCalculatorOptions_ZRefinement{`,
		`ZRefinementOptions:` + fmt.Sprintf("%v", this.ZRefinementOptions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinement_None) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LandmarksRefinementCalculatorOptions_ZRefinement_None{`,
		`None:` + strings.Replace(fmt.Sprintf("%v", this.None), "LandmarksRefinementCalculatorOptions_ZRefinementNone", "LandmarksRefinementCalculatorOptions_ZRefinementNone", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinement_Copy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LandmarksRefinementCalculatorOptions_ZRefinement_Copy{`,
		`Copy:` + strings.Replace(fmt.Sprintf("%v", this.Copy), "LandmarksRefinementCalculatorOptions_ZRefinementCopy", "LandmarksRefinementCalculatorOptions_ZRefinementCopy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LandmarksRefinementCalculatorOptions_ZRefinement_AssignAverage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LandmarksRefinementCalculatorOptions_ZRefinement_AssignAverage{`,
		`AssignAverage:` + strings.Replace(fmt.Sprintf("%v", this.AssignAverage), "LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage", "LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LandmarksRefinementCalculatorOptions_Refinement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LandmarksRefinementCalculatorOptions_Refinement{`,
		`IndexesMapping:` + fmt.Sprintf("%v", this.IndexesMapping) + `,`,
		`ZRefinement:` + strings.Replace(fmt.Sprintf("%v", this.ZRefinement), "LandmarksRefinementCalculatorOptions_ZRefinement", "LandmarksRefinementCalculatorOptions_ZRefinement", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLandmarksRefinementCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LandmarksRefinementCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmarksRefinementCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LandmarksRefinementCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LandmarksRefinementCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refinement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksRefinementCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLandmarksRefinementCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLandmarksRefinementCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refinement = append(m.Refinement, &LandmarksRefinementCalculatorOptions_Refinement{})
			if err := m.Refinement[len(m.Refinement)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLandmarksRefinementCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmarksRefinementCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinementNone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmarksRefinementCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZRefinementNone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZRefinementNone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLandmarksRefinementCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmarksRefinementCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinementCopy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmarksRefinementCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZRefinementCopy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZRefinementCopy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLandmarksRefinementCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmarksRefinementCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmarksRefinementCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZRefinementAssignAverage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZRefinementAssignAverage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLandmarksRefinementCalculator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IndexesForAverage = append(m.IndexesForAverage, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLandmarksRefinementCalculator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLandmarksRefinementCalculator
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLandmarksRefinementCalculator
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IndexesForAverage) == 0 {
					m.IndexesForAverage = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLandmarksRefinementCalculator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IndexesForAverage = append(m.IndexesForAverage, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexesForAverage", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLandmarksRefinementCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmarksRefinementCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LandmarksRefinementCalculatorOptions_ZRefinement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmarksRefinementCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZRefinement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZRefinement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksRefinementCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLandmarksRefinementCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLandmarksRefinementCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LandmarksRefinementCalculatorOptions_ZRefinementNone{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ZRefinementOptions = &LandmarksRefinementCalculatorOptions_ZRefinement_None{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Copy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksRefinementCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLandmarksRefinementCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLandmarksRefinementCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LandmarksRefinementCalculatorOptions_ZRefinementCopy{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ZRefinementOptions = &LandmarksRefinementCalculatorOptions_ZRefinement_Copy{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignAverage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksRefinementCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLandmarksRefinementCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLandmarksRefinementCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LandmarksRefinementCalculatorOptions_ZRefinementAssignAverage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ZRefinementOptions = &LandmarksRefinementCalculatorOptions_ZRefinement_AssignAverage{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLandmarksRefinementCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmarksRefinementCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LandmarksRefinementCalculatorOptions_Refinement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmarksRefinementCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Refinement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Refinement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLandmarksRefinementCalculator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IndexesMapping = append(m.IndexesMapping, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLandmarksRefinementCalculator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLandmarksRefinementCalculator
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLandmarksRefinementCalculator
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IndexesMapping) == 0 {
					m.IndexesMapping = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLandmarksRefinementCalculator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IndexesMapping = append(m.IndexesMapping, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexesMapping", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZRefinement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksRefinementCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLandmarksRefinementCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLandmarksRefinementCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZRefinement == nil {
				m.ZRefinement = &LandmarksRefinementCalculatorOptions_ZRefinement{}
			}
			if err := m.ZRefinement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLandmarksRefinementCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmarksRefinementCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLandmarksRefinementCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLandmarksRefinementCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLandmarksRefinementCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLandmarksRefinementCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLandmarksRefinementCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLandmarksRefinementCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLandmarksRefinementCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLandmarksRefinementCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLandmarksRefinementCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLandmarksRefinementCalculator = fmt.Errorf("proto: unexpected end of group")
)
