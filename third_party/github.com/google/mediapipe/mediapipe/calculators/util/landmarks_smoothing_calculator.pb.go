// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/landmarks_smoothing_calculator.proto

package util

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LandmarksSmoothingCalculatorOptions struct {
	// Types that are valid to be assigned to FilterOptions:
	//	*LandmarksSmoothingCalculatorOptions_NoFilter_
	//	*LandmarksSmoothingCalculatorOptions_VelocityFilter_
	//	*LandmarksSmoothingCalculatorOptions_OneEuroFilter_
	FilterOptions isLandmarksSmoothingCalculatorOptions_FilterOptions `protobuf_oneof:"filter_options"`
}

func (m *LandmarksSmoothingCalculatorOptions) Reset()      { *m = LandmarksSmoothingCalculatorOptions{} }
func (*LandmarksSmoothingCalculatorOptions) ProtoMessage() {}
func (*LandmarksSmoothingCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfd59be2be6958d, []int{0}
}
func (m *LandmarksSmoothingCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LandmarksSmoothingCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LandmarksSmoothingCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LandmarksSmoothingCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LandmarksSmoothingCalculatorOptions.Merge(m, src)
}
func (m *LandmarksSmoothingCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *LandmarksSmoothingCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_LandmarksSmoothingCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_LandmarksSmoothingCalculatorOptions proto.InternalMessageInfo

type isLandmarksSmoothingCalculatorOptions_FilterOptions interface {
	isLandmarksSmoothingCalculatorOptions_FilterOptions()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type LandmarksSmoothingCalculatorOptions_NoFilter_ struct {
	NoFilter *LandmarksSmoothingCalculatorOptions_NoFilter `protobuf:"bytes,1,opt,name=no_filter,json=noFilter,oneof" json:"no_filter,omitempty"`
}
type LandmarksSmoothingCalculatorOptions_VelocityFilter_ struct {
	VelocityFilter *LandmarksSmoothingCalculatorOptions_VelocityFilter `protobuf:"bytes,2,opt,name=velocity_filter,json=velocityFilter,oneof" json:"velocity_filter,omitempty"`
}
type LandmarksSmoothingCalculatorOptions_OneEuroFilter_ struct {
	OneEuroFilter *LandmarksSmoothingCalculatorOptions_OneEuroFilter `protobuf:"bytes,3,opt,name=one_euro_filter,json=oneEuroFilter,oneof" json:"one_euro_filter,omitempty"`
}

func (*LandmarksSmoothingCalculatorOptions_NoFilter_) isLandmarksSmoothingCalculatorOptions_FilterOptions() {
}
func (*LandmarksSmoothingCalculatorOptions_VelocityFilter_) isLandmarksSmoothingCalculatorOptions_FilterOptions() {
}
func (*LandmarksSmoothingCalculatorOptions_OneEuroFilter_) isLandmarksSmoothingCalculatorOptions_FilterOptions() {
}

func (m *LandmarksSmoothingCalculatorOptions) GetFilterOptions() isLandmarksSmoothingCalculatorOptions_FilterOptions {
	if m != nil {
		return m.FilterOptions
	}
	return nil
}

func (m *LandmarksSmoothingCalculatorOptions) GetNoFilter() *LandmarksSmoothingCalculatorOptions_NoFilter {
	if x, ok := m.GetFilterOptions().(*LandmarksSmoothingCalculatorOptions_NoFilter_); ok {
		return x.NoFilter
	}
	return nil
}

func (m *LandmarksSmoothingCalculatorOptions) GetVelocityFilter() *LandmarksSmoothingCalculatorOptions_VelocityFilter {
	if x, ok := m.GetFilterOptions().(*LandmarksSmoothingCalculatorOptions_VelocityFilter_); ok {
		return x.VelocityFilter
	}
	return nil
}

func (m *LandmarksSmoothingCalculatorOptions) GetOneEuroFilter() *LandmarksSmoothingCalculatorOptions_OneEuroFilter {
	if x, ok := m.GetFilterOptions().(*LandmarksSmoothingCalculatorOptions_OneEuroFilter_); ok {
		return x.OneEuroFilter
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LandmarksSmoothingCalculatorOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LandmarksSmoothingCalculatorOptions_NoFilter_)(nil),
		(*LandmarksSmoothingCalculatorOptions_VelocityFilter_)(nil),
		(*LandmarksSmoothingCalculatorOptions_OneEuroFilter_)(nil),
	}
}

var E_LandmarksSmoothingCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*LandmarksSmoothingCalculatorOptions)(nil),
	Field:         325671429,
	Name:          "mediapipe.LandmarksSmoothingCalculatorOptions.ext",
	Tag:           "bytes,325671429,opt,name=ext",
	Filename:      "mediapipe/calculators/util/landmarks_smoothing_calculator.proto",
}

type LandmarksSmoothingCalculatorOptions_NoFilter struct {
}

func (m *LandmarksSmoothingCalculatorOptions_NoFilter) Reset() {
	*m = LandmarksSmoothingCalculatorOptions_NoFilter{}
}
func (*LandmarksSmoothingCalculatorOptions_NoFilter) ProtoMessage() {}
func (*LandmarksSmoothingCalculatorOptions_NoFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfd59be2be6958d, []int{0, 0}
}
func (m *LandmarksSmoothingCalculatorOptions_NoFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LandmarksSmoothingCalculatorOptions_NoFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LandmarksSmoothingCalculatorOptions_NoFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LandmarksSmoothingCalculatorOptions_NoFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LandmarksSmoothingCalculatorOptions_NoFilter.Merge(m, src)
}
func (m *LandmarksSmoothingCalculatorOptions_NoFilter) XXX_Size() int {
	return m.Size()
}
func (m *LandmarksSmoothingCalculatorOptions_NoFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_LandmarksSmoothingCalculatorOptions_NoFilter.DiscardUnknown(m)
}

var xxx_messageInfo_LandmarksSmoothingCalculatorOptions_NoFilter proto.InternalMessageInfo

type LandmarksSmoothingCalculatorOptions_VelocityFilter struct {
	WindowSize            *int32   `protobuf:"varint,1,opt,name=window_size,json=windowSize,def=5" json:"window_size,omitempty"`
	VelocityScale         *float32 `protobuf:"fixed32,2,opt,name=velocity_scale,json=velocityScale,def=10" json:"velocity_scale,omitempty"`
	MinAllowedObjectScale *float32 `protobuf:"fixed32,3,opt,name=min_allowed_object_scale,json=minAllowedObjectScale,def=1e-06" json:"min_allowed_object_scale,omitempty"`
	DisableValueScaling   *bool    `protobuf:"varint,4,opt,name=disable_value_scaling,json=disableValueScaling,def=0" json:"disable_value_scaling,omitempty"`
}

func (m *LandmarksSmoothingCalculatorOptions_VelocityFilter) Reset() {
	*m = LandmarksSmoothingCalculatorOptions_VelocityFilter{}
}
func (*LandmarksSmoothingCalculatorOptions_VelocityFilter) ProtoMessage() {}
func (*LandmarksSmoothingCalculatorOptions_VelocityFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfd59be2be6958d, []int{0, 1}
}
func (m *LandmarksSmoothingCalculatorOptions_VelocityFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LandmarksSmoothingCalculatorOptions_VelocityFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LandmarksSmoothingCalculatorOptions_VelocityFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LandmarksSmoothingCalculatorOptions_VelocityFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LandmarksSmoothingCalculatorOptions_VelocityFilter.Merge(m, src)
}
func (m *LandmarksSmoothingCalculatorOptions_VelocityFilter) XXX_Size() int {
	return m.Size()
}
func (m *LandmarksSmoothingCalculatorOptions_VelocityFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_LandmarksSmoothingCalculatorOptions_VelocityFilter.DiscardUnknown(m)
}

var xxx_messageInfo_LandmarksSmoothingCalculatorOptions_VelocityFilter proto.InternalMessageInfo

const Default_LandmarksSmoothingCalculatorOptions_VelocityFilter_WindowSize int32 = 5
const Default_LandmarksSmoothingCalculatorOptions_VelocityFilter_VelocityScale float32 = 10
const Default_LandmarksSmoothingCalculatorOptions_VelocityFilter_MinAllowedObjectScale float32 = 1e-06
const Default_LandmarksSmoothingCalculatorOptions_VelocityFilter_DisableValueScaling bool = false

func (m *LandmarksSmoothingCalculatorOptions_VelocityFilter) GetWindowSize() int32 {
	if m != nil && m.WindowSize != nil {
		return *m.WindowSize
	}
	return Default_LandmarksSmoothingCalculatorOptions_VelocityFilter_WindowSize
}

func (m *LandmarksSmoothingCalculatorOptions_VelocityFilter) GetVelocityScale() float32 {
	if m != nil && m.VelocityScale != nil {
		return *m.VelocityScale
	}
	return Default_LandmarksSmoothingCalculatorOptions_VelocityFilter_VelocityScale
}

func (m *LandmarksSmoothingCalculatorOptions_VelocityFilter) GetMinAllowedObjectScale() float32 {
	if m != nil && m.MinAllowedObjectScale != nil {
		return *m.MinAllowedObjectScale
	}
	return Default_LandmarksSmoothingCalculatorOptions_VelocityFilter_MinAllowedObjectScale
}

func (m *LandmarksSmoothingCalculatorOptions_VelocityFilter) GetDisableValueScaling() bool {
	if m != nil && m.DisableValueScaling != nil {
		return *m.DisableValueScaling
	}
	return Default_LandmarksSmoothingCalculatorOptions_VelocityFilter_DisableValueScaling
}

type LandmarksSmoothingCalculatorOptions_OneEuroFilter struct {
	Frequency             *float32 `protobuf:"fixed32,1,opt,name=frequency,def=30" json:"frequency,omitempty"`
	MinCutoff             *float32 `protobuf:"fixed32,2,opt,name=min_cutoff,json=minCutoff,def=1" json:"min_cutoff,omitempty"`
	Beta                  *float32 `protobuf:"fixed32,3,opt,name=beta,def=0" json:"beta,omitempty"`
	DerivateCutoff        *float32 `protobuf:"fixed32,4,opt,name=derivate_cutoff,json=derivateCutoff,def=1" json:"derivate_cutoff,omitempty"`
	MinAllowedObjectScale *float32 `protobuf:"fixed32,5,opt,name=min_allowed_object_scale,json=minAllowedObjectScale,def=1e-06" json:"min_allowed_object_scale,omitempty"`
	DisableValueScaling   *bool    `protobuf:"varint,6,opt,name=disable_value_scaling,json=disableValueScaling,def=0" json:"disable_value_scaling,omitempty"`
}

func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter) Reset() {
	*m = LandmarksSmoothingCalculatorOptions_OneEuroFilter{}
}
func (*LandmarksSmoothingCalculatorOptions_OneEuroFilter) ProtoMessage() {}
func (*LandmarksSmoothingCalculatorOptions_OneEuroFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfd59be2be6958d, []int{0, 2}
}
func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LandmarksSmoothingCalculatorOptions_OneEuroFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LandmarksSmoothingCalculatorOptions_OneEuroFilter.Merge(m, src)
}
func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter) XXX_Size() int {
	return m.Size()
}
func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_LandmarksSmoothingCalculatorOptions_OneEuroFilter.DiscardUnknown(m)
}

var xxx_messageInfo_LandmarksSmoothingCalculatorOptions_OneEuroFilter proto.InternalMessageInfo

const Default_LandmarksSmoothingCalculatorOptions_OneEuroFilter_Frequency float32 = 30
const Default_LandmarksSmoothingCalculatorOptions_OneEuroFilter_MinCutoff float32 = 1
const Default_LandmarksSmoothingCalculatorOptions_OneEuroFilter_Beta float32 = 0
const Default_LandmarksSmoothingCalculatorOptions_OneEuroFilter_DerivateCutoff float32 = 1
const Default_LandmarksSmoothingCalculatorOptions_OneEuroFilter_MinAllowedObjectScale float32 = 1e-06
const Default_LandmarksSmoothingCalculatorOptions_OneEuroFilter_DisableValueScaling bool = false

func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter) GetFrequency() float32 {
	if m != nil && m.Frequency != nil {
		return *m.Frequency
	}
	return Default_LandmarksSmoothingCalculatorOptions_OneEuroFilter_Frequency
}

func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter) GetMinCutoff() float32 {
	if m != nil && m.MinCutoff != nil {
		return *m.MinCutoff
	}
	return Default_LandmarksSmoothingCalculatorOptions_OneEuroFilter_MinCutoff
}

func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter) GetBeta() float32 {
	if m != nil && m.Beta != nil {
		return *m.Beta
	}
	return Default_LandmarksSmoothingCalculatorOptions_OneEuroFilter_Beta
}

func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter) GetDerivateCutoff() float32 {
	if m != nil && m.DerivateCutoff != nil {
		return *m.DerivateCutoff
	}
	return Default_LandmarksSmoothingCalculatorOptions_OneEuroFilter_DerivateCutoff
}

func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter) GetMinAllowedObjectScale() float32 {
	if m != nil && m.MinAllowedObjectScale != nil {
		return *m.MinAllowedObjectScale
	}
	return Default_LandmarksSmoothingCalculatorOptions_OneEuroFilter_MinAllowedObjectScale
}

func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter) GetDisableValueScaling() bool {
	if m != nil && m.DisableValueScaling != nil {
		return *m.DisableValueScaling
	}
	return Default_LandmarksSmoothingCalculatorOptions_OneEuroFilter_DisableValueScaling
}

func init() {
	proto.RegisterExtension(E_LandmarksSmoothingCalculatorOptions_Ext)
	proto.RegisterType((*LandmarksSmoothingCalculatorOptions)(nil), "mediapipe.LandmarksSmoothingCalculatorOptions")
	proto.RegisterType((*LandmarksSmoothingCalculatorOptions_NoFilter)(nil), "mediapipe.LandmarksSmoothingCalculatorOptions.NoFilter")
	proto.RegisterType((*LandmarksSmoothingCalculatorOptions_VelocityFilter)(nil), "mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter")
	proto.RegisterType((*LandmarksSmoothingCalculatorOptions_OneEuroFilter)(nil), "mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/landmarks_smoothing_calculator.proto", fileDescriptor_6bfd59be2be6958d)
}

var fileDescriptor_6bfd59be2be6958d = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xbd, 0x6f, 0xd3, 0x40,
	0x14, 0xf7, 0xb9, 0x0d, 0x34, 0x57, 0x35, 0x45, 0x87, 0x2a, 0x45, 0x11, 0x3a, 0x45, 0x65, 0x29,
	0x08, 0x9c, 0xb4, 0x88, 0x22, 0x22, 0x3e, 0x44, 0x2b, 0x10, 0x03, 0xa2, 0x92, 0x23, 0x75, 0x60,
	0xb1, 0x2e, 0xf6, 0x73, 0x7a, 0xf4, 0x7c, 0x17, 0xec, 0x73, 0x42, 0x3b, 0xb1, 0xb0, 0xc3, 0xcc,
	0x8c, 0xc4, 0x1f, 0xc0, 0x5f, 0xc0, 0xc4, 0xd8, 0xb1, 0x62, 0xa2, 0xee, 0xc2, 0xd8, 0x3f, 0x01,
	0xc5, 0x5f, 0x69, 0x84, 0xf8, 0x88, 0xd8, 0xec, 0x77, 0xbf, 0x8f, 0xf7, 0x7e, 0x7a, 0x77, 0xf8,
	0x61, 0x00, 0x1e, 0x67, 0x03, 0x3e, 0x80, 0x96, 0xcb, 0x84, 0x1b, 0x0b, 0xa6, 0x55, 0x18, 0xb5,
	0x62, 0xcd, 0x45, 0x4b, 0x30, 0xe9, 0x05, 0x2c, 0xdc, 0x8f, 0x9c, 0x28, 0x50, 0x4a, 0xef, 0x71,
	0xd9, 0x77, 0x26, 0x20, 0x6b, 0x10, 0x2a, 0xad, 0x48, 0xb5, 0x14, 0x68, 0xdc, 0x98, 0x68, 0xf9,
	0x21, 0x0b, 0x60, 0xa4, 0xc2, 0xfd, 0x73, 0xaa, 0x8e, 0x1a, 0x68, 0xae, 0x64, 0x94, 0x11, 0x57,
	0xbf, 0x5c, 0xc4, 0x57, 0x9f, 0x15, 0x0e, 0xdd, 0xc2, 0x60, 0xbb, 0x84, 0xef, 0x64, 0x68, 0xb2,
	0x8b, 0xab, 0x52, 0x39, 0x3e, 0x17, 0x1a, 0xc2, 0x3a, 0x6a, 0xa2, 0xb5, 0xc5, 0x8d, 0x3b, 0x56,
	0xe9, 0x64, 0xfd, 0x83, 0x84, 0xf5, 0x5c, 0x3d, 0x49, 0xe9, 0x4f, 0x0d, 0x7b, 0x41, 0xe6, 0xdf,
	0x64, 0x0f, 0x2f, 0x0f, 0x41, 0x28, 0x97, 0xeb, 0x83, 0x42, 0xdd, 0x4c, 0xd5, 0xef, 0xcf, 0xa8,
	0xbe, 0x9b, 0xab, 0x94, 0x1e, 0xb5, 0xe1, 0x54, 0x85, 0xf8, 0x78, 0x59, 0x49, 0x70, 0x20, 0x0e,
	0xcb, 0x39, 0xe6, 0x52, 0xa7, 0x7b, 0x33, 0x3a, 0xed, 0x48, 0x78, 0x1c, 0x87, 0x93, 0x61, 0x96,
	0xd4, 0xf9, 0x42, 0x03, 0xe3, 0x85, 0x62, 0xd2, 0xc6, 0x37, 0x84, 0x6b, 0xd3, 0x8d, 0x91, 0x55,
	0xbc, 0x38, 0xe2, 0xd2, 0x53, 0x23, 0x27, 0xe2, 0x87, 0x90, 0x46, 0x59, 0xe9, 0xa0, 0xdb, 0x36,
	0xce, 0xaa, 0x5d, 0x7e, 0x08, 0xe4, 0x1a, 0x2e, 0x9b, 0x77, 0x22, 0x97, 0x09, 0x48, 0x33, 0x31,
	0x3b, 0xe6, 0x7a, 0xdb, 0x5e, 0x2a, 0x4e, 0xba, 0xe3, 0x03, 0xf2, 0x00, 0xd7, 0x03, 0x2e, 0x1d,
	0x26, 0x84, 0x1a, 0x81, 0xe7, 0xa8, 0xde, 0x4b, 0x70, 0x75, 0x4e, 0x9a, 0x4b, 0x49, 0x95, 0x75,
	0xb8, 0xd9, 0xde, 0xb4, 0x57, 0x02, 0x2e, 0x1f, 0x65, 0xa8, 0x9d, 0x14, 0x94, 0xf1, 0xef, 0xe2,
	0x15, 0x8f, 0x47, 0xac, 0x27, 0xc0, 0x19, 0x32, 0x11, 0x43, 0x4a, 0xe5, 0xb2, 0x5f, 0x9f, 0x6f,
	0xa2, 0xb5, 0x85, 0x4e, 0xc5, 0x67, 0x22, 0x02, 0xfb, 0x72, 0x8e, 0xd9, 0x1d, 0x43, 0xba, 0x19,
	0xa2, 0xf1, 0xde, 0xc4, 0x4b, 0x53, 0x59, 0x90, 0x26, 0xae, 0xfa, 0x21, 0xbc, 0x8a, 0x41, 0xba,
	0x07, 0xe9, 0x64, 0x66, 0xc7, 0xbc, 0xd5, 0xb6, 0x27, 0x45, 0xd2, 0xc4, 0x78, 0xdc, 0xae, 0x1b,
	0x6b, 0xe5, 0xfb, 0xf9, 0x54, 0x68, 0xdd, 0xae, 0x06, 0x5c, 0x6e, 0xa7, 0x35, 0xb2, 0x82, 0xe7,
	0x7b, 0xa0, 0x59, 0xde, 0x3c, 0x6a, 0xdb, 0xe9, 0x2f, 0xb9, 0x8e, 0x97, 0x3d, 0x08, 0xf9, 0x90,
	0x69, 0x28, 0xd8, 0xf3, 0x05, 0xbb, 0x56, 0x9c, 0xe4, 0x12, 0x7f, 0xca, 0xa4, 0xf2, 0x3f, 0x99,
	0x5c, 0xf8, 0x5b, 0x26, 0x1b, 0x3d, 0x3c, 0x07, 0xaf, 0x35, 0xb9, 0x72, 0x6e, 0xa5, 0x7e, 0x59,
	0xa0, 0xfa, 0xdb, 0xcf, 0x1f, 0x3f, 0x64, 0x57, 0xc8, 0x9a, 0x6d, 0xf5, 0xec, 0xb1, 0xf8, 0xd6,
	0x25, 0x5c, 0xcb, 0xf6, 0xb7, 0xb8, 0xca, 0x5b, 0xe2, 0xe8, 0x84, 0x1a, 0xc7, 0x27, 0xd4, 0x38,
	0x3b, 0xa1, 0xe8, 0x4d, 0x42, 0xd1, 0xa7, 0x84, 0xa2, 0xaf, 0x09, 0x45, 0x47, 0x09, 0x45, 0xdf,
	0x13, 0x8a, 0x7e, 0x24, 0xd4, 0x38, 0x4b, 0x28, 0x7a, 0x77, 0x4a, 0x8d, 0xa3, 0x53, 0x6a, 0x1c,
	0x9f, 0x52, 0xe3, 0xc5, 0x66, 0x9f, 0xeb, 0xbd, 0xb8, 0x67, 0xb9, 0x2a, 0x68, 0xf5, 0x95, 0xea,
	0x0b, 0x68, 0x4d, 0x9e, 0x8e, 0xdf, 0x3f, 0x48, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x4f,
	0xd9, 0x9e, 0xad, 0x04, 0x00, 0x00,
}

func (this *LandmarksSmoothingCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarksSmoothingCalculatorOptions)
	if !ok {
		that2, ok := that.(LandmarksSmoothingCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.FilterOptions == nil {
		if this.FilterOptions != nil {
			return false
		}
	} else if this.FilterOptions == nil {
		return false
	} else if !this.FilterOptions.Equal(that1.FilterOptions) {
		return false
	}
	return true
}
func (this *LandmarksSmoothingCalculatorOptions_NoFilter_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarksSmoothingCalculatorOptions_NoFilter_)
	if !ok {
		that2, ok := that.(LandmarksSmoothingCalculatorOptions_NoFilter_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoFilter.Equal(that1.NoFilter) {
		return false
	}
	return true
}
func (this *LandmarksSmoothingCalculatorOptions_VelocityFilter_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarksSmoothingCalculatorOptions_VelocityFilter_)
	if !ok {
		that2, ok := that.(LandmarksSmoothingCalculatorOptions_VelocityFilter_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VelocityFilter.Equal(that1.VelocityFilter) {
		return false
	}
	return true
}
func (this *LandmarksSmoothingCalculatorOptions_OneEuroFilter_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarksSmoothingCalculatorOptions_OneEuroFilter_)
	if !ok {
		that2, ok := that.(LandmarksSmoothingCalculatorOptions_OneEuroFilter_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OneEuroFilter.Equal(that1.OneEuroFilter) {
		return false
	}
	return true
}
func (this *LandmarksSmoothingCalculatorOptions_NoFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarksSmoothingCalculatorOptions_NoFilter)
	if !ok {
		that2, ok := that.(LandmarksSmoothingCalculatorOptions_NoFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LandmarksSmoothingCalculatorOptions_VelocityFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarksSmoothingCalculatorOptions_VelocityFilter)
	if !ok {
		that2, ok := that.(LandmarksSmoothingCalculatorOptions_VelocityFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WindowSize != nil && that1.WindowSize != nil {
		if *this.WindowSize != *that1.WindowSize {
			return false
		}
	} else if this.WindowSize != nil {
		return false
	} else if that1.WindowSize != nil {
		return false
	}
	if this.VelocityScale != nil && that1.VelocityScale != nil {
		if *this.VelocityScale != *that1.VelocityScale {
			return false
		}
	} else if this.VelocityScale != nil {
		return false
	} else if that1.VelocityScale != nil {
		return false
	}
	if this.MinAllowedObjectScale != nil && that1.MinAllowedObjectScale != nil {
		if *this.MinAllowedObjectScale != *that1.MinAllowedObjectScale {
			return false
		}
	} else if this.MinAllowedObjectScale != nil {
		return false
	} else if that1.MinAllowedObjectScale != nil {
		return false
	}
	if this.DisableValueScaling != nil && that1.DisableValueScaling != nil {
		if *this.DisableValueScaling != *that1.DisableValueScaling {
			return false
		}
	} else if this.DisableValueScaling != nil {
		return false
	} else if that1.DisableValueScaling != nil {
		return false
	}
	return true
}
func (this *LandmarksSmoothingCalculatorOptions_OneEuroFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarksSmoothingCalculatorOptions_OneEuroFilter)
	if !ok {
		that2, ok := that.(LandmarksSmoothingCalculatorOptions_OneEuroFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Frequency != nil && that1.Frequency != nil {
		if *this.Frequency != *that1.Frequency {
			return false
		}
	} else if this.Frequency != nil {
		return false
	} else if that1.Frequency != nil {
		return false
	}
	if this.MinCutoff != nil && that1.MinCutoff != nil {
		if *this.MinCutoff != *that1.MinCutoff {
			return false
		}
	} else if this.MinCutoff != nil {
		return false
	} else if that1.MinCutoff != nil {
		return false
	}
	if this.Beta != nil && that1.Beta != nil {
		if *this.Beta != *that1.Beta {
			return false
		}
	} else if this.Beta != nil {
		return false
	} else if that1.Beta != nil {
		return false
	}
	if this.DerivateCutoff != nil && that1.DerivateCutoff != nil {
		if *this.DerivateCutoff != *that1.DerivateCutoff {
			return false
		}
	} else if this.DerivateCutoff != nil {
		return false
	} else if that1.DerivateCutoff != nil {
		return false
	}
	if this.MinAllowedObjectScale != nil && that1.MinAllowedObjectScale != nil {
		if *this.MinAllowedObjectScale != *that1.MinAllowedObjectScale {
			return false
		}
	} else if this.MinAllowedObjectScale != nil {
		return false
	} else if that1.MinAllowedObjectScale != nil {
		return false
	}
	if this.DisableValueScaling != nil && that1.DisableValueScaling != nil {
		if *this.DisableValueScaling != *that1.DisableValueScaling {
			return false
		}
	} else if this.DisableValueScaling != nil {
		return false
	} else if that1.DisableValueScaling != nil {
		return false
	}
	return true
}
func (this *LandmarksSmoothingCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&util.LandmarksSmoothingCalculatorOptions{")
	if this.FilterOptions != nil {
		s = append(s, "FilterOptions: "+fmt.Sprintf("%#v", this.FilterOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LandmarksSmoothingCalculatorOptions_NoFilter_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.LandmarksSmoothingCalculatorOptions_NoFilter_{` +
		`NoFilter:` + fmt.Sprintf("%#v", this.NoFilter) + `}`}, ", ")
	return s
}
func (this *LandmarksSmoothingCalculatorOptions_VelocityFilter_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.LandmarksSmoothingCalculatorOptions_VelocityFilter_{` +
		`VelocityFilter:` + fmt.Sprintf("%#v", this.VelocityFilter) + `}`}, ", ")
	return s
}
func (this *LandmarksSmoothingCalculatorOptions_OneEuroFilter_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.LandmarksSmoothingCalculatorOptions_OneEuroFilter_{` +
		`OneEuroFilter:` + fmt.Sprintf("%#v", this.OneEuroFilter) + `}`}, ", ")
	return s
}
func (this *LandmarksSmoothingCalculatorOptions_NoFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&util.LandmarksSmoothingCalculatorOptions_NoFilter{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LandmarksSmoothingCalculatorOptions_VelocityFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&util.LandmarksSmoothingCalculatorOptions_VelocityFilter{")
	if this.WindowSize != nil {
		s = append(s, "WindowSize: "+valueToGoStringLandmarksSmoothingCalculator(this.WindowSize, "int32")+",\n")
	}
	if this.VelocityScale != nil {
		s = append(s, "VelocityScale: "+valueToGoStringLandmarksSmoothingCalculator(this.VelocityScale, "float32")+",\n")
	}
	if this.MinAllowedObjectScale != nil {
		s = append(s, "MinAllowedObjectScale: "+valueToGoStringLandmarksSmoothingCalculator(this.MinAllowedObjectScale, "float32")+",\n")
	}
	if this.DisableValueScaling != nil {
		s = append(s, "DisableValueScaling: "+valueToGoStringLandmarksSmoothingCalculator(this.DisableValueScaling, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LandmarksSmoothingCalculatorOptions_OneEuroFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&util.LandmarksSmoothingCalculatorOptions_OneEuroFilter{")
	if this.Frequency != nil {
		s = append(s, "Frequency: "+valueToGoStringLandmarksSmoothingCalculator(this.Frequency, "float32")+",\n")
	}
	if this.MinCutoff != nil {
		s = append(s, "MinCutoff: "+valueToGoStringLandmarksSmoothingCalculator(this.MinCutoff, "float32")+",\n")
	}
	if this.Beta != nil {
		s = append(s, "Beta: "+valueToGoStringLandmarksSmoothingCalculator(this.Beta, "float32")+",\n")
	}
	if this.DerivateCutoff != nil {
		s = append(s, "DerivateCutoff: "+valueToGoStringLandmarksSmoothingCalculator(this.DerivateCutoff, "float32")+",\n")
	}
	if this.MinAllowedObjectScale != nil {
		s = append(s, "MinAllowedObjectScale: "+valueToGoStringLandmarksSmoothingCalculator(this.MinAllowedObjectScale, "float32")+",\n")
	}
	if this.DisableValueScaling != nil {
		s = append(s, "DisableValueScaling: "+valueToGoStringLandmarksSmoothingCalculator(this.DisableValueScaling, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLandmarksSmoothingCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LandmarksSmoothingCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LandmarksSmoothingCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarksSmoothingCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FilterOptions != nil {
		{
			size := m.FilterOptions.Size()
			i -= size
			if _, err := m.FilterOptions.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *LandmarksSmoothingCalculatorOptions_NoFilter_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarksSmoothingCalculatorOptions_NoFilter_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoFilter != nil {
		{
			size, err := m.NoFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLandmarksSmoothingCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *LandmarksSmoothingCalculatorOptions_VelocityFilter_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarksSmoothingCalculatorOptions_VelocityFilter_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VelocityFilter != nil {
		{
			size, err := m.VelocityFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLandmarksSmoothingCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OneEuroFilter != nil {
		{
			size, err := m.OneEuroFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLandmarksSmoothingCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *LandmarksSmoothingCalculatorOptions_NoFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LandmarksSmoothingCalculatorOptions_NoFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarksSmoothingCalculatorOptions_NoFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LandmarksSmoothingCalculatorOptions_VelocityFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LandmarksSmoothingCalculatorOptions_VelocityFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarksSmoothingCalculatorOptions_VelocityFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisableValueScaling != nil {
		i--
		if *m.DisableValueScaling {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.MinAllowedObjectScale != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.MinAllowedObjectScale))))
		i--
		dAtA[i] = 0x1d
	}
	if m.VelocityScale != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.VelocityScale))))
		i--
		dAtA[i] = 0x15
	}
	if m.WindowSize != nil {
		i = encodeVarintLandmarksSmoothingCalculator(dAtA, i, uint64(*m.WindowSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisableValueScaling != nil {
		i--
		if *m.DisableValueScaling {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.MinAllowedObjectScale != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.MinAllowedObjectScale))))
		i--
		dAtA[i] = 0x2d
	}
	if m.DerivateCutoff != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.DerivateCutoff))))
		i--
		dAtA[i] = 0x25
	}
	if m.Beta != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Beta))))
		i--
		dAtA[i] = 0x1d
	}
	if m.MinCutoff != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.MinCutoff))))
		i--
		dAtA[i] = 0x15
	}
	if m.Frequency != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Frequency))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func encodeVarintLandmarksSmoothingCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovLandmarksSmoothingCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LandmarksSmoothingCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FilterOptions != nil {
		n += m.FilterOptions.Size()
	}
	return n
}

func (m *LandmarksSmoothingCalculatorOptions_NoFilter_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoFilter != nil {
		l = m.NoFilter.Size()
		n += 1 + l + sovLandmarksSmoothingCalculator(uint64(l))
	}
	return n
}
func (m *LandmarksSmoothingCalculatorOptions_VelocityFilter_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VelocityFilter != nil {
		l = m.VelocityFilter.Size()
		n += 1 + l + sovLandmarksSmoothingCalculator(uint64(l))
	}
	return n
}
func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneEuroFilter != nil {
		l = m.OneEuroFilter.Size()
		n += 1 + l + sovLandmarksSmoothingCalculator(uint64(l))
	}
	return n
}
func (m *LandmarksSmoothingCalculatorOptions_NoFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LandmarksSmoothingCalculatorOptions_VelocityFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WindowSize != nil {
		n += 1 + sovLandmarksSmoothingCalculator(uint64(*m.WindowSize))
	}
	if m.VelocityScale != nil {
		n += 5
	}
	if m.MinAllowedObjectScale != nil {
		n += 5
	}
	if m.DisableValueScaling != nil {
		n += 2
	}
	return n
}

func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Frequency != nil {
		n += 5
	}
	if m.MinCutoff != nil {
		n += 5
	}
	if m.Beta != nil {
		n += 5
	}
	if m.DerivateCutoff != nil {
		n += 5
	}
	if m.MinAllowedObjectScale != nil {
		n += 5
	}
	if m.DisableValueScaling != nil {
		n += 2
	}
	return n
}

func sovLandmarksSmoothingCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLandmarksSmoothingCalculator(x uint64) (n int) {
	return sovLandmarksSmoothingCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LandmarksSmoothingCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LandmarksSmoothingCalculatorOptions{`,
		`FilterOptions:` + fmt.Sprintf("%v", this.FilterOptions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LandmarksSmoothingCalculatorOptions_NoFilter_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LandmarksSmoothingCalculatorOptions_NoFilter_{`,
		`NoFilter:` + strings.Replace(fmt.Sprintf("%v", this.NoFilter), "LandmarksSmoothingCalculatorOptions_NoFilter", "LandmarksSmoothingCalculatorOptions_NoFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LandmarksSmoothingCalculatorOptions_VelocityFilter_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LandmarksSmoothingCalculatorOptions_VelocityFilter_{`,
		`VelocityFilter:` + strings.Replace(fmt.Sprintf("%v", this.VelocityFilter), "LandmarksSmoothingCalculatorOptions_VelocityFilter", "LandmarksSmoothingCalculatorOptions_VelocityFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LandmarksSmoothingCalculatorOptions_OneEuroFilter_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LandmarksSmoothingCalculatorOptions_OneEuroFilter_{`,
		`OneEuroFilter:` + strings.Replace(fmt.Sprintf("%v", this.OneEuroFilter), "LandmarksSmoothingCalculatorOptions_OneEuroFilter", "LandmarksSmoothingCalculatorOptions_OneEuroFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LandmarksSmoothingCalculatorOptions_NoFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LandmarksSmoothingCalculatorOptions_NoFilter{`,
		`}`,
	}, "")
	return s
}
func (this *LandmarksSmoothingCalculatorOptions_VelocityFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LandmarksSmoothingCalculatorOptions_VelocityFilter{`,
		`WindowSize:` + valueToStringLandmarksSmoothingCalculator(this.WindowSize) + `,`,
		`VelocityScale:` + valueToStringLandmarksSmoothingCalculator(this.VelocityScale) + `,`,
		`MinAllowedObjectScale:` + valueToStringLandmarksSmoothingCalculator(this.MinAllowedObjectScale) + `,`,
		`DisableValueScaling:` + valueToStringLandmarksSmoothingCalculator(this.DisableValueScaling) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LandmarksSmoothingCalculatorOptions_OneEuroFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LandmarksSmoothingCalculatorOptions_OneEuroFilter{`,
		`Frequency:` + valueToStringLandmarksSmoothingCalculator(this.Frequency) + `,`,
		`MinCutoff:` + valueToStringLandmarksSmoothingCalculator(this.MinCutoff) + `,`,
		`Beta:` + valueToStringLandmarksSmoothingCalculator(this.Beta) + `,`,
		`DerivateCutoff:` + valueToStringLandmarksSmoothingCalculator(this.DerivateCutoff) + `,`,
		`MinAllowedObjectScale:` + valueToStringLandmarksSmoothingCalculator(this.MinAllowedObjectScale) + `,`,
		`DisableValueScaling:` + valueToStringLandmarksSmoothingCalculator(this.DisableValueScaling) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLandmarksSmoothingCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LandmarksSmoothingCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmarksSmoothingCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LandmarksSmoothingCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LandmarksSmoothingCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksSmoothingCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLandmarksSmoothingCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLandmarksSmoothingCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LandmarksSmoothingCalculatorOptions_NoFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterOptions = &LandmarksSmoothingCalculatorOptions_NoFilter_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VelocityFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksSmoothingCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLandmarksSmoothingCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLandmarksSmoothingCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LandmarksSmoothingCalculatorOptions_VelocityFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterOptions = &LandmarksSmoothingCalculatorOptions_VelocityFilter_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneEuroFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksSmoothingCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLandmarksSmoothingCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLandmarksSmoothingCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LandmarksSmoothingCalculatorOptions_OneEuroFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterOptions = &LandmarksSmoothingCalculatorOptions_OneEuroFilter_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLandmarksSmoothingCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmarksSmoothingCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LandmarksSmoothingCalculatorOptions_NoFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmarksSmoothingCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLandmarksSmoothingCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmarksSmoothingCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LandmarksSmoothingCalculatorOptions_VelocityFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmarksSmoothingCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VelocityFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VelocityFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksSmoothingCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WindowSize = &v
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field VelocityScale", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.VelocityScale = &v2
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAllowedObjectScale", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.MinAllowedObjectScale = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableValueScaling", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksSmoothingCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.DisableValueScaling = &b
		default:
			iNdEx = preIndex
			skippy, err := skipLandmarksSmoothingCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmarksSmoothingCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LandmarksSmoothingCalculatorOptions_OneEuroFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmarksSmoothingCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OneEuroFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OneEuroFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Frequency = &v2
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCutoff", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.MinCutoff = &v2
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beta", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Beta = &v2
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DerivateCutoff", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.DerivateCutoff = &v2
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAllowedObjectScale", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.MinAllowedObjectScale = &v2
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableValueScaling", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksSmoothingCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.DisableValueScaling = &b
		default:
			iNdEx = preIndex
			skippy, err := skipLandmarksSmoothingCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmarksSmoothingCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLandmarksSmoothingCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLandmarksSmoothingCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLandmarksSmoothingCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLandmarksSmoothingCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLandmarksSmoothingCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLandmarksSmoothingCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLandmarksSmoothingCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLandmarksSmoothingCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLandmarksSmoothingCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLandmarksSmoothingCalculator = fmt.Errorf("proto: unexpected end of group")
)
