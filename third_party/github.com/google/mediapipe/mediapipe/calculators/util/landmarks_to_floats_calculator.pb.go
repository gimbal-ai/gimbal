// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/landmarks_to_floats_calculator.proto

package util

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LandmarksToFloatsCalculatorOptions struct {
	NumDimensions *int32 `protobuf:"varint,1,opt,name=num_dimensions,json=numDimensions,def=2" json:"num_dimensions,omitempty"`
}

func (m *LandmarksToFloatsCalculatorOptions) Reset()      { *m = LandmarksToFloatsCalculatorOptions{} }
func (*LandmarksToFloatsCalculatorOptions) ProtoMessage() {}
func (*LandmarksToFloatsCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c869d2b9788b43, []int{0}
}
func (m *LandmarksToFloatsCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LandmarksToFloatsCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LandmarksToFloatsCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LandmarksToFloatsCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LandmarksToFloatsCalculatorOptions.Merge(m, src)
}
func (m *LandmarksToFloatsCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *LandmarksToFloatsCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_LandmarksToFloatsCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_LandmarksToFloatsCalculatorOptions proto.InternalMessageInfo

const Default_LandmarksToFloatsCalculatorOptions_NumDimensions int32 = 2

func (m *LandmarksToFloatsCalculatorOptions) GetNumDimensions() int32 {
	if m != nil && m.NumDimensions != nil {
		return *m.NumDimensions
	}
	return Default_LandmarksToFloatsCalculatorOptions_NumDimensions
}

var E_LandmarksToFloatsCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*LandmarksToFloatsCalculatorOptions)(nil),
	Field:         274035660,
	Name:          "mediapipe.LandmarksToFloatsCalculatorOptions.ext",
	Tag:           "bytes,274035660,opt,name=ext",
	Filename:      "mediapipe/calculators/util/landmarks_to_floats_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_LandmarksToFloatsCalculatorOptions_Ext)
	proto.RegisterType((*LandmarksToFloatsCalculatorOptions)(nil), "mediapipe.LandmarksToFloatsCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/landmarks_to_floats_calculator.proto", fileDescriptor_f3c869d2b9788b43)
}

var fileDescriptor_f3c869d2b9788b43 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0xcf, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f,
	0x2a, 0xd6, 0x2f, 0x2d, 0xc9, 0xcc, 0xd1, 0xcf, 0x49, 0xcc, 0x4b, 0xc9, 0x4d, 0x2c, 0xca, 0x2e,
	0x8e, 0x2f, 0xc9, 0x8f, 0x4f, 0xcb, 0xc9, 0x4f, 0x2c, 0x29, 0x8e, 0x47, 0x28, 0xd2, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x1b, 0x20, 0xa5, 0x82, 0x30, 0x2b, 0xad, 0x28, 0x31, 0x37,
	0xb5, 0x3c, 0xbf, 0x28, 0x5b, 0x1f, 0x5d, 0x83, 0xd2, 0x46, 0x46, 0x2e, 0x25, 0x1f, 0x98, 0xc9,
	0x21, 0xf9, 0x6e, 0x60, 0x73, 0x9d, 0xe1, 0xaa, 0xfc, 0x0b, 0x4a, 0x32, 0xf3, 0xf3, 0x8a, 0x85,
	0x34, 0xb8, 0xf8, 0xf2, 0x4a, 0x73, 0xe3, 0x53, 0x32, 0x73, 0x53, 0xf3, 0x8a, 0x41, 0x22, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0xac, 0x56, 0x8c, 0x46, 0x41, 0xbc, 0x79, 0xa5, 0xb9, 0x2e, 0x70, 0x71,
	0xa3, 0x44, 0x2e, 0xe6, 0xd4, 0x8a, 0x12, 0x21, 0x19, 0x3d, 0xb8, 0xf5, 0x7a, 0x18, 0xc6, 0x49,
	0x9c, 0x79, 0x7e, 0xb5, 0x09, 0x64, 0x00, 0xb7, 0x91, 0x2e, 0x92, 0x3a, 0xc2, 0xee, 0x08, 0x02,
	0x99, 0xed, 0x94, 0x73, 0xe1, 0xa1, 0x1c, 0xc3, 0x8d, 0x87, 0x72, 0x0c, 0x1f, 0x1e, 0xca, 0x31,
	0x36, 0x3c, 0x92, 0x63, 0x5c, 0xf1, 0x48, 0x8e, 0xf1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4,
	0x18, 0x1f, 0x3c, 0x92, 0x63, 0x7c, 0xf1, 0x48, 0x8e, 0xe1, 0xc3, 0x23, 0x39, 0xc6, 0x09, 0x8f,
	0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0xca, 0x2c, 0x3d, 0xb3, 0x24,
	0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x3f, 0x3d, 0x3f, 0x3f, 0x3d, 0x27, 0x55, 0x1f, 0x11,
	0x42, 0xb8, 0xc3, 0x1d, 0x10, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x09, 0xbb, 0x07, 0x94, 0x01, 0x00,
	0x00,
}

func (this *LandmarksToFloatsCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarksToFloatsCalculatorOptions)
	if !ok {
		that2, ok := that.(LandmarksToFloatsCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NumDimensions != nil && that1.NumDimensions != nil {
		if *this.NumDimensions != *that1.NumDimensions {
			return false
		}
	} else if this.NumDimensions != nil {
		return false
	} else if that1.NumDimensions != nil {
		return false
	}
	return true
}
func (this *LandmarksToFloatsCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&util.LandmarksToFloatsCalculatorOptions{")
	if this.NumDimensions != nil {
		s = append(s, "NumDimensions: "+valueToGoStringLandmarksToFloatsCalculator(this.NumDimensions, "int32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLandmarksToFloatsCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LandmarksToFloatsCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LandmarksToFloatsCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarksToFloatsCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumDimensions != nil {
		i = encodeVarintLandmarksToFloatsCalculator(dAtA, i, uint64(*m.NumDimensions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLandmarksToFloatsCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovLandmarksToFloatsCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LandmarksToFloatsCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumDimensions != nil {
		n += 1 + sovLandmarksToFloatsCalculator(uint64(*m.NumDimensions))
	}
	return n
}

func sovLandmarksToFloatsCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLandmarksToFloatsCalculator(x uint64) (n int) {
	return sovLandmarksToFloatsCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LandmarksToFloatsCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LandmarksToFloatsCalculatorOptions{`,
		`NumDimensions:` + valueToStringLandmarksToFloatsCalculator(this.NumDimensions) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLandmarksToFloatsCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LandmarksToFloatsCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmarksToFloatsCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LandmarksToFloatsCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LandmarksToFloatsCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDimensions", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksToFloatsCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumDimensions = &v
		default:
			iNdEx = preIndex
			skippy, err := skipLandmarksToFloatsCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmarksToFloatsCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLandmarksToFloatsCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLandmarksToFloatsCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLandmarksToFloatsCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLandmarksToFloatsCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLandmarksToFloatsCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLandmarksToFloatsCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLandmarksToFloatsCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLandmarksToFloatsCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLandmarksToFloatsCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLandmarksToFloatsCalculator = fmt.Errorf("proto: unexpected end of group")
)
