// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/landmarks_to_render_data_calculator.proto

package util

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	util "github.com/google/mediapipe/mediapipe/util"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LandmarksToRenderDataCalculatorOptions struct {
	LandmarkConnections     []int32     `protobuf:"varint,1,rep,name=landmark_connections,json=landmarkConnections" json:"landmark_connections,omitempty"`
	LandmarkColor           *util.Color `protobuf:"bytes,2,opt,name=landmark_color,json=landmarkColor" json:"landmark_color,omitempty"`
	RenderLandmarks         *bool       `protobuf:"varint,14,opt,name=render_landmarks,json=renderLandmarks,def=1" json:"render_landmarks,omitempty"`
	ConnectionColor         *util.Color `protobuf:"bytes,3,opt,name=connection_color,json=connectionColor" json:"connection_color,omitempty"`
	Thickness               *float64    `protobuf:"fixed64,4,opt,name=thickness,def=1" json:"thickness,omitempty"`
	VisualizeLandmarkDepth  *bool       `protobuf:"varint,5,opt,name=visualize_landmark_depth,json=visualizeLandmarkDepth,def=1" json:"visualize_landmark_depth,omitempty"`
	UtilizeVisibility       *bool       `protobuf:"varint,6,opt,name=utilize_visibility,json=utilizeVisibility,def=0" json:"utilize_visibility,omitempty"`
	VisibilityThreshold     *float64    `protobuf:"fixed64,7,opt,name=visibility_threshold,json=visibilityThreshold,def=0" json:"visibility_threshold,omitempty"`
	UtilizePresence         *bool       `protobuf:"varint,8,opt,name=utilize_presence,json=utilizePresence,def=0" json:"utilize_presence,omitempty"`
	PresenceThreshold       *float64    `protobuf:"fixed64,9,opt,name=presence_threshold,json=presenceThreshold,def=0" json:"presence_threshold,omitempty"`
	MinDepthCircleThickness *float64    `protobuf:"fixed64,10,opt,name=min_depth_circle_thickness,json=minDepthCircleThickness,def=0" json:"min_depth_circle_thickness,omitempty"`
	MaxDepthCircleThickness *float64    `protobuf:"fixed64,11,opt,name=max_depth_circle_thickness,json=maxDepthCircleThickness,def=18" json:"max_depth_circle_thickness,omitempty"`
	MinDepthLineColor       *util.Color `protobuf:"bytes,12,opt,name=min_depth_line_color,json=minDepthLineColor" json:"min_depth_line_color,omitempty"`
	MaxDepthLineColor       *util.Color `protobuf:"bytes,13,opt,name=max_depth_line_color,json=maxDepthLineColor" json:"max_depth_line_color,omitempty"`
}

func (m *LandmarksToRenderDataCalculatorOptions) Reset() {
	*m = LandmarksToRenderDataCalculatorOptions{}
}
func (*LandmarksToRenderDataCalculatorOptions) ProtoMessage() {}
func (*LandmarksToRenderDataCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e51e11542bc625f, []int{0}
}
func (m *LandmarksToRenderDataCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LandmarksToRenderDataCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LandmarksToRenderDataCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LandmarksToRenderDataCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LandmarksToRenderDataCalculatorOptions.Merge(m, src)
}
func (m *LandmarksToRenderDataCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *LandmarksToRenderDataCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_LandmarksToRenderDataCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_LandmarksToRenderDataCalculatorOptions proto.InternalMessageInfo

const Default_LandmarksToRenderDataCalculatorOptions_RenderLandmarks bool = true
const Default_LandmarksToRenderDataCalculatorOptions_Thickness float64 = 1
const Default_LandmarksToRenderDataCalculatorOptions_VisualizeLandmarkDepth bool = true
const Default_LandmarksToRenderDataCalculatorOptions_UtilizeVisibility bool = false
const Default_LandmarksToRenderDataCalculatorOptions_VisibilityThreshold float64 = 0
const Default_LandmarksToRenderDataCalculatorOptions_UtilizePresence bool = false
const Default_LandmarksToRenderDataCalculatorOptions_PresenceThreshold float64 = 0
const Default_LandmarksToRenderDataCalculatorOptions_MinDepthCircleThickness float64 = 0
const Default_LandmarksToRenderDataCalculatorOptions_MaxDepthCircleThickness float64 = 18

func (m *LandmarksToRenderDataCalculatorOptions) GetLandmarkConnections() []int32 {
	if m != nil {
		return m.LandmarkConnections
	}
	return nil
}

func (m *LandmarksToRenderDataCalculatorOptions) GetLandmarkColor() *util.Color {
	if m != nil {
		return m.LandmarkColor
	}
	return nil
}

func (m *LandmarksToRenderDataCalculatorOptions) GetRenderLandmarks() bool {
	if m != nil && m.RenderLandmarks != nil {
		return *m.RenderLandmarks
	}
	return Default_LandmarksToRenderDataCalculatorOptions_RenderLandmarks
}

func (m *LandmarksToRenderDataCalculatorOptions) GetConnectionColor() *util.Color {
	if m != nil {
		return m.ConnectionColor
	}
	return nil
}

func (m *LandmarksToRenderDataCalculatorOptions) GetThickness() float64 {
	if m != nil && m.Thickness != nil {
		return *m.Thickness
	}
	return Default_LandmarksToRenderDataCalculatorOptions_Thickness
}

func (m *LandmarksToRenderDataCalculatorOptions) GetVisualizeLandmarkDepth() bool {
	if m != nil && m.VisualizeLandmarkDepth != nil {
		return *m.VisualizeLandmarkDepth
	}
	return Default_LandmarksToRenderDataCalculatorOptions_VisualizeLandmarkDepth
}

func (m *LandmarksToRenderDataCalculatorOptions) GetUtilizeVisibility() bool {
	if m != nil && m.UtilizeVisibility != nil {
		return *m.UtilizeVisibility
	}
	return Default_LandmarksToRenderDataCalculatorOptions_UtilizeVisibility
}

func (m *LandmarksToRenderDataCalculatorOptions) GetVisibilityThreshold() float64 {
	if m != nil && m.VisibilityThreshold != nil {
		return *m.VisibilityThreshold
	}
	return Default_LandmarksToRenderDataCalculatorOptions_VisibilityThreshold
}

func (m *LandmarksToRenderDataCalculatorOptions) GetUtilizePresence() bool {
	if m != nil && m.UtilizePresence != nil {
		return *m.UtilizePresence
	}
	return Default_LandmarksToRenderDataCalculatorOptions_UtilizePresence
}

func (m *LandmarksToRenderDataCalculatorOptions) GetPresenceThreshold() float64 {
	if m != nil && m.PresenceThreshold != nil {
		return *m.PresenceThreshold
	}
	return Default_LandmarksToRenderDataCalculatorOptions_PresenceThreshold
}

func (m *LandmarksToRenderDataCalculatorOptions) GetMinDepthCircleThickness() float64 {
	if m != nil && m.MinDepthCircleThickness != nil {
		return *m.MinDepthCircleThickness
	}
	return Default_LandmarksToRenderDataCalculatorOptions_MinDepthCircleThickness
}

func (m *LandmarksToRenderDataCalculatorOptions) GetMaxDepthCircleThickness() float64 {
	if m != nil && m.MaxDepthCircleThickness != nil {
		return *m.MaxDepthCircleThickness
	}
	return Default_LandmarksToRenderDataCalculatorOptions_MaxDepthCircleThickness
}

func (m *LandmarksToRenderDataCalculatorOptions) GetMinDepthLineColor() *util.Color {
	if m != nil {
		return m.MinDepthLineColor
	}
	return nil
}

func (m *LandmarksToRenderDataCalculatorOptions) GetMaxDepthLineColor() *util.Color {
	if m != nil {
		return m.MaxDepthLineColor
	}
	return nil
}

var E_LandmarksToRenderDataCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*LandmarksToRenderDataCalculatorOptions)(nil),
	Field:         258435389,
	Name:          "mediapipe.LandmarksToRenderDataCalculatorOptions.ext",
	Tag:           "bytes,258435389,opt,name=ext",
	Filename:      "mediapipe/calculators/util/landmarks_to_render_data_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_LandmarksToRenderDataCalculatorOptions_Ext)
	proto.RegisterType((*LandmarksToRenderDataCalculatorOptions)(nil), "mediapipe.LandmarksToRenderDataCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/landmarks_to_render_data_calculator.proto", fileDescriptor_9e51e11542bc625f)
}

var fileDescriptor_9e51e11542bc625f = []byte{
	// 574 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0xd3, 0x30,
	0x00, 0x8e, 0xf7, 0xc3, 0x36, 0x8f, 0x6d, 0x9d, 0x37, 0xb1, 0xa8, 0x42, 0xa6, 0x42, 0x08, 0xf5,
	0xd4, 0xb4, 0xd3, 0x04, 0x68, 0x48, 0x43, 0xd0, 0x1e, 0x27, 0x81, 0xa2, 0x8a, 0x03, 0x97, 0xc8,
	0x4b, 0xbc, 0xd6, 0xaa, 0x13, 0x47, 0x8e, 0x3b, 0x0a, 0x5c, 0x78, 0x04, 0x5e, 0x00, 0x89, 0x23,
	0x2f, 0xc1, 0x9d, 0x63, 0xc5, 0x69, 0x47, 0x9a, 0x5e, 0x38, 0xee, 0x11, 0x50, 0xd2, 0x38, 0x8e,
	0x26, 0x2a, 0x71, 0xf5, 0xf7, 0xab, 0xcf, 0xb2, 0x61, 0x2f, 0xa4, 0x01, 0x23, 0x31, 0x8b, 0xa9,
	0xe3, 0x13, 0xee, 0x8f, 0x39, 0x51, 0x42, 0x26, 0xce, 0x58, 0x31, 0xee, 0x70, 0x12, 0x05, 0x21,
	0x91, 0xa3, 0xc4, 0x53, 0xc2, 0x93, 0x34, 0x0a, 0xa8, 0xf4, 0x02, 0xa2, 0x88, 0x67, 0x98, 0xad,
	0x58, 0x0a, 0x25, 0xd0, 0x56, 0xe9, 0x52, 0x7f, 0x64, 0x0c, 0x2f, 0x25, 0x09, 0xe9, 0x7b, 0x21,
	0x47, 0xce, 0x6d, 0x41, 0xbd, 0x6e, 0x58, 0x79, 0x94, 0x2f, 0xb8, 0xc6, 0x1e, 0x7e, 0xdb, 0x80,
	0x8f, 0xcf, 0x75, 0x74, 0x5f, 0xb8, 0x79, 0x70, 0x8f, 0x28, 0xd2, 0x2d, 0x5d, 0x5e, 0xc7, 0x8a,
	0x89, 0x28, 0x41, 0x1d, 0x78, 0xa8, 0x4b, 0x7a, 0xbe, 0x88, 0x22, 0xea, 0xe7, 0xe7, 0x36, 0x68,
	0xac, 0x36, 0xd7, 0xdd, 0x03, 0x8d, 0x75, 0x0d, 0x84, 0x9e, 0xc2, 0xdd, 0x8a, 0x84, 0x0b, 0x69,
	0xaf, 0x34, 0x40, 0x73, 0xfb, 0xb8, 0xd6, 0x2a, 0x2b, 0xb5, 0xba, 0xd9, 0xb9, 0xbb, 0x63, 0xe4,
	0x5c, 0x48, 0xe4, 0xc0, 0x5a, 0xb1, 0x41, 0xb9, 0x8b, 0xbd, 0xdb, 0x00, 0xcd, 0xcd, 0xd3, 0x35,
	0x25, 0xc7, 0xd4, 0xdd, 0x5b, 0xa0, 0x65, 0x73, 0xf4, 0x1c, 0xd6, 0x4c, 0xa7, 0x22, 0x6b, 0x75,
	0x49, 0xd6, 0x9e, 0x61, 0x2e, 0xd2, 0x1e, 0xc0, 0x2d, 0x35, 0x64, 0xfe, 0x28, 0xa2, 0x49, 0x62,
	0xaf, 0x35, 0x40, 0x13, 0x9c, 0x82, 0x8e, 0x6b, 0xce, 0xd0, 0x19, 0xb4, 0xaf, 0x58, 0x32, 0x26,
	0x9c, 0x7d, 0xa4, 0x65, 0x23, 0x2f, 0xa0, 0xb1, 0x1a, 0xda, 0xeb, 0x95, 0x5a, 0xf7, 0x4a, 0x96,
	0x6e, 0xd6, 0xcb, 0x38, 0xe8, 0x04, 0xa2, 0x6c, 0xf9, 0x4c, 0x7d, 0xc5, 0x12, 0x76, 0xc1, 0x38,
	0x53, 0x1f, 0xec, 0x3b, 0xb9, 0x72, 0xfd, 0x92, 0xf0, 0x84, 0xba, 0xfb, 0x05, 0xe1, 0x6d, 0x89,
	0xa3, 0x13, 0x78, 0x68, 0xd8, 0x9e, 0x1a, 0x4a, 0x9a, 0x0c, 0x05, 0x0f, 0xec, 0x8d, 0x45, 0xc3,
	0xb6, 0x7b, 0x60, 0xe0, 0xbe, 0x46, 0x51, 0x1b, 0xd6, 0x74, 0x56, 0x2c, 0x69, 0x42, 0x23, 0x9f,
	0xda, 0x9b, 0xd5, 0xa4, 0xbd, 0x02, 0x7e, 0x53, 0xa0, 0xa8, 0x0d, 0x91, 0x66, 0x56, 0x52, 0xb6,
	0x74, 0xca, 0xbe, 0x06, 0x4d, 0xc6, 0x19, 0xac, 0x87, 0x2c, 0x5a, 0x0c, 0xe0, 0xf9, 0x4c, 0xfa,
	0x3c, 0x53, 0xea, 0x05, 0xa1, 0x56, 0x1e, 0x85, 0x2c, 0xca, 0x07, 0xe8, 0xe6, 0x94, 0x7e, 0xb9,
	0xe7, 0x0b, 0x58, 0x0f, 0xc9, 0x64, 0x99, 0x7e, 0x3b, 0xd7, 0xaf, 0x74, 0x9e, 0xb9, 0x47, 0x21,
	0x99, 0xfc, 0xd3, 0xe0, 0x25, 0x3c, 0x34, 0x05, 0x38, 0x8b, 0x68, 0x71, 0xe5, 0x77, 0x97, 0x5c,
	0xf9, 0xbe, 0x6e, 0x72, 0xce, 0x22, 0xba, 0xb8, 0xf4, 0xcc, 0xa2, 0xec, 0x50, 0xb1, 0xd8, 0x59,
	0x6a, 0x51, 0x74, 0x29, 0x2d, 0x8e, 0x03, 0xb8, 0x4a, 0x27, 0x0a, 0xdd, 0xaf, 0x72, 0x6f, 0x3f,
	0x1b, 0xfb, 0xc7, 0xaf, 0xaf, 0x9f, 0x72, 0xcb, 0x4e, 0x85, 0xf6, 0x7f, 0x4f, 0xce, 0xcd, 0xec,
	0x5f, 0xf1, 0xe9, 0x0c, 0x5b, 0xd7, 0x33, 0x6c, 0xdd, 0xcc, 0x30, 0xf8, 0x9c, 0x62, 0xf0, 0x3d,
	0xc5, 0xe0, 0x67, 0x8a, 0xc1, 0x34, 0xc5, 0xe0, 0x77, 0x8a, 0xc1, 0x9f, 0x14, 0x5b, 0x37, 0x29,
	0x06, 0x5f, 0xe6, 0xd8, 0x9a, 0xce, 0xb1, 0x75, 0x3d, 0xc7, 0xd6, 0xbb, 0x27, 0x03, 0xa6, 0x86,
	0xe3, 0x8b, 0x96, 0x2f, 0x42, 0x67, 0x20, 0xc4, 0x80, 0x53, 0xc7, 0x7c, 0x03, 0xcb, 0xff, 0xa1,
	0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6f, 0xeb, 0x54, 0xc5, 0xa4, 0x04, 0x00, 0x00,
}

func (this *LandmarksToRenderDataCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarksToRenderDataCalculatorOptions)
	if !ok {
		that2, ok := that.(LandmarksToRenderDataCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LandmarkConnections) != len(that1.LandmarkConnections) {
		return false
	}
	for i := range this.LandmarkConnections {
		if this.LandmarkConnections[i] != that1.LandmarkConnections[i] {
			return false
		}
	}
	if !this.LandmarkColor.Equal(that1.LandmarkColor) {
		return false
	}
	if this.RenderLandmarks != nil && that1.RenderLandmarks != nil {
		if *this.RenderLandmarks != *that1.RenderLandmarks {
			return false
		}
	} else if this.RenderLandmarks != nil {
		return false
	} else if that1.RenderLandmarks != nil {
		return false
	}
	if !this.ConnectionColor.Equal(that1.ConnectionColor) {
		return false
	}
	if this.Thickness != nil && that1.Thickness != nil {
		if *this.Thickness != *that1.Thickness {
			return false
		}
	} else if this.Thickness != nil {
		return false
	} else if that1.Thickness != nil {
		return false
	}
	if this.VisualizeLandmarkDepth != nil && that1.VisualizeLandmarkDepth != nil {
		if *this.VisualizeLandmarkDepth != *that1.VisualizeLandmarkDepth {
			return false
		}
	} else if this.VisualizeLandmarkDepth != nil {
		return false
	} else if that1.VisualizeLandmarkDepth != nil {
		return false
	}
	if this.UtilizeVisibility != nil && that1.UtilizeVisibility != nil {
		if *this.UtilizeVisibility != *that1.UtilizeVisibility {
			return false
		}
	} else if this.UtilizeVisibility != nil {
		return false
	} else if that1.UtilizeVisibility != nil {
		return false
	}
	if this.VisibilityThreshold != nil && that1.VisibilityThreshold != nil {
		if *this.VisibilityThreshold != *that1.VisibilityThreshold {
			return false
		}
	} else if this.VisibilityThreshold != nil {
		return false
	} else if that1.VisibilityThreshold != nil {
		return false
	}
	if this.UtilizePresence != nil && that1.UtilizePresence != nil {
		if *this.UtilizePresence != *that1.UtilizePresence {
			return false
		}
	} else if this.UtilizePresence != nil {
		return false
	} else if that1.UtilizePresence != nil {
		return false
	}
	if this.PresenceThreshold != nil && that1.PresenceThreshold != nil {
		if *this.PresenceThreshold != *that1.PresenceThreshold {
			return false
		}
	} else if this.PresenceThreshold != nil {
		return false
	} else if that1.PresenceThreshold != nil {
		return false
	}
	if this.MinDepthCircleThickness != nil && that1.MinDepthCircleThickness != nil {
		if *this.MinDepthCircleThickness != *that1.MinDepthCircleThickness {
			return false
		}
	} else if this.MinDepthCircleThickness != nil {
		return false
	} else if that1.MinDepthCircleThickness != nil {
		return false
	}
	if this.MaxDepthCircleThickness != nil && that1.MaxDepthCircleThickness != nil {
		if *this.MaxDepthCircleThickness != *that1.MaxDepthCircleThickness {
			return false
		}
	} else if this.MaxDepthCircleThickness != nil {
		return false
	} else if that1.MaxDepthCircleThickness != nil {
		return false
	}
	if !this.MinDepthLineColor.Equal(that1.MinDepthLineColor) {
		return false
	}
	if !this.MaxDepthLineColor.Equal(that1.MaxDepthLineColor) {
		return false
	}
	return true
}
func (this *LandmarksToRenderDataCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&util.LandmarksToRenderDataCalculatorOptions{")
	if this.LandmarkConnections != nil {
		s = append(s, "LandmarkConnections: "+fmt.Sprintf("%#v", this.LandmarkConnections)+",\n")
	}
	if this.LandmarkColor != nil {
		s = append(s, "LandmarkColor: "+fmt.Sprintf("%#v", this.LandmarkColor)+",\n")
	}
	if this.RenderLandmarks != nil {
		s = append(s, "RenderLandmarks: "+valueToGoStringLandmarksToRenderDataCalculator(this.RenderLandmarks, "bool")+",\n")
	}
	if this.ConnectionColor != nil {
		s = append(s, "ConnectionColor: "+fmt.Sprintf("%#v", this.ConnectionColor)+",\n")
	}
	if this.Thickness != nil {
		s = append(s, "Thickness: "+valueToGoStringLandmarksToRenderDataCalculator(this.Thickness, "float64")+",\n")
	}
	if this.VisualizeLandmarkDepth != nil {
		s = append(s, "VisualizeLandmarkDepth: "+valueToGoStringLandmarksToRenderDataCalculator(this.VisualizeLandmarkDepth, "bool")+",\n")
	}
	if this.UtilizeVisibility != nil {
		s = append(s, "UtilizeVisibility: "+valueToGoStringLandmarksToRenderDataCalculator(this.UtilizeVisibility, "bool")+",\n")
	}
	if this.VisibilityThreshold != nil {
		s = append(s, "VisibilityThreshold: "+valueToGoStringLandmarksToRenderDataCalculator(this.VisibilityThreshold, "float64")+",\n")
	}
	if this.UtilizePresence != nil {
		s = append(s, "UtilizePresence: "+valueToGoStringLandmarksToRenderDataCalculator(this.UtilizePresence, "bool")+",\n")
	}
	if this.PresenceThreshold != nil {
		s = append(s, "PresenceThreshold: "+valueToGoStringLandmarksToRenderDataCalculator(this.PresenceThreshold, "float64")+",\n")
	}
	if this.MinDepthCircleThickness != nil {
		s = append(s, "MinDepthCircleThickness: "+valueToGoStringLandmarksToRenderDataCalculator(this.MinDepthCircleThickness, "float64")+",\n")
	}
	if this.MaxDepthCircleThickness != nil {
		s = append(s, "MaxDepthCircleThickness: "+valueToGoStringLandmarksToRenderDataCalculator(this.MaxDepthCircleThickness, "float64")+",\n")
	}
	if this.MinDepthLineColor != nil {
		s = append(s, "MinDepthLineColor: "+fmt.Sprintf("%#v", this.MinDepthLineColor)+",\n")
	}
	if this.MaxDepthLineColor != nil {
		s = append(s, "MaxDepthLineColor: "+fmt.Sprintf("%#v", this.MaxDepthLineColor)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLandmarksToRenderDataCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LandmarksToRenderDataCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LandmarksToRenderDataCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarksToRenderDataCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RenderLandmarks != nil {
		i--
		if *m.RenderLandmarks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.MaxDepthLineColor != nil {
		{
			size, err := m.MaxDepthLineColor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLandmarksToRenderDataCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.MinDepthLineColor != nil {
		{
			size, err := m.MinDepthLineColor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLandmarksToRenderDataCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.MaxDepthCircleThickness != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.MaxDepthCircleThickness))))
		i--
		dAtA[i] = 0x59
	}
	if m.MinDepthCircleThickness != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.MinDepthCircleThickness))))
		i--
		dAtA[i] = 0x51
	}
	if m.PresenceThreshold != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.PresenceThreshold))))
		i--
		dAtA[i] = 0x49
	}
	if m.UtilizePresence != nil {
		i--
		if *m.UtilizePresence {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.VisibilityThreshold != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.VisibilityThreshold))))
		i--
		dAtA[i] = 0x39
	}
	if m.UtilizeVisibility != nil {
		i--
		if *m.UtilizeVisibility {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.VisualizeLandmarkDepth != nil {
		i--
		if *m.VisualizeLandmarkDepth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Thickness != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Thickness))))
		i--
		dAtA[i] = 0x21
	}
	if m.ConnectionColor != nil {
		{
			size, err := m.ConnectionColor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLandmarksToRenderDataCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LandmarkColor != nil {
		{
			size, err := m.LandmarkColor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLandmarksToRenderDataCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LandmarkConnections) > 0 {
		for iNdEx := len(m.LandmarkConnections) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintLandmarksToRenderDataCalculator(dAtA, i, uint64(m.LandmarkConnections[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintLandmarksToRenderDataCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovLandmarksToRenderDataCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LandmarksToRenderDataCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LandmarkConnections) > 0 {
		for _, e := range m.LandmarkConnections {
			n += 1 + sovLandmarksToRenderDataCalculator(uint64(e))
		}
	}
	if m.LandmarkColor != nil {
		l = m.LandmarkColor.Size()
		n += 1 + l + sovLandmarksToRenderDataCalculator(uint64(l))
	}
	if m.ConnectionColor != nil {
		l = m.ConnectionColor.Size()
		n += 1 + l + sovLandmarksToRenderDataCalculator(uint64(l))
	}
	if m.Thickness != nil {
		n += 9
	}
	if m.VisualizeLandmarkDepth != nil {
		n += 2
	}
	if m.UtilizeVisibility != nil {
		n += 2
	}
	if m.VisibilityThreshold != nil {
		n += 9
	}
	if m.UtilizePresence != nil {
		n += 2
	}
	if m.PresenceThreshold != nil {
		n += 9
	}
	if m.MinDepthCircleThickness != nil {
		n += 9
	}
	if m.MaxDepthCircleThickness != nil {
		n += 9
	}
	if m.MinDepthLineColor != nil {
		l = m.MinDepthLineColor.Size()
		n += 1 + l + sovLandmarksToRenderDataCalculator(uint64(l))
	}
	if m.MaxDepthLineColor != nil {
		l = m.MaxDepthLineColor.Size()
		n += 1 + l + sovLandmarksToRenderDataCalculator(uint64(l))
	}
	if m.RenderLandmarks != nil {
		n += 2
	}
	return n
}

func sovLandmarksToRenderDataCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLandmarksToRenderDataCalculator(x uint64) (n int) {
	return sovLandmarksToRenderDataCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LandmarksToRenderDataCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LandmarksToRenderDataCalculatorOptions{`,
		`LandmarkConnections:` + fmt.Sprintf("%v", this.LandmarkConnections) + `,`,
		`LandmarkColor:` + strings.Replace(fmt.Sprintf("%v", this.LandmarkColor), "Color", "util.Color", 1) + `,`,
		`ConnectionColor:` + strings.Replace(fmt.Sprintf("%v", this.ConnectionColor), "Color", "util.Color", 1) + `,`,
		`Thickness:` + valueToStringLandmarksToRenderDataCalculator(this.Thickness) + `,`,
		`VisualizeLandmarkDepth:` + valueToStringLandmarksToRenderDataCalculator(this.VisualizeLandmarkDepth) + `,`,
		`UtilizeVisibility:` + valueToStringLandmarksToRenderDataCalculator(this.UtilizeVisibility) + `,`,
		`VisibilityThreshold:` + valueToStringLandmarksToRenderDataCalculator(this.VisibilityThreshold) + `,`,
		`UtilizePresence:` + valueToStringLandmarksToRenderDataCalculator(this.UtilizePresence) + `,`,
		`PresenceThreshold:` + valueToStringLandmarksToRenderDataCalculator(this.PresenceThreshold) + `,`,
		`MinDepthCircleThickness:` + valueToStringLandmarksToRenderDataCalculator(this.MinDepthCircleThickness) + `,`,
		`MaxDepthCircleThickness:` + valueToStringLandmarksToRenderDataCalculator(this.MaxDepthCircleThickness) + `,`,
		`MinDepthLineColor:` + strings.Replace(fmt.Sprintf("%v", this.MinDepthLineColor), "Color", "util.Color", 1) + `,`,
		`MaxDepthLineColor:` + strings.Replace(fmt.Sprintf("%v", this.MaxDepthLineColor), "Color", "util.Color", 1) + `,`,
		`RenderLandmarks:` + valueToStringLandmarksToRenderDataCalculator(this.RenderLandmarks) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLandmarksToRenderDataCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LandmarksToRenderDataCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmarksToRenderDataCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LandmarksToRenderDataCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LandmarksToRenderDataCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLandmarksToRenderDataCalculator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LandmarkConnections = append(m.LandmarkConnections, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLandmarksToRenderDataCalculator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLandmarksToRenderDataCalculator
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLandmarksToRenderDataCalculator
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LandmarkConnections) == 0 {
					m.LandmarkConnections = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLandmarksToRenderDataCalculator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LandmarkConnections = append(m.LandmarkConnections, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LandmarkConnections", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LandmarkColor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLandmarksToRenderDataCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLandmarksToRenderDataCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LandmarkColor == nil {
				m.LandmarkColor = &util.Color{}
			}
			if err := m.LandmarkColor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionColor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLandmarksToRenderDataCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLandmarksToRenderDataCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnectionColor == nil {
				m.ConnectionColor = &util.Color{}
			}
			if err := m.ConnectionColor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thickness", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Thickness = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisualizeLandmarkDepth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.VisualizeLandmarkDepth = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilizeVisibility", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UtilizeVisibility = &b
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityThreshold", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.VisibilityThreshold = &v2
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilizePresence", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UtilizePresence = &b
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PresenceThreshold", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.PresenceThreshold = &v2
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDepthCircleThickness", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.MinDepthCircleThickness = &v2
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDepthCircleThickness", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.MaxDepthCircleThickness = &v2
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDepthLineColor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLandmarksToRenderDataCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLandmarksToRenderDataCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinDepthLineColor == nil {
				m.MinDepthLineColor = &util.Color{}
			}
			if err := m.MinDepthLineColor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDepthLineColor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLandmarksToRenderDataCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLandmarksToRenderDataCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxDepthLineColor == nil {
				m.MaxDepthLineColor = &util.Color{}
			}
			if err := m.MaxDepthLineColor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderLandmarks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmarksToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.RenderLandmarks = &b
		default:
			iNdEx = preIndex
			skippy, err := skipLandmarksToRenderDataCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmarksToRenderDataCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLandmarksToRenderDataCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLandmarksToRenderDataCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLandmarksToRenderDataCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLandmarksToRenderDataCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLandmarksToRenderDataCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLandmarksToRenderDataCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLandmarksToRenderDataCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLandmarksToRenderDataCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLandmarksToRenderDataCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLandmarksToRenderDataCalculator = fmt.Errorf("proto: unexpected end of group")
)
