// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/latency.proto

package util

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PacketLatency struct {
	CurrentLatencyUsec int64   `protobuf:"varint,8,opt,name=current_latency_usec,json=currentLatencyUsec" json:"current_latency_usec"`
	Counts             []int64 `protobuf:"varint,9,rep,name=counts" json:"counts,omitempty"`
	NumIntervals       *int64  `protobuf:"varint,10,opt,name=num_intervals,json=numIntervals,def=10" json:"num_intervals,omitempty"`
	IntervalSizeUsec   *int64  `protobuf:"varint,11,opt,name=interval_size_usec,json=intervalSizeUsec,def=10000" json:"interval_size_usec,omitempty"`
	AvgLatencyUsec     int64   `protobuf:"varint,2,opt,name=avg_latency_usec,json=avgLatencyUsec" json:"avg_latency_usec"`
	Label              string  `protobuf:"bytes,7,opt,name=label" json:"label"`
	SumLatencyUsec     int64   `protobuf:"varint,12,opt,name=sum_latency_usec,json=sumLatencyUsec" json:"sum_latency_usec"`
}

func (m *PacketLatency) Reset()      { *m = PacketLatency{} }
func (*PacketLatency) ProtoMessage() {}
func (*PacketLatency) Descriptor() ([]byte, []int) {
	return fileDescriptor_548dfdd3a3ef288a, []int{0}
}
func (m *PacketLatency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketLatency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketLatency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketLatency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketLatency.Merge(m, src)
}
func (m *PacketLatency) XXX_Size() int {
	return m.Size()
}
func (m *PacketLatency) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketLatency.DiscardUnknown(m)
}

var xxx_messageInfo_PacketLatency proto.InternalMessageInfo

const Default_PacketLatency_NumIntervals int64 = 10
const Default_PacketLatency_IntervalSizeUsec int64 = 10000

func (m *PacketLatency) GetCurrentLatencyUsec() int64 {
	if m != nil {
		return m.CurrentLatencyUsec
	}
	return 0
}

func (m *PacketLatency) GetCounts() []int64 {
	if m != nil {
		return m.Counts
	}
	return nil
}

func (m *PacketLatency) GetNumIntervals() int64 {
	if m != nil && m.NumIntervals != nil {
		return *m.NumIntervals
	}
	return Default_PacketLatency_NumIntervals
}

func (m *PacketLatency) GetIntervalSizeUsec() int64 {
	if m != nil && m.IntervalSizeUsec != nil {
		return *m.IntervalSizeUsec
	}
	return Default_PacketLatency_IntervalSizeUsec
}

func (m *PacketLatency) GetAvgLatencyUsec() int64 {
	if m != nil {
		return m.AvgLatencyUsec
	}
	return 0
}

func (m *PacketLatency) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *PacketLatency) GetSumLatencyUsec() int64 {
	if m != nil {
		return m.SumLatencyUsec
	}
	return 0
}

func init() {
	proto.RegisterType((*PacketLatency)(nil), "mediapipe.PacketLatency")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/latency.proto", fileDescriptor_548dfdd3a3ef288a)
}

var fileDescriptor_548dfdd3a3ef288a = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xb1, 0x4e, 0xc2, 0x40,
	0x18, 0xc7, 0x7b, 0x2d, 0x08, 0x9c, 0x60, 0x9a, 0xc6, 0x98, 0xc6, 0xe1, 0x24, 0x2e, 0x76, 0xa2,
	0x25, 0x26, 0x0c, 0x8e, 0x6c, 0x12, 0x07, 0x53, 0xe3, 0xe2, 0xd2, 0x1c, 0xe7, 0xa5, 0x36, 0x5e,
	0x7b, 0xa4, 0x77, 0x47, 0x22, 0x93, 0x8f, 0xe0, 0x63, 0xf8, 0x22, 0x26, 0x8c, 0x8c, 0x4c, 0x46,
	0x8e, 0xc5, 0x91, 0x47, 0x30, 0x40, 0xd1, 0x32, 0x38, 0x7e, 0x5f, 0x7e, 0xdf, 0xef, 0xfb, 0x27,
	0x7f, 0xe8, 0xa5, 0xf4, 0x31, 0xc1, 0xa3, 0x64, 0x44, 0x7d, 0x82, 0x19, 0x51, 0x0c, 0x4b, 0x9e,
	0x0b, 0x5f, 0xc9, 0x84, 0xf9, 0x0c, 0x4b, 0x9a, 0x91, 0x97, 0xce, 0x28, 0xe7, 0x92, 0x3b, 0x8d,
	0x5f, 0xf2, 0xfc, 0xc3, 0x84, 0xad, 0x5b, 0x4c, 0x9e, 0xa9, 0xbc, 0xd9, 0x22, 0x4e, 0x0f, 0x1e,
	0x13, 0x95, 0xe7, 0x34, 0x93, 0x51, 0x71, 0x15, 0x29, 0x41, 0x89, 0x5b, 0x6f, 0x03, 0xcf, 0xea,
	0x57, 0xa6, 0x9f, 0x67, 0x46, 0xe8, 0x14, 0x44, 0x71, 0x73, 0x2f, 0x28, 0x71, 0x4e, 0xe0, 0x01,
	0xe1, 0x2a, 0x93, 0xc2, 0x6d, 0xb4, 0x2d, 0xcf, 0x0a, 0x8b, 0xc9, 0xb9, 0x80, 0xad, 0x4c, 0xa5,
	0x51, 0x92, 0x49, 0x9a, 0x8f, 0x31, 0x13, 0x2e, 0x5c, 0x8b, 0xae, 0xcc, 0x6e, 0x10, 0x36, 0x33,
	0x95, 0x5e, 0xef, 0xf6, 0xce, 0x25, 0x74, 0x76, 0x50, 0x24, 0x92, 0x09, 0xdd, 0xbe, 0x3d, 0xdc,
	0xd0, 0xd5, 0x6e, 0x10, 0x04, 0x41, 0x68, 0xef, 0x80, 0xbb, 0x64, 0x42, 0x37, 0x5f, 0x3b, 0xd0,
	0xc6, 0xe3, 0x78, 0x3f, 0xa9, 0x59, 0x4a, 0x7a, 0x84, 0xc7, 0x71, 0x39, 0xe5, 0x29, 0xac, 0x32,
	0x3c, 0xa4, 0xcc, 0xad, 0xb5, 0x81, 0xd7, 0x28, 0xa0, 0xed, 0x6a, 0xed, 0x12, 0x2a, 0xdd, 0x77,
	0x35, 0xcb, 0x2e, 0xa1, 0xd2, 0x92, 0x6b, 0x50, 0xa9, 0x03, 0xdb, 0x1c, 0x54, 0xea, 0x96, 0x5d,
	0xeb, 0xb3, 0xd9, 0x02, 0x19, 0xf3, 0x05, 0x32, 0x56, 0x0b, 0x04, 0x5e, 0x35, 0x02, 0xef, 0x1a,
	0x81, 0xa9, 0x46, 0x60, 0xa6, 0x11, 0xf8, 0xd2, 0x08, 0x7c, 0x6b, 0x64, 0xac, 0x34, 0x02, 0x6f,
	0x4b, 0x64, 0xcc, 0x96, 0xc8, 0x98, 0x2f, 0x91, 0xf1, 0xd0, 0x8b, 0x13, 0xf9, 0xa4, 0x86, 0x1d,
	0xc2, 0x53, 0x3f, 0xe6, 0x3c, 0x66, 0xd4, 0xff, 0x2b, 0xf1, 0xff, 0x3a, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x75, 0x8a, 0x16, 0x16, 0xeb, 0x01, 0x00, 0x00,
}

func (this *PacketLatency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PacketLatency)
	if !ok {
		that2, ok := that.(PacketLatency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CurrentLatencyUsec != that1.CurrentLatencyUsec {
		return false
	}
	if len(this.Counts) != len(that1.Counts) {
		return false
	}
	for i := range this.Counts {
		if this.Counts[i] != that1.Counts[i] {
			return false
		}
	}
	if this.NumIntervals != nil && that1.NumIntervals != nil {
		if *this.NumIntervals != *that1.NumIntervals {
			return false
		}
	} else if this.NumIntervals != nil {
		return false
	} else if that1.NumIntervals != nil {
		return false
	}
	if this.IntervalSizeUsec != nil && that1.IntervalSizeUsec != nil {
		if *this.IntervalSizeUsec != *that1.IntervalSizeUsec {
			return false
		}
	} else if this.IntervalSizeUsec != nil {
		return false
	} else if that1.IntervalSizeUsec != nil {
		return false
	}
	if this.AvgLatencyUsec != that1.AvgLatencyUsec {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.SumLatencyUsec != that1.SumLatencyUsec {
		return false
	}
	return true
}
func (this *PacketLatency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&util.PacketLatency{")
	s = append(s, "CurrentLatencyUsec: "+fmt.Sprintf("%#v", this.CurrentLatencyUsec)+",\n")
	if this.Counts != nil {
		s = append(s, "Counts: "+fmt.Sprintf("%#v", this.Counts)+",\n")
	}
	if this.NumIntervals != nil {
		s = append(s, "NumIntervals: "+valueToGoStringLatency(this.NumIntervals, "int64")+",\n")
	}
	if this.IntervalSizeUsec != nil {
		s = append(s, "IntervalSizeUsec: "+valueToGoStringLatency(this.IntervalSizeUsec, "int64")+",\n")
	}
	s = append(s, "AvgLatencyUsec: "+fmt.Sprintf("%#v", this.AvgLatencyUsec)+",\n")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "SumLatencyUsec: "+fmt.Sprintf("%#v", this.SumLatencyUsec)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLatency(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PacketLatency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketLatency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketLatency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintLatency(dAtA, i, uint64(m.SumLatencyUsec))
	i--
	dAtA[i] = 0x60
	if m.IntervalSizeUsec != nil {
		i = encodeVarintLatency(dAtA, i, uint64(*m.IntervalSizeUsec))
		i--
		dAtA[i] = 0x58
	}
	if m.NumIntervals != nil {
		i = encodeVarintLatency(dAtA, i, uint64(*m.NumIntervals))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Counts) > 0 {
		for iNdEx := len(m.Counts) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintLatency(dAtA, i, uint64(m.Counts[iNdEx]))
			i--
			dAtA[i] = 0x48
		}
	}
	i = encodeVarintLatency(dAtA, i, uint64(m.CurrentLatencyUsec))
	i--
	dAtA[i] = 0x40
	i -= len(m.Label)
	copy(dAtA[i:], m.Label)
	i = encodeVarintLatency(dAtA, i, uint64(len(m.Label)))
	i--
	dAtA[i] = 0x3a
	i = encodeVarintLatency(dAtA, i, uint64(m.AvgLatencyUsec))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}

func encodeVarintLatency(dAtA []byte, offset int, v uint64) int {
	offset -= sovLatency(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PacketLatency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovLatency(uint64(m.AvgLatencyUsec))
	l = len(m.Label)
	n += 1 + l + sovLatency(uint64(l))
	n += 1 + sovLatency(uint64(m.CurrentLatencyUsec))
	if len(m.Counts) > 0 {
		for _, e := range m.Counts {
			n += 1 + sovLatency(uint64(e))
		}
	}
	if m.NumIntervals != nil {
		n += 1 + sovLatency(uint64(*m.NumIntervals))
	}
	if m.IntervalSizeUsec != nil {
		n += 1 + sovLatency(uint64(*m.IntervalSizeUsec))
	}
	n += 1 + sovLatency(uint64(m.SumLatencyUsec))
	return n
}

func sovLatency(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLatency(x uint64) (n int) {
	return sovLatency(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PacketLatency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PacketLatency{`,
		`AvgLatencyUsec:` + fmt.Sprintf("%v", this.AvgLatencyUsec) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`CurrentLatencyUsec:` + fmt.Sprintf("%v", this.CurrentLatencyUsec) + `,`,
		`Counts:` + fmt.Sprintf("%v", this.Counts) + `,`,
		`NumIntervals:` + valueToStringLatency(this.NumIntervals) + `,`,
		`IntervalSizeUsec:` + valueToStringLatency(this.IntervalSizeUsec) + `,`,
		`SumLatencyUsec:` + fmt.Sprintf("%v", this.SumLatencyUsec) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLatency(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PacketLatency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLatency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketLatency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketLatency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgLatencyUsec", wireType)
			}
			m.AvgLatencyUsec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLatency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvgLatencyUsec |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLatency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLatency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLatency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentLatencyUsec", wireType)
			}
			m.CurrentLatencyUsec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLatency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentLatencyUsec |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLatency
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Counts = append(m.Counts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLatency
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLatency
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLatency
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Counts) == 0 {
					m.Counts = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLatency
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Counts = append(m.Counts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Counts", wireType)
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumIntervals", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLatency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumIntervals = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalSizeUsec", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLatency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntervalSizeUsec = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumLatencyUsec", wireType)
			}
			m.SumLatencyUsec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLatency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SumLatencyUsec |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLatency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLatency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLatency(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLatency
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLatency
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLatency
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLatency
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLatency
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLatency
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLatency        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLatency          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLatency = fmt.Errorf("proto: unexpected end of group")
)
