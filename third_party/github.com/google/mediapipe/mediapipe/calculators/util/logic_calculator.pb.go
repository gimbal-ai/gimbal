// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/logic_calculator.proto

package util

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LogicCalculatorOptions_Operation int32

const (
	AND LogicCalculatorOptions_Operation = 0
	OR  LogicCalculatorOptions_Operation = 1
	XOR LogicCalculatorOptions_Operation = 2
)

var LogicCalculatorOptions_Operation_name = map[int32]string{
	0: "AND",
	1: "OR",
	2: "XOR",
}

var LogicCalculatorOptions_Operation_value = map[string]int32{
	"AND": 0,
	"OR":  1,
	"XOR": 2,
}

func (x LogicCalculatorOptions_Operation) Enum() *LogicCalculatorOptions_Operation {
	p := new(LogicCalculatorOptions_Operation)
	*p = x
	return p
}

func (x LogicCalculatorOptions_Operation) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(LogicCalculatorOptions_Operation_name, int32(x))
}

func (x *LogicCalculatorOptions_Operation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LogicCalculatorOptions_Operation_value, data, "LogicCalculatorOptions_Operation")
	if err != nil {
		return err
	}
	*x = LogicCalculatorOptions_Operation(value)
	return nil
}

func (LogicCalculatorOptions_Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b2711da352ba5167, []int{0, 0}
}

type LogicCalculatorOptions struct {
	Op         LogicCalculatorOptions_Operation `protobuf:"varint,1,opt,name=op,enum=mediapipe.LogicCalculatorOptions_Operation" json:"op"`
	Negate     bool                             `protobuf:"varint,2,opt,name=negate" json:"negate"`
	InputValue []bool                           `protobuf:"varint,3,rep,name=input_value,json=inputValue" json:"input_value,omitempty"`
}

func (m *LogicCalculatorOptions) Reset()      { *m = LogicCalculatorOptions{} }
func (*LogicCalculatorOptions) ProtoMessage() {}
func (*LogicCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2711da352ba5167, []int{0}
}
func (m *LogicCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogicCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogicCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogicCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicCalculatorOptions.Merge(m, src)
}
func (m *LogicCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *LogicCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_LogicCalculatorOptions proto.InternalMessageInfo

func (m *LogicCalculatorOptions) GetOp() LogicCalculatorOptions_Operation {
	if m != nil {
		return m.Op
	}
	return AND
}

func (m *LogicCalculatorOptions) GetNegate() bool {
	if m != nil {
		return m.Negate
	}
	return false
}

func (m *LogicCalculatorOptions) GetInputValue() []bool {
	if m != nil {
		return m.InputValue
	}
	return nil
}

var E_LogicCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*LogicCalculatorOptions)(nil),
	Field:         338731246,
	Name:          "mediapipe.LogicCalculatorOptions.ext",
	Tag:           "bytes,338731246,opt,name=ext",
	Filename:      "mediapipe/calculators/util/logic_calculator.proto",
}

func init() {
	proto.RegisterEnum("mediapipe.LogicCalculatorOptions_Operation", LogicCalculatorOptions_Operation_name, LogicCalculatorOptions_Operation_value)
	proto.RegisterExtension(E_LogicCalculatorOptions_Ext)
	proto.RegisterType((*LogicCalculatorOptions)(nil), "mediapipe.LogicCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/logic_calculator.proto", fileDescriptor_b2711da352ba5167)
}

var fileDescriptor_b2711da352ba5167 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0xcc, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f,
	0x2a, 0xd6, 0x2f, 0x2d, 0xc9, 0xcc, 0xd1, 0xcf, 0xc9, 0x4f, 0xcf, 0x4c, 0x8e, 0x47, 0x08, 0xeb,
	0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x71, 0xc2, 0xb5, 0x48, 0xa9, 0x20, 0x74, 0xa7, 0x15, 0x25,
	0xe6, 0xa6, 0x96, 0xe7, 0x17, 0x65, 0xeb, 0xa3, 0x6b, 0x50, 0x9a, 0xc1, 0xc4, 0x25, 0xe6, 0x03,
	0x32, 0xcb, 0x19, 0x2e, 0xe3, 0x5f, 0x50, 0x92, 0x99, 0x9f, 0x57, 0x2c, 0xe4, 0xc8, 0xc5, 0x94,
	0x5f, 0x20, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x67, 0xa4, 0xad, 0x07, 0x37, 0x4d, 0x0f, 0xbb, 0x72,
	0x3d, 0xff, 0x82, 0xd4, 0xa2, 0x44, 0x10, 0xd3, 0x89, 0xe5, 0xc4, 0x3d, 0x79, 0x86, 0x20, 0xa6,
	0xfc, 0x02, 0x21, 0x19, 0x2e, 0xb6, 0xbc, 0xd4, 0xf4, 0xc4, 0x92, 0x54, 0x09, 0x26, 0x05, 0x46,
	0x0d, 0x0e, 0xa8, 0x0c, 0x54, 0x4c, 0x48, 0x9e, 0x8b, 0x3b, 0x33, 0xaf, 0xa0, 0xb4, 0x24, 0xbe,
	0x2c, 0x31, 0xa7, 0x34, 0x55, 0x82, 0x59, 0x81, 0x59, 0x83, 0x23, 0x88, 0x0b, 0x2c, 0x14, 0x06,
	0x12, 0x51, 0x52, 0xe5, 0xe2, 0x84, 0x9b, 0x2a, 0xc4, 0xce, 0xc5, 0xec, 0xe8, 0xe7, 0x22, 0xc0,
	0x20, 0xc4, 0xc6, 0xc5, 0xe4, 0x1f, 0x24, 0xc0, 0x08, 0x12, 0x88, 0xf0, 0x0f, 0x12, 0x60, 0x32,
	0x0a, 0xe5, 0x62, 0x4e, 0xad, 0x28, 0x11, 0x92, 0x41, 0x72, 0x23, 0x86, 0xf3, 0x24, 0xde, 0x1d,
	0x3c, 0xb4, 0x10, 0xe4, 0x17, 0x6e, 0x23, 0x45, 0x82, 0x7e, 0x09, 0x02, 0x99, 0xe7, 0xb4, 0x81,
	0xf1, 0xc2, 0x43, 0x39, 0x86, 0x1b, 0x0f, 0xe5, 0x18, 0x3e, 0x3c, 0x94, 0x63, 0x6c, 0x78, 0x24,
	0xc7, 0xb8, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78,
	0x24, 0xc7, 0xf8, 0xe2, 0x91, 0x1c, 0xc3, 0x87, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c,
	0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x03, 0x97, 0x6a, 0x72, 0x7e, 0xae, 0x5e, 0x7a, 0x7e,
	0x7e, 0x7a, 0x4e, 0x2a, 0x92, 0x45, 0xe8, 0x01, 0xef, 0x24, 0x8d, 0xdd, 0xea, 0x00, 0x90, 0x64,
	0x94, 0x59, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x3e, 0xc4, 0x28, 0x7d,
	0x44, 0x6c, 0xe2, 0x4e, 0x15, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x90, 0x24, 0x79, 0x72, 0x32,
	0x02, 0x00, 0x00,
}

func (x LogicCalculatorOptions_Operation) String() string {
	s, ok := LogicCalculatorOptions_Operation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *LogicCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogicCalculatorOptions)
	if !ok {
		that2, ok := that.(LogicCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Op != that1.Op {
		return false
	}
	if this.Negate != that1.Negate {
		return false
	}
	if len(this.InputValue) != len(that1.InputValue) {
		return false
	}
	for i := range this.InputValue {
		if this.InputValue[i] != that1.InputValue[i] {
			return false
		}
	}
	return true
}
func (this *LogicCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&util.LogicCalculatorOptions{")
	s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	s = append(s, "Negate: "+fmt.Sprintf("%#v", this.Negate)+",\n")
	if this.InputValue != nil {
		s = append(s, "InputValue: "+fmt.Sprintf("%#v", this.InputValue)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLogicCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LogicCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogicCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InputValue) > 0 {
		for iNdEx := len(m.InputValue) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.InputValue[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
	}
	i--
	if m.Negate {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintLogicCalculator(dAtA, i, uint64(m.Op))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintLogicCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogicCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LogicCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovLogicCalculator(uint64(m.Op))
	n += 2
	if len(m.InputValue) > 0 {
		n += 2 * len(m.InputValue)
	}
	return n
}

func sovLogicCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogicCalculator(x uint64) (n int) {
	return sovLogicCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LogicCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogicCalculatorOptions{`,
		`Op:` + fmt.Sprintf("%v", this.Op) + `,`,
		`Negate:` + fmt.Sprintf("%v", this.Negate) + `,`,
		`InputValue:` + fmt.Sprintf("%v", this.InputValue) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLogicCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LogicCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogicCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogicCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= LogicCalculatorOptions_Operation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Negate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogicCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Negate = bool(v != 0)
		case 3:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogicCalculator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.InputValue = append(m.InputValue, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogicCalculator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLogicCalculator
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLogicCalculator
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.InputValue) == 0 {
					m.InputValue = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogicCalculator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.InputValue = append(m.InputValue, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field InputValue", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogicCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogicCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogicCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogicCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogicCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogicCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogicCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLogicCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLogicCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLogicCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogicCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLogicCalculator = fmt.Errorf("proto: unexpected end of group")
)
