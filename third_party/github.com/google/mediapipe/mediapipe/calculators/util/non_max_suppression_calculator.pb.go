// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/non_max_suppression_calculator.proto

package util

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NonMaxSuppressionCalculatorOptions_OverlapType int32

const (
	UNSPECIFIED_OVERLAP_TYPE NonMaxSuppressionCalculatorOptions_OverlapType = 0
	JACCARD                  NonMaxSuppressionCalculatorOptions_OverlapType = 1
	MODIFIED_JACCARD         NonMaxSuppressionCalculatorOptions_OverlapType = 2
	INTERSECTION_OVER_UNION  NonMaxSuppressionCalculatorOptions_OverlapType = 3
)

var NonMaxSuppressionCalculatorOptions_OverlapType_name = map[int32]string{
	0: "UNSPECIFIED_OVERLAP_TYPE",
	1: "JACCARD",
	2: "MODIFIED_JACCARD",
	3: "INTERSECTION_OVER_UNION",
}

var NonMaxSuppressionCalculatorOptions_OverlapType_value = map[string]int32{
	"UNSPECIFIED_OVERLAP_TYPE": 0,
	"JACCARD":                  1,
	"MODIFIED_JACCARD":         2,
	"INTERSECTION_OVER_UNION":  3,
}

func (x NonMaxSuppressionCalculatorOptions_OverlapType) Enum() *NonMaxSuppressionCalculatorOptions_OverlapType {
	p := new(NonMaxSuppressionCalculatorOptions_OverlapType)
	*p = x
	return p
}

func (x NonMaxSuppressionCalculatorOptions_OverlapType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(NonMaxSuppressionCalculatorOptions_OverlapType_name, int32(x))
}

func (x *NonMaxSuppressionCalculatorOptions_OverlapType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NonMaxSuppressionCalculatorOptions_OverlapType_value, data, "NonMaxSuppressionCalculatorOptions_OverlapType")
	if err != nil {
		return err
	}
	*x = NonMaxSuppressionCalculatorOptions_OverlapType(value)
	return nil
}

func (NonMaxSuppressionCalculatorOptions_OverlapType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9bb098ecea8e51ff, []int{0, 0}
}

type NonMaxSuppressionCalculatorOptions_NmsAlgorithm int32

const (
	NMS_ALGO_DEFAULT  NonMaxSuppressionCalculatorOptions_NmsAlgorithm = 0
	NMS_ALGO_WEIGHTED NonMaxSuppressionCalculatorOptions_NmsAlgorithm = 1
)

var NonMaxSuppressionCalculatorOptions_NmsAlgorithm_name = map[int32]string{
	0: "NMS_ALGO_DEFAULT",
	1: "NMS_ALGO_WEIGHTED",
}

var NonMaxSuppressionCalculatorOptions_NmsAlgorithm_value = map[string]int32{
	"NMS_ALGO_DEFAULT":  0,
	"NMS_ALGO_WEIGHTED": 1,
}

func (x NonMaxSuppressionCalculatorOptions_NmsAlgorithm) Enum() *NonMaxSuppressionCalculatorOptions_NmsAlgorithm {
	p := new(NonMaxSuppressionCalculatorOptions_NmsAlgorithm)
	*p = x
	return p
}

func (x NonMaxSuppressionCalculatorOptions_NmsAlgorithm) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(NonMaxSuppressionCalculatorOptions_NmsAlgorithm_name, int32(x))
}

func (x *NonMaxSuppressionCalculatorOptions_NmsAlgorithm) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NonMaxSuppressionCalculatorOptions_NmsAlgorithm_value, data, "NonMaxSuppressionCalculatorOptions_NmsAlgorithm")
	if err != nil {
		return err
	}
	*x = NonMaxSuppressionCalculatorOptions_NmsAlgorithm(value)
	return nil
}

func (NonMaxSuppressionCalculatorOptions_NmsAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9bb098ecea8e51ff, []int{0, 1}
}

type NonMaxSuppressionCalculatorOptions struct {
	NumDetectionStreams     *int32                                           `protobuf:"varint,1,opt,name=num_detection_streams,json=numDetectionStreams,def=1" json:"num_detection_streams,omitempty"`
	MaxNumDetections        *int32                                           `protobuf:"varint,2,opt,name=max_num_detections,json=maxNumDetections,def=-1" json:"max_num_detections,omitempty"`
	MinScoreThreshold       *float32                                         `protobuf:"fixed32,6,opt,name=min_score_threshold,json=minScoreThreshold,def=-1" json:"min_score_threshold,omitempty"`
	MinSuppressionThreshold *float32                                         `protobuf:"fixed32,3,opt,name=min_suppression_threshold,json=minSuppressionThreshold,def=1" json:"min_suppression_threshold,omitempty"`
	OverlapType             *NonMaxSuppressionCalculatorOptions_OverlapType  `protobuf:"varint,4,opt,name=overlap_type,json=overlapType,enum=mediapipe.NonMaxSuppressionCalculatorOptions_OverlapType,def=1" json:"overlap_type,omitempty"`
	ReturnEmptyDetections   bool                                             `protobuf:"varint,5,opt,name=return_empty_detections,json=returnEmptyDetections" json:"return_empty_detections"`
	Algorithm               *NonMaxSuppressionCalculatorOptions_NmsAlgorithm `protobuf:"varint,7,opt,name=algorithm,enum=mediapipe.NonMaxSuppressionCalculatorOptions_NmsAlgorithm,def=0" json:"algorithm,omitempty"`
}

func (m *NonMaxSuppressionCalculatorOptions) Reset()      { *m = NonMaxSuppressionCalculatorOptions{} }
func (*NonMaxSuppressionCalculatorOptions) ProtoMessage() {}
func (*NonMaxSuppressionCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bb098ecea8e51ff, []int{0}
}
func (m *NonMaxSuppressionCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NonMaxSuppressionCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NonMaxSuppressionCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NonMaxSuppressionCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NonMaxSuppressionCalculatorOptions.Merge(m, src)
}
func (m *NonMaxSuppressionCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *NonMaxSuppressionCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_NonMaxSuppressionCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_NonMaxSuppressionCalculatorOptions proto.InternalMessageInfo

const Default_NonMaxSuppressionCalculatorOptions_NumDetectionStreams int32 = 1
const Default_NonMaxSuppressionCalculatorOptions_MaxNumDetections int32 = -1
const Default_NonMaxSuppressionCalculatorOptions_MinScoreThreshold float32 = -1
const Default_NonMaxSuppressionCalculatorOptions_MinSuppressionThreshold float32 = 1
const Default_NonMaxSuppressionCalculatorOptions_OverlapType NonMaxSuppressionCalculatorOptions_OverlapType = JACCARD
const Default_NonMaxSuppressionCalculatorOptions_Algorithm NonMaxSuppressionCalculatorOptions_NmsAlgorithm = NMS_ALGO_DEFAULT

func (m *NonMaxSuppressionCalculatorOptions) GetNumDetectionStreams() int32 {
	if m != nil && m.NumDetectionStreams != nil {
		return *m.NumDetectionStreams
	}
	return Default_NonMaxSuppressionCalculatorOptions_NumDetectionStreams
}

func (m *NonMaxSuppressionCalculatorOptions) GetMaxNumDetections() int32 {
	if m != nil && m.MaxNumDetections != nil {
		return *m.MaxNumDetections
	}
	return Default_NonMaxSuppressionCalculatorOptions_MaxNumDetections
}

func (m *NonMaxSuppressionCalculatorOptions) GetMinScoreThreshold() float32 {
	if m != nil && m.MinScoreThreshold != nil {
		return *m.MinScoreThreshold
	}
	return Default_NonMaxSuppressionCalculatorOptions_MinScoreThreshold
}

func (m *NonMaxSuppressionCalculatorOptions) GetMinSuppressionThreshold() float32 {
	if m != nil && m.MinSuppressionThreshold != nil {
		return *m.MinSuppressionThreshold
	}
	return Default_NonMaxSuppressionCalculatorOptions_MinSuppressionThreshold
}

func (m *NonMaxSuppressionCalculatorOptions) GetOverlapType() NonMaxSuppressionCalculatorOptions_OverlapType {
	if m != nil && m.OverlapType != nil {
		return *m.OverlapType
	}
	return Default_NonMaxSuppressionCalculatorOptions_OverlapType
}

func (m *NonMaxSuppressionCalculatorOptions) GetReturnEmptyDetections() bool {
	if m != nil {
		return m.ReturnEmptyDetections
	}
	return false
}

func (m *NonMaxSuppressionCalculatorOptions) GetAlgorithm() NonMaxSuppressionCalculatorOptions_NmsAlgorithm {
	if m != nil && m.Algorithm != nil {
		return *m.Algorithm
	}
	return Default_NonMaxSuppressionCalculatorOptions_Algorithm
}

var E_NonMaxSuppressionCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*NonMaxSuppressionCalculatorOptions)(nil),
	Field:         55383100,
	Name:          "mediapipe.NonMaxSuppressionCalculatorOptions.ext",
	Tag:           "bytes,55383100,opt,name=ext",
	Filename:      "mediapipe/calculators/util/non_max_suppression_calculator.proto",
}

func init() {
	proto.RegisterEnum("mediapipe.NonMaxSuppressionCalculatorOptions_OverlapType", NonMaxSuppressionCalculatorOptions_OverlapType_name, NonMaxSuppressionCalculatorOptions_OverlapType_value)
	proto.RegisterEnum("mediapipe.NonMaxSuppressionCalculatorOptions_NmsAlgorithm", NonMaxSuppressionCalculatorOptions_NmsAlgorithm_name, NonMaxSuppressionCalculatorOptions_NmsAlgorithm_value)
	proto.RegisterExtension(E_NonMaxSuppressionCalculatorOptions_Ext)
	proto.RegisterType((*NonMaxSuppressionCalculatorOptions)(nil), "mediapipe.NonMaxSuppressionCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/non_max_suppression_calculator.proto", fileDescriptor_9bb098ecea8e51ff)
}

var fileDescriptor_9bb098ecea8e51ff = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x3d, 0xe9, 0x1f, 0x9d, 0x54, 0xc8, 0x9d, 0x52, 0xd5, 0x94, 0x6a, 0x88, 0x22, 0x16,
	0xd9, 0x34, 0xa1, 0x91, 0x40, 0x22, 0x80, 0x50, 0x9a, 0xb8, 0x25, 0xa8, 0xb5, 0x2b, 0xc7, 0x05,
	0xc1, 0x66, 0x30, 0xe9, 0x90, 0x98, 0x7a, 0x3c, 0x96, 0x67, 0x0c, 0xe9, 0x8e, 0x47, 0xe0, 0x05,
	0xd8, 0xf7, 0x01, 0x58, 0xf2, 0x00, 0x5d, 0x76, 0xd9, 0x15, 0xa2, 0xee, 0x86, 0x65, 0x1f, 0x01,
	0xd9, 0x51, 0x62, 0x53, 0x84, 0x50, 0xb7, 0xf7, 0x9e, 0xef, 0xe8, 0xdc, 0x23, 0x5d, 0xf8, 0x8c,
	0xd1, 0x03, 0xd7, 0x09, 0xdc, 0x80, 0xd6, 0x7a, 0x8e, 0xd7, 0x8b, 0x3c, 0x47, 0xf2, 0x50, 0xd4,
	0x22, 0xe9, 0x7a, 0x35, 0x9f, 0xfb, 0x84, 0x39, 0x43, 0x22, 0xa2, 0x20, 0x08, 0xa9, 0x10, 0x2e,
	0xf7, 0x49, 0x26, 0xaa, 0x06, 0x21, 0x97, 0x1c, 0xcd, 0x4f, 0x0c, 0x56, 0xef, 0x65, 0x5e, 0xef,
	0x43, 0x87, 0xd1, 0x4f, 0x3c, 0x3c, 0xac, 0x5d, 0x05, 0xca, 0x5f, 0x67, 0x61, 0xd9, 0xe0, 0xfe,
	0xae, 0x33, 0xec, 0x66, 0xbe, 0xad, 0x89, 0xca, 0x0c, 0xa4, 0xcb, 0x7d, 0x81, 0x1e, 0xc0, 0x65,
	0x3f, 0x62, 0xe4, 0x80, 0x4a, 0xda, 0x4b, 0x26, 0x44, 0xc8, 0x90, 0x3a, 0x4c, 0x68, 0xa0, 0x04,
	0x2a, 0x33, 0x0d, 0xb0, 0x61, 0x2d, 0xf9, 0x11, 0x6b, 0x8f, 0xd7, 0xdd, 0xd1, 0x16, 0xdd, 0x87,
	0x28, 0x89, 0xfc, 0x07, 0x2a, 0xb4, 0x42, 0xca, 0x14, 0xd6, 0x37, 0x2c, 0x95, 0x39, 0x43, 0x23,
	0xc7, 0x09, 0x54, 0x87, 0x4b, 0xcc, 0xf5, 0x89, 0xe8, 0xf1, 0x90, 0x12, 0x39, 0x08, 0xa9, 0x18,
	0x70, 0xef, 0x40, 0x9b, 0x2d, 0x81, 0x4a, 0x21, 0x45, 0x16, 0x99, 0xeb, 0x77, 0x93, 0xad, 0x3d,
	0x5e, 0xa2, 0xa7, 0xf0, 0x76, 0xca, 0xe4, 0x8a, 0xc9, 0xc8, 0xa9, 0x94, 0x04, 0x1b, 0xd6, 0x4a,
	0x02, 0x66, 0x92, 0x0c, 0xa7, 0x70, 0x81, 0x7f, 0xa4, 0xa1, 0xe7, 0x04, 0x44, 0x1e, 0x05, 0x54,
	0x9b, 0x2e, 0x81, 0xca, 0xcd, 0xfa, 0xa3, 0xea, 0xa4, 0xbf, 0xea, 0xff, 0x0b, 0xaa, 0x9a, 0x23,
	0x07, 0xfb, 0x28, 0xa0, 0x8d, 0xb9, 0x17, 0xcd, 0x56, 0xab, 0x69, 0xb5, 0xad, 0x22, 0xcf, 0xa6,
	0xe8, 0x09, 0x5c, 0x09, 0xa9, 0x8c, 0x42, 0x9f, 0x50, 0x16, 0xc8, 0xa3, 0x7c, 0x21, 0x33, 0x25,
	0x50, 0xb9, 0xb1, 0x39, 0x7d, 0xf2, 0xe3, 0xae, 0x62, 0x2d, 0x8f, 0x44, 0x7a, 0xa2, 0xc9, 0xf5,
	0xf2, 0x01, 0xce, 0x3b, 0x5e, 0x9f, 0x87, 0xae, 0x1c, 0x30, 0x6d, 0x2e, 0x4d, 0xd8, 0xb8, 0x5e,
	0x42, 0x83, 0x89, 0xe6, 0xd8, 0xa1, 0xa1, 0x1a, 0xbb, 0x5d, 0xd2, 0xdc, 0xd9, 0x36, 0x49, 0x5b,
	0xdf, 0x6a, 0xee, 0xef, 0xd8, 0x56, 0x66, 0x5f, 0x3e, 0x84, 0xc5, 0xdc, 0x39, 0x68, 0x0d, 0x6a,
	0xfb, 0x46, 0x77, 0x4f, 0x6f, 0x75, 0xb6, 0x3a, 0x7a, 0x9b, 0x98, 0x2f, 0x75, 0x6b, 0xa7, 0xb9,
	0x47, 0xec, 0xd7, 0x7b, 0xba, 0xaa, 0xa0, 0x22, 0x1c, 0x9f, 0xab, 0x02, 0x74, 0x0b, 0xaa, 0xbb,
	0x66, 0x7b, 0xa4, 0x1b, 0x4f, 0x0b, 0xe8, 0x0e, 0x5c, 0xe9, 0x18, 0xb6, 0x6e, 0x75, 0xf5, 0x96,
	0xdd, 0x31, 0x8d, 0xd4, 0x81, 0xec, 0x1b, 0x1d, 0xd3, 0x50, 0xa7, 0xca, 0x8f, 0xe1, 0x42, 0x3e,
	0x59, 0x62, 0x71, 0x35, 0x9b, 0xaa, 0xa0, 0x65, 0xb8, 0x38, 0x99, 0xbe, 0xd2, 0x3b, 0xdb, 0xcf,
	0x6d, 0xbd, 0xad, 0x82, 0xfa, 0x5b, 0x38, 0x45, 0x87, 0x12, 0xad, 0xe5, 0x9a, 0xf8, 0xeb, 0x70,
	0xed, 0xfb, 0xf1, 0xb7, 0xd5, 0x12, 0xa8, 0x14, 0xeb, 0xeb, 0xd7, 0x2a, 0xcc, 0x4a, 0xac, 0x37,
	0xbd, 0xd3, 0x73, 0xac, 0x9c, 0x9d, 0x63, 0xe5, 0xf2, 0x1c, 0x83, 0xcf, 0x31, 0x06, 0xc7, 0x31,
	0x06, 0x27, 0x31, 0x06, 0xa7, 0x31, 0x06, 0x3f, 0x63, 0x0c, 0x7e, 0xc5, 0x58, 0xb9, 0x8c, 0x31,
	0xf8, 0x72, 0x81, 0x95, 0xd3, 0x0b, 0xac, 0x9c, 0x5d, 0x60, 0xe5, 0xcd, 0xc3, 0xbe, 0x2b, 0x07,
	0xd1, 0xbb, 0x6a, 0x8f, 0xb3, 0x5a, 0x9f, 0xf3, 0xbe, 0x47, 0x6b, 0xd9, 0x37, 0xfe, 0xfb, 0xc7,
	0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x22, 0xf7, 0x41, 0x0c, 0x00, 0x04, 0x00, 0x00,
}

func (x NonMaxSuppressionCalculatorOptions_OverlapType) String() string {
	s, ok := NonMaxSuppressionCalculatorOptions_OverlapType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NonMaxSuppressionCalculatorOptions_NmsAlgorithm) String() string {
	s, ok := NonMaxSuppressionCalculatorOptions_NmsAlgorithm_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *NonMaxSuppressionCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NonMaxSuppressionCalculatorOptions)
	if !ok {
		that2, ok := that.(NonMaxSuppressionCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NumDetectionStreams != nil && that1.NumDetectionStreams != nil {
		if *this.NumDetectionStreams != *that1.NumDetectionStreams {
			return false
		}
	} else if this.NumDetectionStreams != nil {
		return false
	} else if that1.NumDetectionStreams != nil {
		return false
	}
	if this.MaxNumDetections != nil && that1.MaxNumDetections != nil {
		if *this.MaxNumDetections != *that1.MaxNumDetections {
			return false
		}
	} else if this.MaxNumDetections != nil {
		return false
	} else if that1.MaxNumDetections != nil {
		return false
	}
	if this.MinScoreThreshold != nil && that1.MinScoreThreshold != nil {
		if *this.MinScoreThreshold != *that1.MinScoreThreshold {
			return false
		}
	} else if this.MinScoreThreshold != nil {
		return false
	} else if that1.MinScoreThreshold != nil {
		return false
	}
	if this.MinSuppressionThreshold != nil && that1.MinSuppressionThreshold != nil {
		if *this.MinSuppressionThreshold != *that1.MinSuppressionThreshold {
			return false
		}
	} else if this.MinSuppressionThreshold != nil {
		return false
	} else if that1.MinSuppressionThreshold != nil {
		return false
	}
	if this.OverlapType != nil && that1.OverlapType != nil {
		if *this.OverlapType != *that1.OverlapType {
			return false
		}
	} else if this.OverlapType != nil {
		return false
	} else if that1.OverlapType != nil {
		return false
	}
	if this.ReturnEmptyDetections != that1.ReturnEmptyDetections {
		return false
	}
	if this.Algorithm != nil && that1.Algorithm != nil {
		if *this.Algorithm != *that1.Algorithm {
			return false
		}
	} else if this.Algorithm != nil {
		return false
	} else if that1.Algorithm != nil {
		return false
	}
	return true
}
func (this *NonMaxSuppressionCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&util.NonMaxSuppressionCalculatorOptions{")
	if this.NumDetectionStreams != nil {
		s = append(s, "NumDetectionStreams: "+valueToGoStringNonMaxSuppressionCalculator(this.NumDetectionStreams, "int32")+",\n")
	}
	if this.MaxNumDetections != nil {
		s = append(s, "MaxNumDetections: "+valueToGoStringNonMaxSuppressionCalculator(this.MaxNumDetections, "int32")+",\n")
	}
	if this.MinScoreThreshold != nil {
		s = append(s, "MinScoreThreshold: "+valueToGoStringNonMaxSuppressionCalculator(this.MinScoreThreshold, "float32")+",\n")
	}
	if this.MinSuppressionThreshold != nil {
		s = append(s, "MinSuppressionThreshold: "+valueToGoStringNonMaxSuppressionCalculator(this.MinSuppressionThreshold, "float32")+",\n")
	}
	if this.OverlapType != nil {
		s = append(s, "OverlapType: "+valueToGoStringNonMaxSuppressionCalculator(this.OverlapType, "NonMaxSuppressionCalculatorOptions_OverlapType")+",\n")
	}
	s = append(s, "ReturnEmptyDetections: "+fmt.Sprintf("%#v", this.ReturnEmptyDetections)+",\n")
	if this.Algorithm != nil {
		s = append(s, "Algorithm: "+valueToGoStringNonMaxSuppressionCalculator(this.Algorithm, "NonMaxSuppressionCalculatorOptions_NmsAlgorithm")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNonMaxSuppressionCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *NonMaxSuppressionCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NonMaxSuppressionCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NonMaxSuppressionCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Algorithm != nil {
		i = encodeVarintNonMaxSuppressionCalculator(dAtA, i, uint64(*m.Algorithm))
		i--
		dAtA[i] = 0x38
	}
	if m.MinScoreThreshold != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.MinScoreThreshold))))
		i--
		dAtA[i] = 0x35
	}
	i--
	if m.ReturnEmptyDetections {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	if m.OverlapType != nil {
		i = encodeVarintNonMaxSuppressionCalculator(dAtA, i, uint64(*m.OverlapType))
		i--
		dAtA[i] = 0x20
	}
	if m.MinSuppressionThreshold != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.MinSuppressionThreshold))))
		i--
		dAtA[i] = 0x1d
	}
	if m.MaxNumDetections != nil {
		i = encodeVarintNonMaxSuppressionCalculator(dAtA, i, uint64(*m.MaxNumDetections))
		i--
		dAtA[i] = 0x10
	}
	if m.NumDetectionStreams != nil {
		i = encodeVarintNonMaxSuppressionCalculator(dAtA, i, uint64(*m.NumDetectionStreams))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNonMaxSuppressionCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovNonMaxSuppressionCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NonMaxSuppressionCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumDetectionStreams != nil {
		n += 1 + sovNonMaxSuppressionCalculator(uint64(*m.NumDetectionStreams))
	}
	if m.MaxNumDetections != nil {
		n += 1 + sovNonMaxSuppressionCalculator(uint64(*m.MaxNumDetections))
	}
	if m.MinSuppressionThreshold != nil {
		n += 5
	}
	if m.OverlapType != nil {
		n += 1 + sovNonMaxSuppressionCalculator(uint64(*m.OverlapType))
	}
	n += 2
	if m.MinScoreThreshold != nil {
		n += 5
	}
	if m.Algorithm != nil {
		n += 1 + sovNonMaxSuppressionCalculator(uint64(*m.Algorithm))
	}
	return n
}

func sovNonMaxSuppressionCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNonMaxSuppressionCalculator(x uint64) (n int) {
	return sovNonMaxSuppressionCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NonMaxSuppressionCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NonMaxSuppressionCalculatorOptions{`,
		`NumDetectionStreams:` + valueToStringNonMaxSuppressionCalculator(this.NumDetectionStreams) + `,`,
		`MaxNumDetections:` + valueToStringNonMaxSuppressionCalculator(this.MaxNumDetections) + `,`,
		`MinSuppressionThreshold:` + valueToStringNonMaxSuppressionCalculator(this.MinSuppressionThreshold) + `,`,
		`OverlapType:` + valueToStringNonMaxSuppressionCalculator(this.OverlapType) + `,`,
		`ReturnEmptyDetections:` + fmt.Sprintf("%v", this.ReturnEmptyDetections) + `,`,
		`MinScoreThreshold:` + valueToStringNonMaxSuppressionCalculator(this.MinScoreThreshold) + `,`,
		`Algorithm:` + valueToStringNonMaxSuppressionCalculator(this.Algorithm) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNonMaxSuppressionCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NonMaxSuppressionCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNonMaxSuppressionCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NonMaxSuppressionCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NonMaxSuppressionCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDetectionStreams", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNonMaxSuppressionCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumDetectionStreams = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumDetections", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNonMaxSuppressionCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxNumDetections = &v
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSuppressionThreshold", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.MinSuppressionThreshold = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverlapType", wireType)
			}
			var v NonMaxSuppressionCalculatorOptions_OverlapType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNonMaxSuppressionCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= NonMaxSuppressionCalculatorOptions_OverlapType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OverlapType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnEmptyDetections", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNonMaxSuppressionCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnEmptyDetections = bool(v != 0)
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinScoreThreshold", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.MinScoreThreshold = &v2
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			var v NonMaxSuppressionCalculatorOptions_NmsAlgorithm
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNonMaxSuppressionCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= NonMaxSuppressionCalculatorOptions_NmsAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Algorithm = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNonMaxSuppressionCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNonMaxSuppressionCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNonMaxSuppressionCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNonMaxSuppressionCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNonMaxSuppressionCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNonMaxSuppressionCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNonMaxSuppressionCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNonMaxSuppressionCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNonMaxSuppressionCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNonMaxSuppressionCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNonMaxSuppressionCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNonMaxSuppressionCalculator = fmt.Errorf("proto: unexpected end of group")
)
