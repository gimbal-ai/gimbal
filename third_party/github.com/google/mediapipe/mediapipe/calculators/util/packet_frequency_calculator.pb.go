// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/packet_frequency_calculator.proto

package util

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PacketFrequencyCalculatorOptions struct {
	TimeWindowSec *float64 `protobuf:"fixed64,1,opt,name=time_window_sec,json=timeWindowSec,def=3" json:"time_window_sec,omitempty"`
	Label         []string `protobuf:"bytes,2,rep,name=label" json:"label,omitempty"`
}

func (m *PacketFrequencyCalculatorOptions) Reset()      { *m = PacketFrequencyCalculatorOptions{} }
func (*PacketFrequencyCalculatorOptions) ProtoMessage() {}
func (*PacketFrequencyCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f972cf4c2435a934, []int{0}
}
func (m *PacketFrequencyCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketFrequencyCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketFrequencyCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketFrequencyCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketFrequencyCalculatorOptions.Merge(m, src)
}
func (m *PacketFrequencyCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *PacketFrequencyCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketFrequencyCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PacketFrequencyCalculatorOptions proto.InternalMessageInfo

const Default_PacketFrequencyCalculatorOptions_TimeWindowSec float64 = 3

func (m *PacketFrequencyCalculatorOptions) GetTimeWindowSec() float64 {
	if m != nil && m.TimeWindowSec != nil {
		return *m.TimeWindowSec
	}
	return Default_PacketFrequencyCalculatorOptions_TimeWindowSec
}

func (m *PacketFrequencyCalculatorOptions) GetLabel() []string {
	if m != nil {
		return m.Label
	}
	return nil
}

var E_PacketFrequencyCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*PacketFrequencyCalculatorOptions)(nil),
	Field:         168468918,
	Name:          "mediapipe.PacketFrequencyCalculatorOptions.ext",
	Tag:           "bytes,168468918,opt,name=ext",
	Filename:      "mediapipe/calculators/util/packet_frequency_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_PacketFrequencyCalculatorOptions_Ext)
	proto.RegisterType((*PacketFrequencyCalculatorOptions)(nil), "mediapipe.PacketFrequencyCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/packet_frequency_calculator.proto", fileDescriptor_f972cf4c2435a934)
}

var fileDescriptor_f972cf4c2435a934 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0xc9, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f,
	0x2a, 0xd6, 0x2f, 0x2d, 0xc9, 0xcc, 0xd1, 0x2f, 0x48, 0x4c, 0xce, 0x4e, 0x2d, 0x89, 0x4f, 0x2b,
	0x4a, 0x2d, 0x2c, 0x4d, 0xcd, 0x4b, 0xae, 0x8c, 0x47, 0xa8, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x84, 0xeb, 0x96, 0x52, 0x41, 0x18, 0x94, 0x56, 0x94, 0x98, 0x9b, 0x5a, 0x9e, 0x5f,
	0x94, 0xad, 0x8f, 0xae, 0x41, 0xe9, 0x30, 0x23, 0x97, 0x42, 0x00, 0xd8, 0x58, 0x37, 0x98, 0xa9,
	0xce, 0x70, 0x35, 0xfe, 0x05, 0x25, 0x99, 0xf9, 0x79, 0xc5, 0x42, 0x9a, 0x5c, 0xfc, 0x25, 0x99,
	0xb9, 0xa9, 0xf1, 0xe5, 0x99, 0x79, 0x29, 0xf9, 0xe5, 0xf1, 0xc5, 0xa9, 0xc9, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x8c, 0x56, 0x8c, 0xc6, 0x41, 0xbc, 0x20, 0x99, 0x70, 0xb0, 0x44, 0x70, 0x6a, 0xb2,
	0x90, 0x08, 0x17, 0x6b, 0x4e, 0x62, 0x52, 0x6a, 0x8e, 0x04, 0x93, 0x02, 0xb3, 0x06, 0x67, 0x10,
	0x84, 0x63, 0x14, 0xc7, 0xc5, 0x9c, 0x5a, 0x51, 0x22, 0x24, 0xa3, 0x07, 0x77, 0x93, 0x1e, 0x86,
	0x2d, 0x12, 0xdb, 0x0e, 0xaf, 0x0a, 0x50, 0x60, 0xd4, 0xe0, 0x36, 0xd2, 0x46, 0x52, 0x46, 0xc8,
	0x6d, 0x41, 0x20, 0x83, 0x9d, 0x72, 0x2e, 0x3c, 0x94, 0x63, 0xb8, 0xf1, 0x50, 0x8e, 0xe1, 0xc3,
	0x43, 0x39, 0xc6, 0x86, 0x47, 0x72, 0x8c, 0x2b, 0x1e, 0xc9, 0x31, 0x9e, 0x78, 0x24, 0xc7, 0x78,
	0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x2f, 0x1e, 0xc9, 0x31, 0x7c, 0x78, 0x24, 0xc7,
	0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x99, 0xa5,
	0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xa7, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4,
	0xea, 0x23, 0xc2, 0x0c, 0x77, 0x34, 0x00, 0x02, 0x00, 0x00, 0xff, 0xff, 0x51, 0x06, 0x74, 0x57,
	0xa3, 0x01, 0x00, 0x00,
}

func (this *PacketFrequencyCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PacketFrequencyCalculatorOptions)
	if !ok {
		that2, ok := that.(PacketFrequencyCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimeWindowSec != nil && that1.TimeWindowSec != nil {
		if *this.TimeWindowSec != *that1.TimeWindowSec {
			return false
		}
	} else if this.TimeWindowSec != nil {
		return false
	} else if that1.TimeWindowSec != nil {
		return false
	}
	if len(this.Label) != len(that1.Label) {
		return false
	}
	for i := range this.Label {
		if this.Label[i] != that1.Label[i] {
			return false
		}
	}
	return true
}
func (this *PacketFrequencyCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&util.PacketFrequencyCalculatorOptions{")
	if this.TimeWindowSec != nil {
		s = append(s, "TimeWindowSec: "+valueToGoStringPacketFrequencyCalculator(this.TimeWindowSec, "float64")+",\n")
	}
	if this.Label != nil {
		s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPacketFrequencyCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PacketFrequencyCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketFrequencyCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketFrequencyCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		for iNdEx := len(m.Label) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Label[iNdEx])
			copy(dAtA[i:], m.Label[iNdEx])
			i = encodeVarintPacketFrequencyCalculator(dAtA, i, uint64(len(m.Label[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TimeWindowSec != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.TimeWindowSec))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacketFrequencyCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacketFrequencyCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PacketFrequencyCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeWindowSec != nil {
		n += 9
	}
	if len(m.Label) > 0 {
		for _, s := range m.Label {
			l = len(s)
			n += 1 + l + sovPacketFrequencyCalculator(uint64(l))
		}
	}
	return n
}

func sovPacketFrequencyCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacketFrequencyCalculator(x uint64) (n int) {
	return sovPacketFrequencyCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PacketFrequencyCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PacketFrequencyCalculatorOptions{`,
		`TimeWindowSec:` + valueToStringPacketFrequencyCalculator(this.TimeWindowSec) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPacketFrequencyCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PacketFrequencyCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketFrequencyCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketFrequencyCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketFrequencyCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeWindowSec", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.TimeWindowSec = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketFrequencyCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacketFrequencyCalculator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketFrequencyCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = append(m.Label, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketFrequencyCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacketFrequencyCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacketFrequencyCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacketFrequencyCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketFrequencyCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketFrequencyCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacketFrequencyCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacketFrequencyCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacketFrequencyCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacketFrequencyCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacketFrequencyCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacketFrequencyCalculator = fmt.Errorf("proto: unexpected end of group")
)
