// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/packet_latency_calculator.proto

package util

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PacketLatencyCalculatorOptions struct {
	NumIntervals      *int64   `protobuf:"varint,1,opt,name=num_intervals,json=numIntervals,def=10" json:"num_intervals,omitempty"`
	IntervalSizeUsec  *int64   `protobuf:"varint,2,opt,name=interval_size_usec,json=intervalSizeUsec,def=10000" json:"interval_size_usec,omitempty"`
	ResetDurationUsec *int64   `protobuf:"varint,3,opt,name=reset_duration_usec,json=resetDurationUsec,def=-1" json:"reset_duration_usec,omitempty"`
	PacketLabels      []string `protobuf:"bytes,4,rep,name=packet_labels,json=packetLabels" json:"packet_labels,omitempty"`
}

func (m *PacketLatencyCalculatorOptions) Reset()      { *m = PacketLatencyCalculatorOptions{} }
func (*PacketLatencyCalculatorOptions) ProtoMessage() {}
func (*PacketLatencyCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_090136d876531955, []int{0}
}
func (m *PacketLatencyCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketLatencyCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketLatencyCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketLatencyCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketLatencyCalculatorOptions.Merge(m, src)
}
func (m *PacketLatencyCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *PacketLatencyCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketLatencyCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PacketLatencyCalculatorOptions proto.InternalMessageInfo

const Default_PacketLatencyCalculatorOptions_NumIntervals int64 = 10
const Default_PacketLatencyCalculatorOptions_IntervalSizeUsec int64 = 10000
const Default_PacketLatencyCalculatorOptions_ResetDurationUsec int64 = -1

func (m *PacketLatencyCalculatorOptions) GetNumIntervals() int64 {
	if m != nil && m.NumIntervals != nil {
		return *m.NumIntervals
	}
	return Default_PacketLatencyCalculatorOptions_NumIntervals
}

func (m *PacketLatencyCalculatorOptions) GetIntervalSizeUsec() int64 {
	if m != nil && m.IntervalSizeUsec != nil {
		return *m.IntervalSizeUsec
	}
	return Default_PacketLatencyCalculatorOptions_IntervalSizeUsec
}

func (m *PacketLatencyCalculatorOptions) GetResetDurationUsec() int64 {
	if m != nil && m.ResetDurationUsec != nil {
		return *m.ResetDurationUsec
	}
	return Default_PacketLatencyCalculatorOptions_ResetDurationUsec
}

func (m *PacketLatencyCalculatorOptions) GetPacketLabels() []string {
	if m != nil {
		return m.PacketLabels
	}
	return nil
}

var E_PacketLatencyCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*PacketLatencyCalculatorOptions)(nil),
	Field:         172681421,
	Name:          "mediapipe.PacketLatencyCalculatorOptions.ext",
	Tag:           "bytes,172681421,opt,name=ext",
	Filename:      "mediapipe/calculators/util/packet_latency_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_PacketLatencyCalculatorOptions_Ext)
	proto.RegisterType((*PacketLatencyCalculatorOptions)(nil), "mediapipe.PacketLatencyCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/packet_latency_calculator.proto", fileDescriptor_090136d876531955)
}

var fileDescriptor_090136d876531955 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0x33, 0xcd, 0xf7, 0x2d, 0x1a, 0x5b, 0xd0, 0xb8, 0x09, 0x22, 0x43, 0x51, 0xc1, 0xba,
	0x30, 0x49, 0x2b, 0xb8, 0xe8, 0x52, 0xdd, 0x08, 0x82, 0x12, 0x71, 0x23, 0x42, 0x98, 0xa6, 0xd7,
	0x3a, 0x74, 0x92, 0x09, 0x99, 0x89, 0x7f, 0xba, 0xf2, 0x11, 0x7c, 0x0c, 0xc1, 0xb5, 0xef, 0xe0,
	0x46, 0xa8, 0xbb, 0x2e, 0xed, 0x74, 0xe3, 0xb2, 0x8f, 0x20, 0x4d, 0xdb, 0x54, 0x14, 0xdd, 0xde,
	0xf3, 0x3b, 0xe7, 0x72, 0xcf, 0x35, 0x1a, 0x21, 0xb4, 0x28, 0x89, 0x69, 0x0c, 0x4e, 0x40, 0x58,
	0x90, 0x32, 0x22, 0x79, 0x22, 0x9c, 0x54, 0x52, 0xe6, 0xc4, 0x24, 0xe8, 0x80, 0xf4, 0x19, 0x91,
	0x10, 0x05, 0x77, 0xfe, 0x5c, 0xb7, 0xe3, 0x84, 0x4b, 0x6e, 0x16, 0x73, 0xef, 0xca, 0xc6, 0x3c,
	0xe6, 0x32, 0x21, 0x21, 0xdc, 0xf0, 0xa4, 0xe3, 0x7c, 0x37, 0xac, 0x3d, 0x17, 0x0c, 0x7c, 0x92,
	0x85, 0x1e, 0x4d, 0x32, 0xf7, 0x73, 0xe2, 0x38, 0x96, 0x94, 0x47, 0xc2, 0xdc, 0x34, 0xca, 0x51,
	0x1a, 0xfa, 0x34, 0x92, 0x90, 0x5c, 0x13, 0x26, 0x2c, 0x54, 0x41, 0x55, 0xbd, 0x51, 0xa8, 0xb9,
	0x5e, 0x29, 0x4a, 0xc3, 0xc3, 0xd9, 0xdc, 0xdc, 0x31, 0xcc, 0x19, 0xe4, 0x0b, 0xda, 0x05, 0x3f,
	0x15, 0x10, 0x58, 0x85, 0x8c, 0xfe, 0x5f, 0x73, 0x5d, 0xd7, 0xf5, 0x16, 0x67, 0xc0, 0x29, 0xed,
	0xc2, 0x99, 0x80, 0xc0, 0xac, 0x1b, 0xcb, 0x09, 0x08, 0x90, 0x7e, 0x2b, 0x4d, 0xc8, 0x78, 0xe1,
	0xc4, 0xa5, 0x4f, 0x76, 0x6c, 0xd7, 0xbc, 0xa5, 0x4c, 0x3e, 0x98, 0xaa, 0x99, 0x67, 0xdd, 0x28,
	0xe7, 0x45, 0x34, 0x81, 0x09, 0xeb, 0x5f, 0x45, 0xaf, 0x16, 0xbd, 0x52, 0x3c, 0x3d, 0x64, 0x3c,
	0xab, 0x5f, 0x18, 0x3a, 0xdc, 0x4a, 0x73, 0xd5, 0xce, 0x7b, 0xb0, 0x7f, 0xdc, 0x66, 0xbd, 0xbe,
	0x3d, 0x79, 0x15, 0x54, 0x5d, 0xa8, 0x6f, 0x7d, 0xc1, 0xfe, 0xee, 0xc3, 0x1b, 0xc7, 0xee, 0xb1,
	0xde, 0x00, 0x6b, 0xfd, 0x01, 0xd6, 0x46, 0x03, 0x8c, 0xee, 0x15, 0x46, 0x8f, 0x0a, 0xa3, 0x17,
	0x85, 0x51, 0x4f, 0x61, 0xf4, 0xae, 0x30, 0xfa, 0x50, 0x58, 0x1b, 0x29, 0x8c, 0x1e, 0x86, 0x58,
	0xeb, 0x0d, 0xb1, 0xd6, 0x1f, 0x62, 0xed, 0x7c, 0xb7, 0x4d, 0xe5, 0x55, 0xda, 0xb4, 0x03, 0x1e,
	0x3a, 0x6d, 0xce, 0xdb, 0x0c, 0x9c, 0xf9, 0x97, 0x7e, 0x7f, 0xfb, 0x67, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xb8, 0x56, 0xa8, 0xe3, 0x13, 0x02, 0x00, 0x00,
}

func (this *PacketLatencyCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PacketLatencyCalculatorOptions)
	if !ok {
		that2, ok := that.(PacketLatencyCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NumIntervals != nil && that1.NumIntervals != nil {
		if *this.NumIntervals != *that1.NumIntervals {
			return false
		}
	} else if this.NumIntervals != nil {
		return false
	} else if that1.NumIntervals != nil {
		return false
	}
	if this.IntervalSizeUsec != nil && that1.IntervalSizeUsec != nil {
		if *this.IntervalSizeUsec != *that1.IntervalSizeUsec {
			return false
		}
	} else if this.IntervalSizeUsec != nil {
		return false
	} else if that1.IntervalSizeUsec != nil {
		return false
	}
	if this.ResetDurationUsec != nil && that1.ResetDurationUsec != nil {
		if *this.ResetDurationUsec != *that1.ResetDurationUsec {
			return false
		}
	} else if this.ResetDurationUsec != nil {
		return false
	} else if that1.ResetDurationUsec != nil {
		return false
	}
	if len(this.PacketLabels) != len(that1.PacketLabels) {
		return false
	}
	for i := range this.PacketLabels {
		if this.PacketLabels[i] != that1.PacketLabels[i] {
			return false
		}
	}
	return true
}
func (this *PacketLatencyCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&util.PacketLatencyCalculatorOptions{")
	if this.NumIntervals != nil {
		s = append(s, "NumIntervals: "+valueToGoStringPacketLatencyCalculator(this.NumIntervals, "int64")+",\n")
	}
	if this.IntervalSizeUsec != nil {
		s = append(s, "IntervalSizeUsec: "+valueToGoStringPacketLatencyCalculator(this.IntervalSizeUsec, "int64")+",\n")
	}
	if this.ResetDurationUsec != nil {
		s = append(s, "ResetDurationUsec: "+valueToGoStringPacketLatencyCalculator(this.ResetDurationUsec, "int64")+",\n")
	}
	if this.PacketLabels != nil {
		s = append(s, "PacketLabels: "+fmt.Sprintf("%#v", this.PacketLabels)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPacketLatencyCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PacketLatencyCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketLatencyCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketLatencyCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PacketLabels) > 0 {
		for iNdEx := len(m.PacketLabels) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PacketLabels[iNdEx])
			copy(dAtA[i:], m.PacketLabels[iNdEx])
			i = encodeVarintPacketLatencyCalculator(dAtA, i, uint64(len(m.PacketLabels[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ResetDurationUsec != nil {
		i = encodeVarintPacketLatencyCalculator(dAtA, i, uint64(*m.ResetDurationUsec))
		i--
		dAtA[i] = 0x18
	}
	if m.IntervalSizeUsec != nil {
		i = encodeVarintPacketLatencyCalculator(dAtA, i, uint64(*m.IntervalSizeUsec))
		i--
		dAtA[i] = 0x10
	}
	if m.NumIntervals != nil {
		i = encodeVarintPacketLatencyCalculator(dAtA, i, uint64(*m.NumIntervals))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacketLatencyCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacketLatencyCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PacketLatencyCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumIntervals != nil {
		n += 1 + sovPacketLatencyCalculator(uint64(*m.NumIntervals))
	}
	if m.IntervalSizeUsec != nil {
		n += 1 + sovPacketLatencyCalculator(uint64(*m.IntervalSizeUsec))
	}
	if m.ResetDurationUsec != nil {
		n += 1 + sovPacketLatencyCalculator(uint64(*m.ResetDurationUsec))
	}
	if len(m.PacketLabels) > 0 {
		for _, s := range m.PacketLabels {
			l = len(s)
			n += 1 + l + sovPacketLatencyCalculator(uint64(l))
		}
	}
	return n
}

func sovPacketLatencyCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacketLatencyCalculator(x uint64) (n int) {
	return sovPacketLatencyCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PacketLatencyCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PacketLatencyCalculatorOptions{`,
		`NumIntervals:` + valueToStringPacketLatencyCalculator(this.NumIntervals) + `,`,
		`IntervalSizeUsec:` + valueToStringPacketLatencyCalculator(this.IntervalSizeUsec) + `,`,
		`ResetDurationUsec:` + valueToStringPacketLatencyCalculator(this.ResetDurationUsec) + `,`,
		`PacketLabels:` + fmt.Sprintf("%v", this.PacketLabels) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPacketLatencyCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PacketLatencyCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketLatencyCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketLatencyCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketLatencyCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumIntervals", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketLatencyCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumIntervals = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalSizeUsec", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketLatencyCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntervalSizeUsec = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetDurationUsec", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketLatencyCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResetDurationUsec = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketLabels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketLatencyCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacketLatencyCalculator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketLatencyCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketLabels = append(m.PacketLabels, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketLatencyCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacketLatencyCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacketLatencyCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacketLatencyCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketLatencyCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketLatencyCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacketLatencyCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacketLatencyCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacketLatencyCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacketLatencyCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacketLatencyCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacketLatencyCalculator = fmt.Errorf("proto: unexpected end of group")
)
