// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/rect_to_render_data_calculator.proto

package util

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	util "github.com/google/mediapipe/mediapipe/util"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RectToRenderDataCalculatorOptions struct {
	Filled           bool        `protobuf:"varint,1,opt,name=filled" json:"filled"`
	Color            *util.Color `protobuf:"bytes,2,opt,name=color" json:"color,omitempty"`
	Thickness        *float64    `protobuf:"fixed64,3,opt,name=thickness,def=1" json:"thickness,omitempty"`
	Oval             *bool       `protobuf:"varint,4,opt,name=oval,def=0" json:"oval,omitempty"`
	TopLeftThickness float64     `protobuf:"fixed64,5,opt,name=top_left_thickness,json=topLeftThickness" json:"top_left_thickness"`
}

func (m *RectToRenderDataCalculatorOptions) Reset()      { *m = RectToRenderDataCalculatorOptions{} }
func (*RectToRenderDataCalculatorOptions) ProtoMessage() {}
func (*RectToRenderDataCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ee4e409381d591, []int{0}
}
func (m *RectToRenderDataCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RectToRenderDataCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RectToRenderDataCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RectToRenderDataCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RectToRenderDataCalculatorOptions.Merge(m, src)
}
func (m *RectToRenderDataCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *RectToRenderDataCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RectToRenderDataCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RectToRenderDataCalculatorOptions proto.InternalMessageInfo

const Default_RectToRenderDataCalculatorOptions_Thickness float64 = 1
const Default_RectToRenderDataCalculatorOptions_Oval bool = false

func (m *RectToRenderDataCalculatorOptions) GetFilled() bool {
	if m != nil {
		return m.Filled
	}
	return false
}

func (m *RectToRenderDataCalculatorOptions) GetColor() *util.Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *RectToRenderDataCalculatorOptions) GetThickness() float64 {
	if m != nil && m.Thickness != nil {
		return *m.Thickness
	}
	return Default_RectToRenderDataCalculatorOptions_Thickness
}

func (m *RectToRenderDataCalculatorOptions) GetOval() bool {
	if m != nil && m.Oval != nil {
		return *m.Oval
	}
	return Default_RectToRenderDataCalculatorOptions_Oval
}

func (m *RectToRenderDataCalculatorOptions) GetTopLeftThickness() float64 {
	if m != nil {
		return m.TopLeftThickness
	}
	return 0
}

var E_RectToRenderDataCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*RectToRenderDataCalculatorOptions)(nil),
	Field:         262270380,
	Name:          "mediapipe.RectToRenderDataCalculatorOptions.ext",
	Tag:           "bytes,262270380,opt,name=ext",
	Filename:      "mediapipe/calculators/util/rect_to_render_data_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_RectToRenderDataCalculatorOptions_Ext)
	proto.RegisterType((*RectToRenderDataCalculatorOptions)(nil), "mediapipe.RectToRenderDataCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/rect_to_render_data_calculator.proto", fileDescriptor_c0ee4e409381d591)
}

var fileDescriptor_c0ee4e409381d591 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x3f, 0x4b, 0xfb, 0x40,
	0x1c, 0xc6, 0x73, 0xfd, 0xf3, 0xe3, 0xd7, 0x73, 0x29, 0x37, 0xc5, 0x52, 0xae, 0x55, 0x44, 0x3a,
	0x48, 0x82, 0x1d, 0x1c, 0xba, 0x08, 0xad, 0xa3, 0x20, 0x84, 0x4e, 0x2e, 0xe1, 0x4c, 0x2e, 0x6d,
	0xe8, 0xb5, 0xdf, 0x90, 0x7c, 0xab, 0x2e, 0x82, 0x9b, 0xab, 0x2f, 0xc3, 0xc1, 0x57, 0xe0, 0x2b,
	0xe8, 0xd8, 0xb1, 0x20, 0x88, 0x4d, 0x17, 0xc7, 0xbe, 0x04, 0x49, 0x6c, 0x9b, 0x52, 0x10, 0xd7,
	0xe7, 0x79, 0xf2, 0x79, 0x9e, 0xdc, 0x1d, 0x3d, 0x1f, 0x4a, 0xd7, 0x17, 0x81, 0x1f, 0x48, 0xd3,
	0x11, 0xca, 0x19, 0x2b, 0x81, 0x10, 0x46, 0xe6, 0x18, 0x7d, 0x65, 0x86, 0xd2, 0x41, 0x1b, 0xc1,
	0x0e, 0xe5, 0xc8, 0x95, 0xa1, 0xed, 0x0a, 0x14, 0x76, 0x16, 0x32, 0x82, 0x10, 0x10, 0x58, 0x69,
	0x03, 0xa8, 0x1c, 0x65, 0x2c, 0x2f, 0x14, 0x43, 0x79, 0x07, 0xe1, 0xc0, 0xdc, 0xfd, 0xa0, 0x52,
	0xc9, 0x52, 0x69, 0x8b, 0x03, 0x6a, 0xed, 0x1d, 0xbe, 0xe5, 0xe8, 0x81, 0x25, 0x1d, 0xec, 0x82,
	0x95, 0x76, 0x5e, 0x08, 0x14, 0x9d, 0x0d, 0xe0, 0x2a, 0x40, 0x1f, 0x46, 0x11, 0xab, 0xd2, 0x7f,
	0x9e, 0xaf, 0x94, 0x74, 0x75, 0x52, 0x27, 0x8d, 0xff, 0xed, 0xc2, 0xe4, 0xa3, 0xa6, 0x59, 0x2b,
	0x8d, 0x1d, 0xd3, 0x62, 0x8a, 0xd4, 0x73, 0x75, 0xd2, 0xd8, 0x6b, 0x96, 0x8d, 0x4d, 0x9f, 0xd1,
	0x49, 0x74, 0xeb, 0xc7, 0x66, 0x35, 0x5a, 0xc2, 0xbe, 0xef, 0x0c, 0x46, 0x32, 0x8a, 0xf4, 0x7c,
	0x9d, 0x34, 0x48, 0x8b, 0x9c, 0x5a, 0x99, 0xc6, 0xf6, 0x69, 0x01, 0x6e, 0x85, 0xd2, 0x0b, 0x49,
	0x49, 0xab, 0xe8, 0x09, 0x15, 0x49, 0x2b, 0x95, 0x58, 0x93, 0x32, 0x84, 0xc0, 0x56, 0xd2, 0x43,
	0x3b, 0x83, 0x14, 0x13, 0xc8, 0x6a, 0x4d, 0x19, 0x21, 0xb8, 0x94, 0x1e, 0x76, 0xd7, 0x6e, 0xd3,
	0xa6, 0x79, 0x79, 0x8f, 0xac, 0xba, 0xbd, 0x67, 0xf7, 0xd7, 0xf4, 0xd7, 0xf7, 0xa7, 0x87, 0x74,
	0xf6, 0xc9, 0x56, 0xec, 0xcf, 0x13, 0xb1, 0x12, 0x72, 0x5b, 0x4d, 0xe7, 0x5c, 0x9b, 0xcd, 0xb9,
	0xb6, 0x9c, 0x73, 0xf2, 0x18, 0x73, 0xf2, 0x12, 0x73, 0x32, 0x89, 0x39, 0x99, 0xc6, 0x9c, 0x7c,
	0xc6, 0x9c, 0x7c, 0xc5, 0x5c, 0x5b, 0xc6, 0x9c, 0x3c, 0x2f, 0xb8, 0x36, 0x5d, 0x70, 0x6d, 0xb6,
	0xe0, 0xda, 0xf5, 0x59, 0xcf, 0xc7, 0xfe, 0xf8, 0xc6, 0x70, 0x60, 0x68, 0xf6, 0x00, 0x7a, 0x4a,
	0x9a, 0xd9, 0x05, 0xfd, 0xfe, 0x38, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x9d, 0xa2, 0x9c, 0x08,
	0x39, 0x02, 0x00, 0x00,
}

func (this *RectToRenderDataCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RectToRenderDataCalculatorOptions)
	if !ok {
		that2, ok := that.(RectToRenderDataCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Filled != that1.Filled {
		return false
	}
	if !this.Color.Equal(that1.Color) {
		return false
	}
	if this.Thickness != nil && that1.Thickness != nil {
		if *this.Thickness != *that1.Thickness {
			return false
		}
	} else if this.Thickness != nil {
		return false
	} else if that1.Thickness != nil {
		return false
	}
	if this.Oval != nil && that1.Oval != nil {
		if *this.Oval != *that1.Oval {
			return false
		}
	} else if this.Oval != nil {
		return false
	} else if that1.Oval != nil {
		return false
	}
	if this.TopLeftThickness != that1.TopLeftThickness {
		return false
	}
	return true
}
func (this *RectToRenderDataCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&util.RectToRenderDataCalculatorOptions{")
	s = append(s, "Filled: "+fmt.Sprintf("%#v", this.Filled)+",\n")
	if this.Color != nil {
		s = append(s, "Color: "+fmt.Sprintf("%#v", this.Color)+",\n")
	}
	if this.Thickness != nil {
		s = append(s, "Thickness: "+valueToGoStringRectToRenderDataCalculator(this.Thickness, "float64")+",\n")
	}
	if this.Oval != nil {
		s = append(s, "Oval: "+valueToGoStringRectToRenderDataCalculator(this.Oval, "bool")+",\n")
	}
	s = append(s, "TopLeftThickness: "+fmt.Sprintf("%#v", this.TopLeftThickness)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRectToRenderDataCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RectToRenderDataCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RectToRenderDataCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RectToRenderDataCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TopLeftThickness))))
	i--
	dAtA[i] = 0x29
	if m.Oval != nil {
		i--
		if *m.Oval {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Thickness != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Thickness))))
		i--
		dAtA[i] = 0x19
	}
	if m.Color != nil {
		{
			size, err := m.Color.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRectToRenderDataCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i--
	if m.Filled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintRectToRenderDataCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovRectToRenderDataCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RectToRenderDataCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	if m.Color != nil {
		l = m.Color.Size()
		n += 1 + l + sovRectToRenderDataCalculator(uint64(l))
	}
	if m.Thickness != nil {
		n += 9
	}
	if m.Oval != nil {
		n += 2
	}
	n += 9
	return n
}

func sovRectToRenderDataCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRectToRenderDataCalculator(x uint64) (n int) {
	return sovRectToRenderDataCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RectToRenderDataCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RectToRenderDataCalculatorOptions{`,
		`Filled:` + fmt.Sprintf("%v", this.Filled) + `,`,
		`Color:` + strings.Replace(fmt.Sprintf("%v", this.Color), "Color", "util.Color", 1) + `,`,
		`Thickness:` + valueToStringRectToRenderDataCalculator(this.Thickness) + `,`,
		`Oval:` + valueToStringRectToRenderDataCalculator(this.Oval) + `,`,
		`TopLeftThickness:` + fmt.Sprintf("%v", this.TopLeftThickness) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRectToRenderDataCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RectToRenderDataCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRectToRenderDataCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RectToRenderDataCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RectToRenderDataCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRectToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Filled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRectToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRectToRenderDataCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRectToRenderDataCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Color == nil {
				m.Color = &util.Color{}
			}
			if err := m.Color.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thickness", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Thickness = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oval", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRectToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Oval = &b
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopLeftThickness", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TopLeftThickness = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRectToRenderDataCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRectToRenderDataCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRectToRenderDataCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRectToRenderDataCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRectToRenderDataCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRectToRenderDataCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRectToRenderDataCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRectToRenderDataCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRectToRenderDataCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRectToRenderDataCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRectToRenderDataCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRectToRenderDataCalculator = fmt.Errorf("proto: unexpected end of group")
)
