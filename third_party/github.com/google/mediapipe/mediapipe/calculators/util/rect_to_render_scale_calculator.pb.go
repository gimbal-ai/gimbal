// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/rect_to_render_scale_calculator.proto

package util

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RectToRenderScaleCalculatorOptions struct {
	Multiplier             *float32 `protobuf:"fixed32,1,opt,name=multiplier,def=0.01" json:"multiplier,omitempty"`
	ProcessTimestampBounds *bool    `protobuf:"varint,2,opt,name=process_timestamp_bounds,json=processTimestampBounds,def=0" json:"process_timestamp_bounds,omitempty"`
}

func (m *RectToRenderScaleCalculatorOptions) Reset()      { *m = RectToRenderScaleCalculatorOptions{} }
func (*RectToRenderScaleCalculatorOptions) ProtoMessage() {}
func (*RectToRenderScaleCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf815ed59226d16c, []int{0}
}
func (m *RectToRenderScaleCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RectToRenderScaleCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RectToRenderScaleCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RectToRenderScaleCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RectToRenderScaleCalculatorOptions.Merge(m, src)
}
func (m *RectToRenderScaleCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *RectToRenderScaleCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RectToRenderScaleCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RectToRenderScaleCalculatorOptions proto.InternalMessageInfo

const Default_RectToRenderScaleCalculatorOptions_Multiplier float32 = 0.01
const Default_RectToRenderScaleCalculatorOptions_ProcessTimestampBounds bool = false

func (m *RectToRenderScaleCalculatorOptions) GetMultiplier() float32 {
	if m != nil && m.Multiplier != nil {
		return *m.Multiplier
	}
	return Default_RectToRenderScaleCalculatorOptions_Multiplier
}

func (m *RectToRenderScaleCalculatorOptions) GetProcessTimestampBounds() bool {
	if m != nil && m.ProcessTimestampBounds != nil {
		return *m.ProcessTimestampBounds
	}
	return Default_RectToRenderScaleCalculatorOptions_ProcessTimestampBounds
}

var E_RectToRenderScaleCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*RectToRenderScaleCalculatorOptions)(nil),
	Field:         299463409,
	Name:          "mediapipe.RectToRenderScaleCalculatorOptions.ext",
	Tag:           "bytes,299463409,opt,name=ext",
	Filename:      "mediapipe/calculators/util/rect_to_render_scale_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_RectToRenderScaleCalculatorOptions_Ext)
	proto.RegisterType((*RectToRenderScaleCalculatorOptions)(nil), "mediapipe.RectToRenderScaleCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/rect_to_render_scale_calculator.proto", fileDescriptor_bf815ed59226d16c)
}

var fileDescriptor_bf815ed59226d16c = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xb1, 0x4a, 0x03, 0x31,
	0x18, 0x80, 0x2f, 0x55, 0x41, 0xcf, 0xed, 0x06, 0x39, 0x44, 0x7e, 0x4a, 0xe9, 0xd0, 0xc5, 0xbb,
	0xda, 0xc1, 0xa1, 0x8b, 0x52, 0x1f, 0x40, 0x38, 0x3b, 0xb9, 0x1c, 0x69, 0xfa, 0xb7, 0x06, 0x93,
	0x26, 0x24, 0x39, 0x74, 0xf4, 0x09, 0xc4, 0xc7, 0xf0, 0x51, 0x1c, 0x3b, 0x76, 0xb4, 0x29, 0x05,
	0x27, 0xa9, 0x6f, 0x20, 0x2d, 0xda, 0x2b, 0x8a, 0xb8, 0x86, 0x2f, 0x1f, 0xdf, 0xff, 0xff, 0xe1,
	0xb9, 0xc4, 0x3e, 0xa7, 0x9a, 0x6b, 0x4c, 0x19, 0x15, 0xac, 0x10, 0xd4, 0x29, 0x63, 0xd3, 0xc2,
	0x71, 0x91, 0x1a, 0x64, 0x2e, 0x77, 0x2a, 0x37, 0x38, 0xea, 0xa3, 0xc9, 0x2d, 0xa3, 0x02, 0xf3,
	0x92, 0x4a, 0xb4, 0x51, 0x4e, 0x45, 0x7b, 0x6b, 0xc3, 0x61, 0xbd, 0x94, 0x0d, 0x0c, 0x95, 0x78,
	0xa7, 0xcc, 0x6d, 0xfa, 0xf3, 0x43, 0xed, 0x9d, 0x84, 0xb5, 0x0c, 0x99, 0xeb, 0xaa, 0x6c, 0x25,
	0xbe, 0x5a, 0x7a, 0x2f, 0xd6, 0xd4, 0xa5, 0x76, 0x5c, 0x8d, 0x6c, 0x54, 0x0f, 0x43, 0x59, 0x08,
	0xc7, 0xb5, 0xe0, 0x68, 0x62, 0x52, 0x25, 0x8d, 0x4a, 0x7b, 0xbb, 0x99, 0x34, 0x4f, 0xb2, 0x8d,
	0xf7, 0xe8, 0x2c, 0x8c, 0xb5, 0x51, 0x0c, 0xad, 0xcd, 0x1d, 0x97, 0x68, 0x1d, 0x95, 0x3a, 0xef,
	0xa9, 0x62, 0xd4, 0xb7, 0x71, 0xa5, 0x4a, 0x1a, 0xbb, 0xed, 0x9d, 0x01, 0x15, 0x16, 0xb3, 0x83,
	0x2f, 0xac, 0xfb, 0x4d, 0x75, 0x56, 0x50, 0x8b, 0x86, 0x5b, 0x78, 0xef, 0xa2, 0xa3, 0x64, 0xdd,
	0x9e, 0xfc, 0x6a, 0x89, 0x3f, 0xe6, 0xf3, 0xc7, 0x65, 0xc1, 0x7e, 0xeb, 0x78, 0x83, 0xfb, 0x7f,
	0x88, 0x6c, 0xe9, 0xee, 0x88, 0xf1, 0x14, 0x82, 0xc9, 0x14, 0x82, 0xc5, 0x14, 0xc8, 0x83, 0x07,
	0xf2, 0xec, 0x81, 0xbc, 0x78, 0x20, 0x63, 0x0f, 0xe4, 0xd5, 0x03, 0x79, 0xf3, 0x10, 0x2c, 0x3c,
	0x90, 0xa7, 0x19, 0x04, 0xe3, 0x19, 0x04, 0x93, 0x19, 0x04, 0xd7, 0xa7, 0x43, 0xee, 0x6e, 0x8a,
	0x5e, 0xc2, 0x94, 0x4c, 0x87, 0x4a, 0x0d, 0x05, 0xa6, 0xe5, 0x7a, 0xff, 0xbe, 0xda, 0x67, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xdd, 0x68, 0x22, 0xe4, 0xd2, 0x01, 0x00, 0x00,
}

func (this *RectToRenderScaleCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RectToRenderScaleCalculatorOptions)
	if !ok {
		that2, ok := that.(RectToRenderScaleCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Multiplier != nil && that1.Multiplier != nil {
		if *this.Multiplier != *that1.Multiplier {
			return false
		}
	} else if this.Multiplier != nil {
		return false
	} else if that1.Multiplier != nil {
		return false
	}
	if this.ProcessTimestampBounds != nil && that1.ProcessTimestampBounds != nil {
		if *this.ProcessTimestampBounds != *that1.ProcessTimestampBounds {
			return false
		}
	} else if this.ProcessTimestampBounds != nil {
		return false
	} else if that1.ProcessTimestampBounds != nil {
		return false
	}
	return true
}
func (this *RectToRenderScaleCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&util.RectToRenderScaleCalculatorOptions{")
	if this.Multiplier != nil {
		s = append(s, "Multiplier: "+valueToGoStringRectToRenderScaleCalculator(this.Multiplier, "float32")+",\n")
	}
	if this.ProcessTimestampBounds != nil {
		s = append(s, "ProcessTimestampBounds: "+valueToGoStringRectToRenderScaleCalculator(this.ProcessTimestampBounds, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRectToRenderScaleCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RectToRenderScaleCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RectToRenderScaleCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RectToRenderScaleCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProcessTimestampBounds != nil {
		i--
		if *m.ProcessTimestampBounds {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Multiplier != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Multiplier))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func encodeVarintRectToRenderScaleCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovRectToRenderScaleCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RectToRenderScaleCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Multiplier != nil {
		n += 5
	}
	if m.ProcessTimestampBounds != nil {
		n += 2
	}
	return n
}

func sovRectToRenderScaleCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRectToRenderScaleCalculator(x uint64) (n int) {
	return sovRectToRenderScaleCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RectToRenderScaleCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RectToRenderScaleCalculatorOptions{`,
		`Multiplier:` + valueToStringRectToRenderScaleCalculator(this.Multiplier) + `,`,
		`ProcessTimestampBounds:` + valueToStringRectToRenderScaleCalculator(this.ProcessTimestampBounds) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRectToRenderScaleCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RectToRenderScaleCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRectToRenderScaleCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RectToRenderScaleCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RectToRenderScaleCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Multiplier = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessTimestampBounds", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRectToRenderScaleCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ProcessTimestampBounds = &b
		default:
			iNdEx = preIndex
			skippy, err := skipRectToRenderScaleCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRectToRenderScaleCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRectToRenderScaleCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRectToRenderScaleCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRectToRenderScaleCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRectToRenderScaleCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRectToRenderScaleCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRectToRenderScaleCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRectToRenderScaleCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRectToRenderScaleCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRectToRenderScaleCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRectToRenderScaleCalculator = fmt.Errorf("proto: unexpected end of group")
)
