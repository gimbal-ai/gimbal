// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/rect_transformation_calculator.proto

package util

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RectTransformationCalculatorOptions struct {
	ScaleX          *float32 `protobuf:"fixed32,1,opt,name=scale_x,json=scaleX,def=1" json:"scale_x,omitempty"`
	ScaleY          *float32 `protobuf:"fixed32,2,opt,name=scale_y,json=scaleY,def=1" json:"scale_y,omitempty"`
	Rotation        float32  `protobuf:"fixed32,3,opt,name=rotation" json:"rotation"`
	RotationDegrees int32    `protobuf:"varint,4,opt,name=rotation_degrees,json=rotationDegrees" json:"rotation_degrees"`
	ShiftX          float32  `protobuf:"fixed32,5,opt,name=shift_x,json=shiftX" json:"shift_x"`
	ShiftY          float32  `protobuf:"fixed32,6,opt,name=shift_y,json=shiftY" json:"shift_y"`
	SquareLong      bool     `protobuf:"varint,7,opt,name=square_long,json=squareLong" json:"square_long"`
	SquareShort     bool     `protobuf:"varint,8,opt,name=square_short,json=squareShort" json:"square_short"`
}

func (m *RectTransformationCalculatorOptions) Reset()      { *m = RectTransformationCalculatorOptions{} }
func (*RectTransformationCalculatorOptions) ProtoMessage() {}
func (*RectTransformationCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa98dd3fef634078, []int{0}
}
func (m *RectTransformationCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RectTransformationCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RectTransformationCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RectTransformationCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RectTransformationCalculatorOptions.Merge(m, src)
}
func (m *RectTransformationCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *RectTransformationCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RectTransformationCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RectTransformationCalculatorOptions proto.InternalMessageInfo

const Default_RectTransformationCalculatorOptions_ScaleX float32 = 1
const Default_RectTransformationCalculatorOptions_ScaleY float32 = 1

func (m *RectTransformationCalculatorOptions) GetScaleX() float32 {
	if m != nil && m.ScaleX != nil {
		return *m.ScaleX
	}
	return Default_RectTransformationCalculatorOptions_ScaleX
}

func (m *RectTransformationCalculatorOptions) GetScaleY() float32 {
	if m != nil && m.ScaleY != nil {
		return *m.ScaleY
	}
	return Default_RectTransformationCalculatorOptions_ScaleY
}

func (m *RectTransformationCalculatorOptions) GetRotation() float32 {
	if m != nil {
		return m.Rotation
	}
	return 0
}

func (m *RectTransformationCalculatorOptions) GetRotationDegrees() int32 {
	if m != nil {
		return m.RotationDegrees
	}
	return 0
}

func (m *RectTransformationCalculatorOptions) GetShiftX() float32 {
	if m != nil {
		return m.ShiftX
	}
	return 0
}

func (m *RectTransformationCalculatorOptions) GetShiftY() float32 {
	if m != nil {
		return m.ShiftY
	}
	return 0
}

func (m *RectTransformationCalculatorOptions) GetSquareLong() bool {
	if m != nil {
		return m.SquareLong
	}
	return false
}

func (m *RectTransformationCalculatorOptions) GetSquareShort() bool {
	if m != nil {
		return m.SquareShort
	}
	return false
}

var E_RectTransformationCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*RectTransformationCalculatorOptions)(nil),
	Field:         262226312,
	Name:          "mediapipe.RectTransformationCalculatorOptions.ext",
	Tag:           "bytes,262226312,opt,name=ext",
	Filename:      "mediapipe/calculators/util/rect_transformation_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_RectTransformationCalculatorOptions_Ext)
	proto.RegisterType((*RectTransformationCalculatorOptions)(nil), "mediapipe.RectTransformationCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/rect_transformation_calculator.proto", fileDescriptor_aa98dd3fef634078)
}

var fileDescriptor_aa98dd3fef634078 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x3d, 0x6b, 0xdb, 0x40,
	0x18, 0x80, 0x75, 0xfe, 0xee, 0xb9, 0xd0, 0x72, 0xd3, 0x61, 0xda, 0xab, 0xe8, 0x07, 0xd5, 0x24,
	0x51, 0x0f, 0x1d, 0xba, 0x14, 0xdc, 0x8e, 0x85, 0x82, 0xda, 0xc1, 0xee, 0x22, 0xae, 0xf2, 0x59,
	0x16, 0x95, 0x74, 0xea, 0xdd, 0x89, 0xda, 0x43, 0x21, 0x10, 0x02, 0x19, 0xf3, 0x17, 0xb2, 0xe5,
	0xa7, 0x78, 0xf4, 0xe8, 0x29, 0xc4, 0xf2, 0x92, 0xd1, 0x3f, 0x21, 0xc8, 0x96, 0x25, 0x3b, 0x26,
	0x90, 0x4d, 0x7a, 0x9f, 0xe7, 0x9e, 0xe1, 0xe5, 0x85, 0x9f, 0x43, 0x36, 0xf4, 0x69, 0xec, 0xc7,
	0xcc, 0x72, 0x69, 0xe0, 0x26, 0x01, 0x55, 0x5c, 0x48, 0x2b, 0x51, 0x7e, 0x60, 0x09, 0xe6, 0x2a,
	0x47, 0x09, 0x1a, 0xc9, 0x11, 0x17, 0x21, 0x55, 0x3e, 0x8f, 0x9c, 0x52, 0x32, 0x63, 0xc1, 0x15,
	0x47, 0x4f, 0x8a, 0x40, 0xe7, 0x6d, 0xd9, 0x1a, 0x09, 0x1a, 0xb2, 0x7f, 0x5c, 0xfc, 0xb1, 0xee,
	0x3f, 0x78, 0x7d, 0x59, 0x85, 0x6f, 0x6c, 0xe6, 0xaa, 0x9f, 0x07, 0xe1, 0x2f, 0x85, 0xf6, 0x3d,
	0xce, 0xfe, 0x25, 0xea, 0xc0, 0xa6, 0x74, 0x69, 0xc0, 0x9c, 0x09, 0x06, 0x3a, 0x30, 0x2a, 0x9f,
	0xc0, 0x07, 0xbb, 0xb1, 0x99, 0xf4, 0x4b, 0x36, 0xc5, 0x95, 0x43, 0x36, 0x40, 0x3a, 0x6c, 0x09,
	0xae, 0x36, 0x51, 0x5c, 0xcd, 0x60, 0xaf, 0x36, 0xbb, 0x7e, 0xa5, 0xd9, 0xc5, 0x14, 0x59, 0xf0,
	0xf9, 0xee, 0xdb, 0x19, 0x32, 0x4f, 0x30, 0x26, 0x71, 0x4d, 0x07, 0x46, 0x3d, 0x37, 0x9f, 0xed,
	0xe8, 0xd7, 0x2d, 0x44, 0x2f, 0x61, 0x53, 0x8e, 0xfd, 0x91, 0x72, 0x26, 0xb8, 0xbe, 0x57, 0x6c,
	0x6c, 0x86, 0xfd, 0x12, 0x4f, 0x71, 0xe3, 0x08, 0x0f, 0xd0, 0x3b, 0xd8, 0x96, 0x7f, 0x13, 0x2a,
	0x98, 0x13, 0xf0, 0xc8, 0xc3, 0x4d, 0x1d, 0x18, 0xad, 0x5c, 0x81, 0x5b, 0xf0, 0x8d, 0x47, 0x1e,
	0x7a, 0x0f, 0x9f, 0xe6, 0x9a, 0x1c, 0x73, 0xa1, 0x70, 0x6b, 0xcf, 0xcb, 0x03, 0x3f, 0x32, 0xd0,
	0xa5, 0xb0, 0xca, 0x26, 0x0a, 0xbd, 0x30, 0x8b, 0x75, 0x9b, 0x47, 0xdb, 0xc3, 0xe7, 0xa7, 0x67,
	0xff, 0x75, 0x60, 0xb4, 0xbb, 0xe6, 0x9e, 0xf6, 0x88, 0xb5, 0xdb, 0x59, 0xbb, 0x17, 0xcc, 0x97,
	0x44, 0x5b, 0x2c, 0x89, 0xb6, 0x5e, 0x12, 0x70, 0x92, 0x12, 0x70, 0x95, 0x12, 0x30, 0x4b, 0x09,
	0x98, 0xa7, 0x04, 0xdc, 0xa4, 0x04, 0xdc, 0xa6, 0x44, 0x5b, 0xa7, 0x04, 0x5c, 0xac, 0x88, 0x36,
	0x5f, 0x11, 0x6d, 0xb1, 0x22, 0xda, 0xaf, 0x8f, 0x9e, 0xaf, 0xc6, 0xc9, 0x6f, 0xd3, 0xe5, 0xa1,
	0xe5, 0x71, 0xee, 0x05, 0xcc, 0x2a, 0x2f, 0xe2, 0xe1, 0x3b, 0xbb, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0x47, 0x59, 0xc7, 0x62, 0x84, 0x02, 0x00, 0x00,
}

func (this *RectTransformationCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RectTransformationCalculatorOptions)
	if !ok {
		that2, ok := that.(RectTransformationCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ScaleX != nil && that1.ScaleX != nil {
		if *this.ScaleX != *that1.ScaleX {
			return false
		}
	} else if this.ScaleX != nil {
		return false
	} else if that1.ScaleX != nil {
		return false
	}
	if this.ScaleY != nil && that1.ScaleY != nil {
		if *this.ScaleY != *that1.ScaleY {
			return false
		}
	} else if this.ScaleY != nil {
		return false
	} else if that1.ScaleY != nil {
		return false
	}
	if this.Rotation != that1.Rotation {
		return false
	}
	if this.RotationDegrees != that1.RotationDegrees {
		return false
	}
	if this.ShiftX != that1.ShiftX {
		return false
	}
	if this.ShiftY != that1.ShiftY {
		return false
	}
	if this.SquareLong != that1.SquareLong {
		return false
	}
	if this.SquareShort != that1.SquareShort {
		return false
	}
	return true
}
func (this *RectTransformationCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&util.RectTransformationCalculatorOptions{")
	if this.ScaleX != nil {
		s = append(s, "ScaleX: "+valueToGoStringRectTransformationCalculator(this.ScaleX, "float32")+",\n")
	}
	if this.ScaleY != nil {
		s = append(s, "ScaleY: "+valueToGoStringRectTransformationCalculator(this.ScaleY, "float32")+",\n")
	}
	s = append(s, "Rotation: "+fmt.Sprintf("%#v", this.Rotation)+",\n")
	s = append(s, "RotationDegrees: "+fmt.Sprintf("%#v", this.RotationDegrees)+",\n")
	s = append(s, "ShiftX: "+fmt.Sprintf("%#v", this.ShiftX)+",\n")
	s = append(s, "ShiftY: "+fmt.Sprintf("%#v", this.ShiftY)+",\n")
	s = append(s, "SquareLong: "+fmt.Sprintf("%#v", this.SquareLong)+",\n")
	s = append(s, "SquareShort: "+fmt.Sprintf("%#v", this.SquareShort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRectTransformationCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RectTransformationCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RectTransformationCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RectTransformationCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.SquareShort {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x40
	i--
	if m.SquareLong {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ShiftY))))
	i--
	dAtA[i] = 0x35
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ShiftX))))
	i--
	dAtA[i] = 0x2d
	i = encodeVarintRectTransformationCalculator(dAtA, i, uint64(m.RotationDegrees))
	i--
	dAtA[i] = 0x20
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rotation))))
	i--
	dAtA[i] = 0x1d
	if m.ScaleY != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.ScaleY))))
		i--
		dAtA[i] = 0x15
	}
	if m.ScaleX != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.ScaleX))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func encodeVarintRectTransformationCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovRectTransformationCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RectTransformationCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScaleX != nil {
		n += 5
	}
	if m.ScaleY != nil {
		n += 5
	}
	n += 5
	n += 1 + sovRectTransformationCalculator(uint64(m.RotationDegrees))
	n += 5
	n += 5
	n += 2
	n += 2
	return n
}

func sovRectTransformationCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRectTransformationCalculator(x uint64) (n int) {
	return sovRectTransformationCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RectTransformationCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RectTransformationCalculatorOptions{`,
		`ScaleX:` + valueToStringRectTransformationCalculator(this.ScaleX) + `,`,
		`ScaleY:` + valueToStringRectTransformationCalculator(this.ScaleY) + `,`,
		`Rotation:` + fmt.Sprintf("%v", this.Rotation) + `,`,
		`RotationDegrees:` + fmt.Sprintf("%v", this.RotationDegrees) + `,`,
		`ShiftX:` + fmt.Sprintf("%v", this.ShiftX) + `,`,
		`ShiftY:` + fmt.Sprintf("%v", this.ShiftY) + `,`,
		`SquareLong:` + fmt.Sprintf("%v", this.SquareLong) + `,`,
		`SquareShort:` + fmt.Sprintf("%v", this.SquareShort) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRectTransformationCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RectTransformationCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRectTransformationCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RectTransformationCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RectTransformationCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.ScaleX = &v2
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.ScaleY = &v2
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotation", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rotation = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RotationDegrees", wireType)
			}
			m.RotationDegrees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRectTransformationCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RotationDegrees |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShiftX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ShiftX = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShiftY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ShiftY = float32(math.Float32frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquareLong", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRectTransformationCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SquareLong = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquareShort", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRectTransformationCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SquareShort = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRectTransformationCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRectTransformationCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRectTransformationCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRectTransformationCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRectTransformationCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRectTransformationCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRectTransformationCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRectTransformationCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRectTransformationCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRectTransformationCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRectTransformationCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRectTransformationCalculator = fmt.Errorf("proto: unexpected end of group")
)
