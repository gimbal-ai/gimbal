// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/refine_landmarks_from_heatmap_calculator.proto

package util

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RefineLandmarksFromHeatmapCalculatorOptions struct {
	KernelSize            *int32   `protobuf:"varint,1,opt,name=kernel_size,json=kernelSize,def=9" json:"kernel_size,omitempty"`
	MinConfidenceToRefine *float32 `protobuf:"fixed32,2,opt,name=min_confidence_to_refine,json=minConfidenceToRefine,def=0.5" json:"min_confidence_to_refine,omitempty"`
	RefinePresence        *bool    `protobuf:"varint,3,opt,name=refine_presence,json=refinePresence,def=0" json:"refine_presence,omitempty"`
	RefineVisibility      *bool    `protobuf:"varint,4,opt,name=refine_visibility,json=refineVisibility,def=0" json:"refine_visibility,omitempty"`
}

func (m *RefineLandmarksFromHeatmapCalculatorOptions) Reset() {
	*m = RefineLandmarksFromHeatmapCalculatorOptions{}
}
func (*RefineLandmarksFromHeatmapCalculatorOptions) ProtoMessage() {}
func (*RefineLandmarksFromHeatmapCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_a71ef25f8f24b582, []int{0}
}
func (m *RefineLandmarksFromHeatmapCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefineLandmarksFromHeatmapCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefineLandmarksFromHeatmapCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefineLandmarksFromHeatmapCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefineLandmarksFromHeatmapCalculatorOptions.Merge(m, src)
}
func (m *RefineLandmarksFromHeatmapCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *RefineLandmarksFromHeatmapCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RefineLandmarksFromHeatmapCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RefineLandmarksFromHeatmapCalculatorOptions proto.InternalMessageInfo

const Default_RefineLandmarksFromHeatmapCalculatorOptions_KernelSize int32 = 9
const Default_RefineLandmarksFromHeatmapCalculatorOptions_MinConfidenceToRefine float32 = 0.5
const Default_RefineLandmarksFromHeatmapCalculatorOptions_RefinePresence bool = false
const Default_RefineLandmarksFromHeatmapCalculatorOptions_RefineVisibility bool = false

func (m *RefineLandmarksFromHeatmapCalculatorOptions) GetKernelSize() int32 {
	if m != nil && m.KernelSize != nil {
		return *m.KernelSize
	}
	return Default_RefineLandmarksFromHeatmapCalculatorOptions_KernelSize
}

func (m *RefineLandmarksFromHeatmapCalculatorOptions) GetMinConfidenceToRefine() float32 {
	if m != nil && m.MinConfidenceToRefine != nil {
		return *m.MinConfidenceToRefine
	}
	return Default_RefineLandmarksFromHeatmapCalculatorOptions_MinConfidenceToRefine
}

func (m *RefineLandmarksFromHeatmapCalculatorOptions) GetRefinePresence() bool {
	if m != nil && m.RefinePresence != nil {
		return *m.RefinePresence
	}
	return Default_RefineLandmarksFromHeatmapCalculatorOptions_RefinePresence
}

func (m *RefineLandmarksFromHeatmapCalculatorOptions) GetRefineVisibility() bool {
	if m != nil && m.RefineVisibility != nil {
		return *m.RefineVisibility
	}
	return Default_RefineLandmarksFromHeatmapCalculatorOptions_RefineVisibility
}

var E_RefineLandmarksFromHeatmapCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*RefineLandmarksFromHeatmapCalculatorOptions)(nil),
	Field:         362281653,
	Name:          "mediapipe.RefineLandmarksFromHeatmapCalculatorOptions.ext",
	Tag:           "bytes,362281653,opt,name=ext",
	Filename:      "mediapipe/calculators/util/refine_landmarks_from_heatmap_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_RefineLandmarksFromHeatmapCalculatorOptions_Ext)
	proto.RegisterType((*RefineLandmarksFromHeatmapCalculatorOptions)(nil), "mediapipe.RefineLandmarksFromHeatmapCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/refine_landmarks_from_heatmap_calculator.proto", fileDescriptor_a71ef25f8f24b582)
}

var fileDescriptor_a71ef25f8f24b582 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xbb, 0x6a, 0x1b, 0x41,
	0x18, 0x85, 0x77, 0xa4, 0x08, 0x92, 0x11, 0xe4, 0xb2, 0x10, 0x58, 0x42, 0x18, 0x84, 0x48, 0x21,
	0x08, 0xec, 0x06, 0x41, 0x04, 0x11, 0xa9, 0x22, 0x08, 0x09, 0x04, 0x12, 0x36, 0xc6, 0x85, 0x9b,
	0x61, 0xb4, 0xfa, 0x57, 0x1a, 0x6b, 0x2e, 0xcb, 0xec, 0xc8, 0x17, 0x55, 0x7e, 0x04, 0x3f, 0x86,
	0x0b, 0xb7, 0x7e, 0x07, 0x97, 0x2a, 0xd5, 0xc9, 0x5a, 0x35, 0x2e, 0xd5, 0xb8, 0x37, 0xf2, 0xca,
	0x2b, 0x61, 0xe3, 0xc2, 0xed, 0x9c, 0xef, 0xff, 0xcf, 0x9c, 0x33, 0x83, 0x7f, 0x4b, 0xe8, 0x71,
	0x96, 0xf0, 0x04, 0x82, 0x88, 0x89, 0x68, 0x24, 0x98, 0xd5, 0x26, 0x0d, 0x46, 0x96, 0x8b, 0xc0,
	0x40, 0xcc, 0x15, 0x50, 0xc1, 0x54, 0x4f, 0x32, 0x33, 0x4c, 0x69, 0x6c, 0xb4, 0xa4, 0x03, 0x60,
	0x56, 0xb2, 0x84, 0x6e, 0x70, 0x3f, 0x31, 0xda, 0x6a, 0xf7, 0x55, 0xb1, 0xea, 0xc3, 0xa7, 0xcd,
	0xd6, 0xd8, 0x30, 0x09, 0x87, 0xda, 0x0c, 0x83, 0x87, 0x03, 0xf5, 0x59, 0x09, 0x7f, 0x0e, 0xef,
	0x3c, 0xfe, 0xdc, 0x5b, 0xfc, 0x34, 0x5a, 0xfe, 0xca, 0x0d, 0x3a, 0x05, 0xfe, 0x37, 0xb1, 0x5c,
	0xab, 0xd4, 0xad, 0xe3, 0xea, 0x10, 0x8c, 0x02, 0x41, 0x53, 0x3e, 0x06, 0x0f, 0xd5, 0x50, 0xa3,
	0xd2, 0x46, 0xdf, 0x42, 0x9c, 0x9f, 0xfe, 0xe7, 0x63, 0x70, 0xbf, 0x63, 0x4f, 0x72, 0x45, 0x23,
	0xad, 0x62, 0xde, 0x03, 0x15, 0x01, 0xb5, 0x9a, 0xe6, 0x41, 0xbc, 0x52, 0x0d, 0x35, 0x4a, 0xed,
	0xf2, 0x17, 0xff, 0x6b, 0xf8, 0x5e, 0x72, 0xd5, 0x29, 0x98, 0x1d, 0x9d, 0x5f, 0xc3, 0xf5, 0xf1,
	0x9b, 0x75, 0xe8, 0xc4, 0x40, 0xba, 0x92, 0xbc, 0x72, 0x0d, 0x35, 0x5e, 0xb6, 0x2b, 0x31, 0x13,
	0x29, 0x84, 0xaf, 0x73, 0xf5, 0xdf, 0x5a, 0x74, 0x9b, 0xf8, 0xdd, 0x9a, 0x3f, 0xe0, 0x29, 0xef,
	0x72, 0xc1, 0xed, 0xb1, 0xf7, 0x62, 0x7b, 0xe2, 0x6d, 0xae, 0xef, 0x16, 0x72, 0x73, 0x1f, 0x97,
	0xe1, 0xc8, 0xba, 0x1f, 0xfd, 0xa2, 0x23, 0xff, 0x51, 0x54, 0xef, 0xe2, 0x66, 0x76, 0xbe, 0xca,
	0x57, 0x6d, 0xb6, 0xb6, 0xb8, 0x67, 0x94, 0x15, 0xae, 0x4c, 0x7e, 0x88, 0xc9, 0x9c, 0x38, 0xd3,
	0x39, 0x71, 0x96, 0x73, 0x82, 0x4e, 0x32, 0x82, 0xce, 0x32, 0x82, 0x2e, 0x33, 0x82, 0x26, 0x19,
	0x41, 0x57, 0x19, 0x41, 0xd7, 0x19, 0x71, 0x96, 0x19, 0x41, 0xa7, 0x0b, 0xe2, 0x4c, 0x16, 0xc4,
	0x99, 0x2e, 0x88, 0xb3, 0xd7, 0xea, 0x73, 0x3b, 0x18, 0x75, 0xfd, 0x48, 0xcb, 0xa0, 0xaf, 0x75,
	0x5f, 0x40, 0xb0, 0x79, 0xcf, 0xa7, 0xff, 0xcb, 0x6d, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x69,
	0x4c, 0xf7, 0x4c, 0x02, 0x00, 0x00,
}

func (this *RefineLandmarksFromHeatmapCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RefineLandmarksFromHeatmapCalculatorOptions)
	if !ok {
		that2, ok := that.(RefineLandmarksFromHeatmapCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.KernelSize != nil && that1.KernelSize != nil {
		if *this.KernelSize != *that1.KernelSize {
			return false
		}
	} else if this.KernelSize != nil {
		return false
	} else if that1.KernelSize != nil {
		return false
	}
	if this.MinConfidenceToRefine != nil && that1.MinConfidenceToRefine != nil {
		if *this.MinConfidenceToRefine != *that1.MinConfidenceToRefine {
			return false
		}
	} else if this.MinConfidenceToRefine != nil {
		return false
	} else if that1.MinConfidenceToRefine != nil {
		return false
	}
	if this.RefinePresence != nil && that1.RefinePresence != nil {
		if *this.RefinePresence != *that1.RefinePresence {
			return false
		}
	} else if this.RefinePresence != nil {
		return false
	} else if that1.RefinePresence != nil {
		return false
	}
	if this.RefineVisibility != nil && that1.RefineVisibility != nil {
		if *this.RefineVisibility != *that1.RefineVisibility {
			return false
		}
	} else if this.RefineVisibility != nil {
		return false
	} else if that1.RefineVisibility != nil {
		return false
	}
	return true
}
func (this *RefineLandmarksFromHeatmapCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&util.RefineLandmarksFromHeatmapCalculatorOptions{")
	if this.KernelSize != nil {
		s = append(s, "KernelSize: "+valueToGoStringRefineLandmarksFromHeatmapCalculator(this.KernelSize, "int32")+",\n")
	}
	if this.MinConfidenceToRefine != nil {
		s = append(s, "MinConfidenceToRefine: "+valueToGoStringRefineLandmarksFromHeatmapCalculator(this.MinConfidenceToRefine, "float32")+",\n")
	}
	if this.RefinePresence != nil {
		s = append(s, "RefinePresence: "+valueToGoStringRefineLandmarksFromHeatmapCalculator(this.RefinePresence, "bool")+",\n")
	}
	if this.RefineVisibility != nil {
		s = append(s, "RefineVisibility: "+valueToGoStringRefineLandmarksFromHeatmapCalculator(this.RefineVisibility, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRefineLandmarksFromHeatmapCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RefineLandmarksFromHeatmapCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefineLandmarksFromHeatmapCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefineLandmarksFromHeatmapCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RefineVisibility != nil {
		i--
		if *m.RefineVisibility {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.RefinePresence != nil {
		i--
		if *m.RefinePresence {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MinConfidenceToRefine != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.MinConfidenceToRefine))))
		i--
		dAtA[i] = 0x15
	}
	if m.KernelSize != nil {
		i = encodeVarintRefineLandmarksFromHeatmapCalculator(dAtA, i, uint64(*m.KernelSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRefineLandmarksFromHeatmapCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovRefineLandmarksFromHeatmapCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RefineLandmarksFromHeatmapCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KernelSize != nil {
		n += 1 + sovRefineLandmarksFromHeatmapCalculator(uint64(*m.KernelSize))
	}
	if m.MinConfidenceToRefine != nil {
		n += 5
	}
	if m.RefinePresence != nil {
		n += 2
	}
	if m.RefineVisibility != nil {
		n += 2
	}
	return n
}

func sovRefineLandmarksFromHeatmapCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRefineLandmarksFromHeatmapCalculator(x uint64) (n int) {
	return sovRefineLandmarksFromHeatmapCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RefineLandmarksFromHeatmapCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RefineLandmarksFromHeatmapCalculatorOptions{`,
		`KernelSize:` + valueToStringRefineLandmarksFromHeatmapCalculator(this.KernelSize) + `,`,
		`MinConfidenceToRefine:` + valueToStringRefineLandmarksFromHeatmapCalculator(this.MinConfidenceToRefine) + `,`,
		`RefinePresence:` + valueToStringRefineLandmarksFromHeatmapCalculator(this.RefinePresence) + `,`,
		`RefineVisibility:` + valueToStringRefineLandmarksFromHeatmapCalculator(this.RefineVisibility) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRefineLandmarksFromHeatmapCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RefineLandmarksFromHeatmapCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRefineLandmarksFromHeatmapCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefineLandmarksFromHeatmapCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefineLandmarksFromHeatmapCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRefineLandmarksFromHeatmapCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KernelSize = &v
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinConfidenceToRefine", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.MinConfidenceToRefine = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefinePresence", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRefineLandmarksFromHeatmapCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.RefinePresence = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefineVisibility", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRefineLandmarksFromHeatmapCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.RefineVisibility = &b
		default:
			iNdEx = preIndex
			skippy, err := skipRefineLandmarksFromHeatmapCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRefineLandmarksFromHeatmapCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRefineLandmarksFromHeatmapCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRefineLandmarksFromHeatmapCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRefineLandmarksFromHeatmapCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRefineLandmarksFromHeatmapCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRefineLandmarksFromHeatmapCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRefineLandmarksFromHeatmapCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRefineLandmarksFromHeatmapCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRefineLandmarksFromHeatmapCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRefineLandmarksFromHeatmapCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRefineLandmarksFromHeatmapCalculator = fmt.Errorf("proto: unexpected end of group")
)
