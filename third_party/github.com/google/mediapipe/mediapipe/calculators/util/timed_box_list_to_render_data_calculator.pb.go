// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/timed_box_list_to_render_data_calculator.proto

package util

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	util "github.com/google/mediapipe/mediapipe/util"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TimedBoxListToRenderDataCalculatorOptions struct {
	BoxColor  *util.Color `protobuf:"bytes,1,opt,name=box_color,json=boxColor" json:"box_color,omitempty"`
	Thickness *float64    `protobuf:"fixed64,2,opt,name=thickness,def=1" json:"thickness,omitempty"`
}

func (m *TimedBoxListToRenderDataCalculatorOptions) Reset() {
	*m = TimedBoxListToRenderDataCalculatorOptions{}
}
func (*TimedBoxListToRenderDataCalculatorOptions) ProtoMessage() {}
func (*TimedBoxListToRenderDataCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_5854c0be1b1c3421, []int{0}
}
func (m *TimedBoxListToRenderDataCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimedBoxListToRenderDataCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimedBoxListToRenderDataCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimedBoxListToRenderDataCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimedBoxListToRenderDataCalculatorOptions.Merge(m, src)
}
func (m *TimedBoxListToRenderDataCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *TimedBoxListToRenderDataCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TimedBoxListToRenderDataCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TimedBoxListToRenderDataCalculatorOptions proto.InternalMessageInfo

const Default_TimedBoxListToRenderDataCalculatorOptions_Thickness float64 = 1

func (m *TimedBoxListToRenderDataCalculatorOptions) GetBoxColor() *util.Color {
	if m != nil {
		return m.BoxColor
	}
	return nil
}

func (m *TimedBoxListToRenderDataCalculatorOptions) GetThickness() float64 {
	if m != nil && m.Thickness != nil {
		return *m.Thickness
	}
	return Default_TimedBoxListToRenderDataCalculatorOptions_Thickness
}

var E_TimedBoxListToRenderDataCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*TimedBoxListToRenderDataCalculatorOptions)(nil),
	Field:         289899854,
	Name:          "mediapipe.TimedBoxListToRenderDataCalculatorOptions.ext",
	Tag:           "bytes,289899854,opt,name=ext",
	Filename:      "mediapipe/calculators/util/timed_box_list_to_render_data_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_TimedBoxListToRenderDataCalculatorOptions_Ext)
	proto.RegisterType((*TimedBoxListToRenderDataCalculatorOptions)(nil), "mediapipe.TimedBoxListToRenderDataCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/timed_box_list_to_render_data_calculator.proto", fileDescriptor_5854c0be1b1c3421)
}

var fileDescriptor_5854c0be1b1c3421 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x31, 0x4b, 0xc3, 0x40,
	0x14, 0xc7, 0xf3, 0x74, 0xb1, 0x71, 0x91, 0x4c, 0xa5, 0xc8, 0xb3, 0x88, 0x43, 0x1d, 0x4c, 0xb0,
	0x88, 0x83, 0x63, 0xeb, 0x22, 0x08, 0x42, 0xe8, 0xe4, 0x12, 0xae, 0xc9, 0xd9, 0x1e, 0xbd, 0xf4,
	0x85, 0xe4, 0x15, 0x33, 0x3a, 0x77, 0xf2, 0x13, 0x38, 0xfb, 0x51, 0x9c, 0xa4, 0x63, 0x47, 0x7b,
	0x45, 0x70, 0xec, 0x47, 0x90, 0x44, 0x6c, 0x4a, 0x41, 0x70, 0x3b, 0xde, 0xfd, 0xef, 0xf7, 0xfb,
	0x73, 0xcf, 0xbe, 0x89, 0x65, 0xa4, 0x44, 0xa2, 0x12, 0xe9, 0x85, 0x42, 0x87, 0x13, 0x2d, 0x98,
	0xd2, 0xcc, 0x9b, 0xb0, 0xd2, 0x1e, 0xab, 0x58, 0x46, 0x41, 0x9f, 0xf2, 0x40, 0xab, 0x8c, 0x03,
	0xa6, 0x20, 0x95, 0xe3, 0x48, 0xa6, 0x41, 0x24, 0x58, 0x04, 0x55, 0xdc, 0x4d, 0x52, 0x62, 0x72,
	0x6a, 0x6b, 0x54, 0xe3, 0xa4, 0xa2, 0x3e, 0xa4, 0x22, 0x96, 0x8f, 0x94, 0x8e, 0xbc, 0xed, 0x07,
	0x8d, 0x46, 0x95, 0x2a, 0x7d, 0x21, 0xe9, 0xdf, 0xbb, 0xe3, 0x4f, 0xb0, 0x4f, 0x7b, 0x85, 0xbf,
	0x43, 0xf9, 0xad, 0xca, 0xb8, 0x47, 0x7e, 0xe9, 0xbe, 0x16, 0x2c, 0xba, 0x6b, 0xd0, 0x5d, 0xc2,
	0x8a, 0xc6, 0x99, 0x73, 0x66, 0xd7, 0x8a, 0x9a, 0x25, 0xa0, 0x0e, 0x4d, 0x68, 0xed, 0xb7, 0x0f,
	0xdc, 0x35, 0xdd, 0xed, 0x16, 0x73, 0x7f, 0xaf, 0x4f, 0x79, 0x79, 0x72, 0x8e, 0xec, 0x1a, 0x0f,
	0x55, 0x38, 0x1a, 0xcb, 0x2c, 0xab, 0xef, 0x34, 0xa1, 0x05, 0x57, 0x70, 0xee, 0x57, 0xb3, 0xf6,
	0xd0, 0xde, 0x95, 0x39, 0x3b, 0x87, 0x9b, 0x8c, 0x6d, 0x69, 0xfd, 0x7d, 0xfa, 0x32, 0xfd, 0x71,
	0x5d, 0x6c, 0xe4, 0xfe, 0x5d, 0xda, 0x2f, 0x14, 0x1d, 0x3d, 0x5b, 0xa0, 0x35, 0x5f, 0xa0, 0xb5,
	0x5a, 0x20, 0x3c, 0x19, 0x84, 0x57, 0x83, 0xf0, 0x66, 0x10, 0x66, 0x06, 0xe1, 0xc3, 0x20, 0x7c,
	0x19, 0xb4, 0x56, 0x06, 0xe1, 0x79, 0x89, 0xd6, 0x6c, 0x89, 0xd6, 0x7c, 0x89, 0xd6, 0xfd, 0xe5,
	0x40, 0xf1, 0x70, 0xd2, 0x77, 0x43, 0x8a, 0xbd, 0x01, 0xd1, 0x40, 0x4b, 0xaf, 0xfa, 0xcb, 0xbf,
	0x37, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x67, 0x6e, 0x5d, 0x34, 0xee, 0x01, 0x00, 0x00,
}

func (this *TimedBoxListToRenderDataCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimedBoxListToRenderDataCalculatorOptions)
	if !ok {
		that2, ok := that.(TimedBoxListToRenderDataCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BoxColor.Equal(that1.BoxColor) {
		return false
	}
	if this.Thickness != nil && that1.Thickness != nil {
		if *this.Thickness != *that1.Thickness {
			return false
		}
	} else if this.Thickness != nil {
		return false
	} else if that1.Thickness != nil {
		return false
	}
	return true
}
func (this *TimedBoxListToRenderDataCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&util.TimedBoxListToRenderDataCalculatorOptions{")
	if this.BoxColor != nil {
		s = append(s, "BoxColor: "+fmt.Sprintf("%#v", this.BoxColor)+",\n")
	}
	if this.Thickness != nil {
		s = append(s, "Thickness: "+valueToGoStringTimedBoxListToRenderDataCalculator(this.Thickness, "float64")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTimedBoxListToRenderDataCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TimedBoxListToRenderDataCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimedBoxListToRenderDataCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimedBoxListToRenderDataCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Thickness != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Thickness))))
		i--
		dAtA[i] = 0x11
	}
	if m.BoxColor != nil {
		{
			size, err := m.BoxColor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTimedBoxListToRenderDataCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTimedBoxListToRenderDataCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovTimedBoxListToRenderDataCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TimedBoxListToRenderDataCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoxColor != nil {
		l = m.BoxColor.Size()
		n += 1 + l + sovTimedBoxListToRenderDataCalculator(uint64(l))
	}
	if m.Thickness != nil {
		n += 9
	}
	return n
}

func sovTimedBoxListToRenderDataCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTimedBoxListToRenderDataCalculator(x uint64) (n int) {
	return sovTimedBoxListToRenderDataCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TimedBoxListToRenderDataCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimedBoxListToRenderDataCalculatorOptions{`,
		`BoxColor:` + strings.Replace(fmt.Sprintf("%v", this.BoxColor), "Color", "util.Color", 1) + `,`,
		`Thickness:` + valueToStringTimedBoxListToRenderDataCalculator(this.Thickness) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTimedBoxListToRenderDataCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TimedBoxListToRenderDataCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimedBoxListToRenderDataCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimedBoxListToRenderDataCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimedBoxListToRenderDataCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxColor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimedBoxListToRenderDataCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimedBoxListToRenderDataCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimedBoxListToRenderDataCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BoxColor == nil {
				m.BoxColor = &util.Color{}
			}
			if err := m.BoxColor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thickness", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Thickness = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipTimedBoxListToRenderDataCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimedBoxListToRenderDataCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTimedBoxListToRenderDataCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTimedBoxListToRenderDataCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimedBoxListToRenderDataCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimedBoxListToRenderDataCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTimedBoxListToRenderDataCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTimedBoxListToRenderDataCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTimedBoxListToRenderDataCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTimedBoxListToRenderDataCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTimedBoxListToRenderDataCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTimedBoxListToRenderDataCalculator = fmt.Errorf("proto: unexpected end of group")
)
