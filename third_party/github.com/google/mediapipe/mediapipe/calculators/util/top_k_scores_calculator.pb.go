// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/top_k_scores_calculator.proto

package util

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TopKScoresCalculatorOptions struct {
	TopK         int32   `protobuf:"varint,1,opt,name=top_k,json=topK" json:"top_k"`
	Threshold    float32 `protobuf:"fixed32,2,opt,name=threshold" json:"threshold"`
	LabelMapPath string  `protobuf:"bytes,3,opt,name=label_map_path,json=labelMapPath" json:"label_map_path"`
}

func (m *TopKScoresCalculatorOptions) Reset()      { *m = TopKScoresCalculatorOptions{} }
func (*TopKScoresCalculatorOptions) ProtoMessage() {}
func (*TopKScoresCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c894048dd39246c9, []int{0}
}
func (m *TopKScoresCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopKScoresCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopKScoresCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopKScoresCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopKScoresCalculatorOptions.Merge(m, src)
}
func (m *TopKScoresCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *TopKScoresCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TopKScoresCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TopKScoresCalculatorOptions proto.InternalMessageInfo

func (m *TopKScoresCalculatorOptions) GetTopK() int32 {
	if m != nil {
		return m.TopK
	}
	return 0
}

func (m *TopKScoresCalculatorOptions) GetThreshold() float32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *TopKScoresCalculatorOptions) GetLabelMapPath() string {
	if m != nil {
		return m.LabelMapPath
	}
	return ""
}

var E_TopKScoresCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*TopKScoresCalculatorOptions)(nil),
	Field:         271211788,
	Name:          "mediapipe.TopKScoresCalculatorOptions.ext",
	Tag:           "bytes,271211788,opt,name=ext",
	Filename:      "mediapipe/calculators/util/top_k_scores_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_TopKScoresCalculatorOptions_Ext)
	proto.RegisterType((*TopKScoresCalculatorOptions)(nil), "mediapipe.TopKScoresCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/top_k_scores_calculator.proto", fileDescriptor_c894048dd39246c9)
}

var fileDescriptor_c894048dd39246c9 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xbd, 0x4e, 0x02, 0x41,
	0x14, 0x85, 0xe7, 0xf2, 0x53, 0xb0, 0x1a, 0x8b, 0xad, 0xd6, 0x9f, 0x5c, 0x09, 0x31, 0x86, 0x58,
	0xec, 0x26, 0x14, 0xc6, 0x1a, 0x4b, 0x62, 0x34, 0x68, 0x45, 0xb3, 0x19, 0x96, 0x91, 0xdd, 0x30,
	0xeb, 0x9d, 0xcc, 0x0e, 0xd1, 0x52, 0x7b, 0x0b, 0x1f, 0x43, 0x5f, 0xc1, 0x27, 0xa0, 0xa4, 0xa4,
	0x32, 0x32, 0x58, 0x58, 0xf2, 0x08, 0x06, 0x42, 0x58, 0xa3, 0xd1, 0x76, 0xbe, 0x73, 0xce, 0x9c,
	0x7b, 0xaf, 0x73, 0x92, 0x8a, 0x5e, 0xc2, 0x55, 0xa2, 0x44, 0x10, 0x71, 0x19, 0x0d, 0x25, 0x37,
	0xa4, 0xb3, 0x60, 0x68, 0x12, 0x19, 0x18, 0x52, 0xe1, 0x20, 0xcc, 0x22, 0xd2, 0x22, 0x0b, 0x73,
	0xea, 0x2b, 0x4d, 0x86, 0xdc, 0xca, 0xda, 0xb9, 0x73, 0x90, 0x87, 0x5c, 0x6b, 0x9e, 0x8a, 0x5b,
	0xd2, 0x83, 0xe0, 0xa7, 0xa1, 0xf6, 0x01, 0xce, 0xee, 0x15, 0xa9, 0xd6, 0xe5, 0x32, 0xf0, 0x74,
	0x8d, 0xcf, 0x95, 0x49, 0xe8, 0x26, 0x73, 0xb7, 0x9d, 0xf2, 0xf2, 0x47, 0x0f, 0xaa, 0x50, 0x2f,
	0x37, 0x4b, 0xa3, 0xb7, 0x7d, 0xd6, 0x2e, 0x19, 0x52, 0x2d, 0xb7, 0xe6, 0x54, 0x4c, 0xac, 0x45,
	0x16, 0x93, 0xec, 0x79, 0x85, 0x2a, 0xd4, 0x0b, 0x2b, 0x9c, 0x3f, 0xbb, 0x47, 0xce, 0x96, 0xe4,
	0x5d, 0x21, 0xc3, 0x94, 0xab, 0x50, 0x71, 0x13, 0x7b, 0xc5, 0x2a, 0xd4, 0x2b, 0x2b, 0xe1, 0xe6,
	0x92, 0x9d, 0x71, 0x75, 0xc1, 0x4d, 0xdc, 0xe8, 0x38, 0x45, 0x71, 0x67, 0xdc, 0x3d, 0x7f, 0x5d,
	0xdc, 0xff, 0xd5, 0xc7, 0x7b, 0x7c, 0x7d, 0x79, 0x58, 0x54, 0xd9, 0x68, 0x1c, 0x7e, 0xd3, 0xfd,
	0x33, 0x41, 0x7b, 0x11, 0xda, 0x94, 0xe3, 0x29, 0xb2, 0xc9, 0x14, 0xd9, 0x7c, 0x8a, 0x70, 0x6f,
	0x11, 0x9e, 0x2d, 0xc2, 0xc8, 0x22, 0x8c, 0x2d, 0xc2, 0xbb, 0x45, 0xf8, 0xb4, 0xc8, 0xe6, 0x16,
	0xe1, 0x69, 0x86, 0x6c, 0x3c, 0x43, 0x36, 0x99, 0x21, 0xeb, 0x1c, 0xf7, 0x13, 0x13, 0x0f, 0xbb,
	0x7e, 0x44, 0x69, 0xd0, 0x27, 0xea, 0x4b, 0x11, 0xe4, 0x4b, 0xfd, 0xfb, 0x46, 0x5f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x64, 0x41, 0x1e, 0x33, 0xc0, 0x01, 0x00, 0x00,
}

func (this *TopKScoresCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TopKScoresCalculatorOptions)
	if !ok {
		that2, ok := that.(TopKScoresCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopK != that1.TopK {
		return false
	}
	if this.Threshold != that1.Threshold {
		return false
	}
	if this.LabelMapPath != that1.LabelMapPath {
		return false
	}
	return true
}
func (this *TopKScoresCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&util.TopKScoresCalculatorOptions{")
	s = append(s, "TopK: "+fmt.Sprintf("%#v", this.TopK)+",\n")
	s = append(s, "Threshold: "+fmt.Sprintf("%#v", this.Threshold)+",\n")
	s = append(s, "LabelMapPath: "+fmt.Sprintf("%#v", this.LabelMapPath)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTopKScoresCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TopKScoresCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopKScoresCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopKScoresCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.LabelMapPath)
	copy(dAtA[i:], m.LabelMapPath)
	i = encodeVarintTopKScoresCalculator(dAtA, i, uint64(len(m.LabelMapPath)))
	i--
	dAtA[i] = 0x1a
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Threshold))))
	i--
	dAtA[i] = 0x15
	i = encodeVarintTopKScoresCalculator(dAtA, i, uint64(m.TopK))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintTopKScoresCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovTopKScoresCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TopKScoresCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTopKScoresCalculator(uint64(m.TopK))
	n += 5
	l = len(m.LabelMapPath)
	n += 1 + l + sovTopKScoresCalculator(uint64(l))
	return n
}

func sovTopKScoresCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTopKScoresCalculator(x uint64) (n int) {
	return sovTopKScoresCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TopKScoresCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TopKScoresCalculatorOptions{`,
		`TopK:` + fmt.Sprintf("%v", this.TopK) + `,`,
		`Threshold:` + fmt.Sprintf("%v", this.Threshold) + `,`,
		`LabelMapPath:` + fmt.Sprintf("%v", this.LabelMapPath) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTopKScoresCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TopKScoresCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopKScoresCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopKScoresCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopKScoresCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopK", wireType)
			}
			m.TopK = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopKScoresCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopK |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Threshold = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelMapPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopKScoresCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopKScoresCalculator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopKScoresCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelMapPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopKScoresCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTopKScoresCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTopKScoresCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTopKScoresCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopKScoresCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopKScoresCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTopKScoresCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTopKScoresCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTopKScoresCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTopKScoresCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTopKScoresCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTopKScoresCalculator = fmt.Errorf("proto: unexpected end of group")
)
