// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/visibility_copy_calculator.proto

package util

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VisibilityCopyCalculatorOptions struct {
	CopyVisibility *bool `protobuf:"varint,1,opt,name=copy_visibility,json=copyVisibility,def=1" json:"copy_visibility,omitempty"`
	CopyPresence   *bool `protobuf:"varint,2,opt,name=copy_presence,json=copyPresence,def=1" json:"copy_presence,omitempty"`
}

func (m *VisibilityCopyCalculatorOptions) Reset()      { *m = VisibilityCopyCalculatorOptions{} }
func (*VisibilityCopyCalculatorOptions) ProtoMessage() {}
func (*VisibilityCopyCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a3084e29667d1a1, []int{0}
}
func (m *VisibilityCopyCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VisibilityCopyCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VisibilityCopyCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VisibilityCopyCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VisibilityCopyCalculatorOptions.Merge(m, src)
}
func (m *VisibilityCopyCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *VisibilityCopyCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_VisibilityCopyCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_VisibilityCopyCalculatorOptions proto.InternalMessageInfo

const Default_VisibilityCopyCalculatorOptions_CopyVisibility bool = true
const Default_VisibilityCopyCalculatorOptions_CopyPresence bool = true

func (m *VisibilityCopyCalculatorOptions) GetCopyVisibility() bool {
	if m != nil && m.CopyVisibility != nil {
		return *m.CopyVisibility
	}
	return Default_VisibilityCopyCalculatorOptions_CopyVisibility
}

func (m *VisibilityCopyCalculatorOptions) GetCopyPresence() bool {
	if m != nil && m.CopyPresence != nil {
		return *m.CopyPresence
	}
	return Default_VisibilityCopyCalculatorOptions_CopyPresence
}

var E_VisibilityCopyCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*VisibilityCopyCalculatorOptions)(nil),
	Field:         363728421,
	Name:          "mediapipe.VisibilityCopyCalculatorOptions.ext",
	Tag:           "bytes,363728421,opt,name=ext",
	Filename:      "mediapipe/calculators/util/visibility_copy_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_VisibilityCopyCalculatorOptions_Ext)
	proto.RegisterType((*VisibilityCopyCalculatorOptions)(nil), "mediapipe.VisibilityCopyCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/visibility_copy_calculator.proto", fileDescriptor_9a3084e29667d1a1)
}

var fileDescriptor_9a3084e29667d1a1 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0xce, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f,
	0x2a, 0xd6, 0x2f, 0x2d, 0xc9, 0xcc, 0xd1, 0x2f, 0xcb, 0x2c, 0xce, 0x4c, 0xca, 0xcc, 0xc9, 0x2c,
	0xa9, 0x8c, 0x4f, 0xce, 0x2f, 0xa8, 0x8c, 0x47, 0x28, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x84, 0x6b, 0x96, 0xd2, 0x41, 0x98, 0x93, 0x56, 0x94, 0x98, 0x9b, 0x5a, 0x9e, 0x5f, 0x94,
	0x8d, 0x64, 0x62, 0x7c, 0x7e, 0x41, 0x49, 0x66, 0x7e, 0x5e, 0x31, 0x44, 0xa3, 0xd2, 0x6d, 0x46,
	0x2e, 0xf9, 0x30, 0xb8, 0xe9, 0xce, 0xf9, 0x05, 0x95, 0xce, 0x70, 0xa5, 0xfe, 0x10, 0x95, 0x42,
	0xba, 0x5c, 0xfc, 0x60, 0x5b, 0x11, 0xae, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0xb0, 0x62, 0x29,
	0x29, 0x2a, 0x4d, 0x0d, 0xe2, 0x03, 0x49, 0x22, 0xcc, 0x10, 0xd2, 0xe4, 0xe2, 0x05, 0x2b, 0x2f,
	0x28, 0x4a, 0x2d, 0x4e, 0xcd, 0x4b, 0x4e, 0x95, 0x60, 0x42, 0x52, 0xcc, 0x03, 0x92, 0x0a, 0x80,
	0xca, 0x18, 0xc5, 0x71, 0x31, 0xa7, 0x56, 0x94, 0x08, 0xc9, 0xe8, 0xc1, 0xdd, 0xac, 0x87, 0x61,
	0xbd, 0xc4, 0xd2, 0x39, 0x3b, 0xd6, 0x82, 0xec, 0xe3, 0x36, 0xd2, 0x42, 0x52, 0x47, 0xc0, 0xd1,
	0x41, 0x20, 0x83, 0x9d, 0x72, 0x2e, 0x3c, 0x94, 0x63, 0xb8, 0xf1, 0x50, 0x8e, 0xe1, 0xc3, 0x43,
	0x39, 0xc6, 0x86, 0x47, 0x72, 0x8c, 0x2b, 0x1e, 0xc9, 0x31, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1,
	0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x2f, 0x1e, 0xc9, 0x31, 0x7c, 0x78, 0x24, 0xc7, 0x38,
	0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x99, 0xa5, 0x67,
	0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xa7, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea,
	0x23, 0xc2, 0x14, 0x77, 0x2c, 0x01, 0x02, 0x00, 0x00, 0xff, 0xff, 0x52, 0xe0, 0xbb, 0xd0, 0xc2,
	0x01, 0x00, 0x00,
}

func (this *VisibilityCopyCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VisibilityCopyCalculatorOptions)
	if !ok {
		that2, ok := that.(VisibilityCopyCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CopyVisibility != nil && that1.CopyVisibility != nil {
		if *this.CopyVisibility != *that1.CopyVisibility {
			return false
		}
	} else if this.CopyVisibility != nil {
		return false
	} else if that1.CopyVisibility != nil {
		return false
	}
	if this.CopyPresence != nil && that1.CopyPresence != nil {
		if *this.CopyPresence != *that1.CopyPresence {
			return false
		}
	} else if this.CopyPresence != nil {
		return false
	} else if that1.CopyPresence != nil {
		return false
	}
	return true
}
func (this *VisibilityCopyCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&util.VisibilityCopyCalculatorOptions{")
	if this.CopyVisibility != nil {
		s = append(s, "CopyVisibility: "+valueToGoStringVisibilityCopyCalculator(this.CopyVisibility, "bool")+",\n")
	}
	if this.CopyPresence != nil {
		s = append(s, "CopyPresence: "+valueToGoStringVisibilityCopyCalculator(this.CopyPresence, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringVisibilityCopyCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *VisibilityCopyCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VisibilityCopyCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VisibilityCopyCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CopyPresence != nil {
		i--
		if *m.CopyPresence {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.CopyVisibility != nil {
		i--
		if *m.CopyVisibility {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVisibilityCopyCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovVisibilityCopyCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VisibilityCopyCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CopyVisibility != nil {
		n += 2
	}
	if m.CopyPresence != nil {
		n += 2
	}
	return n
}

func sovVisibilityCopyCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVisibilityCopyCalculator(x uint64) (n int) {
	return sovVisibilityCopyCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VisibilityCopyCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VisibilityCopyCalculatorOptions{`,
		`CopyVisibility:` + valueToStringVisibilityCopyCalculator(this.CopyVisibility) + `,`,
		`CopyPresence:` + valueToStringVisibilityCopyCalculator(this.CopyPresence) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringVisibilityCopyCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VisibilityCopyCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVisibilityCopyCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VisibilityCopyCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VisibilityCopyCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyVisibility", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVisibilityCopyCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CopyVisibility = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyPresence", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVisibilityCopyCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CopyPresence = &b
		default:
			iNdEx = preIndex
			skippy, err := skipVisibilityCopyCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVisibilityCopyCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVisibilityCopyCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVisibilityCopyCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVisibilityCopyCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVisibilityCopyCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVisibilityCopyCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVisibilityCopyCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVisibilityCopyCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVisibilityCopyCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVisibilityCopyCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVisibilityCopyCalculator = fmt.Errorf("proto: unexpected end of group")
)
