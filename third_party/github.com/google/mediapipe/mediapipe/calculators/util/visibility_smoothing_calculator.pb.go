// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/util/visibility_smoothing_calculator.proto

package util

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VisibilitySmoothingCalculatorOptions struct {
	// Types that are valid to be assigned to FilterOptions:
	//	*VisibilitySmoothingCalculatorOptions_NoFilter_
	//	*VisibilitySmoothingCalculatorOptions_LowPassFilter_
	FilterOptions isVisibilitySmoothingCalculatorOptions_FilterOptions `protobuf_oneof:"filter_options"`
}

func (m *VisibilitySmoothingCalculatorOptions) Reset()      { *m = VisibilitySmoothingCalculatorOptions{} }
func (*VisibilitySmoothingCalculatorOptions) ProtoMessage() {}
func (*VisibilitySmoothingCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc6dde99a92c7bc, []int{0}
}
func (m *VisibilitySmoothingCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VisibilitySmoothingCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VisibilitySmoothingCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VisibilitySmoothingCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VisibilitySmoothingCalculatorOptions.Merge(m, src)
}
func (m *VisibilitySmoothingCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *VisibilitySmoothingCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_VisibilitySmoothingCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_VisibilitySmoothingCalculatorOptions proto.InternalMessageInfo

type isVisibilitySmoothingCalculatorOptions_FilterOptions interface {
	isVisibilitySmoothingCalculatorOptions_FilterOptions()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VisibilitySmoothingCalculatorOptions_NoFilter_ struct {
	NoFilter *VisibilitySmoothingCalculatorOptions_NoFilter `protobuf:"bytes,1,opt,name=no_filter,json=noFilter,oneof" json:"no_filter,omitempty"`
}
type VisibilitySmoothingCalculatorOptions_LowPassFilter_ struct {
	LowPassFilter *VisibilitySmoothingCalculatorOptions_LowPassFilter `protobuf:"bytes,2,opt,name=low_pass_filter,json=lowPassFilter,oneof" json:"low_pass_filter,omitempty"`
}

func (*VisibilitySmoothingCalculatorOptions_NoFilter_) isVisibilitySmoothingCalculatorOptions_FilterOptions() {
}
func (*VisibilitySmoothingCalculatorOptions_LowPassFilter_) isVisibilitySmoothingCalculatorOptions_FilterOptions() {
}

func (m *VisibilitySmoothingCalculatorOptions) GetFilterOptions() isVisibilitySmoothingCalculatorOptions_FilterOptions {
	if m != nil {
		return m.FilterOptions
	}
	return nil
}

func (m *VisibilitySmoothingCalculatorOptions) GetNoFilter() *VisibilitySmoothingCalculatorOptions_NoFilter {
	if x, ok := m.GetFilterOptions().(*VisibilitySmoothingCalculatorOptions_NoFilter_); ok {
		return x.NoFilter
	}
	return nil
}

func (m *VisibilitySmoothingCalculatorOptions) GetLowPassFilter() *VisibilitySmoothingCalculatorOptions_LowPassFilter {
	if x, ok := m.GetFilterOptions().(*VisibilitySmoothingCalculatorOptions_LowPassFilter_); ok {
		return x.LowPassFilter
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VisibilitySmoothingCalculatorOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VisibilitySmoothingCalculatorOptions_NoFilter_)(nil),
		(*VisibilitySmoothingCalculatorOptions_LowPassFilter_)(nil),
	}
}

var E_VisibilitySmoothingCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*VisibilitySmoothingCalculatorOptions)(nil),
	Field:         360207350,
	Name:          "mediapipe.VisibilitySmoothingCalculatorOptions.ext",
	Tag:           "bytes,360207350,opt,name=ext",
	Filename:      "mediapipe/calculators/util/visibility_smoothing_calculator.proto",
}

type VisibilitySmoothingCalculatorOptions_NoFilter struct {
}

func (m *VisibilitySmoothingCalculatorOptions_NoFilter) Reset() {
	*m = VisibilitySmoothingCalculatorOptions_NoFilter{}
}
func (*VisibilitySmoothingCalculatorOptions_NoFilter) ProtoMessage() {}
func (*VisibilitySmoothingCalculatorOptions_NoFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc6dde99a92c7bc, []int{0, 0}
}
func (m *VisibilitySmoothingCalculatorOptions_NoFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VisibilitySmoothingCalculatorOptions_NoFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VisibilitySmoothingCalculatorOptions_NoFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VisibilitySmoothingCalculatorOptions_NoFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VisibilitySmoothingCalculatorOptions_NoFilter.Merge(m, src)
}
func (m *VisibilitySmoothingCalculatorOptions_NoFilter) XXX_Size() int {
	return m.Size()
}
func (m *VisibilitySmoothingCalculatorOptions_NoFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_VisibilitySmoothingCalculatorOptions_NoFilter.DiscardUnknown(m)
}

var xxx_messageInfo_VisibilitySmoothingCalculatorOptions_NoFilter proto.InternalMessageInfo

type VisibilitySmoothingCalculatorOptions_LowPassFilter struct {
	Alpha *float32 `protobuf:"fixed32,1,opt,name=alpha,def=0.1" json:"alpha,omitempty"`
}

func (m *VisibilitySmoothingCalculatorOptions_LowPassFilter) Reset() {
	*m = VisibilitySmoothingCalculatorOptions_LowPassFilter{}
}
func (*VisibilitySmoothingCalculatorOptions_LowPassFilter) ProtoMessage() {}
func (*VisibilitySmoothingCalculatorOptions_LowPassFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc6dde99a92c7bc, []int{0, 1}
}
func (m *VisibilitySmoothingCalculatorOptions_LowPassFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VisibilitySmoothingCalculatorOptions_LowPassFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VisibilitySmoothingCalculatorOptions_LowPassFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VisibilitySmoothingCalculatorOptions_LowPassFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VisibilitySmoothingCalculatorOptions_LowPassFilter.Merge(m, src)
}
func (m *VisibilitySmoothingCalculatorOptions_LowPassFilter) XXX_Size() int {
	return m.Size()
}
func (m *VisibilitySmoothingCalculatorOptions_LowPassFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_VisibilitySmoothingCalculatorOptions_LowPassFilter.DiscardUnknown(m)
}

var xxx_messageInfo_VisibilitySmoothingCalculatorOptions_LowPassFilter proto.InternalMessageInfo

const Default_VisibilitySmoothingCalculatorOptions_LowPassFilter_Alpha float32 = 0.1

func (m *VisibilitySmoothingCalculatorOptions_LowPassFilter) GetAlpha() float32 {
	if m != nil && m.Alpha != nil {
		return *m.Alpha
	}
	return Default_VisibilitySmoothingCalculatorOptions_LowPassFilter_Alpha
}

func init() {
	proto.RegisterExtension(E_VisibilitySmoothingCalculatorOptions_Ext)
	proto.RegisterType((*VisibilitySmoothingCalculatorOptions)(nil), "mediapipe.VisibilitySmoothingCalculatorOptions")
	proto.RegisterType((*VisibilitySmoothingCalculatorOptions_NoFilter)(nil), "mediapipe.VisibilitySmoothingCalculatorOptions.NoFilter")
	proto.RegisterType((*VisibilitySmoothingCalculatorOptions_LowPassFilter)(nil), "mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/util/visibility_smoothing_calculator.proto", fileDescriptor_bfc6dde99a92c7bc)
}

var fileDescriptor_bfc6dde99a92c7bc = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0xc8, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f,
	0x2a, 0xd6, 0x2f, 0x2d, 0xc9, 0xcc, 0xd1, 0x2f, 0xcb, 0x2c, 0xce, 0x4c, 0xca, 0xcc, 0xc9, 0x2c,
	0xa9, 0x8c, 0x2f, 0xce, 0xcd, 0xcf, 0x2f, 0xc9, 0xc8, 0xcc, 0x4b, 0x8f, 0x47, 0xa8, 0xd2, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x9b, 0x20, 0xa5, 0x83, 0x30, 0x2c, 0xad, 0x28, 0x31,
	0x37, 0xb5, 0x3c, 0xbf, 0x28, 0x1b, 0xc9, 0xd8, 0xf8, 0xfc, 0x82, 0x92, 0xcc, 0xfc, 0xbc, 0x62,
	0x88, 0x46, 0xa5, 0xe9, 0xcc, 0x5c, 0x2a, 0x61, 0x70, 0x2b, 0x82, 0x61, 0x36, 0x38, 0xc3, 0xd5,
	0xfb, 0x43, 0x94, 0x0b, 0x85, 0x73, 0x71, 0xe6, 0xe5, 0xc7, 0xa7, 0x65, 0xe6, 0x94, 0xa4, 0x16,
	0x49, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0x59, 0xe8, 0xc1, 0xad, 0xd2, 0x23, 0xc6, 0x0c, 0x3d,
	0xbf, 0x7c, 0x37, 0xb0, 0x7e, 0x0f, 0x86, 0x20, 0x8e, 0x3c, 0x28, 0x5b, 0x28, 0x9d, 0x8b, 0x3f,
	0x27, 0xbf, 0x3c, 0xbe, 0x20, 0xb1, 0xb8, 0x18, 0x66, 0x3c, 0x13, 0xd8, 0x78, 0x5b, 0x52, 0x8d,
	0xf7, 0xc9, 0x2f, 0x0f, 0x48, 0x2c, 0x2e, 0x86, 0xdb, 0xc1, 0x9b, 0x83, 0x2c, 0x20, 0xc5, 0xc5,
	0xc5, 0x01, 0x73, 0x80, 0x94, 0x16, 0x17, 0x2f, 0x8a, 0x6a, 0x21, 0x49, 0x2e, 0xd6, 0xc4, 0x9c,
	0x82, 0x8c, 0x44, 0xb0, 0xd7, 0x98, 0xac, 0x98, 0x0d, 0xf4, 0x0c, 0x83, 0x20, 0x22, 0x46, 0xc9,
	0x5c, 0xcc, 0xa9, 0x15, 0x25, 0x42, 0x32, 0x48, 0xce, 0xc1, 0xb0, 0x5b, 0xe2, 0xdb, 0xf2, 0x87,
	0xab, 0x21, 0xa1, 0xa2, 0x4f, 0xa2, 0xb3, 0x83, 0x40, 0xa6, 0x3b, 0x09, 0x70, 0xf1, 0x41, 0x3c,
	0x0f, 0x8b, 0x1f, 0xa7, 0x9c, 0x0b, 0x0f, 0xe5, 0x18, 0x6e, 0x3c, 0x94, 0x63, 0xf8, 0xf0, 0x50,
	0x8e, 0xb1, 0xe1, 0x91, 0x1c, 0xe3, 0x8a, 0x47, 0x72, 0x8c, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78,
	0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8b, 0x47, 0x72, 0x0c, 0x1f, 0x1e, 0xc9, 0x31, 0x4e,
	0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x66, 0xe9, 0x99,
	0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa,
	0x88, 0xf4, 0x80, 0x3b, 0x99, 0x01, 0x02, 0x00, 0x00, 0xff, 0xff, 0x44, 0x83, 0xd9, 0xa2, 0x83,
	0x02, 0x00, 0x00,
}

func (this *VisibilitySmoothingCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VisibilitySmoothingCalculatorOptions)
	if !ok {
		that2, ok := that.(VisibilitySmoothingCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.FilterOptions == nil {
		if this.FilterOptions != nil {
			return false
		}
	} else if this.FilterOptions == nil {
		return false
	} else if !this.FilterOptions.Equal(that1.FilterOptions) {
		return false
	}
	return true
}
func (this *VisibilitySmoothingCalculatorOptions_NoFilter_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VisibilitySmoothingCalculatorOptions_NoFilter_)
	if !ok {
		that2, ok := that.(VisibilitySmoothingCalculatorOptions_NoFilter_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoFilter.Equal(that1.NoFilter) {
		return false
	}
	return true
}
func (this *VisibilitySmoothingCalculatorOptions_LowPassFilter_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VisibilitySmoothingCalculatorOptions_LowPassFilter_)
	if !ok {
		that2, ok := that.(VisibilitySmoothingCalculatorOptions_LowPassFilter_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LowPassFilter.Equal(that1.LowPassFilter) {
		return false
	}
	return true
}
func (this *VisibilitySmoothingCalculatorOptions_NoFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VisibilitySmoothingCalculatorOptions_NoFilter)
	if !ok {
		that2, ok := that.(VisibilitySmoothingCalculatorOptions_NoFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *VisibilitySmoothingCalculatorOptions_LowPassFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VisibilitySmoothingCalculatorOptions_LowPassFilter)
	if !ok {
		that2, ok := that.(VisibilitySmoothingCalculatorOptions_LowPassFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Alpha != nil && that1.Alpha != nil {
		if *this.Alpha != *that1.Alpha {
			return false
		}
	} else if this.Alpha != nil {
		return false
	} else if that1.Alpha != nil {
		return false
	}
	return true
}
func (this *VisibilitySmoothingCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&util.VisibilitySmoothingCalculatorOptions{")
	if this.FilterOptions != nil {
		s = append(s, "FilterOptions: "+fmt.Sprintf("%#v", this.FilterOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VisibilitySmoothingCalculatorOptions_NoFilter_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.VisibilitySmoothingCalculatorOptions_NoFilter_{` +
		`NoFilter:` + fmt.Sprintf("%#v", this.NoFilter) + `}`}, ", ")
	return s
}
func (this *VisibilitySmoothingCalculatorOptions_LowPassFilter_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.VisibilitySmoothingCalculatorOptions_LowPassFilter_{` +
		`LowPassFilter:` + fmt.Sprintf("%#v", this.LowPassFilter) + `}`}, ", ")
	return s
}
func (this *VisibilitySmoothingCalculatorOptions_NoFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&util.VisibilitySmoothingCalculatorOptions_NoFilter{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VisibilitySmoothingCalculatorOptions_LowPassFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&util.VisibilitySmoothingCalculatorOptions_LowPassFilter{")
	if this.Alpha != nil {
		s = append(s, "Alpha: "+valueToGoStringVisibilitySmoothingCalculator(this.Alpha, "float32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringVisibilitySmoothingCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *VisibilitySmoothingCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VisibilitySmoothingCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VisibilitySmoothingCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FilterOptions != nil {
		{
			size := m.FilterOptions.Size()
			i -= size
			if _, err := m.FilterOptions.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *VisibilitySmoothingCalculatorOptions_NoFilter_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VisibilitySmoothingCalculatorOptions_NoFilter_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoFilter != nil {
		{
			size, err := m.NoFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVisibilitySmoothingCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *VisibilitySmoothingCalculatorOptions_LowPassFilter_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VisibilitySmoothingCalculatorOptions_LowPassFilter_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LowPassFilter != nil {
		{
			size, err := m.LowPassFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVisibilitySmoothingCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *VisibilitySmoothingCalculatorOptions_NoFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VisibilitySmoothingCalculatorOptions_NoFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VisibilitySmoothingCalculatorOptions_NoFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *VisibilitySmoothingCalculatorOptions_LowPassFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VisibilitySmoothingCalculatorOptions_LowPassFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VisibilitySmoothingCalculatorOptions_LowPassFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Alpha != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Alpha))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func encodeVarintVisibilitySmoothingCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovVisibilitySmoothingCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VisibilitySmoothingCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FilterOptions != nil {
		n += m.FilterOptions.Size()
	}
	return n
}

func (m *VisibilitySmoothingCalculatorOptions_NoFilter_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoFilter != nil {
		l = m.NoFilter.Size()
		n += 1 + l + sovVisibilitySmoothingCalculator(uint64(l))
	}
	return n
}
func (m *VisibilitySmoothingCalculatorOptions_LowPassFilter_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LowPassFilter != nil {
		l = m.LowPassFilter.Size()
		n += 1 + l + sovVisibilitySmoothingCalculator(uint64(l))
	}
	return n
}
func (m *VisibilitySmoothingCalculatorOptions_NoFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VisibilitySmoothingCalculatorOptions_LowPassFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Alpha != nil {
		n += 5
	}
	return n
}

func sovVisibilitySmoothingCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVisibilitySmoothingCalculator(x uint64) (n int) {
	return sovVisibilitySmoothingCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VisibilitySmoothingCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VisibilitySmoothingCalculatorOptions{`,
		`FilterOptions:` + fmt.Sprintf("%v", this.FilterOptions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VisibilitySmoothingCalculatorOptions_NoFilter_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VisibilitySmoothingCalculatorOptions_NoFilter_{`,
		`NoFilter:` + strings.Replace(fmt.Sprintf("%v", this.NoFilter), "VisibilitySmoothingCalculatorOptions_NoFilter", "VisibilitySmoothingCalculatorOptions_NoFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VisibilitySmoothingCalculatorOptions_LowPassFilter_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VisibilitySmoothingCalculatorOptions_LowPassFilter_{`,
		`LowPassFilter:` + strings.Replace(fmt.Sprintf("%v", this.LowPassFilter), "VisibilitySmoothingCalculatorOptions_LowPassFilter", "VisibilitySmoothingCalculatorOptions_LowPassFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VisibilitySmoothingCalculatorOptions_NoFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VisibilitySmoothingCalculatorOptions_NoFilter{`,
		`}`,
	}, "")
	return s
}
func (this *VisibilitySmoothingCalculatorOptions_LowPassFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VisibilitySmoothingCalculatorOptions_LowPassFilter{`,
		`Alpha:` + valueToStringVisibilitySmoothingCalculator(this.Alpha) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringVisibilitySmoothingCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VisibilitySmoothingCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVisibilitySmoothingCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VisibilitySmoothingCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VisibilitySmoothingCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVisibilitySmoothingCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVisibilitySmoothingCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVisibilitySmoothingCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VisibilitySmoothingCalculatorOptions_NoFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterOptions = &VisibilitySmoothingCalculatorOptions_NoFilter_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowPassFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVisibilitySmoothingCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVisibilitySmoothingCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVisibilitySmoothingCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VisibilitySmoothingCalculatorOptions_LowPassFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterOptions = &VisibilitySmoothingCalculatorOptions_LowPassFilter_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVisibilitySmoothingCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVisibilitySmoothingCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VisibilitySmoothingCalculatorOptions_NoFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVisibilitySmoothingCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipVisibilitySmoothingCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVisibilitySmoothingCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VisibilitySmoothingCalculatorOptions_LowPassFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVisibilitySmoothingCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LowPassFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LowPassFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alpha", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Alpha = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipVisibilitySmoothingCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVisibilitySmoothingCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVisibilitySmoothingCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVisibilitySmoothingCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVisibilitySmoothingCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVisibilitySmoothingCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVisibilitySmoothingCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVisibilitySmoothingCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVisibilitySmoothingCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVisibilitySmoothingCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVisibilitySmoothingCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVisibilitySmoothingCalculator = fmt.Errorf("proto: unexpected end of group")
)
