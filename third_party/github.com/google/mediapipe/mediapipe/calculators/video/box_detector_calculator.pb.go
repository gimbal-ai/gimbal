// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/video/box_detector_calculator.proto

package video

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	tracking "github.com/google/mediapipe/mediapipe/util/tracking"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BoxDetectorCalculatorOptions struct {
	DetectorOptions    *tracking.BoxDetectorOptions `protobuf:"bytes,1,opt,name=detector_options,json=detectorOptions" json:"detector_options,omitempty"`
	IndexProtoFilename []string                     `protobuf:"bytes,2,rep,name=index_proto_filename,json=indexProtoFilename" json:"index_proto_filename,omitempty"`
}

func (m *BoxDetectorCalculatorOptions) Reset()      { *m = BoxDetectorCalculatorOptions{} }
func (*BoxDetectorCalculatorOptions) ProtoMessage() {}
func (*BoxDetectorCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d7747c3703b299c, []int{0}
}
func (m *BoxDetectorCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoxDetectorCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoxDetectorCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoxDetectorCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoxDetectorCalculatorOptions.Merge(m, src)
}
func (m *BoxDetectorCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *BoxDetectorCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BoxDetectorCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BoxDetectorCalculatorOptions proto.InternalMessageInfo

func (m *BoxDetectorCalculatorOptions) GetDetectorOptions() *tracking.BoxDetectorOptions {
	if m != nil {
		return m.DetectorOptions
	}
	return nil
}

func (m *BoxDetectorCalculatorOptions) GetIndexProtoFilename() []string {
	if m != nil {
		return m.IndexProtoFilename
	}
	return nil
}

var E_BoxDetectorCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*BoxDetectorCalculatorOptions)(nil),
	Field:         289746530,
	Name:          "mediapipe.BoxDetectorCalculatorOptions.ext",
	Tag:           "bytes,289746530,opt,name=ext",
	Filename:      "mediapipe/calculators/video/box_detector_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_BoxDetectorCalculatorOptions_Ext)
	proto.RegisterType((*BoxDetectorCalculatorOptions)(nil), "mediapipe.BoxDetectorCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/video/box_detector_calculator.proto", fileDescriptor_5d7747c3703b299c)
}

var fileDescriptor_5d7747c3703b299c = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xb1, 0x4f, 0xc2, 0x40,
	0x18, 0xc5, 0xef, 0x64, 0xa2, 0x0e, 0x9a, 0xc6, 0x81, 0x10, 0xfc, 0x42, 0x8c, 0x89, 0xc4, 0xa1,
	0x67, 0x58, 0x8c, 0x2b, 0x1a, 0xe3, 0xa6, 0x61, 0xd4, 0xa1, 0x39, 0xda, 0xa3, 0x5e, 0x68, 0xfb,
	0x35, 0xc7, 0xa1, 0x1d, 0x9d, 0x9d, 0x1c, 0xfc, 0x23, 0xfc, 0x53, 0x1c, 0x19, 0x19, 0x1c, 0xe4,
	0x58, 0x1c, 0xd9, 0x5c, 0x0d, 0xb4, 0x69, 0x41, 0x8c, 0xeb, 0x7b, 0xdf, 0x7b, 0xef, 0x97, 0x3b,
	0xeb, 0x2c, 0x12, 0xbe, 0xe4, 0x89, 0x4c, 0x04, 0xf3, 0x78, 0xe8, 0x8d, 0x42, 0xae, 0x51, 0x0d,
	0xd9, 0x83, 0xf4, 0x05, 0xb2, 0x1e, 0xa6, 0xae, 0x2f, 0xb4, 0xf0, 0x34, 0x2a, 0xb7, 0xb4, 0x9d,
	0x44, 0xa1, 0x46, 0xbb, 0x5a, 0x44, 0xeb, 0x87, 0x65, 0x4b, 0x5f, 0xf1, 0x48, 0x3c, 0xa2, 0x1a,
	0xb0, 0xdf, 0x81, 0xfa, 0x71, 0x79, 0x35, 0xd2, 0x32, 0x64, 0x5a, 0x71, 0x6f, 0x20, 0xe3, 0x60,
	0x6d, 0x27, 0xbb, 0x3d, 0xf8, 0xa6, 0x56, 0xa3, 0x83, 0xe9, 0x45, 0xae, 0x9e, 0x17, 0x5d, 0xd7,
	0x89, 0x96, 0x18, 0x0f, 0xed, 0x2b, 0x6b, 0xb7, 0x40, 0xc3, 0x4c, 0xab, 0xd1, 0x26, 0x6d, 0x6d,
	0xb7, 0xf7, 0x9d, 0x62, 0xc7, 0x59, 0xa9, 0xc8, 0x83, 0xdd, 0x1d, 0x7f, 0x5d, 0xb0, 0x4f, 0xac,
	0x3d, 0x19, 0xfb, 0x22, 0x75, 0x97, 0xcb, 0x6e, 0x5f, 0x86, 0x22, 0xe6, 0x91, 0xa8, 0x6d, 0x35,
	0x2b, 0xad, 0x6a, 0xd7, 0x5e, 0x7a, 0x37, 0x0b, 0xeb, 0x32, 0x77, 0xda, 0x77, 0x56, 0x45, 0xa4,
	0xda, 0x6e, 0xac, 0x0c, 0x6d, 0x00, 0xd6, 0xcc, 0xc7, 0xeb, 0x73, 0x06, 0x74, 0xf4, 0x37, 0xd0,
	0x46, 0xa4, 0xbb, 0x68, 0xed, 0x44, 0xe3, 0x29, 0x90, 0xc9, 0x14, 0xc8, 0x7c, 0x0a, 0xf4, 0xc9,
	0x00, 0x7d, 0x33, 0x40, 0xdf, 0x0d, 0xd0, 0xb1, 0x01, 0xfa, 0x69, 0x80, 0x7e, 0x19, 0x20, 0x73,
	0x03, 0xf4, 0x65, 0x06, 0x64, 0x3c, 0x03, 0x32, 0x99, 0x01, 0xb9, 0x3d, 0x0d, 0xa4, 0xbe, 0x1f,
	0xf5, 0x1c, 0x0f, 0x23, 0x16, 0x20, 0x06, 0xa1, 0x60, 0xe5, 0x6b, 0xff, 0xf3, 0xc7, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xed, 0xe4, 0x26, 0x70, 0x01, 0x02, 0x00, 0x00,
}

func (this *BoxDetectorCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BoxDetectorCalculatorOptions)
	if !ok {
		that2, ok := that.(BoxDetectorCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DetectorOptions.Equal(that1.DetectorOptions) {
		return false
	}
	if len(this.IndexProtoFilename) != len(that1.IndexProtoFilename) {
		return false
	}
	for i := range this.IndexProtoFilename {
		if this.IndexProtoFilename[i] != that1.IndexProtoFilename[i] {
			return false
		}
	}
	return true
}
func (this *BoxDetectorCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&video.BoxDetectorCalculatorOptions{")
	if this.DetectorOptions != nil {
		s = append(s, "DetectorOptions: "+fmt.Sprintf("%#v", this.DetectorOptions)+",\n")
	}
	if this.IndexProtoFilename != nil {
		s = append(s, "IndexProtoFilename: "+fmt.Sprintf("%#v", this.IndexProtoFilename)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBoxDetectorCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BoxDetectorCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoxDetectorCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BoxDetectorCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IndexProtoFilename) > 0 {
		for iNdEx := len(m.IndexProtoFilename) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IndexProtoFilename[iNdEx])
			copy(dAtA[i:], m.IndexProtoFilename[iNdEx])
			i = encodeVarintBoxDetectorCalculator(dAtA, i, uint64(len(m.IndexProtoFilename[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.DetectorOptions != nil {
		{
			size, err := m.DetectorOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBoxDetectorCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBoxDetectorCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovBoxDetectorCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BoxDetectorCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DetectorOptions != nil {
		l = m.DetectorOptions.Size()
		n += 1 + l + sovBoxDetectorCalculator(uint64(l))
	}
	if len(m.IndexProtoFilename) > 0 {
		for _, s := range m.IndexProtoFilename {
			l = len(s)
			n += 1 + l + sovBoxDetectorCalculator(uint64(l))
		}
	}
	return n
}

func sovBoxDetectorCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBoxDetectorCalculator(x uint64) (n int) {
	return sovBoxDetectorCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BoxDetectorCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BoxDetectorCalculatorOptions{`,
		`DetectorOptions:` + strings.Replace(fmt.Sprintf("%v", this.DetectorOptions), "BoxDetectorOptions", "tracking.BoxDetectorOptions", 1) + `,`,
		`IndexProtoFilename:` + fmt.Sprintf("%v", this.IndexProtoFilename) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBoxDetectorCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BoxDetectorCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBoxDetectorCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoxDetectorCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoxDetectorCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectorOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoxDetectorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBoxDetectorCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBoxDetectorCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DetectorOptions == nil {
				m.DetectorOptions = &tracking.BoxDetectorOptions{}
			}
			if err := m.DetectorOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexProtoFilename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoxDetectorCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBoxDetectorCalculator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBoxDetectorCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexProtoFilename = append(m.IndexProtoFilename, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBoxDetectorCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBoxDetectorCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBoxDetectorCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBoxDetectorCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBoxDetectorCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBoxDetectorCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBoxDetectorCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBoxDetectorCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBoxDetectorCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBoxDetectorCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBoxDetectorCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBoxDetectorCalculator = fmt.Errorf("proto: unexpected end of group")
)
