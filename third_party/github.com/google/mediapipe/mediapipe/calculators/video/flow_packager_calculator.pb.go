// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/video/flow_packager_calculator.proto

package video

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	tracking "github.com/google/mediapipe/mediapipe/util/tracking"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FlowPackagerCalculatorOptions struct {
	FlowPackagerOptions  *tracking.FlowPackagerOptions `protobuf:"bytes,1,opt,name=flow_packager_options,json=flowPackagerOptions" json:"flow_packager_options,omitempty"`
	CachingChunkSizeMsec *int32                        `protobuf:"varint,2,opt,name=caching_chunk_size_msec,json=cachingChunkSizeMsec,def=2500" json:"caching_chunk_size_msec,omitempty"`
	CacheFileFormat      *string                       `protobuf:"bytes,3,opt,name=cache_file_format,json=cacheFileFormat,def=chunk_%04d" json:"cache_file_format,omitempty"`
}

func (m *FlowPackagerCalculatorOptions) Reset()      { *m = FlowPackagerCalculatorOptions{} }
func (*FlowPackagerCalculatorOptions) ProtoMessage() {}
func (*FlowPackagerCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb533aee22453ede, []int{0}
}
func (m *FlowPackagerCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowPackagerCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowPackagerCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowPackagerCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowPackagerCalculatorOptions.Merge(m, src)
}
func (m *FlowPackagerCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *FlowPackagerCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowPackagerCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FlowPackagerCalculatorOptions proto.InternalMessageInfo

const Default_FlowPackagerCalculatorOptions_CachingChunkSizeMsec int32 = 2500
const Default_FlowPackagerCalculatorOptions_CacheFileFormat string = "chunk_%04d"

func (m *FlowPackagerCalculatorOptions) GetFlowPackagerOptions() *tracking.FlowPackagerOptions {
	if m != nil {
		return m.FlowPackagerOptions
	}
	return nil
}

func (m *FlowPackagerCalculatorOptions) GetCachingChunkSizeMsec() int32 {
	if m != nil && m.CachingChunkSizeMsec != nil {
		return *m.CachingChunkSizeMsec
	}
	return Default_FlowPackagerCalculatorOptions_CachingChunkSizeMsec
}

func (m *FlowPackagerCalculatorOptions) GetCacheFileFormat() string {
	if m != nil && m.CacheFileFormat != nil {
		return *m.CacheFileFormat
	}
	return Default_FlowPackagerCalculatorOptions_CacheFileFormat
}

var E_FlowPackagerCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*FlowPackagerCalculatorOptions)(nil),
	Field:         271236147,
	Name:          "mediapipe.FlowPackagerCalculatorOptions.ext",
	Tag:           "bytes,271236147,opt,name=ext",
	Filename:      "mediapipe/calculators/video/flow_packager_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_FlowPackagerCalculatorOptions_Ext)
	proto.RegisterType((*FlowPackagerCalculatorOptions)(nil), "mediapipe.FlowPackagerCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/video/flow_packager_calculator.proto", fileDescriptor_eb533aee22453ede)
}

var fileDescriptor_eb533aee22453ede = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x3f, 0x4b, 0xfb, 0x40,
	0x1c, 0xc6, 0x73, 0xed, 0xef, 0x37, 0x34, 0x0e, 0x62, 0x54, 0x0c, 0x45, 0x8f, 0x22, 0x0a, 0x01,
	0x21, 0x29, 0xc5, 0x3f, 0x50, 0x37, 0x0b, 0xdd, 0x44, 0x89, 0x9b, 0x08, 0xe1, 0xbc, 0x5e, 0xd2,
	0x23, 0x97, 0x5c, 0x48, 0x2e, 0x56, 0x3a, 0xe9, 0x3b, 0xf0, 0x65, 0x88, 0xab, 0xef, 0x41, 0x1c,
	0x3b, 0x76, 0xb4, 0xd7, 0xc5, 0xb1, 0xa3, 0xa3, 0xb4, 0x29, 0x4d, 0x6b, 0xd1, 0xf5, 0xf9, 0x7e,
	0x9e, 0xe7, 0xfb, 0x7d, 0xb8, 0x53, 0xeb, 0x01, 0x69, 0x51, 0x14, 0xd1, 0x88, 0x58, 0x18, 0x31,
	0x9c, 0x32, 0x24, 0x78, 0x9c, 0x58, 0x77, 0xb4, 0x45, 0xb8, 0xe5, 0x32, 0xde, 0x71, 0x22, 0x84,
	0x7d, 0xe4, 0x91, 0xd8, 0xc9, 0xe7, 0x66, 0x14, 0x73, 0xc1, 0xb5, 0xd2, 0xcc, 0x5b, 0xde, 0xcb,
	0x63, 0xdc, 0x18, 0x05, 0xa4, 0xc3, 0x63, 0xdf, 0xfa, 0x69, 0x28, 0x1f, 0xe4, 0x54, 0x2a, 0x28,
	0xb3, 0x44, 0x8c, 0xb0, 0x4f, 0x43, 0x6f, 0x71, 0x51, 0x06, 0xef, 0xbe, 0x15, 0xd4, 0x9d, 0x26,
	0xe3, 0x9d, 0xcb, 0xa9, 0xdc, 0x98, 0xa5, 0x5d, 0x44, 0x82, 0xf2, 0x30, 0xd1, 0x6c, 0x75, 0x73,
	0xf1, 0x42, 0x9e, 0x0d, 0x74, 0x50, 0x01, 0xc6, 0x4a, 0x0d, 0x9a, 0xb3, 0x75, 0xe6, 0x7c, 0xd0,
	0xd4, 0x6e, 0xaf, 0xbb, 0xcb, 0xa2, 0x76, 0xaa, 0x6e, 0x61, 0x84, 0xdb, 0x34, 0xf4, 0x1c, 0xdc,
	0x4e, 0x43, 0xdf, 0x49, 0x68, 0x97, 0x38, 0x41, 0x42, 0xb0, 0x5e, 0xa8, 0x00, 0xe3, 0x7f, 0xfd,
	0x5f, 0xed, 0xa8, 0x5a, 0xb5, 0x37, 0xa6, 0x50, 0x63, 0xcc, 0x5c, 0xd1, 0x2e, 0x39, 0x4f, 0x08,
	0xd6, 0x8e, 0xd5, 0xb5, 0xb1, 0x4e, 0x1c, 0x97, 0x32, 0xe2, 0xb8, 0x3c, 0x0e, 0x90, 0xd0, 0x8b,
	0x15, 0x60, 0x94, 0xea, 0x6a, 0x96, 0xb6, 0x5f, 0x3d, 0x6c, 0xd9, 0xab, 0x13, 0xa8, 0x49, 0x19,
	0x69, 0x4e, 0x90, 0xda, 0x8d, 0x5a, 0x24, 0xf7, 0x42, 0xdb, 0x9e, 0x3b, 0x78, 0xa9, 0xad, 0xfe,
	0xfa, 0xf5, 0xf2, 0x98, 0x15, 0x33, 0x7e, 0x29, 0xb6, 0xe4, 0xb1, 0xc7, 0xb1, 0x67, 0x41, 0x6f,
	0x00, 0x95, 0xfe, 0x00, 0x2a, 0xa3, 0x01, 0x04, 0x0f, 0x12, 0x82, 0x67, 0x09, 0xc1, 0xbb, 0x84,
	0xa0, 0x27, 0x21, 0xf8, 0x90, 0x10, 0x7c, 0x4a, 0xa8, 0x8c, 0x24, 0x04, 0x4f, 0x43, 0xa8, 0xf4,
	0x86, 0x50, 0xe9, 0x0f, 0xa1, 0x72, 0x7d, 0xe2, 0x51, 0xd1, 0x4e, 0x6f, 0x4d, 0xcc, 0x03, 0xcb,
	0xe3, 0xdc, 0x63, 0xc4, 0xca, 0x5f, 0xef, 0x8f, 0x4f, 0xf3, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x57,
	0xd1, 0xdf, 0x66, 0x52, 0x02, 0x00, 0x00,
}

func (this *FlowPackagerCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowPackagerCalculatorOptions)
	if !ok {
		that2, ok := that.(FlowPackagerCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FlowPackagerOptions.Equal(that1.FlowPackagerOptions) {
		return false
	}
	if this.CachingChunkSizeMsec != nil && that1.CachingChunkSizeMsec != nil {
		if *this.CachingChunkSizeMsec != *that1.CachingChunkSizeMsec {
			return false
		}
	} else if this.CachingChunkSizeMsec != nil {
		return false
	} else if that1.CachingChunkSizeMsec != nil {
		return false
	}
	if this.CacheFileFormat != nil && that1.CacheFileFormat != nil {
		if *this.CacheFileFormat != *that1.CacheFileFormat {
			return false
		}
	} else if this.CacheFileFormat != nil {
		return false
	} else if that1.CacheFileFormat != nil {
		return false
	}
	return true
}
func (this *FlowPackagerCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&video.FlowPackagerCalculatorOptions{")
	if this.FlowPackagerOptions != nil {
		s = append(s, "FlowPackagerOptions: "+fmt.Sprintf("%#v", this.FlowPackagerOptions)+",\n")
	}
	if this.CachingChunkSizeMsec != nil {
		s = append(s, "CachingChunkSizeMsec: "+valueToGoStringFlowPackagerCalculator(this.CachingChunkSizeMsec, "int32")+",\n")
	}
	if this.CacheFileFormat != nil {
		s = append(s, "CacheFileFormat: "+valueToGoStringFlowPackagerCalculator(this.CacheFileFormat, "string")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFlowPackagerCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FlowPackagerCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowPackagerCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowPackagerCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CacheFileFormat != nil {
		i -= len(*m.CacheFileFormat)
		copy(dAtA[i:], *m.CacheFileFormat)
		i = encodeVarintFlowPackagerCalculator(dAtA, i, uint64(len(*m.CacheFileFormat)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CachingChunkSizeMsec != nil {
		i = encodeVarintFlowPackagerCalculator(dAtA, i, uint64(*m.CachingChunkSizeMsec))
		i--
		dAtA[i] = 0x10
	}
	if m.FlowPackagerOptions != nil {
		{
			size, err := m.FlowPackagerOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlowPackagerCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFlowPackagerCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlowPackagerCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FlowPackagerCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlowPackagerOptions != nil {
		l = m.FlowPackagerOptions.Size()
		n += 1 + l + sovFlowPackagerCalculator(uint64(l))
	}
	if m.CachingChunkSizeMsec != nil {
		n += 1 + sovFlowPackagerCalculator(uint64(*m.CachingChunkSizeMsec))
	}
	if m.CacheFileFormat != nil {
		l = len(*m.CacheFileFormat)
		n += 1 + l + sovFlowPackagerCalculator(uint64(l))
	}
	return n
}

func sovFlowPackagerCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlowPackagerCalculator(x uint64) (n int) {
	return sovFlowPackagerCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FlowPackagerCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowPackagerCalculatorOptions{`,
		`FlowPackagerOptions:` + strings.Replace(fmt.Sprintf("%v", this.FlowPackagerOptions), "FlowPackagerOptions", "tracking.FlowPackagerOptions", 1) + `,`,
		`CachingChunkSizeMsec:` + valueToStringFlowPackagerCalculator(this.CachingChunkSizeMsec) + `,`,
		`CacheFileFormat:` + valueToStringFlowPackagerCalculator(this.CacheFileFormat) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFlowPackagerCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FlowPackagerCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlowPackagerCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowPackagerCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowPackagerCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowPackagerOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowPackagerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlowPackagerCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlowPackagerCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowPackagerOptions == nil {
				m.FlowPackagerOptions = &tracking.FlowPackagerOptions{}
			}
			if err := m.FlowPackagerOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CachingChunkSizeMsec", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowPackagerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CachingChunkSizeMsec = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheFileFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowPackagerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlowPackagerCalculator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlowPackagerCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CacheFileFormat = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlowPackagerCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlowPackagerCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlowPackagerCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlowPackagerCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlowPackagerCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlowPackagerCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlowPackagerCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFlowPackagerCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFlowPackagerCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFlowPackagerCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlowPackagerCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFlowPackagerCalculator = fmt.Errorf("proto: unexpected end of group")
)
