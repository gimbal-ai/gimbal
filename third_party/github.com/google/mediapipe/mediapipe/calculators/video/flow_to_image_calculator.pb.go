// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/video/flow_to_image_calculator.proto

package video

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FlowToImageCalculatorOptions struct {
	MinValue *float32 `protobuf:"fixed32,1,opt,name=min_value,json=minValue,def=-40" json:"min_value,omitempty"`
	MaxValue *float32 `protobuf:"fixed32,2,opt,name=max_value,json=maxValue,def=40" json:"max_value,omitempty"`
}

func (m *FlowToImageCalculatorOptions) Reset()      { *m = FlowToImageCalculatorOptions{} }
func (*FlowToImageCalculatorOptions) ProtoMessage() {}
func (*FlowToImageCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcb6c90df93e2fdf, []int{0}
}
func (m *FlowToImageCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowToImageCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowToImageCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowToImageCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowToImageCalculatorOptions.Merge(m, src)
}
func (m *FlowToImageCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *FlowToImageCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowToImageCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FlowToImageCalculatorOptions proto.InternalMessageInfo

const Default_FlowToImageCalculatorOptions_MinValue float32 = -40
const Default_FlowToImageCalculatorOptions_MaxValue float32 = 40

func (m *FlowToImageCalculatorOptions) GetMinValue() float32 {
	if m != nil && m.MinValue != nil {
		return *m.MinValue
	}
	return Default_FlowToImageCalculatorOptions_MinValue
}

func (m *FlowToImageCalculatorOptions) GetMaxValue() float32 {
	if m != nil && m.MaxValue != nil {
		return *m.MaxValue
	}
	return Default_FlowToImageCalculatorOptions_MaxValue
}

var E_FlowToImageCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*FlowToImageCalculatorOptions)(nil),
	Field:         69508592,
	Name:          "mediapipe.FlowToImageCalculatorOptions.ext",
	Tag:           "bytes,69508592,opt,name=ext",
	Filename:      "mediapipe/calculators/video/flow_to_image_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_FlowToImageCalculatorOptions_Ext)
	proto.RegisterType((*FlowToImageCalculatorOptions)(nil), "mediapipe.FlowToImageCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/video/flow_to_image_calculator.proto", fileDescriptor_fcb6c90df93e2fdf)
}

var fileDescriptor_fcb6c90df93e2fdf = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0xca, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f,
	0x2a, 0xd6, 0x2f, 0xcb, 0x4c, 0x49, 0xcd, 0xd7, 0x4f, 0xcb, 0xc9, 0x2f, 0x8f, 0x2f, 0xc9, 0x8f,
	0xcf, 0xcc, 0x4d, 0x4c, 0x4f, 0x8d, 0x47, 0xc8, 0xeb, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x71,
	0xc2, 0xf5, 0x4a, 0xa9, 0x20, 0x8c, 0x49, 0x2b, 0x4a, 0xcc, 0x4d, 0x2d, 0xcf, 0x2f, 0xca, 0xd6,
	0x47, 0xd7, 0xa0, 0xb4, 0x97, 0x91, 0x4b, 0xc6, 0x2d, 0x27, 0xbf, 0x3c, 0x24, 0xdf, 0x13, 0x64,
	0xa2, 0x33, 0x5c, 0xde, 0xbf, 0xa0, 0x24, 0x33, 0x3f, 0xaf, 0x58, 0x48, 0x81, 0x8b, 0x33, 0x37,
	0x33, 0x2f, 0xbe, 0x2c, 0x31, 0xa7, 0x34, 0x55, 0x82, 0x51, 0x81, 0x51, 0x83, 0xc9, 0x8a, 0x59,
	0xd7, 0xc4, 0x20, 0x88, 0x23, 0x37, 0x33, 0x2f, 0x0c, 0x24, 0x28, 0x24, 0xcf, 0xc5, 0x99, 0x9b,
	0x58, 0x01, 0x55, 0xc1, 0x04, 0x56, 0xc1, 0x04, 0x56, 0x90, 0x58, 0x01, 0x56, 0x60, 0x14, 0xc5,
	0xc5, 0x9c, 0x5a, 0x51, 0x22, 0x24, 0xa3, 0x07, 0x77, 0x91, 0x1e, 0x86, 0x3d, 0x12, 0x1f, 0x76,
	0x4f, 0x52, 0x54, 0x60, 0xd4, 0xe0, 0x36, 0x52, 0x47, 0x52, 0x86, 0xcf, 0x65, 0x41, 0x20, 0x43,
	0x9d, 0x72, 0x2f, 0x3c, 0x94, 0x63, 0xb8, 0xf1, 0x50, 0x8e, 0xe1, 0xc3, 0x43, 0x39, 0xc6, 0x86,
	0x47, 0x72, 0x8c, 0x2b, 0x1e, 0xc9, 0x31, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3,
	0x83, 0x47, 0x72, 0x8c, 0x2f, 0x1e, 0xc9, 0x31, 0x7c, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c,
	0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x99, 0xa7, 0x67, 0x96, 0x64, 0x94,
	0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xa7, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x23, 0x42, 0x0b,
	0x4f, 0xf0, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x38, 0x86, 0xb6, 0x32, 0x9c, 0x01, 0x00, 0x00,
}

func (this *FlowToImageCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowToImageCalculatorOptions)
	if !ok {
		that2, ok := that.(FlowToImageCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinValue != nil && that1.MinValue != nil {
		if *this.MinValue != *that1.MinValue {
			return false
		}
	} else if this.MinValue != nil {
		return false
	} else if that1.MinValue != nil {
		return false
	}
	if this.MaxValue != nil && that1.MaxValue != nil {
		if *this.MaxValue != *that1.MaxValue {
			return false
		}
	} else if this.MaxValue != nil {
		return false
	} else if that1.MaxValue != nil {
		return false
	}
	return true
}
func (this *FlowToImageCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&video.FlowToImageCalculatorOptions{")
	if this.MinValue != nil {
		s = append(s, "MinValue: "+valueToGoStringFlowToImageCalculator(this.MinValue, "float32")+",\n")
	}
	if this.MaxValue != nil {
		s = append(s, "MaxValue: "+valueToGoStringFlowToImageCalculator(this.MaxValue, "float32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFlowToImageCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FlowToImageCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowToImageCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowToImageCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxValue != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.MaxValue))))
		i--
		dAtA[i] = 0x15
	}
	if m.MinValue != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.MinValue))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func encodeVarintFlowToImageCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlowToImageCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FlowToImageCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinValue != nil {
		n += 5
	}
	if m.MaxValue != nil {
		n += 5
	}
	return n
}

func sovFlowToImageCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlowToImageCalculator(x uint64) (n int) {
	return sovFlowToImageCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FlowToImageCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowToImageCalculatorOptions{`,
		`MinValue:` + valueToStringFlowToImageCalculator(this.MinValue) + `,`,
		`MaxValue:` + valueToStringFlowToImageCalculator(this.MaxValue) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFlowToImageCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FlowToImageCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlowToImageCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowToImageCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowToImageCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.MinValue = &v2
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.MaxValue = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipFlowToImageCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlowToImageCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlowToImageCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlowToImageCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlowToImageCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlowToImageCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlowToImageCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFlowToImageCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFlowToImageCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFlowToImageCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlowToImageCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFlowToImageCalculator = fmt.Errorf("proto: unexpected end of group")
)
