// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/video/motion_analysis_calculator.proto

package video

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	tracking "github.com/google/mediapipe/mediapipe/util/tracking"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MotionAnalysisCalculatorOptions_SelectionAnalysis int32

const (
	ANALYSIS_RECOMPUTE        MotionAnalysisCalculatorOptions_SelectionAnalysis = 1
	NO_ANALYSIS_USE_SELECTION MotionAnalysisCalculatorOptions_SelectionAnalysis = 2
	ANALYSIS_FROM_FEATURES    MotionAnalysisCalculatorOptions_SelectionAnalysis = 3
	ANALYSIS_WITH_SEED        MotionAnalysisCalculatorOptions_SelectionAnalysis = 4
)

var MotionAnalysisCalculatorOptions_SelectionAnalysis_name = map[int32]string{
	1: "ANALYSIS_RECOMPUTE",
	2: "NO_ANALYSIS_USE_SELECTION",
	3: "ANALYSIS_FROM_FEATURES",
	4: "ANALYSIS_WITH_SEED",
}

var MotionAnalysisCalculatorOptions_SelectionAnalysis_value = map[string]int32{
	"ANALYSIS_RECOMPUTE":        1,
	"NO_ANALYSIS_USE_SELECTION": 2,
	"ANALYSIS_FROM_FEATURES":    3,
	"ANALYSIS_WITH_SEED":        4,
}

func (x MotionAnalysisCalculatorOptions_SelectionAnalysis) Enum() *MotionAnalysisCalculatorOptions_SelectionAnalysis {
	p := new(MotionAnalysisCalculatorOptions_SelectionAnalysis)
	*p = x
	return p
}

func (x MotionAnalysisCalculatorOptions_SelectionAnalysis) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(MotionAnalysisCalculatorOptions_SelectionAnalysis_name, int32(x))
}

func (x *MotionAnalysisCalculatorOptions_SelectionAnalysis) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MotionAnalysisCalculatorOptions_SelectionAnalysis_value, data, "MotionAnalysisCalculatorOptions_SelectionAnalysis")
	if err != nil {
		return err
	}
	*x = MotionAnalysisCalculatorOptions_SelectionAnalysis(value)
	return nil
}

func (MotionAnalysisCalculatorOptions_SelectionAnalysis) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c6987aab736d7454, []int{0, 0}
}

type MotionAnalysisCalculatorOptions_MetaAnalysis int32

const (
	META_ANALYSIS_USE_META MotionAnalysisCalculatorOptions_MetaAnalysis = 1
	META_ANALYSIS_HYBRID   MotionAnalysisCalculatorOptions_MetaAnalysis = 2
)

var MotionAnalysisCalculatorOptions_MetaAnalysis_name = map[int32]string{
	1: "META_ANALYSIS_USE_META",
	2: "META_ANALYSIS_HYBRID",
}

var MotionAnalysisCalculatorOptions_MetaAnalysis_value = map[string]int32{
	"META_ANALYSIS_USE_META": 1,
	"META_ANALYSIS_HYBRID":   2,
}

func (x MotionAnalysisCalculatorOptions_MetaAnalysis) Enum() *MotionAnalysisCalculatorOptions_MetaAnalysis {
	p := new(MotionAnalysisCalculatorOptions_MetaAnalysis)
	*p = x
	return p
}

func (x MotionAnalysisCalculatorOptions_MetaAnalysis) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(MotionAnalysisCalculatorOptions_MetaAnalysis_name, int32(x))
}

func (x *MotionAnalysisCalculatorOptions_MetaAnalysis) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MotionAnalysisCalculatorOptions_MetaAnalysis_value, data, "MotionAnalysisCalculatorOptions_MetaAnalysis")
	if err != nil {
		return err
	}
	*x = MotionAnalysisCalculatorOptions_MetaAnalysis(value)
	return nil
}

func (MotionAnalysisCalculatorOptions_MetaAnalysis) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c6987aab736d7454, []int{0, 1}
}

type MotionAnalysisCalculatorOptions struct {
	AnalysisOptions        *tracking.MotionAnalysisOptions                    `protobuf:"bytes,1,opt,name=analysis_options,json=analysisOptions" json:"analysis_options,omitempty"`
	SelectionAnalysis      *MotionAnalysisCalculatorOptions_SelectionAnalysis `protobuf:"varint,4,opt,name=selection_analysis,json=selectionAnalysis,enum=mediapipe.MotionAnalysisCalculatorOptions_SelectionAnalysis,def=4" json:"selection_analysis,omitempty"`
	HybridSelectionCamera  *bool                                              `protobuf:"varint,5,opt,name=hybrid_selection_camera,json=hybridSelectionCamera,def=0" json:"hybrid_selection_camera,omitempty"`
	MetaAnalysis           *MotionAnalysisCalculatorOptions_MetaAnalysis      `protobuf:"varint,8,opt,name=meta_analysis,json=metaAnalysis,enum=mediapipe.MotionAnalysisCalculatorOptions_MetaAnalysis,def=1" json:"meta_analysis,omitempty"`
	MetaModelsPerFrame     *int32                                             `protobuf:"varint,6,opt,name=meta_models_per_frame,json=metaModelsPerFrame,def=1" json:"meta_models_per_frame,omitempty"`
	MetaOutlierDomainRatio *float32                                           `protobuf:"fixed32,9,opt,name=meta_outlier_domain_ratio,json=metaOutlierDomainRatio,def=0.0015" json:"meta_outlier_domain_ratio,omitempty"`
	BypassMode             *bool                                              `protobuf:"varint,7,opt,name=bypass_mode,json=bypassMode,def=0" json:"bypass_mode,omitempty"`
}

func (m *MotionAnalysisCalculatorOptions) Reset()      { *m = MotionAnalysisCalculatorOptions{} }
func (*MotionAnalysisCalculatorOptions) ProtoMessage() {}
func (*MotionAnalysisCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6987aab736d7454, []int{0}
}
func (m *MotionAnalysisCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MotionAnalysisCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MotionAnalysisCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MotionAnalysisCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MotionAnalysisCalculatorOptions.Merge(m, src)
}
func (m *MotionAnalysisCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *MotionAnalysisCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_MotionAnalysisCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_MotionAnalysisCalculatorOptions proto.InternalMessageInfo

const Default_MotionAnalysisCalculatorOptions_SelectionAnalysis MotionAnalysisCalculatorOptions_SelectionAnalysis = ANALYSIS_WITH_SEED
const Default_MotionAnalysisCalculatorOptions_HybridSelectionCamera bool = false
const Default_MotionAnalysisCalculatorOptions_MetaAnalysis MotionAnalysisCalculatorOptions_MetaAnalysis = META_ANALYSIS_USE_META
const Default_MotionAnalysisCalculatorOptions_MetaModelsPerFrame int32 = 1
const Default_MotionAnalysisCalculatorOptions_MetaOutlierDomainRatio float32 = 0.0015
const Default_MotionAnalysisCalculatorOptions_BypassMode bool = false

func (m *MotionAnalysisCalculatorOptions) GetAnalysisOptions() *tracking.MotionAnalysisOptions {
	if m != nil {
		return m.AnalysisOptions
	}
	return nil
}

func (m *MotionAnalysisCalculatorOptions) GetSelectionAnalysis() MotionAnalysisCalculatorOptions_SelectionAnalysis {
	if m != nil && m.SelectionAnalysis != nil {
		return *m.SelectionAnalysis
	}
	return Default_MotionAnalysisCalculatorOptions_SelectionAnalysis
}

func (m *MotionAnalysisCalculatorOptions) GetHybridSelectionCamera() bool {
	if m != nil && m.HybridSelectionCamera != nil {
		return *m.HybridSelectionCamera
	}
	return Default_MotionAnalysisCalculatorOptions_HybridSelectionCamera
}

func (m *MotionAnalysisCalculatorOptions) GetMetaAnalysis() MotionAnalysisCalculatorOptions_MetaAnalysis {
	if m != nil && m.MetaAnalysis != nil {
		return *m.MetaAnalysis
	}
	return Default_MotionAnalysisCalculatorOptions_MetaAnalysis
}

func (m *MotionAnalysisCalculatorOptions) GetMetaModelsPerFrame() int32 {
	if m != nil && m.MetaModelsPerFrame != nil {
		return *m.MetaModelsPerFrame
	}
	return Default_MotionAnalysisCalculatorOptions_MetaModelsPerFrame
}

func (m *MotionAnalysisCalculatorOptions) GetMetaOutlierDomainRatio() float32 {
	if m != nil && m.MetaOutlierDomainRatio != nil {
		return *m.MetaOutlierDomainRatio
	}
	return Default_MotionAnalysisCalculatorOptions_MetaOutlierDomainRatio
}

func (m *MotionAnalysisCalculatorOptions) GetBypassMode() bool {
	if m != nil && m.BypassMode != nil {
		return *m.BypassMode
	}
	return Default_MotionAnalysisCalculatorOptions_BypassMode
}

var E_MotionAnalysisCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*MotionAnalysisCalculatorOptions)(nil),
	Field:         270698255,
	Name:          "mediapipe.MotionAnalysisCalculatorOptions.ext",
	Tag:           "bytes,270698255,opt,name=ext",
	Filename:      "mediapipe/calculators/video/motion_analysis_calculator.proto",
}

type HomographyData struct {
	MotionHomographyData []float32 `protobuf:"fixed32,1,rep,packed,name=motion_homography_data,json=motionHomographyData" json:"motion_homography_data,omitempty"`
	HistogramCountData   []uint32  `protobuf:"varint,2,rep,packed,name=histogram_count_data,json=histogramCountData" json:"histogram_count_data,omitempty"`
	FrameWidth           int32     `protobuf:"varint,3,opt,name=frame_width,json=frameWidth" json:"frame_width"`
	FrameHeight          int32     `protobuf:"varint,4,opt,name=frame_height,json=frameHeight" json:"frame_height"`
}

func (m *HomographyData) Reset()      { *m = HomographyData{} }
func (*HomographyData) ProtoMessage() {}
func (*HomographyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6987aab736d7454, []int{1}
}
func (m *HomographyData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HomographyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HomographyData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HomographyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HomographyData.Merge(m, src)
}
func (m *HomographyData) XXX_Size() int {
	return m.Size()
}
func (m *HomographyData) XXX_DiscardUnknown() {
	xxx_messageInfo_HomographyData.DiscardUnknown(m)
}

var xxx_messageInfo_HomographyData proto.InternalMessageInfo

func (m *HomographyData) GetMotionHomographyData() []float32 {
	if m != nil {
		return m.MotionHomographyData
	}
	return nil
}

func (m *HomographyData) GetHistogramCountData() []uint32 {
	if m != nil {
		return m.HistogramCountData
	}
	return nil
}

func (m *HomographyData) GetFrameWidth() int32 {
	if m != nil {
		return m.FrameWidth
	}
	return 0
}

func (m *HomographyData) GetFrameHeight() int32 {
	if m != nil {
		return m.FrameHeight
	}
	return 0
}

func init() {
	proto.RegisterEnum("mediapipe.MotionAnalysisCalculatorOptions_SelectionAnalysis", MotionAnalysisCalculatorOptions_SelectionAnalysis_name, MotionAnalysisCalculatorOptions_SelectionAnalysis_value)
	proto.RegisterEnum("mediapipe.MotionAnalysisCalculatorOptions_MetaAnalysis", MotionAnalysisCalculatorOptions_MetaAnalysis_name, MotionAnalysisCalculatorOptions_MetaAnalysis_value)
	proto.RegisterExtension(E_MotionAnalysisCalculatorOptions_Ext)
	proto.RegisterType((*MotionAnalysisCalculatorOptions)(nil), "mediapipe.MotionAnalysisCalculatorOptions")
	proto.RegisterType((*HomographyData)(nil), "mediapipe.HomographyData")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/video/motion_analysis_calculator.proto", fileDescriptor_c6987aab736d7454)
}

var fileDescriptor_c6987aab736d7454 = []byte{
	// 723 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x4d, 0x4f, 0xdb, 0x48,
	0x18, 0xc7, 0x33, 0x09, 0xb0, 0x30, 0xbc, 0xac, 0x19, 0x41, 0xd6, 0xa0, 0x5d, 0x63, 0x45, 0xfb,
	0x12, 0xad, 0xb4, 0x09, 0x20, 0x56, 0x54, 0x11, 0x3d, 0xe4, 0xc5, 0x28, 0x51, 0x09, 0x41, 0x4e,
	0x10, 0xa2, 0x87, 0x8e, 0x86, 0x64, 0x88, 0x47, 0xd8, 0x99, 0xc8, 0x9e, 0x94, 0xe6, 0xd2, 0x97,
	0x6b, 0x0f, 0x6d, 0x3f, 0x46, 0x3f, 0x0a, 0xc7, 0x1c, 0x39, 0x55, 0x25, 0x5c, 0x2a, 0xf5, 0xc2,
	0x47, 0xa8, 0x3c, 0x06, 0xe7, 0x85, 0xb6, 0x6a, 0xaf, 0xcf, 0xff, 0xf7, 0xfc, 0x9f, 0xbf, 0xe7,
	0x19, 0x0f, 0xdc, 0x71, 0x68, 0x83, 0x91, 0x36, 0x6b, 0xd3, 0x74, 0x9d, 0xd8, 0xf5, 0x8e, 0x4d,
	0x04, 0x77, 0xbd, 0xf4, 0x53, 0xd6, 0xa0, 0x3c, 0xed, 0x70, 0xc1, 0x78, 0x0b, 0x93, 0x16, 0xb1,
	0xbb, 0x1e, 0xf3, 0xf0, 0x80, 0x48, 0xb5, 0x5d, 0x2e, 0x38, 0x9a, 0x09, 0xbb, 0x57, 0xff, 0x1c,
	0x18, 0x9d, 0xba, 0xc4, 0xa1, 0xe7, 0xdc, 0x3d, 0x4b, 0x8f, 0x37, 0xac, 0xfe, 0x37, 0xa0, 0x3a,
	0x82, 0xd9, 0x69, 0xe1, 0x92, 0xfa, 0x19, 0x6b, 0x35, 0xc7, 0x47, 0x05, 0x78, 0xe2, 0xf3, 0x14,
	0x5c, 0x2b, 0x4b, 0x25, 0x7b, 0x2b, 0xe4, 0x43, 0xc7, 0x4a, 0xdb, 0xaf, 0x7b, 0xe8, 0x11, 0x54,
	0xc2, 0x80, 0x3c, 0xa8, 0xa9, 0x40, 0x07, 0xc9, 0xd9, 0x4d, 0x3d, 0x15, 0x4e, 0x4b, 0x8d, 0xba,
	0xdc, 0xf6, 0x9a, 0xbf, 0x92, 0xd1, 0x02, 0x7a, 0x01, 0x91, 0x47, 0x6d, 0x5a, 0x1f, 0x09, 0xa3,
	0x4e, 0xe8, 0x20, 0xb9, 0xb0, 0xb9, 0xf3, 0x4d, 0xbb, 0x7b, 0xa1, 0x52, 0xd5, 0x3b, 0x93, 0x3b,
	0x24, 0x83, 0xb2, 0xfb, 0xd9, 0xbd, 0xe3, 0x6a, 0xa9, 0x8a, 0x8f, 0x4a, 0xb5, 0x22, 0xae, 0x1a,
	0x46, 0xc1, 0x5c, 0xf4, 0xc6, 0x31, 0xf4, 0x10, 0xfe, 0x66, 0x75, 0x4f, 0x5c, 0xd6, 0xc0, 0x83,
	0x1c, 0x75, 0xe2, 0x50, 0x97, 0xa8, 0x93, 0x3a, 0x48, 0x4e, 0x67, 0x26, 0x4f, 0x89, 0xed, 0x51,
	0x73, 0x39, 0xa0, 0xc2, 0x39, 0x79, 0xc9, 0x20, 0x01, 0xe7, 0x1d, 0x2a, 0xc8, 0x20, 0xfa, 0xb4,
	0x8c, 0xbe, 0xfd, 0x13, 0xd1, 0xcb, 0x54, 0x90, 0x30, 0x75, 0xbc, 0x6c, 0xd4, 0xb2, 0x38, 0x8c,
	0x7e, 0x58, 0x35, 0xb0, 0x5f, 0x31, 0xe7, 0x9c, 0x21, 0x0a, 0x6d, 0xc1, 0x65, 0x39, 0xd5, 0xe1,
	0x0d, 0x6a, 0x7b, 0xb8, 0x4d, 0x5d, 0x2c, 0xef, 0x80, 0x3a, 0xa5, 0x83, 0xe4, 0x64, 0x06, 0x6c,
	0x98, 0xc8, 0xd7, 0xcb, 0x52, 0x3e, 0xa0, 0xee, 0xae, 0x2f, 0xa2, 0x2c, 0x5c, 0x91, 0x5d, 0xbc,
	0x23, 0x6c, 0x46, 0x5d, 0xdc, 0xe0, 0x0e, 0x61, 0x2d, 0xec, 0x12, 0xc1, 0xb8, 0x3a, 0xa3, 0x83,
	0x64, 0x34, 0x33, 0xb5, 0x9e, 0x5a, 0x5f, 0xdf, 0xf8, 0xdf, 0x8c, 0xfb, 0x60, 0x25, 0xe0, 0x0a,
	0x12, 0x33, 0x7d, 0x0a, 0xfd, 0x0d, 0x67, 0x4f, 0xba, 0x6d, 0xe2, 0x79, 0x72, 0xb4, 0xfa, 0xcb,
	0xf0, 0x09, 0xc1, 0x40, 0xf1, 0x87, 0x26, 0x9e, 0xc3, 0xc5, 0x7b, 0x1b, 0x41, 0x71, 0x38, 0xd8,
	0x89, 0x69, 0xe4, 0x2b, 0xe5, 0x83, 0xc3, 0x9a, 0xa1, 0x00, 0xf4, 0x07, 0x5c, 0xd9, 0xaf, 0x8c,
	0x7e, 0x73, 0xd5, 0xd8, 0x33, 0xf2, 0xb5, 0x52, 0x65, 0x5f, 0x89, 0xa2, 0x55, 0x18, 0x0f, 0xb5,
	0x5d, 0xb3, 0x52, 0xc6, 0xbb, 0x46, 0xb6, 0x76, 0x68, 0x1a, 0x55, 0x25, 0x36, 0x62, 0x19, 0xae,
	0x59, 0x99, 0x48, 0x14, 0xe0, 0xdc, 0xf0, 0xb1, 0xfa, 0x1e, 0x5f, 0x3f, 0x58, 0x05, 0x20, 0x15,
	0x2e, 0x8d, 0x6a, 0xc5, 0xe3, 0x9c, 0x59, 0x2a, 0x28, 0xd1, 0xcd, 0x27, 0x30, 0x46, 0x9f, 0x09,
	0xf4, 0xfb, 0xd0, 0x32, 0xef, 0xad, 0x4f, 0x7d, 0xfb, 0xe6, 0xf5, 0xab, 0xe0, 0xfa, 0xff, 0xfb,
	0xe3, 0x4b, 0x37, 0x7d, 0xe3, 0x44, 0x0f, 0xc0, 0x85, 0x22, 0x77, 0x78, 0xd3, 0x25, 0x6d, 0xab,
	0x5b, 0x20, 0x82, 0xa0, 0x07, 0x30, 0x7e, 0xfb, 0x67, 0x5a, 0xa1, 0x80, 0x1b, 0x44, 0x10, 0x15,
	0xe8, 0xb1, 0x64, 0x34, 0x17, 0x55, 0x80, 0xb9, 0x14, 0x10, 0x63, 0x9d, 0x5b, 0x70, 0xc9, 0x62,
	0x9e, 0xf0, 0x4b, 0x0e, 0xae, 0xf3, 0x4e, 0x4b, 0x04, 0x7d, 0x51, 0x3d, 0x96, 0x9c, 0x97, 0x7d,
	0x28, 0xd4, 0xf3, 0xbe, 0x2c, 0xbb, 0xfe, 0x82, 0xb3, 0xf2, 0xe6, 0xe0, 0x73, 0xd6, 0x10, 0x96,
	0x1a, 0xf3, 0xef, 0x4f, 0x6e, 0xe2, 0xe2, 0xc3, 0x5a, 0xc4, 0x84, 0x52, 0x38, 0xf2, 0xeb, 0xe8,
	0x1f, 0x38, 0x17, 0x60, 0x16, 0x65, 0x4d, 0x4b, 0xc8, 0x1f, 0xf4, 0x8e, 0x0b, 0x0c, 0x8a, 0x52,
	0xc8, 0x39, 0xbd, 0x2b, 0x2d, 0x72, 0x79, 0xa5, 0x45, 0x6e, 0xae, 0x34, 0xf0, 0xb2, 0xaf, 0x81,
	0xf7, 0x7d, 0x0d, 0x5c, 0xf4, 0x35, 0xd0, 0xeb, 0x6b, 0xe0, 0x63, 0x5f, 0x03, 0x9f, 0xfa, 0x5a,
	0xe4, 0xa6, 0xaf, 0x81, 0x77, 0xd7, 0x5a, 0xa4, 0x77, 0xad, 0x45, 0x2e, 0xaf, 0xb5, 0xc8, 0xe3,
	0xed, 0x26, 0x13, 0x56, 0xe7, 0x24, 0x55, 0xe7, 0x4e, 0xba, 0xc9, 0x79, 0xd3, 0xa6, 0xe9, 0xc1,
	0xbb, 0xf5, 0x9d, 0x07, 0xf3, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x27, 0xf8, 0x82, 0xd7, 0x4e,
	0x05, 0x00, 0x00,
}

func (x MotionAnalysisCalculatorOptions_SelectionAnalysis) String() string {
	s, ok := MotionAnalysisCalculatorOptions_SelectionAnalysis_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MotionAnalysisCalculatorOptions_MetaAnalysis) String() string {
	s, ok := MotionAnalysisCalculatorOptions_MetaAnalysis_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MotionAnalysisCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MotionAnalysisCalculatorOptions)
	if !ok {
		that2, ok := that.(MotionAnalysisCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnalysisOptions.Equal(that1.AnalysisOptions) {
		return false
	}
	if this.SelectionAnalysis != nil && that1.SelectionAnalysis != nil {
		if *this.SelectionAnalysis != *that1.SelectionAnalysis {
			return false
		}
	} else if this.SelectionAnalysis != nil {
		return false
	} else if that1.SelectionAnalysis != nil {
		return false
	}
	if this.HybridSelectionCamera != nil && that1.HybridSelectionCamera != nil {
		if *this.HybridSelectionCamera != *that1.HybridSelectionCamera {
			return false
		}
	} else if this.HybridSelectionCamera != nil {
		return false
	} else if that1.HybridSelectionCamera != nil {
		return false
	}
	if this.MetaAnalysis != nil && that1.MetaAnalysis != nil {
		if *this.MetaAnalysis != *that1.MetaAnalysis {
			return false
		}
	} else if this.MetaAnalysis != nil {
		return false
	} else if that1.MetaAnalysis != nil {
		return false
	}
	if this.MetaModelsPerFrame != nil && that1.MetaModelsPerFrame != nil {
		if *this.MetaModelsPerFrame != *that1.MetaModelsPerFrame {
			return false
		}
	} else if this.MetaModelsPerFrame != nil {
		return false
	} else if that1.MetaModelsPerFrame != nil {
		return false
	}
	if this.MetaOutlierDomainRatio != nil && that1.MetaOutlierDomainRatio != nil {
		if *this.MetaOutlierDomainRatio != *that1.MetaOutlierDomainRatio {
			return false
		}
	} else if this.MetaOutlierDomainRatio != nil {
		return false
	} else if that1.MetaOutlierDomainRatio != nil {
		return false
	}
	if this.BypassMode != nil && that1.BypassMode != nil {
		if *this.BypassMode != *that1.BypassMode {
			return false
		}
	} else if this.BypassMode != nil {
		return false
	} else if that1.BypassMode != nil {
		return false
	}
	return true
}
func (this *HomographyData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HomographyData)
	if !ok {
		that2, ok := that.(HomographyData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.MotionHomographyData) != len(that1.MotionHomographyData) {
		return false
	}
	for i := range this.MotionHomographyData {
		if this.MotionHomographyData[i] != that1.MotionHomographyData[i] {
			return false
		}
	}
	if len(this.HistogramCountData) != len(that1.HistogramCountData) {
		return false
	}
	for i := range this.HistogramCountData {
		if this.HistogramCountData[i] != that1.HistogramCountData[i] {
			return false
		}
	}
	if this.FrameWidth != that1.FrameWidth {
		return false
	}
	if this.FrameHeight != that1.FrameHeight {
		return false
	}
	return true
}
func (this *MotionAnalysisCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&video.MotionAnalysisCalculatorOptions{")
	if this.AnalysisOptions != nil {
		s = append(s, "AnalysisOptions: "+fmt.Sprintf("%#v", this.AnalysisOptions)+",\n")
	}
	if this.SelectionAnalysis != nil {
		s = append(s, "SelectionAnalysis: "+valueToGoStringMotionAnalysisCalculator(this.SelectionAnalysis, "MotionAnalysisCalculatorOptions_SelectionAnalysis")+",\n")
	}
	if this.HybridSelectionCamera != nil {
		s = append(s, "HybridSelectionCamera: "+valueToGoStringMotionAnalysisCalculator(this.HybridSelectionCamera, "bool")+",\n")
	}
	if this.MetaAnalysis != nil {
		s = append(s, "MetaAnalysis: "+valueToGoStringMotionAnalysisCalculator(this.MetaAnalysis, "MotionAnalysisCalculatorOptions_MetaAnalysis")+",\n")
	}
	if this.MetaModelsPerFrame != nil {
		s = append(s, "MetaModelsPerFrame: "+valueToGoStringMotionAnalysisCalculator(this.MetaModelsPerFrame, "int32")+",\n")
	}
	if this.MetaOutlierDomainRatio != nil {
		s = append(s, "MetaOutlierDomainRatio: "+valueToGoStringMotionAnalysisCalculator(this.MetaOutlierDomainRatio, "float32")+",\n")
	}
	if this.BypassMode != nil {
		s = append(s, "BypassMode: "+valueToGoStringMotionAnalysisCalculator(this.BypassMode, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HomographyData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&video.HomographyData{")
	if this.MotionHomographyData != nil {
		s = append(s, "MotionHomographyData: "+fmt.Sprintf("%#v", this.MotionHomographyData)+",\n")
	}
	if this.HistogramCountData != nil {
		s = append(s, "HistogramCountData: "+fmt.Sprintf("%#v", this.HistogramCountData)+",\n")
	}
	s = append(s, "FrameWidth: "+fmt.Sprintf("%#v", this.FrameWidth)+",\n")
	s = append(s, "FrameHeight: "+fmt.Sprintf("%#v", this.FrameHeight)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMotionAnalysisCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MotionAnalysisCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MotionAnalysisCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MotionAnalysisCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MetaOutlierDomainRatio != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.MetaOutlierDomainRatio))))
		i--
		dAtA[i] = 0x4d
	}
	if m.MetaAnalysis != nil {
		i = encodeVarintMotionAnalysisCalculator(dAtA, i, uint64(*m.MetaAnalysis))
		i--
		dAtA[i] = 0x40
	}
	if m.BypassMode != nil {
		i--
		if *m.BypassMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.MetaModelsPerFrame != nil {
		i = encodeVarintMotionAnalysisCalculator(dAtA, i, uint64(*m.MetaModelsPerFrame))
		i--
		dAtA[i] = 0x30
	}
	if m.HybridSelectionCamera != nil {
		i--
		if *m.HybridSelectionCamera {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.SelectionAnalysis != nil {
		i = encodeVarintMotionAnalysisCalculator(dAtA, i, uint64(*m.SelectionAnalysis))
		i--
		dAtA[i] = 0x20
	}
	if m.AnalysisOptions != nil {
		{
			size, err := m.AnalysisOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMotionAnalysisCalculator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HomographyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HomographyData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HomographyData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintMotionAnalysisCalculator(dAtA, i, uint64(m.FrameHeight))
	i--
	dAtA[i] = 0x20
	i = encodeVarintMotionAnalysisCalculator(dAtA, i, uint64(m.FrameWidth))
	i--
	dAtA[i] = 0x18
	if len(m.HistogramCountData) > 0 {
		dAtA3 := make([]byte, len(m.HistogramCountData)*10)
		var j2 int
		for _, num := range m.HistogramCountData {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintMotionAnalysisCalculator(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MotionHomographyData) > 0 {
		for iNdEx := len(m.MotionHomographyData) - 1; iNdEx >= 0; iNdEx-- {
			f4 := math.Float32bits(float32(m.MotionHomographyData[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f4))
		}
		i = encodeVarintMotionAnalysisCalculator(dAtA, i, uint64(len(m.MotionHomographyData)*4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMotionAnalysisCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovMotionAnalysisCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MotionAnalysisCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnalysisOptions != nil {
		l = m.AnalysisOptions.Size()
		n += 1 + l + sovMotionAnalysisCalculator(uint64(l))
	}
	if m.SelectionAnalysis != nil {
		n += 1 + sovMotionAnalysisCalculator(uint64(*m.SelectionAnalysis))
	}
	if m.HybridSelectionCamera != nil {
		n += 2
	}
	if m.MetaModelsPerFrame != nil {
		n += 1 + sovMotionAnalysisCalculator(uint64(*m.MetaModelsPerFrame))
	}
	if m.BypassMode != nil {
		n += 2
	}
	if m.MetaAnalysis != nil {
		n += 1 + sovMotionAnalysisCalculator(uint64(*m.MetaAnalysis))
	}
	if m.MetaOutlierDomainRatio != nil {
		n += 5
	}
	return n
}

func (m *HomographyData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MotionHomographyData) > 0 {
		n += 1 + sovMotionAnalysisCalculator(uint64(len(m.MotionHomographyData)*4)) + len(m.MotionHomographyData)*4
	}
	if len(m.HistogramCountData) > 0 {
		l = 0
		for _, e := range m.HistogramCountData {
			l += sovMotionAnalysisCalculator(uint64(e))
		}
		n += 1 + sovMotionAnalysisCalculator(uint64(l)) + l
	}
	n += 1 + sovMotionAnalysisCalculator(uint64(m.FrameWidth))
	n += 1 + sovMotionAnalysisCalculator(uint64(m.FrameHeight))
	return n
}

func sovMotionAnalysisCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMotionAnalysisCalculator(x uint64) (n int) {
	return sovMotionAnalysisCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MotionAnalysisCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MotionAnalysisCalculatorOptions{`,
		`AnalysisOptions:` + strings.Replace(fmt.Sprintf("%v", this.AnalysisOptions), "MotionAnalysisOptions", "tracking.MotionAnalysisOptions", 1) + `,`,
		`SelectionAnalysis:` + valueToStringMotionAnalysisCalculator(this.SelectionAnalysis) + `,`,
		`HybridSelectionCamera:` + valueToStringMotionAnalysisCalculator(this.HybridSelectionCamera) + `,`,
		`MetaModelsPerFrame:` + valueToStringMotionAnalysisCalculator(this.MetaModelsPerFrame) + `,`,
		`BypassMode:` + valueToStringMotionAnalysisCalculator(this.BypassMode) + `,`,
		`MetaAnalysis:` + valueToStringMotionAnalysisCalculator(this.MetaAnalysis) + `,`,
		`MetaOutlierDomainRatio:` + valueToStringMotionAnalysisCalculator(this.MetaOutlierDomainRatio) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HomographyData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HomographyData{`,
		`MotionHomographyData:` + fmt.Sprintf("%v", this.MotionHomographyData) + `,`,
		`HistogramCountData:` + fmt.Sprintf("%v", this.HistogramCountData) + `,`,
		`FrameWidth:` + fmt.Sprintf("%v", this.FrameWidth) + `,`,
		`FrameHeight:` + fmt.Sprintf("%v", this.FrameHeight) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMotionAnalysisCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MotionAnalysisCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMotionAnalysisCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MotionAnalysisCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MotionAnalysisCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalysisOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysisCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMotionAnalysisCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMotionAnalysisCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AnalysisOptions == nil {
				m.AnalysisOptions = &tracking.MotionAnalysisOptions{}
			}
			if err := m.AnalysisOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectionAnalysis", wireType)
			}
			var v MotionAnalysisCalculatorOptions_SelectionAnalysis
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysisCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MotionAnalysisCalculatorOptions_SelectionAnalysis(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SelectionAnalysis = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HybridSelectionCamera", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysisCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.HybridSelectionCamera = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaModelsPerFrame", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysisCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MetaModelsPerFrame = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BypassMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysisCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.BypassMode = &b
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaAnalysis", wireType)
			}
			var v MotionAnalysisCalculatorOptions_MetaAnalysis
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysisCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MotionAnalysisCalculatorOptions_MetaAnalysis(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MetaAnalysis = &v
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaOutlierDomainRatio", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.MetaOutlierDomainRatio = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipMotionAnalysisCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMotionAnalysisCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HomographyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMotionAnalysisCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HomographyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HomographyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.MotionHomographyData = append(m.MotionHomographyData, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMotionAnalysisCalculator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMotionAnalysisCalculator
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMotionAnalysisCalculator
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.MotionHomographyData) == 0 {
					m.MotionHomographyData = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.MotionHomographyData = append(m.MotionHomographyData, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MotionHomographyData", wireType)
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMotionAnalysisCalculator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HistogramCountData = append(m.HistogramCountData, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMotionAnalysisCalculator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMotionAnalysisCalculator
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMotionAnalysisCalculator
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.HistogramCountData) == 0 {
					m.HistogramCountData = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMotionAnalysisCalculator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HistogramCountData = append(m.HistogramCountData, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HistogramCountData", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameWidth", wireType)
			}
			m.FrameWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysisCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameWidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameHeight", wireType)
			}
			m.FrameHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysisCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMotionAnalysisCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMotionAnalysisCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMotionAnalysisCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMotionAnalysisCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMotionAnalysisCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMotionAnalysisCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMotionAnalysisCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMotionAnalysisCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMotionAnalysisCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMotionAnalysisCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMotionAnalysisCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMotionAnalysisCalculator = fmt.Errorf("proto: unexpected end of group")
)
