// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/calculators/video/opencv_video_encoder_calculator.proto

package video

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OpenCvVideoEncoderCalculatorOptions struct {
	Codec       string  `protobuf:"bytes,1,opt,name=codec" json:"codec"`
	VideoFormat string  `protobuf:"bytes,2,opt,name=video_format,json=videoFormat" json:"video_format"`
	Fps         float64 `protobuf:"fixed64,3,opt,name=fps" json:"fps"`
	Width       int32   `protobuf:"varint,4,opt,name=width" json:"width"`
	Height      int32   `protobuf:"varint,5,opt,name=height" json:"height"`
}

func (m *OpenCvVideoEncoderCalculatorOptions) Reset()      { *m = OpenCvVideoEncoderCalculatorOptions{} }
func (*OpenCvVideoEncoderCalculatorOptions) ProtoMessage() {}
func (*OpenCvVideoEncoderCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9d0625f02b7b541, []int{0}
}
func (m *OpenCvVideoEncoderCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenCvVideoEncoderCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenCvVideoEncoderCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenCvVideoEncoderCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenCvVideoEncoderCalculatorOptions.Merge(m, src)
}
func (m *OpenCvVideoEncoderCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *OpenCvVideoEncoderCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenCvVideoEncoderCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_OpenCvVideoEncoderCalculatorOptions proto.InternalMessageInfo

func (m *OpenCvVideoEncoderCalculatorOptions) GetCodec() string {
	if m != nil {
		return m.Codec
	}
	return ""
}

func (m *OpenCvVideoEncoderCalculatorOptions) GetVideoFormat() string {
	if m != nil {
		return m.VideoFormat
	}
	return ""
}

func (m *OpenCvVideoEncoderCalculatorOptions) GetFps() float64 {
	if m != nil {
		return m.Fps
	}
	return 0
}

func (m *OpenCvVideoEncoderCalculatorOptions) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *OpenCvVideoEncoderCalculatorOptions) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

var E_OpenCvVideoEncoderCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*OpenCvVideoEncoderCalculatorOptions)(nil),
	Field:         207936763,
	Name:          "mediapipe.OpenCvVideoEncoderCalculatorOptions.ext",
	Tag:           "bytes,207936763,opt,name=ext",
	Filename:      "mediapipe/calculators/video/opencv_video_encoder_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_OpenCvVideoEncoderCalculatorOptions_Ext)
	proto.RegisterType((*OpenCvVideoEncoderCalculatorOptions)(nil), "mediapipe.OpenCvVideoEncoderCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/calculators/video/opencv_video_encoder_calculator.proto", fileDescriptor_c9d0625f02b7b541)
}

var fileDescriptor_c9d0625f02b7b541 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0xcc, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f,
	0x2a, 0xd6, 0x2f, 0xcb, 0x4c, 0x49, 0xcd, 0xd7, 0xcf, 0x2f, 0x48, 0xcd, 0x4b, 0x2e, 0x8b, 0x07,
	0x73, 0xe2, 0x53, 0xf3, 0x92, 0xf3, 0x53, 0x52, 0x8b, 0xe2, 0x11, 0xca, 0xf4, 0x0a, 0x8a, 0xf2,
	0x4b, 0xf2, 0x85, 0x38, 0xe1, 0x46, 0x48, 0xa9, 0x20, 0x4c, 0x4b, 0x2b, 0x4a, 0xcc, 0x4d, 0x2d,
	0xcf, 0x2f, 0xca, 0xd6, 0x47, 0xd7, 0xa0, 0x34, 0x9f, 0x89, 0x4b, 0xd9, 0xbf, 0x20, 0x35, 0xcf,
	0xb9, 0x2c, 0x0c, 0x64, 0xb2, 0x2b, 0xc4, 0x60, 0x67, 0xb8, 0x32, 0xff, 0x82, 0x92, 0xcc, 0xfc,
	0xbc, 0x62, 0x21, 0x29, 0x2e, 0x56, 0x90, 0x4c, 0xb2, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xa7, 0x13,
	0xcb, 0x89, 0x7b, 0xf2, 0x0c, 0x41, 0x10, 0x21, 0x21, 0x75, 0x2e, 0x1e, 0x88, 0xb3, 0xd2, 0xf2,
	0x8b, 0x72, 0x13, 0x4b, 0x24, 0x98, 0x90, 0x94, 0x70, 0x83, 0x65, 0xdc, 0xc0, 0x12, 0x42, 0x62,
	0x5c, 0xcc, 0x69, 0x05, 0xc5, 0x12, 0xcc, 0x0a, 0x8c, 0x1a, 0x8c, 0x50, 0x79, 0x90, 0x00, 0xc8,
	0xf0, 0xf2, 0xcc, 0x94, 0x92, 0x0c, 0x09, 0x16, 0x05, 0x46, 0x0d, 0x56, 0x98, 0xe1, 0x60, 0x21,
	0x21, 0x19, 0x2e, 0xb6, 0x8c, 0xd4, 0xcc, 0xf4, 0x8c, 0x12, 0x09, 0x56, 0x24, 0x49, 0xa8, 0x98,
	0x51, 0x22, 0x17, 0x73, 0x6a, 0x45, 0x89, 0x90, 0x8c, 0x1e, 0xdc, 0xb3, 0x7a, 0x18, 0x6e, 0x97,
	0xf8, 0xbd, 0x73, 0x72, 0xb2, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0x1e, 0x92, 0x32, 0x22, 0x3c, 0x1d,
	0x04, 0x32, 0xdb, 0x29, 0xf7, 0xc2, 0x43, 0x39, 0x86, 0x1b, 0x0f, 0xe5, 0x18, 0x3e, 0x3c, 0x94,
	0x63, 0x6c, 0x78, 0x24, 0xc7, 0xb8, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e,
	0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0xf8, 0xe2, 0x91, 0x1c, 0xc3, 0x87, 0x47, 0x72, 0x8c, 0x13,
	0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x79, 0x7a, 0x66,
	0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x7a, 0x7e, 0x7e, 0x7a, 0x4e, 0xaa, 0x3e,
	0x22, 0x3e, 0xf0, 0xc4, 0x33, 0x20, 0x00, 0x00, 0xff, 0xff, 0x30, 0x28, 0x79, 0x22, 0x05, 0x02,
	0x00, 0x00,
}

func (this *OpenCvVideoEncoderCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenCvVideoEncoderCalculatorOptions)
	if !ok {
		that2, ok := that.(OpenCvVideoEncoderCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Codec != that1.Codec {
		return false
	}
	if this.VideoFormat != that1.VideoFormat {
		return false
	}
	if this.Fps != that1.Fps {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	return true
}
func (this *OpenCvVideoEncoderCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&video.OpenCvVideoEncoderCalculatorOptions{")
	s = append(s, "Codec: "+fmt.Sprintf("%#v", this.Codec)+",\n")
	s = append(s, "VideoFormat: "+fmt.Sprintf("%#v", this.VideoFormat)+",\n")
	s = append(s, "Fps: "+fmt.Sprintf("%#v", this.Fps)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOpencvVideoEncoderCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *OpenCvVideoEncoderCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenCvVideoEncoderCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenCvVideoEncoderCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintOpencvVideoEncoderCalculator(dAtA, i, uint64(m.Height))
	i--
	dAtA[i] = 0x28
	i = encodeVarintOpencvVideoEncoderCalculator(dAtA, i, uint64(m.Width))
	i--
	dAtA[i] = 0x20
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Fps))))
	i--
	dAtA[i] = 0x19
	i -= len(m.VideoFormat)
	copy(dAtA[i:], m.VideoFormat)
	i = encodeVarintOpencvVideoEncoderCalculator(dAtA, i, uint64(len(m.VideoFormat)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Codec)
	copy(dAtA[i:], m.Codec)
	i = encodeVarintOpencvVideoEncoderCalculator(dAtA, i, uint64(len(m.Codec)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintOpencvVideoEncoderCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovOpencvVideoEncoderCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OpenCvVideoEncoderCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Codec)
	n += 1 + l + sovOpencvVideoEncoderCalculator(uint64(l))
	l = len(m.VideoFormat)
	n += 1 + l + sovOpencvVideoEncoderCalculator(uint64(l))
	n += 9
	n += 1 + sovOpencvVideoEncoderCalculator(uint64(m.Width))
	n += 1 + sovOpencvVideoEncoderCalculator(uint64(m.Height))
	return n
}

func sovOpencvVideoEncoderCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOpencvVideoEncoderCalculator(x uint64) (n int) {
	return sovOpencvVideoEncoderCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *OpenCvVideoEncoderCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenCvVideoEncoderCalculatorOptions{`,
		`Codec:` + fmt.Sprintf("%v", this.Codec) + `,`,
		`VideoFormat:` + fmt.Sprintf("%v", this.VideoFormat) + `,`,
		`Fps:` + fmt.Sprintf("%v", this.Fps) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOpencvVideoEncoderCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *OpenCvVideoEncoderCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpencvVideoEncoderCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenCvVideoEncoderCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenCvVideoEncoderCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpencvVideoEncoderCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpencvVideoEncoderCalculator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpencvVideoEncoderCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Codec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpencvVideoEncoderCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpencvVideoEncoderCalculator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpencvVideoEncoderCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoFormat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fps", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Fps = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpencvVideoEncoderCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpencvVideoEncoderCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOpencvVideoEncoderCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOpencvVideoEncoderCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOpencvVideoEncoderCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOpencvVideoEncoderCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpencvVideoEncoderCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpencvVideoEncoderCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOpencvVideoEncoderCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOpencvVideoEncoderCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOpencvVideoEncoderCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOpencvVideoEncoderCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOpencvVideoEncoderCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOpencvVideoEncoderCalculator = fmt.Errorf("proto: unexpected end of group")
)
