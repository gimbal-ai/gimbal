// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/calculator_contract_test.proto

package framework

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CalculatorContractTestOptions struct {
	TestField *float64 `protobuf:"fixed64,1,opt,name=test_field,json=testField,def=-1" json:"test_field,omitempty"`
}

func (m *CalculatorContractTestOptions) Reset()      { *m = CalculatorContractTestOptions{} }
func (*CalculatorContractTestOptions) ProtoMessage() {}
func (*CalculatorContractTestOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2591c0ae6ccbd2f, []int{0}
}
func (m *CalculatorContractTestOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalculatorContractTestOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalculatorContractTestOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalculatorContractTestOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculatorContractTestOptions.Merge(m, src)
}
func (m *CalculatorContractTestOptions) XXX_Size() int {
	return m.Size()
}
func (m *CalculatorContractTestOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculatorContractTestOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CalculatorContractTestOptions proto.InternalMessageInfo

const Default_CalculatorContractTestOptions_TestField float64 = -1

func (m *CalculatorContractTestOptions) GetTestField() float64 {
	if m != nil && m.TestField != nil {
		return *m.TestField
	}
	return Default_CalculatorContractTestOptions_TestField
}

var E_CalculatorContractTestOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*CalculatorOptions)(nil),
	ExtensionType: (*CalculatorContractTestOptions)(nil),
	Field:         188754615,
	Name:          "mediapipe.CalculatorContractTestOptions.ext",
	Tag:           "bytes,188754615,opt,name=ext",
	Filename:      "mediapipe/framework/calculator_contract_test.proto",
}

func init() {
	proto.RegisterExtension(E_CalculatorContractTestOptions_Ext)
	proto.RegisterType((*CalculatorContractTestOptions)(nil), "mediapipe.CalculatorContractTestOptions")
}

func init() {
	proto.RegisterFile("mediapipe/framework/calculator_contract_test.proto", fileDescriptor_e2591c0ae6ccbd2f)
}

var fileDescriptor_e2591c0ae6ccbd2f = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0xca, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x2b, 0x4a, 0xcc, 0x4d, 0x2d, 0xcf, 0x2f, 0xca, 0xd6,
	0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0x8a, 0x4f, 0xce, 0xcf, 0x2b, 0x29,
	0x4a, 0x4c, 0x2e, 0x89, 0x2f, 0x49, 0x2d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x84, 0xeb, 0x91, 0x52, 0xc1, 0xaf, 0x1d, 0xa2, 0x41, 0x69, 0x3e, 0x23, 0x97, 0xac, 0x33, 0x5c,
	0xd0, 0x19, 0x6a, 0x64, 0x48, 0x6a, 0x71, 0x89, 0x7f, 0x41, 0x49, 0x66, 0x7e, 0x5e, 0xb1, 0x90,
	0x22, 0x17, 0x17, 0xc8, 0x82, 0xf8, 0xb4, 0xcc, 0xd4, 0x9c, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d,
	0x46, 0x2b, 0x26, 0x5d, 0xc3, 0x20, 0x4e, 0x90, 0xa8, 0x1b, 0x48, 0xd0, 0x28, 0x9a, 0x8b, 0x39,
	0xb5, 0xa2, 0x44, 0x48, 0x46, 0x0f, 0x6e, 0xa5, 0x1e, 0xc2, 0x4c, 0xa8, 0x39, 0x12, 0xdb, 0xaf,
	0x36, 0x44, 0x29, 0x30, 0x6a, 0x70, 0x1b, 0x69, 0x60, 0x55, 0x86, 0xc5, 0xea, 0x20, 0x90, 0xa9,
	0x4e, 0xa9, 0x17, 0x1e, 0xca, 0x31, 0xdc, 0x78, 0x28, 0xc7, 0xf0, 0xe1, 0xa1, 0x1c, 0x63, 0xc3,
	0x23, 0x39, 0xc6, 0x15, 0x8f, 0xe4, 0x18, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1,
	0xc1, 0x23, 0x39, 0xc6, 0x17, 0x8f, 0xe4, 0x18, 0x3e, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e,
	0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xf4, 0xd3, 0x33, 0x4b, 0x32, 0x4a,
	0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0x11, 0xe1, 0x81,
	0x25, 0x64, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0x81, 0x23, 0x5a, 0x68, 0x6e, 0x01, 0x00, 0x00,
}

func (this *CalculatorContractTestOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CalculatorContractTestOptions)
	if !ok {
		that2, ok := that.(CalculatorContractTestOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TestField != nil && that1.TestField != nil {
		if *this.TestField != *that1.TestField {
			return false
		}
	} else if this.TestField != nil {
		return false
	} else if that1.TestField != nil {
		return false
	}
	return true
}
func (this *CalculatorContractTestOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&framework.CalculatorContractTestOptions{")
	if this.TestField != nil {
		s = append(s, "TestField: "+valueToGoStringCalculatorContractTest(this.TestField, "float64")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCalculatorContractTest(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CalculatorContractTestOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculatorContractTestOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalculatorContractTestOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TestField != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.TestField))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintCalculatorContractTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovCalculatorContractTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CalculatorContractTestOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TestField != nil {
		n += 9
	}
	return n
}

func sovCalculatorContractTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCalculatorContractTest(x uint64) (n int) {
	return sovCalculatorContractTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CalculatorContractTestOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CalculatorContractTestOptions{`,
		`TestField:` + valueToStringCalculatorContractTest(this.TestField) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCalculatorContractTest(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CalculatorContractTestOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculatorContractTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculatorContractTestOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculatorContractTestOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestField", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.TestField = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipCalculatorContractTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCalculatorContractTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCalculatorContractTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCalculatorContractTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalculatorContractTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalculatorContractTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCalculatorContractTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCalculatorContractTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCalculatorContractTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCalculatorContractTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCalculatorContractTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCalculatorContractTest = fmt.Errorf("proto: unexpected end of group")
)
