// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/calculator_profile.proto

package framework

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GraphTrace_EventType int32

const (
	EVENT_TYPE_UNKNOWN                  GraphTrace_EventType = 0
	EVENT_TYPE_OPEN                     GraphTrace_EventType = 1
	EVENT_TYPE_PROCESS                  GraphTrace_EventType = 2
	EVENT_TYPE_CLOSE                    GraphTrace_EventType = 3
	EVENT_TYPE_NOT_READY                GraphTrace_EventType = 4
	EVENT_TYPE_READY_FOR_PROCESS        GraphTrace_EventType = 5
	EVENT_TYPE_READY_FOR_CLOSE          GraphTrace_EventType = 6
	EVENT_TYPE_THROTTLED                GraphTrace_EventType = 7
	EVENT_TYPE_UNTHROTTLED              GraphTrace_EventType = 8
	EVENT_TYPE_CPU_TASK_USER            GraphTrace_EventType = 9
	EVENT_TYPE_CPU_TASK_SYSTEM          GraphTrace_EventType = 10
	EVENT_TYPE_GPU_TASK                 GraphTrace_EventType = 11
	EVENT_TYPE_DSP_TASK                 GraphTrace_EventType = 12
	EVENT_TYPE_TPU_TASK                 GraphTrace_EventType = 13
	EVENT_TYPE_GPU_CALIBRATION          GraphTrace_EventType = 14
	EVENT_TYPE_PACKET_QUEUED            GraphTrace_EventType = 15
	EVENT_TYPE_GPU_TASK_INVOKE          GraphTrace_EventType = 16
	EVENT_TYPE_TPU_TASK_INVOKE          GraphTrace_EventType = 17
	EVENT_TYPE_CPU_TASK_INVOKE          GraphTrace_EventType = 18
	EVENT_TYPE_GPU_TASK_INVOKE_ADVANCED GraphTrace_EventType = 19
	EVENT_TYPE_TPU_TASK_INVOKE_ASYNC    GraphTrace_EventType = 20
)

var GraphTrace_EventType_name = map[int32]string{
	0:  "EVENT_TYPE_UNKNOWN",
	1:  "EVENT_TYPE_OPEN",
	2:  "EVENT_TYPE_PROCESS",
	3:  "EVENT_TYPE_CLOSE",
	4:  "EVENT_TYPE_NOT_READY",
	5:  "EVENT_TYPE_READY_FOR_PROCESS",
	6:  "EVENT_TYPE_READY_FOR_CLOSE",
	7:  "EVENT_TYPE_THROTTLED",
	8:  "EVENT_TYPE_UNTHROTTLED",
	9:  "EVENT_TYPE_CPU_TASK_USER",
	10: "EVENT_TYPE_CPU_TASK_SYSTEM",
	11: "EVENT_TYPE_GPU_TASK",
	12: "EVENT_TYPE_DSP_TASK",
	13: "EVENT_TYPE_TPU_TASK",
	14: "EVENT_TYPE_GPU_CALIBRATION",
	15: "EVENT_TYPE_PACKET_QUEUED",
	16: "EVENT_TYPE_GPU_TASK_INVOKE",
	17: "EVENT_TYPE_TPU_TASK_INVOKE",
	18: "EVENT_TYPE_CPU_TASK_INVOKE",
	19: "EVENT_TYPE_GPU_TASK_INVOKE_ADVANCED",
	20: "EVENT_TYPE_TPU_TASK_INVOKE_ASYNC",
}

var GraphTrace_EventType_value = map[string]int32{
	"EVENT_TYPE_UNKNOWN":                  0,
	"EVENT_TYPE_OPEN":                     1,
	"EVENT_TYPE_PROCESS":                  2,
	"EVENT_TYPE_CLOSE":                    3,
	"EVENT_TYPE_NOT_READY":                4,
	"EVENT_TYPE_READY_FOR_PROCESS":        5,
	"EVENT_TYPE_READY_FOR_CLOSE":          6,
	"EVENT_TYPE_THROTTLED":                7,
	"EVENT_TYPE_UNTHROTTLED":              8,
	"EVENT_TYPE_CPU_TASK_USER":            9,
	"EVENT_TYPE_CPU_TASK_SYSTEM":          10,
	"EVENT_TYPE_GPU_TASK":                 11,
	"EVENT_TYPE_DSP_TASK":                 12,
	"EVENT_TYPE_TPU_TASK":                 13,
	"EVENT_TYPE_GPU_CALIBRATION":          14,
	"EVENT_TYPE_PACKET_QUEUED":            15,
	"EVENT_TYPE_GPU_TASK_INVOKE":          16,
	"EVENT_TYPE_TPU_TASK_INVOKE":          17,
	"EVENT_TYPE_CPU_TASK_INVOKE":          18,
	"EVENT_TYPE_GPU_TASK_INVOKE_ADVANCED": 19,
	"EVENT_TYPE_TPU_TASK_INVOKE_ASYNC":    20,
}

func (x GraphTrace_EventType) Enum() *GraphTrace_EventType {
	p := new(GraphTrace_EventType)
	*p = x
	return p
}

func (x GraphTrace_EventType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(GraphTrace_EventType_name, int32(x))
}

func (x *GraphTrace_EventType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GraphTrace_EventType_value, data, "GraphTrace_EventType")
	if err != nil {
		return err
	}
	*x = GraphTrace_EventType(value)
	return nil
}

func (GraphTrace_EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6dc00e7568aa8959, []int{3, 0}
}

type TimeHistogram struct {
	Total            *int64  `protobuf:"varint,1,opt,name=total,def=0" json:"total,omitempty"`
	IntervalSizeUsec *int64  `protobuf:"varint,2,opt,name=interval_size_usec,json=intervalSizeUsec,def=1000000" json:"interval_size_usec,omitempty"`
	NumIntervals     *int64  `protobuf:"varint,3,opt,name=num_intervals,json=numIntervals,def=1" json:"num_intervals,omitempty"`
	Count            []int64 `protobuf:"varint,4,rep,name=count" json:"count,omitempty"`
}

func (m *TimeHistogram) Reset()      { *m = TimeHistogram{} }
func (*TimeHistogram) ProtoMessage() {}
func (*TimeHistogram) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dc00e7568aa8959, []int{0}
}
func (m *TimeHistogram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeHistogram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeHistogram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeHistogram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeHistogram.Merge(m, src)
}
func (m *TimeHistogram) XXX_Size() int {
	return m.Size()
}
func (m *TimeHistogram) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeHistogram.DiscardUnknown(m)
}

var xxx_messageInfo_TimeHistogram proto.InternalMessageInfo

const Default_TimeHistogram_Total int64 = 0
const Default_TimeHistogram_IntervalSizeUsec int64 = 1000000
const Default_TimeHistogram_NumIntervals int64 = 1

func (m *TimeHistogram) GetTotal() int64 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return Default_TimeHistogram_Total
}

func (m *TimeHistogram) GetIntervalSizeUsec() int64 {
	if m != nil && m.IntervalSizeUsec != nil {
		return *m.IntervalSizeUsec
	}
	return Default_TimeHistogram_IntervalSizeUsec
}

func (m *TimeHistogram) GetNumIntervals() int64 {
	if m != nil && m.NumIntervals != nil {
		return *m.NumIntervals
	}
	return Default_TimeHistogram_NumIntervals
}

func (m *TimeHistogram) GetCount() []int64 {
	if m != nil {
		return m.Count
	}
	return nil
}

type StreamProfile struct {
	Name     string         `protobuf:"bytes,1,opt,name=name" json:"name"`
	BackEdge *bool          `protobuf:"varint,2,opt,name=back_edge,json=backEdge,def=0" json:"back_edge,omitempty"`
	Latency  *TimeHistogram `protobuf:"bytes,3,opt,name=latency" json:"latency,omitempty"`
}

func (m *StreamProfile) Reset()      { *m = StreamProfile{} }
func (*StreamProfile) ProtoMessage() {}
func (*StreamProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dc00e7568aa8959, []int{1}
}
func (m *StreamProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamProfile.Merge(m, src)
}
func (m *StreamProfile) XXX_Size() int {
	return m.Size()
}
func (m *StreamProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamProfile.DiscardUnknown(m)
}

var xxx_messageInfo_StreamProfile proto.InternalMessageInfo

const Default_StreamProfile_BackEdge bool = false

func (m *StreamProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StreamProfile) GetBackEdge() bool {
	if m != nil && m.BackEdge != nil {
		return *m.BackEdge
	}
	return Default_StreamProfile_BackEdge
}

func (m *StreamProfile) GetLatency() *TimeHistogram {
	if m != nil {
		return m.Latency
	}
	return nil
}

type CalculatorProfile struct {
	Name                 string           `protobuf:"bytes,1,opt,name=name" json:"name"`
	OpenRuntime          *int64           `protobuf:"varint,2,opt,name=open_runtime,json=openRuntime,def=0" json:"open_runtime,omitempty"`
	CloseRuntime         *int64           `protobuf:"varint,3,opt,name=close_runtime,json=closeRuntime,def=0" json:"close_runtime,omitempty"`
	ProcessRuntime       *TimeHistogram   `protobuf:"bytes,4,opt,name=process_runtime,json=processRuntime" json:"process_runtime,omitempty"`
	ProcessInputLatency  *TimeHistogram   `protobuf:"bytes,5,opt,name=process_input_latency,json=processInputLatency" json:"process_input_latency,omitempty"`
	ProcessOutputLatency *TimeHistogram   `protobuf:"bytes,6,opt,name=process_output_latency,json=processOutputLatency" json:"process_output_latency,omitempty"`
	InputStreamProfiles  []*StreamProfile `protobuf:"bytes,7,rep,name=input_stream_profiles,json=inputStreamProfiles" json:"input_stream_profiles,omitempty"`
}

func (m *CalculatorProfile) Reset()      { *m = CalculatorProfile{} }
func (*CalculatorProfile) ProtoMessage() {}
func (*CalculatorProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dc00e7568aa8959, []int{2}
}
func (m *CalculatorProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalculatorProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalculatorProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalculatorProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculatorProfile.Merge(m, src)
}
func (m *CalculatorProfile) XXX_Size() int {
	return m.Size()
}
func (m *CalculatorProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculatorProfile.DiscardUnknown(m)
}

var xxx_messageInfo_CalculatorProfile proto.InternalMessageInfo

const Default_CalculatorProfile_OpenRuntime int64 = 0
const Default_CalculatorProfile_CloseRuntime int64 = 0

func (m *CalculatorProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CalculatorProfile) GetOpenRuntime() int64 {
	if m != nil && m.OpenRuntime != nil {
		return *m.OpenRuntime
	}
	return Default_CalculatorProfile_OpenRuntime
}

func (m *CalculatorProfile) GetCloseRuntime() int64 {
	if m != nil && m.CloseRuntime != nil {
		return *m.CloseRuntime
	}
	return Default_CalculatorProfile_CloseRuntime
}

func (m *CalculatorProfile) GetProcessRuntime() *TimeHistogram {
	if m != nil {
		return m.ProcessRuntime
	}
	return nil
}

func (m *CalculatorProfile) GetProcessInputLatency() *TimeHistogram {
	if m != nil {
		return m.ProcessInputLatency
	}
	return nil
}

func (m *CalculatorProfile) GetProcessOutputLatency() *TimeHistogram {
	if m != nil {
		return m.ProcessOutputLatency
	}
	return nil
}

func (m *CalculatorProfile) GetInputStreamProfiles() []*StreamProfile {
	if m != nil {
		return m.InputStreamProfiles
	}
	return nil
}

type GraphTrace struct {
	BaseTime        int64                         `protobuf:"varint,1,opt,name=base_time,json=baseTime" json:"base_time"`
	BaseTimestamp   int64                         `protobuf:"varint,2,opt,name=base_timestamp,json=baseTimestamp" json:"base_timestamp"`
	CalculatorName  []string                      `protobuf:"bytes,3,rep,name=calculator_name,json=calculatorName" json:"calculator_name,omitempty"`
	StreamName      []string                      `protobuf:"bytes,4,rep,name=stream_name,json=streamName" json:"stream_name,omitempty"`
	CalculatorTrace []*GraphTrace_CalculatorTrace `protobuf:"bytes,5,rep,name=calculator_trace,json=calculatorTrace" json:"calculator_trace,omitempty"`
}

func (m *GraphTrace) Reset()      { *m = GraphTrace{} }
func (*GraphTrace) ProtoMessage() {}
func (*GraphTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dc00e7568aa8959, []int{3}
}
func (m *GraphTrace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphTrace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GraphTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphTrace.Merge(m, src)
}
func (m *GraphTrace) XXX_Size() int {
	return m.Size()
}
func (m *GraphTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphTrace.DiscardUnknown(m)
}

var xxx_messageInfo_GraphTrace proto.InternalMessageInfo

func (m *GraphTrace) GetBaseTime() int64 {
	if m != nil {
		return m.BaseTime
	}
	return 0
}

func (m *GraphTrace) GetBaseTimestamp() int64 {
	if m != nil {
		return m.BaseTimestamp
	}
	return 0
}

func (m *GraphTrace) GetCalculatorName() []string {
	if m != nil {
		return m.CalculatorName
	}
	return nil
}

func (m *GraphTrace) GetStreamName() []string {
	if m != nil {
		return m.StreamName
	}
	return nil
}

func (m *GraphTrace) GetCalculatorTrace() []*GraphTrace_CalculatorTrace {
	if m != nil {
		return m.CalculatorTrace
	}
	return nil
}

type GraphTrace_StreamTrace struct {
	StartTime       int64 `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time"`
	FinishTime      int64 `protobuf:"varint,2,opt,name=finish_time,json=finishTime" json:"finish_time"`
	PacketTimestamp int64 `protobuf:"varint,3,opt,name=packet_timestamp,json=packetTimestamp" json:"packet_timestamp"`
	StreamId        int32 `protobuf:"varint,4,opt,name=stream_id,json=streamId" json:"stream_id"`
	PacketId        int64 `protobuf:"varint,5,opt,name=packet_id,json=packetId" json:"packet_id"` // Deprecated: Do not use.
	EventData       int64 `protobuf:"varint,6,opt,name=event_data,json=eventData" json:"event_data"`
}

func (m *GraphTrace_StreamTrace) Reset()      { *m = GraphTrace_StreamTrace{} }
func (*GraphTrace_StreamTrace) ProtoMessage() {}
func (*GraphTrace_StreamTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dc00e7568aa8959, []int{3, 0}
}
func (m *GraphTrace_StreamTrace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphTrace_StreamTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphTrace_StreamTrace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GraphTrace_StreamTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphTrace_StreamTrace.Merge(m, src)
}
func (m *GraphTrace_StreamTrace) XXX_Size() int {
	return m.Size()
}
func (m *GraphTrace_StreamTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphTrace_StreamTrace.DiscardUnknown(m)
}

var xxx_messageInfo_GraphTrace_StreamTrace proto.InternalMessageInfo

func (m *GraphTrace_StreamTrace) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *GraphTrace_StreamTrace) GetFinishTime() int64 {
	if m != nil {
		return m.FinishTime
	}
	return 0
}

func (m *GraphTrace_StreamTrace) GetPacketTimestamp() int64 {
	if m != nil {
		return m.PacketTimestamp
	}
	return 0
}

func (m *GraphTrace_StreamTrace) GetStreamId() int32 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

// Deprecated: Do not use.
func (m *GraphTrace_StreamTrace) GetPacketId() int64 {
	if m != nil {
		return m.PacketId
	}
	return 0
}

func (m *GraphTrace_StreamTrace) GetEventData() int64 {
	if m != nil {
		return m.EventData
	}
	return 0
}

type GraphTrace_CalculatorTrace struct {
	NodeId         int32                     `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id"`
	InputTimestamp int64                     `protobuf:"varint,2,opt,name=input_timestamp,json=inputTimestamp" json:"input_timestamp"`
	EventType      GraphTrace_EventType      `protobuf:"varint,3,opt,name=event_type,json=eventType,enum=mediapipe.GraphTrace_EventType" json:"event_type"`
	StartTime      int64                     `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time"`
	FinishTime     int64                     `protobuf:"varint,5,opt,name=finish_time,json=finishTime" json:"finish_time"`
	InputTrace     []*GraphTrace_StreamTrace `protobuf:"bytes,6,rep,name=input_trace,json=inputTrace" json:"input_trace,omitempty"`
	OutputTrace    []*GraphTrace_StreamTrace `protobuf:"bytes,7,rep,name=output_trace,json=outputTrace" json:"output_trace,omitempty"`
	ThreadId       int32                     `protobuf:"varint,8,opt,name=thread_id,json=threadId" json:"thread_id"`
}

func (m *GraphTrace_CalculatorTrace) Reset()      { *m = GraphTrace_CalculatorTrace{} }
func (*GraphTrace_CalculatorTrace) ProtoMessage() {}
func (*GraphTrace_CalculatorTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dc00e7568aa8959, []int{3, 1}
}
func (m *GraphTrace_CalculatorTrace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphTrace_CalculatorTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphTrace_CalculatorTrace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GraphTrace_CalculatorTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphTrace_CalculatorTrace.Merge(m, src)
}
func (m *GraphTrace_CalculatorTrace) XXX_Size() int {
	return m.Size()
}
func (m *GraphTrace_CalculatorTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphTrace_CalculatorTrace.DiscardUnknown(m)
}

var xxx_messageInfo_GraphTrace_CalculatorTrace proto.InternalMessageInfo

func (m *GraphTrace_CalculatorTrace) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *GraphTrace_CalculatorTrace) GetInputTimestamp() int64 {
	if m != nil {
		return m.InputTimestamp
	}
	return 0
}

func (m *GraphTrace_CalculatorTrace) GetEventType() GraphTrace_EventType {
	if m != nil {
		return m.EventType
	}
	return EVENT_TYPE_UNKNOWN
}

func (m *GraphTrace_CalculatorTrace) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *GraphTrace_CalculatorTrace) GetFinishTime() int64 {
	if m != nil {
		return m.FinishTime
	}
	return 0
}

func (m *GraphTrace_CalculatorTrace) GetInputTrace() []*GraphTrace_StreamTrace {
	if m != nil {
		return m.InputTrace
	}
	return nil
}

func (m *GraphTrace_CalculatorTrace) GetOutputTrace() []*GraphTrace_StreamTrace {
	if m != nil {
		return m.OutputTrace
	}
	return nil
}

func (m *GraphTrace_CalculatorTrace) GetThreadId() int32 {
	if m != nil {
		return m.ThreadId
	}
	return 0
}

type GraphProfile struct {
	GraphTrace         []*GraphTrace          `protobuf:"bytes,1,rep,name=graph_trace,json=graphTrace" json:"graph_trace,omitempty"`
	CalculatorProfiles []*CalculatorProfile   `protobuf:"bytes,2,rep,name=calculator_profiles,json=calculatorProfiles" json:"calculator_profiles,omitempty"`
	Config             *CalculatorGraphConfig `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
}

func (m *GraphProfile) Reset()      { *m = GraphProfile{} }
func (*GraphProfile) ProtoMessage() {}
func (*GraphProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dc00e7568aa8959, []int{4}
}
func (m *GraphProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GraphProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphProfile.Merge(m, src)
}
func (m *GraphProfile) XXX_Size() int {
	return m.Size()
}
func (m *GraphProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphProfile.DiscardUnknown(m)
}

var xxx_messageInfo_GraphProfile proto.InternalMessageInfo

func (m *GraphProfile) GetGraphTrace() []*GraphTrace {
	if m != nil {
		return m.GraphTrace
	}
	return nil
}

func (m *GraphProfile) GetCalculatorProfiles() []*CalculatorProfile {
	if m != nil {
		return m.CalculatorProfiles
	}
	return nil
}

func (m *GraphProfile) GetConfig() *CalculatorGraphConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterEnum("mediapipe.GraphTrace_EventType", GraphTrace_EventType_name, GraphTrace_EventType_value)
	proto.RegisterType((*TimeHistogram)(nil), "mediapipe.TimeHistogram")
	proto.RegisterType((*StreamProfile)(nil), "mediapipe.StreamProfile")
	proto.RegisterType((*CalculatorProfile)(nil), "mediapipe.CalculatorProfile")
	proto.RegisterType((*GraphTrace)(nil), "mediapipe.GraphTrace")
	proto.RegisterType((*GraphTrace_StreamTrace)(nil), "mediapipe.GraphTrace.StreamTrace")
	proto.RegisterType((*GraphTrace_CalculatorTrace)(nil), "mediapipe.GraphTrace.CalculatorTrace")
	proto.RegisterType((*GraphProfile)(nil), "mediapipe.GraphProfile")
}

func init() {
	proto.RegisterFile("mediapipe/framework/calculator_profile.proto", fileDescriptor_6dc00e7568aa8959)
}

var fileDescriptor_6dc00e7568aa8959 = []byte{
	// 1169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x3b, 0x6f, 0xdb, 0x56,
	0x14, 0x16, 0x43, 0x3d, 0x8f, 0x64, 0x89, 0xb9, 0x72, 0x1c, 0x42, 0x48, 0x19, 0x45, 0x49, 0x9a,
	0x00, 0x6d, 0xa5, 0xc4, 0x40, 0x8b, 0x22, 0x9b, 0x1e, 0x6c, 0x22, 0x58, 0xa1, 0x54, 0x8a, 0x72,
	0xe1, 0x2e, 0x04, 0x43, 0x5d, 0xcb, 0x84, 0xc5, 0x07, 0x48, 0x2a, 0x85, 0x33, 0xb5, 0x40, 0x7f,
	0x40, 0xd7, 0x0e, 0xed, 0x5c, 0xf4, 0x97, 0x64, 0xab, 0xc7, 0x4c, 0x45, 0x2d, 0x2f, 0x9d, 0x8a,
	0x6c, 0x5d, 0x0b, 0xde, 0x4b, 0x4a, 0x34, 0x2d, 0xd7, 0xd1, 0xc6, 0xef, 0x7c, 0xe7, 0xbb, 0xe7,
	0xf1, 0x5d, 0xe8, 0xc2, 0xa7, 0x26, 0x9e, 0x1a, 0x9a, 0x63, 0x38, 0xb8, 0x75, 0xe8, 0x6a, 0x26,
	0xfe, 0xce, 0x76, 0x8f, 0x5b, 0xba, 0x36, 0xd7, 0x17, 0x73, 0xcd, 0xb7, 0x5d, 0xd5, 0x71, 0xed,
	0x43, 0x63, 0x8e, 0x9b, 0x8e, 0x6b, 0xfb, 0x36, 0x2a, 0xac, 0xd8, 0xb5, 0x07, 0xff, 0x9f, 0x48,
	0x13, 0x1a, 0xbf, 0x30, 0xb0, 0xa5, 0x18, 0x26, 0x7e, 0x61, 0x78, 0xbe, 0x3d, 0x73, 0x35, 0x13,
	0xdd, 0x86, 0x8c, 0x6f, 0xfb, 0xda, 0x9c, 0x67, 0xea, 0xcc, 0x63, 0xf6, 0x19, 0xf3, 0x44, 0xa6,
	0xdf, 0xe8, 0x73, 0x40, 0x86, 0xe5, 0x63, 0xf7, 0xb5, 0x36, 0x57, 0x3d, 0xe3, 0x0d, 0x56, 0x17,
	0x1e, 0xd6, 0xf9, 0x1b, 0x84, 0x95, 0x7b, 0xfa, 0x84, 0xfc, 0x64, 0x2e, 0xa2, 0x8c, 0x8d, 0x37,
	0x78, 0xe2, 0x61, 0x1d, 0x7d, 0x0c, 0x5b, 0xd6, 0xc2, 0x54, 0x23, 0xdc, 0xe3, 0x59, 0xaa, 0xfb,
	0x54, 0x2e, 0x59, 0x0b, 0xb3, 0x1f, 0xc1, 0x68, 0x1b, 0x32, 0xba, 0xbd, 0xb0, 0x7c, 0x3e, 0x5d,
	0x67, 0x1f, 0xb3, 0x32, 0xfd, 0x68, 0xfc, 0xc0, 0xc0, 0xd6, 0xd8, 0x77, 0xb1, 0x66, 0x8e, 0x68,
	0xa3, 0x88, 0x87, 0xb4, 0xa5, 0x99, 0x98, 0x94, 0x57, 0xe8, 0xa4, 0xdf, 0xfe, 0x79, 0x37, 0x25,
	0x13, 0x04, 0x35, 0xa0, 0xf0, 0x4a, 0xd3, 0x8f, 0x55, 0x3c, 0x9d, 0x61, 0x52, 0x57, 0xfe, 0x59,
	0xe6, 0x50, 0x9b, 0x7b, 0x58, 0xce, 0x07, 0xb8, 0x38, 0x9d, 0x61, 0xb4, 0x0b, 0xb9, 0xb9, 0xe6,
	0x63, 0x4b, 0x3f, 0x21, 0x75, 0x14, 0x77, 0xf9, 0xe6, 0x6a, 0x4e, 0xcd, 0x0b, 0x83, 0x90, 0x23,
	0x62, 0xe3, 0x77, 0x16, 0x6e, 0x76, 0x57, 0x83, 0xbb, 0xbe, 0x8e, 0x07, 0x50, 0xb2, 0x1d, 0x6c,
	0xa9, 0xee, 0xc2, 0xf2, 0x0d, 0x13, 0x87, 0x23, 0x62, 0x9e, 0xc8, 0xc5, 0x00, 0x96, 0x29, 0x1a,
	0xcc, 0x45, 0x9f, 0xdb, 0x1e, 0x5e, 0xd1, 0xd8, 0x88, 0x56, 0x22, 0x78, 0xc4, 0x6b, 0x43, 0xc5,
	0x71, 0x6d, 0x1d, 0x7b, 0xde, 0x8a, 0x99, 0xbe, 0xa6, 0xf2, 0x72, 0x98, 0x10, 0x49, 0x0c, 0xe0,
	0x56, 0x24, 0x61, 0x58, 0xce, 0xc2, 0x57, 0xa3, 0x11, 0x64, 0xae, 0x11, 0xaa, 0x86, 0x69, 0xfd,
	0x20, 0x6b, 0x40, 0x93, 0x90, 0x04, 0x3b, 0x91, 0x9a, 0xbd, 0xf0, 0xe3, 0x72, 0xd9, 0x6b, 0xe4,
	0xb6, 0xc3, 0xbc, 0x21, 0x49, 0x8b, 0xf4, 0x06, 0x70, 0x8b, 0x56, 0xe5, 0x91, 0x3d, 0x47, 0x8e,
	0xf6, 0xf8, 0x5c, 0x9d, 0x4d, 0xc8, 0x5d, 0x70, 0x82, 0x5c, 0x25, 0x69, 0x17, 0x30, 0xaf, 0xf1,
	0x63, 0x09, 0xe0, 0xb9, 0xab, 0x39, 0x47, 0x8a, 0xab, 0xe9, 0x18, 0xdd, 0x0b, 0x3c, 0xe1, 0x61,
	0x95, 0xcc, 0x8d, 0x38, 0x3a, 0x5c, 0x55, 0x3e, 0x80, 0x83, 0xf2, 0xd0, 0x27, 0x50, 0x5e, 0x51,
	0x3c, 0x5f, 0x33, 0x1d, 0xba, 0xb0, 0x90, 0xb7, 0x15, 0xf1, 0x48, 0x08, 0x3d, 0x82, 0x4a, 0xec,
	0xf2, 0x11, 0x03, 0xb0, 0x75, 0xf6, 0x71, 0x41, 0x2e, 0xaf, 0x61, 0x29, 0x30, 0xc1, 0x5d, 0x28,
	0x86, 0xfd, 0x10, 0x52, 0x9a, 0x90, 0x80, 0x42, 0x84, 0x30, 0x02, 0x2e, 0xa6, 0xe4, 0x07, 0xd5,
	0xf2, 0x19, 0xd2, 0xf1, 0xc3, 0x58, 0xc7, 0xeb, 0x56, 0x9a, 0x6b, 0x0b, 0x92, 0x6f, 0x39, 0x56,
	0x08, 0x01, 0x6a, 0xff, 0x32, 0x50, 0xa4, 0xd3, 0xa0, 0xbd, 0xdf, 0x07, 0xf0, 0x7c, 0xcd, 0xf5,
	0x2f, 0x37, 0x5f, 0x20, 0x38, 0xe9, 0xfe, 0x21, 0x14, 0x0f, 0x0d, 0xcb, 0xf0, 0x8e, 0xd4, 0xb5,
	0x57, 0x43, 0x16, 0xd0, 0x00, 0xa1, 0xb5, 0x80, 0x73, 0x34, 0xfd, 0x18, 0xfb, 0xb1, 0x31, 0xb1,
	0x31, 0x6e, 0x85, 0x46, 0xd7, 0x83, 0xba, 0x07, 0x85, 0xb0, 0x7f, 0x63, 0x4a, 0x0c, 0x9b, 0x89,
	0x06, 0x4f, 0xe1, 0xfe, 0x14, 0xdd, 0x87, 0x42, 0xa8, 0x69, 0x4c, 0x89, 0x15, 0xd9, 0x4e, 0x36,
	0xa0, 0xf0, 0x8c, 0x9c, 0xa7, 0x01, 0x42, 0x02, 0xfc, 0x1a, 0x5b, 0xbe, 0x3a, 0xd5, 0x7c, 0x8d,
	0x38, 0x6c, 0xd5, 0x04, 0xc1, 0x7b, 0x9a, 0xaf, 0xd5, 0x7e, 0x65, 0xa1, 0x92, 0x18, 0x0f, 0xfa,
	0x08, 0x72, 0x96, 0x3d, 0xc5, 0x81, 0x36, 0x13, 0x3b, 0x3e, 0x1b, 0x80, 0xfd, 0x29, 0xfa, 0x0c,
	0x2a, 0xd4, 0x75, 0x9b, 0xd7, 0x5e, 0x26, 0xc1, 0x75, 0x3b, 0xbd, 0xa8, 0x0c, 0xff, 0xc4, 0xa1,
	0x57, 0xb5, 0xbc, 0x7b, 0x77, 0xf3, 0x9e, 0xc4, 0x80, 0xa7, 0x9c, 0x38, 0xf8, 0x42, 0x9d, 0x01,
	0x90, 0xd8, 0x48, 0xfa, 0x83, 0x36, 0x92, 0xb9, 0x62, 0x23, 0x1d, 0x28, 0x86, 0x0d, 0x10, 0xeb,
	0x64, 0x89, 0x75, 0xee, 0x6d, 0x2e, 0x29, 0xe6, 0x0a, 0x19, 0x68, 0x67, 0x64, 0x46, 0x3d, 0x28,
	0x85, 0x57, 0x98, 0x8a, 0xe4, 0x3e, 0x54, 0xa4, 0x48, 0xd3, 0x56, 0x77, 0xcc, 0x3f, 0x72, 0xb1,
	0x36, 0x0d, 0x66, 0x9d, 0x8f, 0xaf, 0x9a, 0xc2, 0xfd, 0x69, 0xe3, 0x9f, 0x34, 0x14, 0x56, 0x73,
	0x41, 0x3b, 0x80, 0xc4, 0x7d, 0x51, 0x52, 0x54, 0xe5, 0x60, 0x24, 0xaa, 0x13, 0x69, 0x4f, 0x1a,
	0x7e, 0x23, 0x71, 0x29, 0x54, 0x85, 0x4a, 0x0c, 0x1f, 0x8e, 0x44, 0x89, 0x63, 0x12, 0xe4, 0x91,
	0x3c, 0xec, 0x8a, 0xe3, 0x31, 0x77, 0x03, 0x6d, 0x03, 0x17, 0xc3, 0xbb, 0x83, 0xe1, 0x58, 0xe4,
	0x58, 0xc4, 0xc3, 0x76, 0x0c, 0x95, 0x86, 0x8a, 0x2a, 0x8b, 0xed, 0xde, 0x01, 0x97, 0x46, 0x75,
	0xb8, 0x13, 0x8b, 0x10, 0x54, 0xfd, 0x6a, 0x28, 0xaf, 0x14, 0x33, 0x48, 0x80, 0xda, 0x46, 0x06,
	0xd5, 0xce, 0x26, 0xb4, 0x95, 0x17, 0xf2, 0x50, 0x51, 0x06, 0x62, 0x8f, 0xcb, 0xa1, 0x1a, 0xec,
	0x5c, 0x68, 0x68, 0x1d, 0xcb, 0xa3, 0x3b, 0xc0, 0xc7, 0xeb, 0x1c, 0x4d, 0x54, 0xa5, 0x3d, 0xde,
	0x53, 0x27, 0x63, 0x51, 0xe6, 0x0a, 0x89, 0x33, 0x57, 0xd1, 0xf1, 0xc1, 0x58, 0x11, 0x5f, 0x72,
	0x80, 0x6e, 0x43, 0x35, 0x16, 0x7f, 0x1e, 0xc6, 0xb9, 0x62, 0x22, 0xd0, 0x1b, 0x8f, 0x68, 0xa0,
	0x94, 0x08, 0x28, 0x51, 0xc6, 0x56, 0xe2, 0xa8, 0x40, 0xaa, 0xdb, 0x1e, 0xf4, 0x3b, 0x72, 0x5b,
	0xe9, 0x0f, 0x25, 0xae, 0x9c, 0x28, 0x74, 0xd4, 0xee, 0xee, 0x89, 0x8a, 0xfa, 0xf5, 0x44, 0x9c,
	0x88, 0x3d, 0xae, 0xb2, 0x21, 0x9b, 0x14, 0xda, 0x97, 0xf6, 0x87, 0x7b, 0x22, 0xc7, 0x25, 0xe2,
	0x4a, 0x22, 0x7e, 0xf3, 0xaa, 0x46, 0xc3, 0x38, 0x42, 0x8f, 0xe0, 0xfe, 0xd5, 0xfa, 0x6a, 0xbb,
	0xb7, 0xdf, 0x96, 0xba, 0x62, 0x8f, 0xab, 0xa2, 0x07, 0x50, 0xbf, 0xfa, 0x20, 0xb5, 0x3d, 0x3e,
	0x90, 0xba, 0xdc, 0x76, 0xe3, 0x0f, 0x06, 0x4a, 0xc4, 0xbb, 0xd1, 0xdf, 0xf5, 0x17, 0x50, 0x9c,
	0x05, 0xdf, 0xa1, 0xd3, 0x19, 0xe2, 0xf4, 0x5b, 0x1b, 0x9d, 0x2e, 0xc3, 0x6c, 0xfd, 0x07, 0xf2,
	0x12, 0xaa, 0x97, 0x5f, 0x5b, 0x1e, 0x7f, 0x83, 0xe4, 0xdf, 0x89, 0xe5, 0x5f, 0x7a, 0x21, 0xc8,
	0x48, 0x4f, 0x42, 0x1e, 0xfa, 0x12, 0xb2, 0xba, 0x6d, 0x1d, 0x1a, 0xb3, 0xf0, 0xf9, 0x51, 0xdf,
	0xa8, 0x40, 0x6a, 0xe9, 0x12, 0x9e, 0x1c, 0xf2, 0x3b, 0x3f, 0x33, 0xa7, 0x67, 0x42, 0xea, 0xdd,
	0x99, 0x90, 0x7a, 0x7f, 0x26, 0x30, 0xdf, 0x2f, 0x05, 0xe6, 0xb7, 0xa5, 0xc0, 0xbc, 0x5d, 0x0a,
	0xcc, 0xe9, 0x52, 0x60, 0xfe, 0x5a, 0x0a, 0xcc, 0xdf, 0x4b, 0x21, 0xf5, 0x7e, 0x29, 0x30, 0x3f,
	0x9d, 0x0b, 0xa9, 0xd3, 0x73, 0x21, 0xf5, 0xee, 0x5c, 0x48, 0x41, 0x4d, 0xb7, 0xcd, 0xe6, 0xcc,
	0xb6, 0x67, 0x73, 0x1c, 0x3b, 0x8a, 0x3c, 0xfe, 0x3a, 0x3b, 0x97, 0x6a, 0x1e, 0x05, 0xf8, 0xb7,
	0xad, 0x99, 0xe1, 0x1f, 0x2d, 0x5e, 0x35, 0x75, 0xdb, 0x6c, 0xd1, 0xd4, 0xd6, 0xfa, 0x31, 0xb9,
	0xe1, 0x59, 0xf9, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x92, 0xec, 0x73, 0xa5, 0x0a, 0x00,
	0x00,
}

func (x GraphTrace_EventType) String() string {
	s, ok := GraphTrace_EventType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *TimeHistogram) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimeHistogram)
	if !ok {
		that2, ok := that.(TimeHistogram)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Total != nil && that1.Total != nil {
		if *this.Total != *that1.Total {
			return false
		}
	} else if this.Total != nil {
		return false
	} else if that1.Total != nil {
		return false
	}
	if this.IntervalSizeUsec != nil && that1.IntervalSizeUsec != nil {
		if *this.IntervalSizeUsec != *that1.IntervalSizeUsec {
			return false
		}
	} else if this.IntervalSizeUsec != nil {
		return false
	} else if that1.IntervalSizeUsec != nil {
		return false
	}
	if this.NumIntervals != nil && that1.NumIntervals != nil {
		if *this.NumIntervals != *that1.NumIntervals {
			return false
		}
	} else if this.NumIntervals != nil {
		return false
	} else if that1.NumIntervals != nil {
		return false
	}
	if len(this.Count) != len(that1.Count) {
		return false
	}
	for i := range this.Count {
		if this.Count[i] != that1.Count[i] {
			return false
		}
	}
	return true
}
func (this *StreamProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamProfile)
	if !ok {
		that2, ok := that.(StreamProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.BackEdge != nil && that1.BackEdge != nil {
		if *this.BackEdge != *that1.BackEdge {
			return false
		}
	} else if this.BackEdge != nil {
		return false
	} else if that1.BackEdge != nil {
		return false
	}
	if !this.Latency.Equal(that1.Latency) {
		return false
	}
	return true
}
func (this *CalculatorProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CalculatorProfile)
	if !ok {
		that2, ok := that.(CalculatorProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.OpenRuntime != nil && that1.OpenRuntime != nil {
		if *this.OpenRuntime != *that1.OpenRuntime {
			return false
		}
	} else if this.OpenRuntime != nil {
		return false
	} else if that1.OpenRuntime != nil {
		return false
	}
	if this.CloseRuntime != nil && that1.CloseRuntime != nil {
		if *this.CloseRuntime != *that1.CloseRuntime {
			return false
		}
	} else if this.CloseRuntime != nil {
		return false
	} else if that1.CloseRuntime != nil {
		return false
	}
	if !this.ProcessRuntime.Equal(that1.ProcessRuntime) {
		return false
	}
	if !this.ProcessInputLatency.Equal(that1.ProcessInputLatency) {
		return false
	}
	if !this.ProcessOutputLatency.Equal(that1.ProcessOutputLatency) {
		return false
	}
	if len(this.InputStreamProfiles) != len(that1.InputStreamProfiles) {
		return false
	}
	for i := range this.InputStreamProfiles {
		if !this.InputStreamProfiles[i].Equal(that1.InputStreamProfiles[i]) {
			return false
		}
	}
	return true
}
func (this *GraphTrace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphTrace)
	if !ok {
		that2, ok := that.(GraphTrace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BaseTime != that1.BaseTime {
		return false
	}
	if this.BaseTimestamp != that1.BaseTimestamp {
		return false
	}
	if len(this.CalculatorName) != len(that1.CalculatorName) {
		return false
	}
	for i := range this.CalculatorName {
		if this.CalculatorName[i] != that1.CalculatorName[i] {
			return false
		}
	}
	if len(this.StreamName) != len(that1.StreamName) {
		return false
	}
	for i := range this.StreamName {
		if this.StreamName[i] != that1.StreamName[i] {
			return false
		}
	}
	if len(this.CalculatorTrace) != len(that1.CalculatorTrace) {
		return false
	}
	for i := range this.CalculatorTrace {
		if !this.CalculatorTrace[i].Equal(that1.CalculatorTrace[i]) {
			return false
		}
	}
	return true
}
func (this *GraphTrace_StreamTrace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphTrace_StreamTrace)
	if !ok {
		that2, ok := that.(GraphTrace_StreamTrace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.FinishTime != that1.FinishTime {
		return false
	}
	if this.PacketTimestamp != that1.PacketTimestamp {
		return false
	}
	if this.StreamId != that1.StreamId {
		return false
	}
	if this.PacketId != that1.PacketId {
		return false
	}
	if this.EventData != that1.EventData {
		return false
	}
	return true
}
func (this *GraphTrace_CalculatorTrace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphTrace_CalculatorTrace)
	if !ok {
		that2, ok := that.(GraphTrace_CalculatorTrace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeId != that1.NodeId {
		return false
	}
	if this.InputTimestamp != that1.InputTimestamp {
		return false
	}
	if this.EventType != that1.EventType {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.FinishTime != that1.FinishTime {
		return false
	}
	if len(this.InputTrace) != len(that1.InputTrace) {
		return false
	}
	for i := range this.InputTrace {
		if !this.InputTrace[i].Equal(that1.InputTrace[i]) {
			return false
		}
	}
	if len(this.OutputTrace) != len(that1.OutputTrace) {
		return false
	}
	for i := range this.OutputTrace {
		if !this.OutputTrace[i].Equal(that1.OutputTrace[i]) {
			return false
		}
	}
	if this.ThreadId != that1.ThreadId {
		return false
	}
	return true
}
func (this *GraphProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphProfile)
	if !ok {
		that2, ok := that.(GraphProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.GraphTrace) != len(that1.GraphTrace) {
		return false
	}
	for i := range this.GraphTrace {
		if !this.GraphTrace[i].Equal(that1.GraphTrace[i]) {
			return false
		}
	}
	if len(this.CalculatorProfiles) != len(that1.CalculatorProfiles) {
		return false
	}
	for i := range this.CalculatorProfiles {
		if !this.CalculatorProfiles[i].Equal(that1.CalculatorProfiles[i]) {
			return false
		}
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	return true
}
func (this *TimeHistogram) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&framework.TimeHistogram{")
	if this.Total != nil {
		s = append(s, "Total: "+valueToGoStringCalculatorProfile(this.Total, "int64")+",\n")
	}
	if this.IntervalSizeUsec != nil {
		s = append(s, "IntervalSizeUsec: "+valueToGoStringCalculatorProfile(this.IntervalSizeUsec, "int64")+",\n")
	}
	if this.NumIntervals != nil {
		s = append(s, "NumIntervals: "+valueToGoStringCalculatorProfile(this.NumIntervals, "int64")+",\n")
	}
	if this.Count != nil {
		s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StreamProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&framework.StreamProfile{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.BackEdge != nil {
		s = append(s, "BackEdge: "+valueToGoStringCalculatorProfile(this.BackEdge, "bool")+",\n")
	}
	if this.Latency != nil {
		s = append(s, "Latency: "+fmt.Sprintf("%#v", this.Latency)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CalculatorProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&framework.CalculatorProfile{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.OpenRuntime != nil {
		s = append(s, "OpenRuntime: "+valueToGoStringCalculatorProfile(this.OpenRuntime, "int64")+",\n")
	}
	if this.CloseRuntime != nil {
		s = append(s, "CloseRuntime: "+valueToGoStringCalculatorProfile(this.CloseRuntime, "int64")+",\n")
	}
	if this.ProcessRuntime != nil {
		s = append(s, "ProcessRuntime: "+fmt.Sprintf("%#v", this.ProcessRuntime)+",\n")
	}
	if this.ProcessInputLatency != nil {
		s = append(s, "ProcessInputLatency: "+fmt.Sprintf("%#v", this.ProcessInputLatency)+",\n")
	}
	if this.ProcessOutputLatency != nil {
		s = append(s, "ProcessOutputLatency: "+fmt.Sprintf("%#v", this.ProcessOutputLatency)+",\n")
	}
	if this.InputStreamProfiles != nil {
		s = append(s, "InputStreamProfiles: "+fmt.Sprintf("%#v", this.InputStreamProfiles)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphTrace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&framework.GraphTrace{")
	s = append(s, "BaseTime: "+fmt.Sprintf("%#v", this.BaseTime)+",\n")
	s = append(s, "BaseTimestamp: "+fmt.Sprintf("%#v", this.BaseTimestamp)+",\n")
	if this.CalculatorName != nil {
		s = append(s, "CalculatorName: "+fmt.Sprintf("%#v", this.CalculatorName)+",\n")
	}
	if this.StreamName != nil {
		s = append(s, "StreamName: "+fmt.Sprintf("%#v", this.StreamName)+",\n")
	}
	if this.CalculatorTrace != nil {
		s = append(s, "CalculatorTrace: "+fmt.Sprintf("%#v", this.CalculatorTrace)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphTrace_StreamTrace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&framework.GraphTrace_StreamTrace{")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "FinishTime: "+fmt.Sprintf("%#v", this.FinishTime)+",\n")
	s = append(s, "PacketTimestamp: "+fmt.Sprintf("%#v", this.PacketTimestamp)+",\n")
	s = append(s, "StreamId: "+fmt.Sprintf("%#v", this.StreamId)+",\n")
	s = append(s, "PacketId: "+fmt.Sprintf("%#v", this.PacketId)+",\n")
	s = append(s, "EventData: "+fmt.Sprintf("%#v", this.EventData)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphTrace_CalculatorTrace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&framework.GraphTrace_CalculatorTrace{")
	s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	s = append(s, "InputTimestamp: "+fmt.Sprintf("%#v", this.InputTimestamp)+",\n")
	s = append(s, "EventType: "+fmt.Sprintf("%#v", this.EventType)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "FinishTime: "+fmt.Sprintf("%#v", this.FinishTime)+",\n")
	if this.InputTrace != nil {
		s = append(s, "InputTrace: "+fmt.Sprintf("%#v", this.InputTrace)+",\n")
	}
	if this.OutputTrace != nil {
		s = append(s, "OutputTrace: "+fmt.Sprintf("%#v", this.OutputTrace)+",\n")
	}
	s = append(s, "ThreadId: "+fmt.Sprintf("%#v", this.ThreadId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&framework.GraphProfile{")
	if this.GraphTrace != nil {
		s = append(s, "GraphTrace: "+fmt.Sprintf("%#v", this.GraphTrace)+",\n")
	}
	if this.CalculatorProfiles != nil {
		s = append(s, "CalculatorProfiles: "+fmt.Sprintf("%#v", this.CalculatorProfiles)+",\n")
	}
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCalculatorProfile(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TimeHistogram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeHistogram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeHistogram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Count) > 0 {
		for iNdEx := len(m.Count) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCalculatorProfile(dAtA, i, uint64(m.Count[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	if m.NumIntervals != nil {
		i = encodeVarintCalculatorProfile(dAtA, i, uint64(*m.NumIntervals))
		i--
		dAtA[i] = 0x18
	}
	if m.IntervalSizeUsec != nil {
		i = encodeVarintCalculatorProfile(dAtA, i, uint64(*m.IntervalSizeUsec))
		i--
		dAtA[i] = 0x10
	}
	if m.Total != nil {
		i = encodeVarintCalculatorProfile(dAtA, i, uint64(*m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Latency != nil {
		{
			size, err := m.Latency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalculatorProfile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BackEdge != nil {
		i--
		if *m.BackEdge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintCalculatorProfile(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CalculatorProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculatorProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalculatorProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InputStreamProfiles) > 0 {
		for iNdEx := len(m.InputStreamProfiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InputStreamProfiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCalculatorProfile(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.ProcessOutputLatency != nil {
		{
			size, err := m.ProcessOutputLatency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalculatorProfile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ProcessInputLatency != nil {
		{
			size, err := m.ProcessInputLatency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalculatorProfile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ProcessRuntime != nil {
		{
			size, err := m.ProcessRuntime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalculatorProfile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CloseRuntime != nil {
		i = encodeVarintCalculatorProfile(dAtA, i, uint64(*m.CloseRuntime))
		i--
		dAtA[i] = 0x18
	}
	if m.OpenRuntime != nil {
		i = encodeVarintCalculatorProfile(dAtA, i, uint64(*m.OpenRuntime))
		i--
		dAtA[i] = 0x10
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintCalculatorProfile(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GraphTrace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTrace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphTrace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CalculatorTrace) > 0 {
		for iNdEx := len(m.CalculatorTrace) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CalculatorTrace[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCalculatorProfile(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.StreamName) > 0 {
		for iNdEx := len(m.StreamName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StreamName[iNdEx])
			copy(dAtA[i:], m.StreamName[iNdEx])
			i = encodeVarintCalculatorProfile(dAtA, i, uint64(len(m.StreamName[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CalculatorName) > 0 {
		for iNdEx := len(m.CalculatorName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CalculatorName[iNdEx])
			copy(dAtA[i:], m.CalculatorName[iNdEx])
			i = encodeVarintCalculatorProfile(dAtA, i, uint64(len(m.CalculatorName[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintCalculatorProfile(dAtA, i, uint64(m.BaseTimestamp))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCalculatorProfile(dAtA, i, uint64(m.BaseTime))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GraphTrace_StreamTrace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTrace_StreamTrace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphTrace_StreamTrace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCalculatorProfile(dAtA, i, uint64(m.EventData))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCalculatorProfile(dAtA, i, uint64(m.PacketId))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCalculatorProfile(dAtA, i, uint64(m.StreamId))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCalculatorProfile(dAtA, i, uint64(m.PacketTimestamp))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCalculatorProfile(dAtA, i, uint64(m.FinishTime))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCalculatorProfile(dAtA, i, uint64(m.StartTime))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GraphTrace_CalculatorTrace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTrace_CalculatorTrace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphTrace_CalculatorTrace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCalculatorProfile(dAtA, i, uint64(m.ThreadId))
	i--
	dAtA[i] = 0x40
	if len(m.OutputTrace) > 0 {
		for iNdEx := len(m.OutputTrace) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutputTrace[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCalculatorProfile(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.InputTrace) > 0 {
		for iNdEx := len(m.InputTrace) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InputTrace[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCalculatorProfile(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	i = encodeVarintCalculatorProfile(dAtA, i, uint64(m.FinishTime))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCalculatorProfile(dAtA, i, uint64(m.StartTime))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCalculatorProfile(dAtA, i, uint64(m.EventType))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCalculatorProfile(dAtA, i, uint64(m.InputTimestamp))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCalculatorProfile(dAtA, i, uint64(m.NodeId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GraphProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalculatorProfile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CalculatorProfiles) > 0 {
		for iNdEx := len(m.CalculatorProfiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CalculatorProfiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCalculatorProfile(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GraphTrace) > 0 {
		for iNdEx := len(m.GraphTrace) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GraphTrace[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCalculatorProfile(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCalculatorProfile(dAtA []byte, offset int, v uint64) int {
	offset -= sovCalculatorProfile(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TimeHistogram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != nil {
		n += 1 + sovCalculatorProfile(uint64(*m.Total))
	}
	if m.IntervalSizeUsec != nil {
		n += 1 + sovCalculatorProfile(uint64(*m.IntervalSizeUsec))
	}
	if m.NumIntervals != nil {
		n += 1 + sovCalculatorProfile(uint64(*m.NumIntervals))
	}
	if len(m.Count) > 0 {
		for _, e := range m.Count {
			n += 1 + sovCalculatorProfile(uint64(e))
		}
	}
	return n
}

func (m *StreamProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovCalculatorProfile(uint64(l))
	if m.BackEdge != nil {
		n += 2
	}
	if m.Latency != nil {
		l = m.Latency.Size()
		n += 1 + l + sovCalculatorProfile(uint64(l))
	}
	return n
}

func (m *CalculatorProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovCalculatorProfile(uint64(l))
	if m.OpenRuntime != nil {
		n += 1 + sovCalculatorProfile(uint64(*m.OpenRuntime))
	}
	if m.CloseRuntime != nil {
		n += 1 + sovCalculatorProfile(uint64(*m.CloseRuntime))
	}
	if m.ProcessRuntime != nil {
		l = m.ProcessRuntime.Size()
		n += 1 + l + sovCalculatorProfile(uint64(l))
	}
	if m.ProcessInputLatency != nil {
		l = m.ProcessInputLatency.Size()
		n += 1 + l + sovCalculatorProfile(uint64(l))
	}
	if m.ProcessOutputLatency != nil {
		l = m.ProcessOutputLatency.Size()
		n += 1 + l + sovCalculatorProfile(uint64(l))
	}
	if len(m.InputStreamProfiles) > 0 {
		for _, e := range m.InputStreamProfiles {
			l = e.Size()
			n += 1 + l + sovCalculatorProfile(uint64(l))
		}
	}
	return n
}

func (m *GraphTrace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCalculatorProfile(uint64(m.BaseTime))
	n += 1 + sovCalculatorProfile(uint64(m.BaseTimestamp))
	if len(m.CalculatorName) > 0 {
		for _, s := range m.CalculatorName {
			l = len(s)
			n += 1 + l + sovCalculatorProfile(uint64(l))
		}
	}
	if len(m.StreamName) > 0 {
		for _, s := range m.StreamName {
			l = len(s)
			n += 1 + l + sovCalculatorProfile(uint64(l))
		}
	}
	if len(m.CalculatorTrace) > 0 {
		for _, e := range m.CalculatorTrace {
			l = e.Size()
			n += 1 + l + sovCalculatorProfile(uint64(l))
		}
	}
	return n
}

func (m *GraphTrace_StreamTrace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCalculatorProfile(uint64(m.StartTime))
	n += 1 + sovCalculatorProfile(uint64(m.FinishTime))
	n += 1 + sovCalculatorProfile(uint64(m.PacketTimestamp))
	n += 1 + sovCalculatorProfile(uint64(m.StreamId))
	n += 1 + sovCalculatorProfile(uint64(m.PacketId))
	n += 1 + sovCalculatorProfile(uint64(m.EventData))
	return n
}

func (m *GraphTrace_CalculatorTrace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCalculatorProfile(uint64(m.NodeId))
	n += 1 + sovCalculatorProfile(uint64(m.InputTimestamp))
	n += 1 + sovCalculatorProfile(uint64(m.EventType))
	n += 1 + sovCalculatorProfile(uint64(m.StartTime))
	n += 1 + sovCalculatorProfile(uint64(m.FinishTime))
	if len(m.InputTrace) > 0 {
		for _, e := range m.InputTrace {
			l = e.Size()
			n += 1 + l + sovCalculatorProfile(uint64(l))
		}
	}
	if len(m.OutputTrace) > 0 {
		for _, e := range m.OutputTrace {
			l = e.Size()
			n += 1 + l + sovCalculatorProfile(uint64(l))
		}
	}
	n += 1 + sovCalculatorProfile(uint64(m.ThreadId))
	return n
}

func (m *GraphProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GraphTrace) > 0 {
		for _, e := range m.GraphTrace {
			l = e.Size()
			n += 1 + l + sovCalculatorProfile(uint64(l))
		}
	}
	if len(m.CalculatorProfiles) > 0 {
		for _, e := range m.CalculatorProfiles {
			l = e.Size()
			n += 1 + l + sovCalculatorProfile(uint64(l))
		}
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovCalculatorProfile(uint64(l))
	}
	return n
}

func sovCalculatorProfile(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCalculatorProfile(x uint64) (n int) {
	return sovCalculatorProfile(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TimeHistogram) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimeHistogram{`,
		`Total:` + valueToStringCalculatorProfile(this.Total) + `,`,
		`IntervalSizeUsec:` + valueToStringCalculatorProfile(this.IntervalSizeUsec) + `,`,
		`NumIntervals:` + valueToStringCalculatorProfile(this.NumIntervals) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamProfile{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`BackEdge:` + valueToStringCalculatorProfile(this.BackEdge) + `,`,
		`Latency:` + strings.Replace(this.Latency.String(), "TimeHistogram", "TimeHistogram", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CalculatorProfile) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInputStreamProfiles := "[]*StreamProfile{"
	for _, f := range this.InputStreamProfiles {
		repeatedStringForInputStreamProfiles += strings.Replace(f.String(), "StreamProfile", "StreamProfile", 1) + ","
	}
	repeatedStringForInputStreamProfiles += "}"
	s := strings.Join([]string{`&CalculatorProfile{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`OpenRuntime:` + valueToStringCalculatorProfile(this.OpenRuntime) + `,`,
		`CloseRuntime:` + valueToStringCalculatorProfile(this.CloseRuntime) + `,`,
		`ProcessRuntime:` + strings.Replace(this.ProcessRuntime.String(), "TimeHistogram", "TimeHistogram", 1) + `,`,
		`ProcessInputLatency:` + strings.Replace(this.ProcessInputLatency.String(), "TimeHistogram", "TimeHistogram", 1) + `,`,
		`ProcessOutputLatency:` + strings.Replace(this.ProcessOutputLatency.String(), "TimeHistogram", "TimeHistogram", 1) + `,`,
		`InputStreamProfiles:` + repeatedStringForInputStreamProfiles + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphTrace) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCalculatorTrace := "[]*GraphTrace_CalculatorTrace{"
	for _, f := range this.CalculatorTrace {
		repeatedStringForCalculatorTrace += strings.Replace(fmt.Sprintf("%v", f), "GraphTrace_CalculatorTrace", "GraphTrace_CalculatorTrace", 1) + ","
	}
	repeatedStringForCalculatorTrace += "}"
	s := strings.Join([]string{`&GraphTrace{`,
		`BaseTime:` + fmt.Sprintf("%v", this.BaseTime) + `,`,
		`BaseTimestamp:` + fmt.Sprintf("%v", this.BaseTimestamp) + `,`,
		`CalculatorName:` + fmt.Sprintf("%v", this.CalculatorName) + `,`,
		`StreamName:` + fmt.Sprintf("%v", this.StreamName) + `,`,
		`CalculatorTrace:` + repeatedStringForCalculatorTrace + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphTrace_StreamTrace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphTrace_StreamTrace{`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`FinishTime:` + fmt.Sprintf("%v", this.FinishTime) + `,`,
		`PacketTimestamp:` + fmt.Sprintf("%v", this.PacketTimestamp) + `,`,
		`StreamId:` + fmt.Sprintf("%v", this.StreamId) + `,`,
		`PacketId:` + fmt.Sprintf("%v", this.PacketId) + `,`,
		`EventData:` + fmt.Sprintf("%v", this.EventData) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphTrace_CalculatorTrace) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInputTrace := "[]*GraphTrace_StreamTrace{"
	for _, f := range this.InputTrace {
		repeatedStringForInputTrace += strings.Replace(fmt.Sprintf("%v", f), "GraphTrace_StreamTrace", "GraphTrace_StreamTrace", 1) + ","
	}
	repeatedStringForInputTrace += "}"
	repeatedStringForOutputTrace := "[]*GraphTrace_StreamTrace{"
	for _, f := range this.OutputTrace {
		repeatedStringForOutputTrace += strings.Replace(fmt.Sprintf("%v", f), "GraphTrace_StreamTrace", "GraphTrace_StreamTrace", 1) + ","
	}
	repeatedStringForOutputTrace += "}"
	s := strings.Join([]string{`&GraphTrace_CalculatorTrace{`,
		`NodeId:` + fmt.Sprintf("%v", this.NodeId) + `,`,
		`InputTimestamp:` + fmt.Sprintf("%v", this.InputTimestamp) + `,`,
		`EventType:` + fmt.Sprintf("%v", this.EventType) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`FinishTime:` + fmt.Sprintf("%v", this.FinishTime) + `,`,
		`InputTrace:` + repeatedStringForInputTrace + `,`,
		`OutputTrace:` + repeatedStringForOutputTrace + `,`,
		`ThreadId:` + fmt.Sprintf("%v", this.ThreadId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphProfile) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGraphTrace := "[]*GraphTrace{"
	for _, f := range this.GraphTrace {
		repeatedStringForGraphTrace += strings.Replace(f.String(), "GraphTrace", "GraphTrace", 1) + ","
	}
	repeatedStringForGraphTrace += "}"
	repeatedStringForCalculatorProfiles := "[]*CalculatorProfile{"
	for _, f := range this.CalculatorProfiles {
		repeatedStringForCalculatorProfiles += strings.Replace(f.String(), "CalculatorProfile", "CalculatorProfile", 1) + ","
	}
	repeatedStringForCalculatorProfiles += "}"
	s := strings.Join([]string{`&GraphProfile{`,
		`GraphTrace:` + repeatedStringForGraphTrace + `,`,
		`CalculatorProfiles:` + repeatedStringForCalculatorProfiles + `,`,
		`Config:` + strings.Replace(fmt.Sprintf("%v", this.Config), "CalculatorGraphConfig", "CalculatorGraphConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCalculatorProfile(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TimeHistogram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculatorProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeHistogram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeHistogram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Total = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalSizeUsec", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntervalSizeUsec = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumIntervals", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumIntervals = &v
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCalculatorProfile
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Count = append(m.Count, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCalculatorProfile
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCalculatorProfile
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCalculatorProfile
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Count) == 0 {
					m.Count = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCalculatorProfile
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Count = append(m.Count, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCalculatorProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculatorProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackEdge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.BackEdge = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Latency == nil {
				m.Latency = &TimeHistogram{}
			}
			if err := m.Latency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalculatorProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculatorProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculatorProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculatorProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculatorProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenRuntime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpenRuntime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseRuntime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CloseRuntime = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessRuntime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProcessRuntime == nil {
				m.ProcessRuntime = &TimeHistogram{}
			}
			if err := m.ProcessRuntime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessInputLatency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProcessInputLatency == nil {
				m.ProcessInputLatency = &TimeHistogram{}
			}
			if err := m.ProcessInputLatency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessOutputLatency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProcessOutputLatency == nil {
				m.ProcessOutputLatency = &TimeHistogram{}
			}
			if err := m.ProcessOutputLatency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputStreamProfiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputStreamProfiles = append(m.InputStreamProfiles, &StreamProfile{})
			if err := m.InputStreamProfiles[len(m.InputStreamProfiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalculatorProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphTrace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculatorProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphTrace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphTrace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTime", wireType)
			}
			m.BaseTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTimestamp", wireType)
			}
			m.BaseTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculatorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CalculatorName = append(m.CalculatorName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamName = append(m.StreamName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculatorTrace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CalculatorTrace = append(m.CalculatorTrace, &GraphTrace_CalculatorTrace{})
			if err := m.CalculatorTrace[len(m.CalculatorTrace)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalculatorProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphTrace_StreamTrace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculatorProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamTrace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamTrace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			m.FinishTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketTimestamp", wireType)
			}
			m.PacketTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketId", wireType)
			}
			m.PacketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventData", wireType)
			}
			m.EventData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventData |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCalculatorProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphTrace_CalculatorTrace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculatorProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculatorTrace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculatorTrace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputTimestamp", wireType)
			}
			m.InputTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= GraphTrace_EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			m.FinishTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputTrace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputTrace = append(m.InputTrace, &GraphTrace_StreamTrace{})
			if err := m.InputTrace[len(m.InputTrace)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputTrace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputTrace = append(m.OutputTrace, &GraphTrace_StreamTrace{})
			if err := m.OutputTrace[len(m.OutputTrace)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			m.ThreadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCalculatorProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculatorProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphTrace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphTrace = append(m.GraphTrace, &GraphTrace{})
			if err := m.GraphTrace[len(m.GraphTrace)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculatorProfiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CalculatorProfiles = append(m.CalculatorProfiles, &CalculatorProfile{})
			if err := m.CalculatorProfiles[len(m.CalculatorProfiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &CalculatorGraphConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalculatorProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCalculatorProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCalculatorProfile(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCalculatorProfile
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalculatorProfile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCalculatorProfile
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCalculatorProfile
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCalculatorProfile
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCalculatorProfile        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCalculatorProfile          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCalculatorProfile = fmt.Errorf("proto: unexpected end of group")
)
