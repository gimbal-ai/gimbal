// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/formats/affine_transform_data.proto

package formats

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Vector2Data struct {
	X float32 `protobuf:"fixed32,1,opt,name=x" json:"x"`
	Y float32 `protobuf:"fixed32,2,opt,name=y" json:"y"`
}

func (m *Vector2Data) Reset()      { *m = Vector2Data{} }
func (*Vector2Data) ProtoMessage() {}
func (*Vector2Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_8849f588d705f881, []int{0}
}
func (m *Vector2Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector2Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector2Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector2Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector2Data.Merge(m, src)
}
func (m *Vector2Data) XXX_Size() int {
	return m.Size()
}
func (m *Vector2Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector2Data.DiscardUnknown(m)
}

var xxx_messageInfo_Vector2Data proto.InternalMessageInfo

func (m *Vector2Data) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vector2Data) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type AffineTransformData struct {
	Translation *Vector2Data `protobuf:"bytes,1,opt,name=translation" json:"translation,omitempty"`
	Scale       *Vector2Data `protobuf:"bytes,2,opt,name=scale" json:"scale,omitempty"`
	Shear       *Vector2Data `protobuf:"bytes,3,opt,name=shear" json:"shear,omitempty"`
	Rotation    float32      `protobuf:"fixed32,4,opt,name=rotation" json:"rotation"`
}

func (m *AffineTransformData) Reset()      { *m = AffineTransformData{} }
func (*AffineTransformData) ProtoMessage() {}
func (*AffineTransformData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8849f588d705f881, []int{1}
}
func (m *AffineTransformData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AffineTransformData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AffineTransformData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AffineTransformData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffineTransformData.Merge(m, src)
}
func (m *AffineTransformData) XXX_Size() int {
	return m.Size()
}
func (m *AffineTransformData) XXX_DiscardUnknown() {
	xxx_messageInfo_AffineTransformData.DiscardUnknown(m)
}

var xxx_messageInfo_AffineTransformData proto.InternalMessageInfo

func (m *AffineTransformData) GetTranslation() *Vector2Data {
	if m != nil {
		return m.Translation
	}
	return nil
}

func (m *AffineTransformData) GetScale() *Vector2Data {
	if m != nil {
		return m.Scale
	}
	return nil
}

func (m *AffineTransformData) GetShear() *Vector2Data {
	if m != nil {
		return m.Shear
	}
	return nil
}

func (m *AffineTransformData) GetRotation() float32 {
	if m != nil {
		return m.Rotation
	}
	return 0
}

func init() {
	proto.RegisterType((*Vector2Data)(nil), "mediapipe.Vector2Data")
	proto.RegisterType((*AffineTransformData)(nil), "mediapipe.AffineTransformData")
}

func init() {
	proto.RegisterFile("mediapipe/framework/formats/affine_transform_data.proto", fileDescriptor_8849f588d705f881)
}

var fileDescriptor_8849f588d705f881 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0xe7, 0xf6, 0xef, 0x0f, 0x3a, 0xdd, 0x45, 0x90, 0xac, 0xae, 0xa5, 0x2b, 0x17, 0x92,
	0x40, 0x41, 0xea, 0xd6, 0xe2, 0x13, 0x14, 0x71, 0xe1, 0xa6, 0x5c, 0xd3, 0x49, 0x1a, 0x4c, 0x32,
	0x61, 0x32, 0x62, 0xbb, 0xf3, 0x11, 0x7c, 0x0c, 0x1f, 0xa5, 0x1b, 0x21, 0xcb, 0xae, 0xc4, 0x4c,
	0x36, 0x2e, 0xfb, 0x08, 0x92, 0x29, 0xc6, 0x6c, 0xd4, 0xed, 0xe1, 0x3b, 0xf3, 0xcd, 0xe5, 0xf0,
	0x49, 0x2a, 0x16, 0x31, 0xe5, 0x71, 0x2e, 0xfc, 0x50, 0x51, 0x2a, 0x1e, 0xa5, 0xba, 0xf7, 0x43,
	0xa9, 0x52, 0xd2, 0x85, 0x4f, 0x61, 0x18, 0x67, 0x62, 0xae, 0x15, 0x65, 0x45, 0x93, 0xcd, 0x17,
	0xa4, 0xc9, 0xcb, 0x95, 0xd4, 0xd2, 0x39, 0x6c, 0x8b, 0xa3, 0x73, 0x3e, 0xb8, 0x11, 0x81, 0x96,
	0x6a, 0x7c, 0x45, 0x9a, 0x1c, 0x87, 0xc3, 0xca, 0x85, 0x21, 0x9c, 0xf6, 0xa6, 0xfd, 0xcd, 0xdb,
	0x09, 0x9b, 0xc1, 0xaa, 0xc9, 0xd6, 0x6e, 0xaf, 0x9b, 0xad, 0x47, 0xaf, 0xc0, 0x8f, 0x2e, 0xad,
	0xe1, 0xfa, 0x4b, 0x60, 0xfb, 0x17, 0x7c, 0x60, 0x8d, 0x09, 0xe9, 0x58, 0x66, 0xf6, 0xa5, 0xc1,
	0xf8, 0xd8, 0x6b, 0x7d, 0x5e, 0x47, 0x36, 0xeb, 0xa2, 0xce, 0x19, 0xff, 0x5f, 0x04, 0x94, 0x08,
	0x6b, 0xfa, 0xb9, 0xb3, 0x87, 0x2c, 0xbd, 0x14, 0xa4, 0xdc, 0x7f, 0x7f, 0xd0, 0x0d, 0xe4, 0x0c,
	0xf9, 0x81, 0x92, 0x7a, 0xff, 0xa5, 0x7e, 0xe7, 0x90, 0x36, 0x9d, 0xa6, 0x65, 0x85, 0x6c, 0x5b,
	0x21, 0xdb, 0x55, 0x08, 0x4f, 0x06, 0xe1, 0xc5, 0x20, 0x6c, 0x0c, 0x42, 0x69, 0x10, 0xde, 0x0d,
	0xc2, 0x87, 0x41, 0xb6, 0x33, 0x08, 0xcf, 0x35, 0xb2, 0xb2, 0x46, 0xb6, 0xad, 0x91, 0xdd, 0x4e,
	0xa2, 0x58, 0x2f, 0x1f, 0xee, 0xbc, 0x40, 0xa6, 0x7e, 0x24, 0x65, 0x94, 0x08, 0xff, 0x7b, 0x92,
	0x5f, 0xc6, 0xf9, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x7b, 0xb7, 0x72, 0xba, 0x01, 0x00, 0x00,
}

func (this *Vector2Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Vector2Data)
	if !ok {
		that2, ok := that.(Vector2Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	return true
}
func (this *AffineTransformData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AffineTransformData)
	if !ok {
		that2, ok := that.(AffineTransformData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Translation.Equal(that1.Translation) {
		return false
	}
	if !this.Scale.Equal(that1.Scale) {
		return false
	}
	if !this.Shear.Equal(that1.Shear) {
		return false
	}
	if this.Rotation != that1.Rotation {
		return false
	}
	return true
}
func (this *Vector2Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&formats.Vector2Data{")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AffineTransformData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&formats.AffineTransformData{")
	if this.Translation != nil {
		s = append(s, "Translation: "+fmt.Sprintf("%#v", this.Translation)+",\n")
	}
	if this.Scale != nil {
		s = append(s, "Scale: "+fmt.Sprintf("%#v", this.Scale)+",\n")
	}
	if this.Shear != nil {
		s = append(s, "Shear: "+fmt.Sprintf("%#v", this.Shear)+",\n")
	}
	s = append(s, "Rotation: "+fmt.Sprintf("%#v", this.Rotation)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAffineTransformData(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Vector2Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector2Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector2Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Y))))
	i--
	dAtA[i] = 0x15
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.X))))
	i--
	dAtA[i] = 0xd
	return len(dAtA) - i, nil
}

func (m *AffineTransformData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AffineTransformData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AffineTransformData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rotation))))
	i--
	dAtA[i] = 0x25
	if m.Shear != nil {
		{
			size, err := m.Shear.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAffineTransformData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Scale != nil {
		{
			size, err := m.Scale.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAffineTransformData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Translation != nil {
		{
			size, err := m.Translation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAffineTransformData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAffineTransformData(dAtA []byte, offset int, v uint64) int {
	offset -= sovAffineTransformData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vector2Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	n += 5
	return n
}

func (m *AffineTransformData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Translation != nil {
		l = m.Translation.Size()
		n += 1 + l + sovAffineTransformData(uint64(l))
	}
	if m.Scale != nil {
		l = m.Scale.Size()
		n += 1 + l + sovAffineTransformData(uint64(l))
	}
	if m.Shear != nil {
		l = m.Shear.Size()
		n += 1 + l + sovAffineTransformData(uint64(l))
	}
	n += 5
	return n
}

func sovAffineTransformData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAffineTransformData(x uint64) (n int) {
	return sovAffineTransformData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Vector2Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Vector2Data{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AffineTransformData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AffineTransformData{`,
		`Translation:` + strings.Replace(this.Translation.String(), "Vector2Data", "Vector2Data", 1) + `,`,
		`Scale:` + strings.Replace(this.Scale.String(), "Vector2Data", "Vector2Data", 1) + `,`,
		`Shear:` + strings.Replace(this.Shear.String(), "Vector2Data", "Vector2Data", 1) + `,`,
		`Rotation:` + fmt.Sprintf("%v", this.Rotation) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAffineTransformData(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Vector2Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAffineTransformData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector2Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector2Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Y = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipAffineTransformData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAffineTransformData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AffineTransformData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAffineTransformData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AffineTransformData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AffineTransformData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Translation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAffineTransformData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAffineTransformData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAffineTransformData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Translation == nil {
				m.Translation = &Vector2Data{}
			}
			if err := m.Translation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAffineTransformData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAffineTransformData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAffineTransformData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scale == nil {
				m.Scale = &Vector2Data{}
			}
			if err := m.Scale.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shear", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAffineTransformData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAffineTransformData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAffineTransformData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shear == nil {
				m.Shear = &Vector2Data{}
			}
			if err := m.Shear.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotation", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rotation = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipAffineTransformData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAffineTransformData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAffineTransformData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAffineTransformData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAffineTransformData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAffineTransformData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAffineTransformData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAffineTransformData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAffineTransformData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAffineTransformData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAffineTransformData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAffineTransformData = fmt.Errorf("proto: unexpected end of group")
)
