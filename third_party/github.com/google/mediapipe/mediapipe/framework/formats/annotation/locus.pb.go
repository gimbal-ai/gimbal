// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/formats/annotation/locus.proto

package annotation

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Locus_LocusType int32

const (
	LOCUS_TYPE_UNKNOWN      Locus_LocusType = 0
	LOCUS_TYPE_GLOBAL       Locus_LocusType = 1
	LOCUS_TYPE_BOUNDING_BOX Locus_LocusType = 2
	LOCUS_TYPE_REGION       Locus_LocusType = 3
	LOCUS_TYPE_VIDEO_TUBE   Locus_LocusType = 4
)

var Locus_LocusType_name = map[int32]string{
	0: "LOCUS_TYPE_UNKNOWN",
	1: "LOCUS_TYPE_GLOBAL",
	2: "LOCUS_TYPE_BOUNDING_BOX",
	3: "LOCUS_TYPE_REGION",
	4: "LOCUS_TYPE_VIDEO_TUBE",
}

var Locus_LocusType_value = map[string]int32{
	"LOCUS_TYPE_UNKNOWN":      0,
	"LOCUS_TYPE_GLOBAL":       1,
	"LOCUS_TYPE_BOUNDING_BOX": 2,
	"LOCUS_TYPE_REGION":       3,
	"LOCUS_TYPE_VIDEO_TUBE":   4,
}

func (x Locus_LocusType) Enum() *Locus_LocusType {
	p := new(Locus_LocusType)
	*p = x
	return p
}

func (x Locus_LocusType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(Locus_LocusType_name, int32(x))
}

func (x *Locus_LocusType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Locus_LocusType_value, data, "Locus_LocusType")
	if err != nil {
		return err
	}
	*x = Locus_LocusType(value)
	return nil
}

func (Locus_LocusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9ff88d09cc4a89bc, []int{0, 0}
}

type Locus struct {
	LocusType      Locus_LocusType `protobuf:"varint,1,opt,name=locus_type,json=locusType,enum=mediapipe.Locus_LocusType" json:"locus_type"`
	LocusId        uint64          `protobuf:"fixed64,2,opt,name=locus_id,json=locusId" json:"locus_id"`
	LocusIdSeed    uint64          `protobuf:"fixed64,6,opt,name=locus_id_seed,json=locusIdSeed" json:"locus_id_seed"`
	Concatenatable *bool           `protobuf:"varint,5,opt,name=concatenatable,def=1" json:"concatenatable,omitempty"`
	BoundingBox    *BoundingBox    `protobuf:"bytes,3,opt,name=bounding_box,json=boundingBox" json:"bounding_box,omitempty"`
	Timestamp      *int32          `protobuf:"varint,7,opt,name=timestamp,def=-1" json:"timestamp,omitempty"`
	Region         *Rasterization  `protobuf:"bytes,4,opt,name=region" json:"region,omitempty"`
	ComponentLocus []*Locus        `protobuf:"bytes,8,rep,name=component_locus,json=componentLocus" json:"component_locus,omitempty"`
}

func (m *Locus) Reset()      { *m = Locus{} }
func (*Locus) ProtoMessage() {}
func (*Locus) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff88d09cc4a89bc, []int{0}
}
func (m *Locus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Locus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Locus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Locus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Locus.Merge(m, src)
}
func (m *Locus) XXX_Size() int {
	return m.Size()
}
func (m *Locus) XXX_DiscardUnknown() {
	xxx_messageInfo_Locus.DiscardUnknown(m)
}

var xxx_messageInfo_Locus proto.InternalMessageInfo

const Default_Locus_Concatenatable bool = true
const Default_Locus_Timestamp int32 = -1

func (m *Locus) GetLocusType() Locus_LocusType {
	if m != nil {
		return m.LocusType
	}
	return LOCUS_TYPE_UNKNOWN
}

func (m *Locus) GetLocusId() uint64 {
	if m != nil {
		return m.LocusId
	}
	return 0
}

func (m *Locus) GetLocusIdSeed() uint64 {
	if m != nil {
		return m.LocusIdSeed
	}
	return 0
}

func (m *Locus) GetConcatenatable() bool {
	if m != nil && m.Concatenatable != nil {
		return *m.Concatenatable
	}
	return Default_Locus_Concatenatable
}

func (m *Locus) GetBoundingBox() *BoundingBox {
	if m != nil {
		return m.BoundingBox
	}
	return nil
}

func (m *Locus) GetTimestamp() int32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return Default_Locus_Timestamp
}

func (m *Locus) GetRegion() *Rasterization {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *Locus) GetComponentLocus() []*Locus {
	if m != nil {
		return m.ComponentLocus
	}
	return nil
}

type BoundingBox struct {
	LeftX  int32 `protobuf:"varint,1,opt,name=left_x,json=leftX" json:"left_x"`
	UpperY int32 `protobuf:"varint,2,opt,name=upper_y,json=upperY" json:"upper_y"`
	RightX int32 `protobuf:"varint,3,opt,name=right_x,json=rightX" json:"right_x"`
	LowerY int32 `protobuf:"varint,4,opt,name=lower_y,json=lowerY" json:"lower_y"`
}

func (m *BoundingBox) Reset()      { *m = BoundingBox{} }
func (*BoundingBox) ProtoMessage() {}
func (*BoundingBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff88d09cc4a89bc, []int{1}
}
func (m *BoundingBox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoundingBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoundingBox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoundingBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoundingBox.Merge(m, src)
}
func (m *BoundingBox) XXX_Size() int {
	return m.Size()
}
func (m *BoundingBox) XXX_DiscardUnknown() {
	xxx_messageInfo_BoundingBox.DiscardUnknown(m)
}

var xxx_messageInfo_BoundingBox proto.InternalMessageInfo

func (m *BoundingBox) GetLeftX() int32 {
	if m != nil {
		return m.LeftX
	}
	return 0
}

func (m *BoundingBox) GetUpperY() int32 {
	if m != nil {
		return m.UpperY
	}
	return 0
}

func (m *BoundingBox) GetRightX() int32 {
	if m != nil {
		return m.RightX
	}
	return 0
}

func (m *BoundingBox) GetLowerY() int32 {
	if m != nil {
		return m.LowerY
	}
	return 0
}

func init() {
	proto.RegisterEnum("mediapipe.Locus_LocusType", Locus_LocusType_name, Locus_LocusType_value)
	proto.RegisterType((*Locus)(nil), "mediapipe.Locus")
	proto.RegisterType((*BoundingBox)(nil), "mediapipe.BoundingBox")
}

func init() {
	proto.RegisterFile("mediapipe/framework/formats/annotation/locus.proto", fileDescriptor_9ff88d09cc4a89bc)
}

var fileDescriptor_9ff88d09cc4a89bc = []byte{
	// 562 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x3f, 0x6f, 0xd3, 0x4c,
	0x1c, 0xc7, 0x7d, 0x8d, 0x93, 0x36, 0x97, 0xe7, 0x29, 0xe6, 0xa4, 0x16, 0xd3, 0x8a, 0xab, 0xd5,
	0xc9, 0x03, 0xc4, 0x90, 0xad, 0x5d, 0x10, 0xa6, 0x51, 0x15, 0x11, 0xd9, 0xc8, 0x4d, 0xa0, 0x61,
	0xb1, 0x9c, 0xf8, 0xe2, 0x5a, 0xd8, 0x3e, 0xcb, 0xb9, 0xa8, 0x09, 0x2c, 0x6c, 0x88, 0x8d, 0x8d,
	0xb7, 0xc0, 0x4b, 0xe9, 0x98, 0xb1, 0x13, 0x22, 0xce, 0xc2, 0xd8, 0x91, 0x11, 0xe5, 0xe2, 0x24,
	0x56, 0xa6, 0x2e, 0x91, 0x7e, 0x9f, 0xef, 0x1f, 0xe5, 0x7e, 0xe7, 0x83, 0xb5, 0x90, 0xb8, 0xbe,
	0x13, 0xfb, 0x31, 0xd1, 0xfa, 0x89, 0x13, 0x92, 0x6b, 0x9a, 0x7c, 0xd4, 0xfa, 0x34, 0x09, 0x1d,
	0x36, 0xd0, 0x9c, 0x28, 0xa2, 0xcc, 0x61, 0x3e, 0x8d, 0xb4, 0x80, 0xf6, 0x86, 0x83, 0x6a, 0x9c,
	0x50, 0x46, 0x51, 0x79, 0x95, 0x39, 0x38, 0xbd, 0x67, 0x3c, 0x71, 0x06, 0x8c, 0x24, 0xfe, 0x27,
	0x3e, 0x2d, 0x6a, 0x8e, 0x7f, 0x88, 0xb0, 0xd8, 0x9c, 0xd7, 0xa2, 0x97, 0x10, 0xf2, 0x7e, 0x9b,
	0x8d, 0x63, 0x22, 0x03, 0x05, 0xa8, 0xbb, 0xb5, 0x83, 0xea, 0xaa, 0xba, 0xca, 0x5d, 0x8b, 0xdf,
	0xd6, 0x38, 0x26, 0xba, 0x78, 0xf3, 0xeb, 0x48, 0xb0, 0xca, 0xc1, 0x12, 0xa0, 0x23, 0xb8, 0xb3,
	0x28, 0xf0, 0x5d, 0x79, 0x4b, 0x01, 0x6a, 0x29, 0xb3, 0x6c, 0x73, 0xda, 0x70, 0x91, 0x0a, 0xff,
	0x5f, 0x1a, 0xec, 0x01, 0x21, 0xae, 0x5c, 0xca, 0xb9, 0x2a, 0x99, 0xeb, 0x82, 0x10, 0x17, 0x3d,
	0x85, 0xbb, 0x3d, 0x1a, 0xf5, 0x1c, 0x46, 0x22, 0x87, 0x39, 0xdd, 0x80, 0xc8, 0x45, 0x05, 0xa8,
	0x3b, 0xa7, 0x22, 0x4b, 0x86, 0xc4, 0xda, 0xd0, 0xd0, 0x09, 0xfc, 0xaf, 0x4b, 0x87, 0x91, 0xeb,
	0x47, 0x9e, 0xdd, 0xa5, 0x23, 0xb9, 0xa0, 0x00, 0xb5, 0x52, 0xdb, 0xcf, 0xfd, 0x77, 0x3d, 0x93,
	0x75, 0x3a, 0xb2, 0x2a, 0xdd, 0xf5, 0x80, 0x14, 0x58, 0x66, 0x7e, 0x48, 0x06, 0xcc, 0x09, 0x63,
	0x79, 0x5b, 0x01, 0x6a, 0xf1, 0x74, 0xeb, 0xd9, 0x0b, 0x6b, 0x0d, 0xd1, 0x73, 0x58, 0x4a, 0x88,
	0xe7, 0xd3, 0x48, 0x16, 0x79, 0xad, 0x9c, 0xab, 0xb5, 0xf2, 0x0b, 0xb5, 0x32, 0x1f, 0x3a, 0x81,
	0x0f, 0x7a, 0x34, 0x8c, 0x69, 0x44, 0x22, 0x66, 0xf3, 0x53, 0xc9, 0x3b, 0x4a, 0x41, 0xad, 0xd4,
	0xa4, 0xcd, 0x6d, 0xce, 0x4f, 0x92, 0x19, 0xf9, 0x7c, 0xfc, 0x0d, 0xc0, 0xf2, 0x6a, 0xc3, 0x68,
	0x1f, 0xa2, 0xa6, 0xf9, 0xba, 0x7d, 0x61, 0xb7, 0x3a, 0x6f, 0xeb, 0x76, 0xdb, 0x78, 0x63, 0x98,
	0xef, 0x0d, 0x49, 0x40, 0x7b, 0xf0, 0x61, 0x8e, 0x9f, 0x37, 0x4d, 0xfd, 0x55, 0x53, 0x02, 0xe8,
	0x10, 0x3e, 0xca, 0x61, 0xdd, 0x6c, 0x1b, 0x67, 0x0d, 0xe3, 0xdc, 0xd6, 0xcd, 0x4b, 0x69, 0x6b,
	0x23, 0x63, 0xd5, 0xcf, 0x1b, 0xa6, 0x21, 0x15, 0xd0, 0x63, 0xb8, 0x97, 0xc3, 0xef, 0x1a, 0x67,
	0x75, 0xd3, 0x6e, 0xb5, 0xf5, 0xba, 0x24, 0x1e, 0x7f, 0x05, 0xb0, 0x92, 0xdb, 0x1b, 0x3a, 0x84,
	0xa5, 0x80, 0xf4, 0x99, 0x3d, 0xe2, 0xdf, 0x46, 0x31, 0xbb, 0xb6, 0xe2, 0x9c, 0x5d, 0xa2, 0x27,
	0x70, 0x7b, 0x18, 0xc7, 0x24, 0xb1, 0xc7, 0xfc, 0xea, 0x97, 0x6a, 0x89, 0xc3, 0xce, 0x5c, 0x4e,
	0x7c, 0xef, 0x6a, 0x1e, 0x2e, 0xe4, 0x65, 0x0e, 0x79, 0x3a, 0xa0, 0xd7, 0x3c, 0x2d, 0xe6, 0x65,
	0x0e, 0x3b, 0xfa, 0xe7, 0xc9, 0x14, 0x0b, 0xb7, 0x53, 0x2c, 0xdc, 0x4d, 0x31, 0xf8, 0x92, 0x62,
	0xf0, 0x33, 0xc5, 0xe0, 0x26, 0xc5, 0x60, 0x92, 0x62, 0xf0, 0x3b, 0xc5, 0xe0, 0x4f, 0x8a, 0x85,
	0xbb, 0x14, 0x83, 0xef, 0x33, 0x2c, 0x4c, 0x66, 0x58, 0xb8, 0x9d, 0x61, 0xe1, 0x83, 0xee, 0xf9,
	0xec, 0x6a, 0xd8, 0xad, 0xf6, 0x68, 0xa8, 0x79, 0x94, 0x7a, 0x01, 0xd1, 0xd6, 0xef, 0xe4, 0x7e,
	0x2f, 0xe6, 0x2f, 0x00, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xe3, 0xa9, 0xba, 0x9c, 0x03,
	0x00, 0x00,
}

func (x Locus_LocusType) String() string {
	s, ok := Locus_LocusType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Locus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Locus)
	if !ok {
		that2, ok := that.(Locus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LocusType != that1.LocusType {
		return false
	}
	if this.LocusId != that1.LocusId {
		return false
	}
	if this.LocusIdSeed != that1.LocusIdSeed {
		return false
	}
	if this.Concatenatable != nil && that1.Concatenatable != nil {
		if *this.Concatenatable != *that1.Concatenatable {
			return false
		}
	} else if this.Concatenatable != nil {
		return false
	} else if that1.Concatenatable != nil {
		return false
	}
	if !this.BoundingBox.Equal(that1.BoundingBox) {
		return false
	}
	if this.Timestamp != nil && that1.Timestamp != nil {
		if *this.Timestamp != *that1.Timestamp {
			return false
		}
	} else if this.Timestamp != nil {
		return false
	} else if that1.Timestamp != nil {
		return false
	}
	if !this.Region.Equal(that1.Region) {
		return false
	}
	if len(this.ComponentLocus) != len(that1.ComponentLocus) {
		return false
	}
	for i := range this.ComponentLocus {
		if !this.ComponentLocus[i].Equal(that1.ComponentLocus[i]) {
			return false
		}
	}
	return true
}
func (this *BoundingBox) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BoundingBox)
	if !ok {
		that2, ok := that.(BoundingBox)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LeftX != that1.LeftX {
		return false
	}
	if this.UpperY != that1.UpperY {
		return false
	}
	if this.RightX != that1.RightX {
		return false
	}
	if this.LowerY != that1.LowerY {
		return false
	}
	return true
}
func (this *Locus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&annotation.Locus{")
	s = append(s, "LocusType: "+fmt.Sprintf("%#v", this.LocusType)+",\n")
	s = append(s, "LocusId: "+fmt.Sprintf("%#v", this.LocusId)+",\n")
	s = append(s, "LocusIdSeed: "+fmt.Sprintf("%#v", this.LocusIdSeed)+",\n")
	if this.Concatenatable != nil {
		s = append(s, "Concatenatable: "+valueToGoStringLocus(this.Concatenatable, "bool")+",\n")
	}
	if this.BoundingBox != nil {
		s = append(s, "BoundingBox: "+fmt.Sprintf("%#v", this.BoundingBox)+",\n")
	}
	if this.Timestamp != nil {
		s = append(s, "Timestamp: "+valueToGoStringLocus(this.Timestamp, "int32")+",\n")
	}
	if this.Region != nil {
		s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	}
	if this.ComponentLocus != nil {
		s = append(s, "ComponentLocus: "+fmt.Sprintf("%#v", this.ComponentLocus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BoundingBox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&annotation.BoundingBox{")
	s = append(s, "LeftX: "+fmt.Sprintf("%#v", this.LeftX)+",\n")
	s = append(s, "UpperY: "+fmt.Sprintf("%#v", this.UpperY)+",\n")
	s = append(s, "RightX: "+fmt.Sprintf("%#v", this.RightX)+",\n")
	s = append(s, "LowerY: "+fmt.Sprintf("%#v", this.LowerY)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLocus(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Locus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Locus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Locus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ComponentLocus) > 0 {
		for iNdEx := len(m.ComponentLocus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ComponentLocus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocus(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Timestamp != nil {
		i = encodeVarintLocus(dAtA, i, uint64(*m.Timestamp))
		i--
		dAtA[i] = 0x38
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.LocusIdSeed))
	i--
	dAtA[i] = 0x31
	if m.Concatenatable != nil {
		i--
		if *m.Concatenatable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Region != nil {
		{
			size, err := m.Region.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLocus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BoundingBox != nil {
		{
			size, err := m.BoundingBox.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLocus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.LocusId))
	i--
	dAtA[i] = 0x11
	i = encodeVarintLocus(dAtA, i, uint64(m.LocusType))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *BoundingBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoundingBox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BoundingBox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintLocus(dAtA, i, uint64(m.LowerY))
	i--
	dAtA[i] = 0x20
	i = encodeVarintLocus(dAtA, i, uint64(m.RightX))
	i--
	dAtA[i] = 0x18
	i = encodeVarintLocus(dAtA, i, uint64(m.UpperY))
	i--
	dAtA[i] = 0x10
	i = encodeVarintLocus(dAtA, i, uint64(m.LeftX))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintLocus(dAtA []byte, offset int, v uint64) int {
	offset -= sovLocus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Locus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovLocus(uint64(m.LocusType))
	n += 9
	if m.BoundingBox != nil {
		l = m.BoundingBox.Size()
		n += 1 + l + sovLocus(uint64(l))
	}
	if m.Region != nil {
		l = m.Region.Size()
		n += 1 + l + sovLocus(uint64(l))
	}
	if m.Concatenatable != nil {
		n += 2
	}
	n += 9
	if m.Timestamp != nil {
		n += 1 + sovLocus(uint64(*m.Timestamp))
	}
	if len(m.ComponentLocus) > 0 {
		for _, e := range m.ComponentLocus {
			l = e.Size()
			n += 1 + l + sovLocus(uint64(l))
		}
	}
	return n
}

func (m *BoundingBox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovLocus(uint64(m.LeftX))
	n += 1 + sovLocus(uint64(m.UpperY))
	n += 1 + sovLocus(uint64(m.RightX))
	n += 1 + sovLocus(uint64(m.LowerY))
	return n
}

func sovLocus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLocus(x uint64) (n int) {
	return sovLocus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Locus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForComponentLocus := "[]*Locus{"
	for _, f := range this.ComponentLocus {
		repeatedStringForComponentLocus += strings.Replace(f.String(), "Locus", "Locus", 1) + ","
	}
	repeatedStringForComponentLocus += "}"
	s := strings.Join([]string{`&Locus{`,
		`LocusType:` + fmt.Sprintf("%v", this.LocusType) + `,`,
		`LocusId:` + fmt.Sprintf("%v", this.LocusId) + `,`,
		`BoundingBox:` + strings.Replace(this.BoundingBox.String(), "BoundingBox", "BoundingBox", 1) + `,`,
		`Region:` + strings.Replace(fmt.Sprintf("%v", this.Region), "Rasterization", "Rasterization", 1) + `,`,
		`Concatenatable:` + valueToStringLocus(this.Concatenatable) + `,`,
		`LocusIdSeed:` + fmt.Sprintf("%v", this.LocusIdSeed) + `,`,
		`Timestamp:` + valueToStringLocus(this.Timestamp) + `,`,
		`ComponentLocus:` + repeatedStringForComponentLocus + `,`,
		`}`,
	}, "")
	return s
}
func (this *BoundingBox) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BoundingBox{`,
		`LeftX:` + fmt.Sprintf("%v", this.LeftX) + `,`,
		`UpperY:` + fmt.Sprintf("%v", this.UpperY) + `,`,
		`RightX:` + fmt.Sprintf("%v", this.RightX) + `,`,
		`LowerY:` + fmt.Sprintf("%v", this.LowerY) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLocus(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Locus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Locus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Locus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocusType", wireType)
			}
			m.LocusType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocusType |= Locus_LocusType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocusId", wireType)
			}
			m.LocusId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.LocusId = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoundingBox", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BoundingBox == nil {
				m.BoundingBox = &BoundingBox{}
			}
			if err := m.BoundingBox.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Region == nil {
				m.Region = &Rasterization{}
			}
			if err := m.Region.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Concatenatable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Concatenatable = &b
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocusIdSeed", wireType)
			}
			m.LocusIdSeed = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.LocusIdSeed = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentLocus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentLocus = append(m.ComponentLocus, &Locus{})
			if err := m.ComponentLocus[len(m.ComponentLocus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoundingBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoundingBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoundingBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftX", wireType)
			}
			m.LeftX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftX |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperY", wireType)
			}
			m.UpperY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperY |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightX", wireType)
			}
			m.RightX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RightX |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerY", wireType)
			}
			m.LowerY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerY |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLocus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLocus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLocus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLocus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLocus = fmt.Errorf("proto: unexpected end of group")
)
