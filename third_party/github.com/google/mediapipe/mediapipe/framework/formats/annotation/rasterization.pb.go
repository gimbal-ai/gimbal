// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/formats/annotation/rasterization.proto

package annotation

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Rasterization struct {
	Interval []*Rasterization_Interval `protobuf:"bytes,1,rep,name=interval" json:"interval,omitempty"`
}

func (m *Rasterization) Reset()      { *m = Rasterization{} }
func (*Rasterization) ProtoMessage() {}
func (*Rasterization) Descriptor() ([]byte, []int) {
	return fileDescriptor_12631d7436fb8a04, []int{0}
}
func (m *Rasterization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rasterization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rasterization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rasterization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rasterization.Merge(m, src)
}
func (m *Rasterization) XXX_Size() int {
	return m.Size()
}
func (m *Rasterization) XXX_DiscardUnknown() {
	xxx_messageInfo_Rasterization.DiscardUnknown(m)
}

var xxx_messageInfo_Rasterization proto.InternalMessageInfo

func (m *Rasterization) GetInterval() []*Rasterization_Interval {
	if m != nil {
		return m.Interval
	}
	return nil
}

type Rasterization_Interval struct {
	Y      int32 `protobuf:"varint,1,req,name=y" json:"y"`
	LeftX  int32 `protobuf:"varint,2,req,name=left_x,json=leftX" json:"left_x"`
	RightX int32 `protobuf:"varint,3,req,name=right_x,json=rightX" json:"right_x"`
}

func (m *Rasterization_Interval) Reset()      { *m = Rasterization_Interval{} }
func (*Rasterization_Interval) ProtoMessage() {}
func (*Rasterization_Interval) Descriptor() ([]byte, []int) {
	return fileDescriptor_12631d7436fb8a04, []int{0, 0}
}
func (m *Rasterization_Interval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rasterization_Interval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rasterization_Interval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rasterization_Interval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rasterization_Interval.Merge(m, src)
}
func (m *Rasterization_Interval) XXX_Size() int {
	return m.Size()
}
func (m *Rasterization_Interval) XXX_DiscardUnknown() {
	xxx_messageInfo_Rasterization_Interval.DiscardUnknown(m)
}

var xxx_messageInfo_Rasterization_Interval proto.InternalMessageInfo

func (m *Rasterization_Interval) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Rasterization_Interval) GetLeftX() int32 {
	if m != nil {
		return m.LeftX
	}
	return 0
}

func (m *Rasterization_Interval) GetRightX() int32 {
	if m != nil {
		return m.RightX
	}
	return 0
}

func init() {
	proto.RegisterType((*Rasterization)(nil), "mediapipe.Rasterization")
	proto.RegisterType((*Rasterization_Interval)(nil), "mediapipe.Rasterization.Interval")
}

func init() {
	proto.RegisterFile("mediapipe/framework/formats/annotation/rasterization.proto", fileDescriptor_12631d7436fb8a04)
}

var fileDescriptor_12631d7436fb8a04 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xbf, 0x4f, 0x02, 0x31,
	0x14, 0xc7, 0xfb, 0x40, 0x10, 0x6b, 0x5c, 0x3a, 0x11, 0x8d, 0x4f, 0x74, 0x62, 0xb1, 0x4d, 0x1c,
	0x4d, 0x5c, 0x6e, 0x73, 0x33, 0x4c, 0x84, 0xc5, 0x54, 0x2c, 0x47, 0x23, 0x77, 0x25, 0xa5, 0xfe,
	0xc0, 0xc9, 0x3f, 0xc1, 0x3f, 0xc3, 0xf8, 0x47, 0x38, 0x33, 0x32, 0x32, 0x19, 0xaf, 0xb7, 0x38,
	0x32, 0x3a, 0x9a, 0x03, 0x3c, 0x8e, 0xcd, 0xb1, 0xdf, 0xef, 0xe7, 0x35, 0x79, 0x9f, 0x47, 0xcf,
	0x23, 0x75, 0xab, 0xe5, 0x50, 0x0f, 0x95, 0xe8, 0x59, 0x19, 0xa9, 0x47, 0x63, 0xef, 0x44, 0xcf,
	0xd8, 0x48, 0xba, 0x91, 0x90, 0x71, 0x6c, 0x9c, 0x74, 0xda, 0xc4, 0xc2, 0xca, 0x91, 0x53, 0x56,
	0x3f, 0x2f, 0x5e, 0x7c, 0x68, 0x8d, 0x33, 0x6c, 0x27, 0x9f, 0x3d, 0x79, 0x07, 0xba, 0xd7, 0x2a,
	0x22, 0xec, 0x82, 0xd6, 0x74, 0xec, 0x94, 0x7d, 0x90, 0x83, 0x3a, 0x34, 0xca, 0xcd, 0xdd, 0xb3,
	0x63, 0x9e, 0xf3, 0x7c, 0x83, 0xe5, 0x97, 0x2b, 0xb0, 0x95, 0x8f, 0xec, 0x77, 0x68, 0xed, 0x2f,
	0x65, 0x8c, 0xc2, 0xb8, 0x0e, 0x8d, 0x52, 0xb3, 0x12, 0x6c, 0x4d, 0x3e, 0x8f, 0x48, 0x0b, 0xc6,
	0xec, 0x80, 0x56, 0x07, 0xaa, 0xe7, 0xae, 0x9f, 0xea, 0xa5, 0x42, 0x51, 0xc9, 0xb2, 0x36, 0x3b,
	0xa4, 0xdb, 0x56, 0x87, 0xfd, 0xac, 0x2d, 0x17, 0xda, 0xea, 0x22, 0x6c, 0x07, 0x1f, 0x30, 0x4d,
	0x90, 0xcc, 0x12, 0x24, 0xf3, 0x04, 0xe1, 0xc5, 0x23, 0xbc, 0x79, 0x84, 0x89, 0x47, 0x98, 0x7a,
	0x84, 0x2f, 0x8f, 0xf0, 0xed, 0x91, 0xcc, 0x3d, 0xc2, 0x6b, 0x8a, 0x64, 0x9a, 0x22, 0x99, 0xa5,
	0x48, 0xe8, 0x69, 0xd7, 0x44, 0x3c, 0x34, 0x26, 0x1c, 0xa8, 0xc2, 0x26, 0x2b, 0x57, 0x7c, 0xed,
	0x6a, 0x69, 0x27, 0x60, 0x1b, 0x3b, 0x5e, 0x65, 0x59, 0x27, 0x08, 0xb5, 0xeb, 0xdf, 0xdf, 0xf0,
	0xae, 0x89, 0xc4, 0xf2, 0x27, 0xb1, 0xf6, 0xff, 0xbf, 0x4b, 0xfc, 0x00, 0xfc, 0x06, 0x00, 0x00,
	0xff, 0xff, 0xc3, 0x8e, 0x79, 0x58, 0xb5, 0x01, 0x00, 0x00,
}

func (this *Rasterization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Rasterization)
	if !ok {
		that2, ok := that.(Rasterization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Interval) != len(that1.Interval) {
		return false
	}
	for i := range this.Interval {
		if !this.Interval[i].Equal(that1.Interval[i]) {
			return false
		}
	}
	return true
}
func (this *Rasterization_Interval) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Rasterization_Interval)
	if !ok {
		that2, ok := that.(Rasterization_Interval)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	if this.LeftX != that1.LeftX {
		return false
	}
	if this.RightX != that1.RightX {
		return false
	}
	return true
}
func (this *Rasterization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&annotation.Rasterization{")
	if this.Interval != nil {
		s = append(s, "Interval: "+fmt.Sprintf("%#v", this.Interval)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Rasterization_Interval) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&annotation.Rasterization_Interval{")
	s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	s = append(s, "LeftX: "+fmt.Sprintf("%#v", this.LeftX)+",\n")
	s = append(s, "RightX: "+fmt.Sprintf("%#v", this.RightX)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRasterization(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Rasterization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rasterization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rasterization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Interval) > 0 {
		for iNdEx := len(m.Interval) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interval[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRasterization(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Rasterization_Interval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rasterization_Interval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rasterization_Interval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintRasterization(dAtA, i, uint64(m.RightX))
	i--
	dAtA[i] = 0x18
	i = encodeVarintRasterization(dAtA, i, uint64(m.LeftX))
	i--
	dAtA[i] = 0x10
	i = encodeVarintRasterization(dAtA, i, uint64(m.Y))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintRasterization(dAtA []byte, offset int, v uint64) int {
	offset -= sovRasterization(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Rasterization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interval) > 0 {
		for _, e := range m.Interval {
			l = e.Size()
			n += 1 + l + sovRasterization(uint64(l))
		}
	}
	return n
}

func (m *Rasterization_Interval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRasterization(uint64(m.Y))
	n += 1 + sovRasterization(uint64(m.LeftX))
	n += 1 + sovRasterization(uint64(m.RightX))
	return n
}

func sovRasterization(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRasterization(x uint64) (n int) {
	return sovRasterization(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Rasterization) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInterval := "[]*Rasterization_Interval{"
	for _, f := range this.Interval {
		repeatedStringForInterval += strings.Replace(fmt.Sprintf("%v", f), "Rasterization_Interval", "Rasterization_Interval", 1) + ","
	}
	repeatedStringForInterval += "}"
	s := strings.Join([]string{`&Rasterization{`,
		`Interval:` + repeatedStringForInterval + `,`,
		`}`,
	}, "")
	return s
}
func (this *Rasterization_Interval) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Rasterization_Interval{`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`LeftX:` + fmt.Sprintf("%v", this.LeftX) + `,`,
		`RightX:` + fmt.Sprintf("%v", this.RightX) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRasterization(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Rasterization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRasterization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rasterization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rasterization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRasterization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRasterization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRasterization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interval = append(m.Interval, &Rasterization_Interval{})
			if err := m.Interval[len(m.Interval)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRasterization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRasterization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rasterization_Interval) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRasterization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRasterization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftX", wireType)
			}
			m.LeftX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRasterization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftX |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightX", wireType)
			}
			m.RightX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRasterization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RightX |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipRasterization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRasterization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("y")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("left_x")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("right_x")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRasterization(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRasterization
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRasterization
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRasterization
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRasterization
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRasterization
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRasterization
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRasterization        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRasterization          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRasterization = fmt.Errorf("proto: unexpected end of group")
)
