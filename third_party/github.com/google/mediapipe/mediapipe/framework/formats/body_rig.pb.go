// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/formats/body_rig.proto

package formats

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Joint struct {
	Rotation_6D []float32 `protobuf:"fixed32,1,rep,name=rotation_6d,json=rotation6d" json:"rotation_6d,omitempty"`
	Visibility  float32   `protobuf:"fixed32,2,opt,name=visibility" json:"visibility"`
}

func (m *Joint) Reset()      { *m = Joint{} }
func (*Joint) ProtoMessage() {}
func (*Joint) Descriptor() ([]byte, []int) {
	return fileDescriptor_775e353e4bab3999, []int{0}
}
func (m *Joint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Joint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Joint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Joint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Joint.Merge(m, src)
}
func (m *Joint) XXX_Size() int {
	return m.Size()
}
func (m *Joint) XXX_DiscardUnknown() {
	xxx_messageInfo_Joint.DiscardUnknown(m)
}

var xxx_messageInfo_Joint proto.InternalMessageInfo

func (m *Joint) GetRotation_6D() []float32 {
	if m != nil {
		return m.Rotation_6D
	}
	return nil
}

func (m *Joint) GetVisibility() float32 {
	if m != nil {
		return m.Visibility
	}
	return 0
}

type JointList struct {
	Joint []*Joint `protobuf:"bytes,1,rep,name=joint" json:"joint,omitempty"`
}

func (m *JointList) Reset()      { *m = JointList{} }
func (*JointList) ProtoMessage() {}
func (*JointList) Descriptor() ([]byte, []int) {
	return fileDescriptor_775e353e4bab3999, []int{1}
}
func (m *JointList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JointList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JointList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JointList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JointList.Merge(m, src)
}
func (m *JointList) XXX_Size() int {
	return m.Size()
}
func (m *JointList) XXX_DiscardUnknown() {
	xxx_messageInfo_JointList.DiscardUnknown(m)
}

var xxx_messageInfo_JointList proto.InternalMessageInfo

func (m *JointList) GetJoint() []*Joint {
	if m != nil {
		return m.Joint
	}
	return nil
}

func init() {
	proto.RegisterType((*Joint)(nil), "mediapipe.Joint")
	proto.RegisterType((*JointList)(nil), "mediapipe.JointList")
}

func init() {
	proto.RegisterFile("mediapipe/framework/formats/body_rig.proto", fileDescriptor_775e353e4bab3999)
}

var fileDescriptor_775e353e4bab3999 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xca, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x2b, 0x4a, 0xcc, 0x4d, 0x2d, 0xcf, 0x2f, 0xca, 0xd6,
	0x4f, 0xcb, 0x2f, 0xca, 0x4d, 0x2c, 0x29, 0xd6, 0x4f, 0xca, 0x4f, 0xa9, 0x8c, 0x2f, 0xca, 0x4c,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0xab, 0x55, 0xf2, 0xe3, 0x62, 0xf5, 0xca,
	0xcf, 0xcc, 0x2b, 0x11, 0x92, 0xe7, 0xe2, 0x2e, 0xca, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x8b,
	0x37, 0x4b, 0x91, 0x60, 0x54, 0x60, 0xd6, 0x60, 0x0a, 0xe2, 0x82, 0x09, 0x99, 0xa5, 0x08, 0xa9,
	0x70, 0x71, 0x95, 0x65, 0x16, 0x67, 0x26, 0x65, 0xe6, 0x64, 0x96, 0x54, 0x4a, 0x30, 0x29, 0x30,
	0x6a, 0x30, 0x39, 0xb1, 0x9c, 0xb8, 0x27, 0xcf, 0x10, 0x84, 0x24, 0xae, 0x64, 0xcc, 0xc5, 0x09,
	0x36, 0xcf, 0x27, 0xb3, 0xb8, 0x44, 0x48, 0x8d, 0x8b, 0x35, 0x0b, 0xc4, 0x01, 0x9b, 0xc6, 0x6d,
	0x24, 0xa0, 0x07, 0xb7, 0x57, 0x0f, 0xac, 0x28, 0x08, 0x22, 0xed, 0x94, 0x7b, 0xe1, 0xa1, 0x1c,
	0xc3, 0x8d, 0x87, 0x72, 0x0c, 0x1f, 0x1e, 0xca, 0x31, 0x36, 0x3c, 0x92, 0x63, 0x5c, 0xf1, 0x48,
	0x8e, 0xf1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x7c, 0xf1,
	0x48, 0x8e, 0xe1, 0xc3, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8,
	0xf1, 0x58, 0x8e, 0x21, 0xca, 0x3c, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57,
	0x3f, 0x3d, 0x3f, 0x3f, 0x3d, 0x27, 0x55, 0x1f, 0x11, 0x06, 0x78, 0x42, 0x03, 0x10, 0x00, 0x00,
	0xff, 0xff, 0xa5, 0x3f, 0xbc, 0x73, 0x2b, 0x01, 0x00, 0x00,
}

func (this *Joint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Joint)
	if !ok {
		that2, ok := that.(Joint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rotation_6D) != len(that1.Rotation_6D) {
		return false
	}
	for i := range this.Rotation_6D {
		if this.Rotation_6D[i] != that1.Rotation_6D[i] {
			return false
		}
	}
	if this.Visibility != that1.Visibility {
		return false
	}
	return true
}
func (this *JointList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JointList)
	if !ok {
		that2, ok := that.(JointList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Joint) != len(that1.Joint) {
		return false
	}
	for i := range this.Joint {
		if !this.Joint[i].Equal(that1.Joint[i]) {
			return false
		}
	}
	return true
}
func (this *Joint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&formats.Joint{")
	if this.Rotation_6D != nil {
		s = append(s, "Rotation_6D: "+fmt.Sprintf("%#v", this.Rotation_6D)+",\n")
	}
	s = append(s, "Visibility: "+fmt.Sprintf("%#v", this.Visibility)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JointList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&formats.JointList{")
	if this.Joint != nil {
		s = append(s, "Joint: "+fmt.Sprintf("%#v", this.Joint)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBodyRig(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Joint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Joint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Joint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Visibility))))
	i--
	dAtA[i] = 0x15
	if len(m.Rotation_6D) > 0 {
		for iNdEx := len(m.Rotation_6D) - 1; iNdEx >= 0; iNdEx-- {
			f1 := math.Float32bits(float32(m.Rotation_6D[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f1))
			i--
			dAtA[i] = 0xd
		}
	}
	return len(dAtA) - i, nil
}

func (m *JointList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JointList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JointList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Joint) > 0 {
		for iNdEx := len(m.Joint) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Joint[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBodyRig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintBodyRig(dAtA []byte, offset int, v uint64) int {
	offset -= sovBodyRig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Joint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rotation_6D) > 0 {
		n += 5 * len(m.Rotation_6D)
	}
	n += 5
	return n
}

func (m *JointList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Joint) > 0 {
		for _, e := range m.Joint {
			l = e.Size()
			n += 1 + l + sovBodyRig(uint64(l))
		}
	}
	return n
}

func sovBodyRig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBodyRig(x uint64) (n int) {
	return sovBodyRig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Joint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Joint{`,
		`Rotation_6D:` + fmt.Sprintf("%v", this.Rotation_6D) + `,`,
		`Visibility:` + fmt.Sprintf("%v", this.Visibility) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JointList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForJoint := "[]*Joint{"
	for _, f := range this.Joint {
		repeatedStringForJoint += strings.Replace(f.String(), "Joint", "Joint", 1) + ","
	}
	repeatedStringForJoint += "}"
	s := strings.Join([]string{`&JointList{`,
		`Joint:` + repeatedStringForJoint + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBodyRig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Joint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBodyRig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Joint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Joint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Rotation_6D = append(m.Rotation_6D, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBodyRig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBodyRig
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBodyRig
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Rotation_6D) == 0 {
					m.Rotation_6D = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Rotation_6D = append(m.Rotation_6D, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotation_6D", wireType)
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Visibility = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBodyRig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBodyRig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JointList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBodyRig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JointList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JointList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Joint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBodyRig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBodyRig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBodyRig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Joint = append(m.Joint, &Joint{})
			if err := m.Joint[len(m.Joint)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBodyRig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBodyRig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBodyRig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBodyRig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBodyRig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBodyRig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBodyRig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBodyRig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBodyRig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBodyRig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBodyRig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBodyRig = fmt.Errorf("proto: unexpected end of group")
)
