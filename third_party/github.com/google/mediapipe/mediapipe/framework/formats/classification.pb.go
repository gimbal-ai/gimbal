// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/formats/classification.proto

package formats

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Classification struct {
	Index       int32   `protobuf:"varint,1,opt,name=index" json:"index"`
	Score       float32 `protobuf:"fixed32,2,opt,name=score" json:"score"`
	Label       string  `protobuf:"bytes,3,opt,name=label" json:"label"`
	DisplayName string  `protobuf:"bytes,4,opt,name=display_name,json=displayName" json:"display_name"`
}

func (m *Classification) Reset()      { *m = Classification{} }
func (*Classification) ProtoMessage() {}
func (*Classification) Descriptor() ([]byte, []int) {
	return fileDescriptor_412948239bfced1c, []int{0}
}
func (m *Classification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Classification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Classification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Classification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Classification.Merge(m, src)
}
func (m *Classification) XXX_Size() int {
	return m.Size()
}
func (m *Classification) XXX_DiscardUnknown() {
	xxx_messageInfo_Classification.DiscardUnknown(m)
}

var xxx_messageInfo_Classification proto.InternalMessageInfo

func (m *Classification) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Classification) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Classification) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Classification) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

type ClassificationList struct {
	Classification []*Classification `protobuf:"bytes,1,rep,name=classification" json:"classification,omitempty"`
}

func (m *ClassificationList) Reset()      { *m = ClassificationList{} }
func (*ClassificationList) ProtoMessage() {}
func (*ClassificationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_412948239bfced1c, []int{1}
}
func (m *ClassificationList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassificationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassificationList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassificationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassificationList.Merge(m, src)
}
func (m *ClassificationList) XXX_Size() int {
	return m.Size()
}
func (m *ClassificationList) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassificationList.DiscardUnknown(m)
}

var xxx_messageInfo_ClassificationList proto.InternalMessageInfo

func (m *ClassificationList) GetClassification() []*Classification {
	if m != nil {
		return m.Classification
	}
	return nil
}

type ClassificationListCollection struct {
	ClassificationList []*ClassificationList `protobuf:"bytes,1,rep,name=classification_list,json=classificationList" json:"classification_list,omitempty"`
}

func (m *ClassificationListCollection) Reset()      { *m = ClassificationListCollection{} }
func (*ClassificationListCollection) ProtoMessage() {}
func (*ClassificationListCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_412948239bfced1c, []int{2}
}
func (m *ClassificationListCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassificationListCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassificationListCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassificationListCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassificationListCollection.Merge(m, src)
}
func (m *ClassificationListCollection) XXX_Size() int {
	return m.Size()
}
func (m *ClassificationListCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassificationListCollection.DiscardUnknown(m)
}

var xxx_messageInfo_ClassificationListCollection proto.InternalMessageInfo

func (m *ClassificationListCollection) GetClassificationList() []*ClassificationList {
	if m != nil {
		return m.ClassificationList
	}
	return nil
}

func init() {
	proto.RegisterType((*Classification)(nil), "mediapipe.Classification")
	proto.RegisterType((*ClassificationList)(nil), "mediapipe.ClassificationList")
	proto.RegisterType((*ClassificationListCollection)(nil), "mediapipe.ClassificationListCollection")
}

func init() {
	proto.RegisterFile("mediapipe/framework/formats/classification.proto", fileDescriptor_412948239bfced1c)
}

var fileDescriptor_412948239bfced1c = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xbd, 0x4e, 0xeb, 0x40,
	0x10, 0x85, 0x77, 0xf2, 0x53, 0x64, 0x73, 0x95, 0xc2, 0x69, 0x7c, 0xaf, 0x2e, 0x8b, 0xe5, 0x06,
	0x57, 0x36, 0xa2, 0xa1, 0x26, 0x69, 0x51, 0x84, 0xd2, 0x20, 0xd1, 0x44, 0x9b, 0xcd, 0x26, 0xac,
	0xd8, 0xf5, 0x5a, 0x5e, 0x23, 0xa0, 0xe3, 0x05, 0x90, 0x78, 0x0a, 0xc4, 0xa3, 0xa4, 0x4c, 0x99,
	0x0a, 0x91, 0x4d, 0x43, 0x99, 0x47, 0x40, 0xce, 0x1f, 0x31, 0x11, 0xb4, 0xe7, 0xcc, 0x37, 0x33,
	0x47, 0x33, 0xf8, 0x58, 0xf1, 0x81, 0xa0, 0x89, 0x48, 0x78, 0x34, 0x4c, 0xa9, 0xe2, 0x77, 0x3a,
	0xbd, 0x89, 0x86, 0x3a, 0x55, 0x34, 0x33, 0x11, 0x93, 0xd4, 0x18, 0x31, 0x14, 0x8c, 0x66, 0x42,
	0xc7, 0x61, 0x92, 0xea, 0x4c, 0x3b, 0xb5, 0x2d, 0xe1, 0x3f, 0x01, 0x6e, 0xb4, 0x0b, 0x35, 0xce,
	0x3f, 0x5c, 0x15, 0xf1, 0x80, 0xdf, 0xbb, 0xe0, 0x41, 0x50, 0x6d, 0x55, 0xc6, 0x6f, 0x87, 0xa8,
	0xbb, 0x92, 0x72, 0xcf, 0x30, 0x9d, 0x72, 0xb7, 0xe4, 0x41, 0x50, 0xda, 0x78, 0x4b, 0x29, 0xf7,
	0x24, 0xed, 0x73, 0xe9, 0x96, 0x3d, 0x08, 0x6a, 0x1b, 0x6f, 0x29, 0x39, 0x47, 0xf8, 0xcf, 0x40,
	0x98, 0x44, 0xd2, 0x87, 0x5e, 0x4c, 0x15, 0x77, 0x2b, 0x3b, 0x25, 0xf5, 0xb5, 0xd3, 0xa1, 0x8a,
	0xfb, 0x97, 0xd8, 0x29, 0xae, 0x73, 0x2e, 0x4c, 0xe6, 0x9c, 0xe1, 0x46, 0x31, 0x88, 0x0b, 0x5e,
	0x39, 0xa8, 0x9f, 0xfc, 0x0d, 0xb7, 0x49, 0xc2, 0x22, 0xd6, 0xfd, 0x06, 0xf8, 0x31, 0xfe, 0xbf,
	0xdf, 0xb8, 0xad, 0xa5, 0xe4, 0x6c, 0x99, 0xba, 0x83, 0x9b, 0x45, 0xa2, 0x27, 0x85, 0xc9, 0xd6,
	0x73, 0x0e, 0x7e, 0x9c, 0x93, 0x77, 0xe9, 0x3a, 0x6c, 0x4f, 0x6b, 0xbd, 0xc0, 0x64, 0x46, 0xd0,
	0x74, 0x46, 0xd0, 0x62, 0x46, 0xe0, 0xd1, 0x12, 0x78, 0xb5, 0x04, 0xc6, 0x96, 0xc0, 0xc4, 0x12,
	0x78, 0xb7, 0x04, 0x3e, 0x2c, 0x41, 0x0b, 0x4b, 0xe0, 0x79, 0x4e, 0xd0, 0x64, 0x4e, 0xd0, 0x74,
	0x4e, 0x10, 0xf6, 0x99, 0x56, 0xe1, 0x48, 0xeb, 0x91, 0xe4, 0x3b, 0x33, 0xd7, 0xd7, 0x5c, 0x9d,
	0xaf, 0xd5, 0x2c, 0xae, 0x70, 0x91, 0x8b, 0x57, 0xa7, 0x23, 0x91, 0x5d, 0xdf, 0xf6, 0x43, 0xa6,
	0x55, 0xb4, 0xe2, 0xa3, 0xaf, 0xbf, 0xf8, 0xe5, 0x43, 0x3e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x2d,
	0x8b, 0x62, 0xaa, 0x3f, 0x02, 0x00, 0x00,
}

func (this *Classification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Classification)
	if !ok {
		that2, ok := that.(Classification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	return true
}
func (this *ClassificationList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClassificationList)
	if !ok {
		that2, ok := that.(ClassificationList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Classification) != len(that1.Classification) {
		return false
	}
	for i := range this.Classification {
		if !this.Classification[i].Equal(that1.Classification[i]) {
			return false
		}
	}
	return true
}
func (this *ClassificationListCollection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClassificationListCollection)
	if !ok {
		that2, ok := that.(ClassificationListCollection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ClassificationList) != len(that1.ClassificationList) {
		return false
	}
	for i := range this.ClassificationList {
		if !this.ClassificationList[i].Equal(that1.ClassificationList[i]) {
			return false
		}
	}
	return true
}
func (this *Classification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&formats.Classification{")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClassificationList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&formats.ClassificationList{")
	if this.Classification != nil {
		s = append(s, "Classification: "+fmt.Sprintf("%#v", this.Classification)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClassificationListCollection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&formats.ClassificationListCollection{")
	if this.ClassificationList != nil {
		s = append(s, "ClassificationList: "+fmt.Sprintf("%#v", this.ClassificationList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringClassification(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Classification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Classification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Classification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.DisplayName)
	copy(dAtA[i:], m.DisplayName)
	i = encodeVarintClassification(dAtA, i, uint64(len(m.DisplayName)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Label)
	copy(dAtA[i:], m.Label)
	i = encodeVarintClassification(dAtA, i, uint64(len(m.Label)))
	i--
	dAtA[i] = 0x1a
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Score))))
	i--
	dAtA[i] = 0x15
	i = encodeVarintClassification(dAtA, i, uint64(m.Index))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ClassificationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassificationList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassificationList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Classification) > 0 {
		for iNdEx := len(m.Classification) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Classification[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClassification(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClassificationListCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassificationListCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassificationListCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassificationList) > 0 {
		for iNdEx := len(m.ClassificationList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClassificationList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClassification(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintClassification(dAtA []byte, offset int, v uint64) int {
	offset -= sovClassification(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Classification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovClassification(uint64(m.Index))
	n += 5
	l = len(m.Label)
	n += 1 + l + sovClassification(uint64(l))
	l = len(m.DisplayName)
	n += 1 + l + sovClassification(uint64(l))
	return n
}

func (m *ClassificationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Classification) > 0 {
		for _, e := range m.Classification {
			l = e.Size()
			n += 1 + l + sovClassification(uint64(l))
		}
	}
	return n
}

func (m *ClassificationListCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClassificationList) > 0 {
		for _, e := range m.ClassificationList {
			l = e.Size()
			n += 1 + l + sovClassification(uint64(l))
		}
	}
	return n
}

func sovClassification(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClassification(x uint64) (n int) {
	return sovClassification(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Classification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Classification{`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClassificationList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForClassification := "[]*Classification{"
	for _, f := range this.Classification {
		repeatedStringForClassification += strings.Replace(f.String(), "Classification", "Classification", 1) + ","
	}
	repeatedStringForClassification += "}"
	s := strings.Join([]string{`&ClassificationList{`,
		`Classification:` + repeatedStringForClassification + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClassificationListCollection) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForClassificationList := "[]*ClassificationList{"
	for _, f := range this.ClassificationList {
		repeatedStringForClassificationList += strings.Replace(f.String(), "ClassificationList", "ClassificationList", 1) + ","
	}
	repeatedStringForClassificationList += "}"
	s := strings.Join([]string{`&ClassificationListCollection{`,
		`ClassificationList:` + repeatedStringForClassificationList + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringClassification(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Classification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClassification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Classification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Classification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Score = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClassification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClassification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassificationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClassification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassificationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassificationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClassification
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClassification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classification = append(m.Classification, &Classification{})
			if err := m.Classification[len(m.Classification)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClassification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClassification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassificationListCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClassification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassificationListCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassificationListCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassificationList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClassification
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClassification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassificationList = append(m.ClassificationList, &ClassificationList{})
			if err := m.ClassificationList[len(m.ClassificationList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClassification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClassification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClassification(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClassification
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClassification
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClassification
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClassification
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClassification
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClassification
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClassification        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClassification          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClassification = fmt.Errorf("proto: unexpected end of group")
)
