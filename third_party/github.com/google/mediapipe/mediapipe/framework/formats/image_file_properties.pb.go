// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/formats/image_file_properties.proto

package formats

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ImageFileProperties struct {
	ImageWidth        uint32  `protobuf:"varint,1,opt,name=image_width,json=imageWidth" json:"image_width"`
	ImageHeight       uint32  `protobuf:"varint,2,opt,name=image_height,json=imageHeight" json:"image_height"`
	FocalLengthMm     float64 `protobuf:"fixed64,3,opt,name=focal_length_mm,json=focalLengthMm" json:"focal_length_mm"`
	FocalLength_35Mm  float64 `protobuf:"fixed64,4,opt,name=focal_length_35mm,json=focalLength35mm" json:"focal_length_35mm"`
	FocalLengthPixels float64 `protobuf:"fixed64,5,opt,name=focal_length_pixels,json=focalLengthPixels" json:"focal_length_pixels"`
}

func (m *ImageFileProperties) Reset()      { *m = ImageFileProperties{} }
func (*ImageFileProperties) ProtoMessage() {}
func (*ImageFileProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc1a00cd24ebf7ce, []int{0}
}
func (m *ImageFileProperties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageFileProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageFileProperties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageFileProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageFileProperties.Merge(m, src)
}
func (m *ImageFileProperties) XXX_Size() int {
	return m.Size()
}
func (m *ImageFileProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageFileProperties.DiscardUnknown(m)
}

var xxx_messageInfo_ImageFileProperties proto.InternalMessageInfo

func (m *ImageFileProperties) GetImageWidth() uint32 {
	if m != nil {
		return m.ImageWidth
	}
	return 0
}

func (m *ImageFileProperties) GetImageHeight() uint32 {
	if m != nil {
		return m.ImageHeight
	}
	return 0
}

func (m *ImageFileProperties) GetFocalLengthMm() float64 {
	if m != nil {
		return m.FocalLengthMm
	}
	return 0
}

func (m *ImageFileProperties) GetFocalLength_35Mm() float64 {
	if m != nil {
		return m.FocalLength_35Mm
	}
	return 0
}

func (m *ImageFileProperties) GetFocalLengthPixels() float64 {
	if m != nil {
		return m.FocalLengthPixels
	}
	return 0
}

func init() {
	proto.RegisterType((*ImageFileProperties)(nil), "mediapipe.ImageFileProperties")
}

func init() {
	proto.RegisterFile("mediapipe/framework/formats/image_file_properties.proto", fileDescriptor_fc1a00cd24ebf7ce)
}

var fileDescriptor_fc1a00cd24ebf7ce = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xb1, 0x4e, 0x32, 0x41,
	0x14, 0x46, 0xe7, 0xfe, 0x3f, 0x16, 0x8e, 0x12, 0xc2, 0xd2, 0x6c, 0x75, 0x25, 0x26, 0x46, 0x0a,
	0xc3, 0x9a, 0xa8, 0xa1, 0xa7, 0x30, 0x9a, 0x68, 0x42, 0x6c, 0x4c, 0x6c, 0x36, 0x2b, 0xdc, 0xdd,
	0x9d, 0x38, 0xe3, 0x4c, 0x86, 0x31, 0x58, 0xfa, 0x08, 0x3e, 0x86, 0x8f, 0x42, 0x49, 0x49, 0x65,
	0x64, 0x68, 0x2c, 0xe9, 0x6d, 0x0c, 0x8b, 0xc1, 0xa5, 0xb1, 0xbd, 0xe7, 0x9c, 0xdb, 0x7c, 0xbc,
	0xa3, 0x68, 0x20, 0x12, 0x23, 0x0c, 0x45, 0xa9, 0x4d, 0x14, 0x8d, 0xb4, 0x7d, 0x88, 0x52, 0x6d,
	0x55, 0xe2, 0x86, 0x91, 0x50, 0x49, 0x46, 0x71, 0x2a, 0x24, 0xc5, 0xc6, 0x6a, 0x43, 0xd6, 0x09,
	0x1a, 0xb6, 0x8d, 0xd5, 0x4e, 0x07, 0xdb, 0xeb, 0x70, 0xff, 0x0b, 0x78, 0xe3, 0x72, 0xa9, 0x9e,
	0x0b, 0x49, 0xbd, 0xb5, 0x18, 0x1c, 0xf0, 0x9d, 0xd5, 0x87, 0x91, 0x18, 0xb8, 0x3c, 0x84, 0x26,
	0xb4, 0xaa, 0xdd, 0xca, 0xf8, 0x7d, 0x8f, 0xdd, 0xf0, 0x02, 0xdc, 0x2e, 0xef, 0xc1, 0x21, 0xdf,
	0x5d, 0x69, 0x39, 0x89, 0x2c, 0x77, 0xe1, 0xbf, 0x92, 0xb7, 0x7a, 0x70, 0x51, 0x80, 0xe0, 0x88,
	0xd7, 0x52, 0xdd, 0x4f, 0x64, 0x2c, 0xe9, 0x31, 0x73, 0x79, 0xac, 0x54, 0xf8, 0xbf, 0x09, 0x2d,
	0xf8, 0x71, 0xab, 0x05, 0xbc, 0x2a, 0xd8, 0xb5, 0x0a, 0x8e, 0x79, 0x7d, 0xc3, 0x3e, 0x39, 0x53,
	0x2a, 0xac, 0x94, 0xfc, 0x5a, 0xc9, 0x5f, 0xc2, 0xe0, 0x94, 0x37, 0x36, 0x0a, 0x23, 0x9e, 0x49,
	0x0e, 0xc3, 0xad, 0x52, 0x53, 0x2f, 0x35, 0xbd, 0x02, 0x77, 0xd5, 0x64, 0x86, 0x6c, 0x3a, 0x43,
	0xb6, 0x98, 0x21, 0xbc, 0x78, 0x84, 0x37, 0x8f, 0x30, 0xf6, 0x08, 0x13, 0x8f, 0xf0, 0xe1, 0x11,
	0x3e, 0x3d, 0xb2, 0x85, 0x47, 0x78, 0x9d, 0x23, 0x9b, 0xcc, 0x91, 0x4d, 0xe7, 0xc8, 0xee, 0x3a,
	0x99, 0x70, 0xf9, 0xd3, 0x7d, 0xbb, 0xaf, 0x55, 0x94, 0x69, 0x9d, 0x49, 0x8a, 0x7e, 0x97, 0xf8,
	0x63, 0x93, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2b, 0xc2, 0x06, 0xc8, 0xb1, 0x01, 0x00, 0x00,
}

func (this *ImageFileProperties) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageFileProperties)
	if !ok {
		that2, ok := that.(ImageFileProperties)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ImageWidth != that1.ImageWidth {
		return false
	}
	if this.ImageHeight != that1.ImageHeight {
		return false
	}
	if this.FocalLengthMm != that1.FocalLengthMm {
		return false
	}
	if this.FocalLength_35Mm != that1.FocalLength_35Mm {
		return false
	}
	if this.FocalLengthPixels != that1.FocalLengthPixels {
		return false
	}
	return true
}
func (this *ImageFileProperties) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&formats.ImageFileProperties{")
	s = append(s, "ImageWidth: "+fmt.Sprintf("%#v", this.ImageWidth)+",\n")
	s = append(s, "ImageHeight: "+fmt.Sprintf("%#v", this.ImageHeight)+",\n")
	s = append(s, "FocalLengthMm: "+fmt.Sprintf("%#v", this.FocalLengthMm)+",\n")
	s = append(s, "FocalLength_35Mm: "+fmt.Sprintf("%#v", this.FocalLength_35Mm)+",\n")
	s = append(s, "FocalLengthPixels: "+fmt.Sprintf("%#v", this.FocalLengthPixels)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringImageFileProperties(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ImageFileProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageFileProperties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageFileProperties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FocalLengthPixels))))
	i--
	dAtA[i] = 0x29
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FocalLength_35Mm))))
	i--
	dAtA[i] = 0x21
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FocalLengthMm))))
	i--
	dAtA[i] = 0x19
	i = encodeVarintImageFileProperties(dAtA, i, uint64(m.ImageHeight))
	i--
	dAtA[i] = 0x10
	i = encodeVarintImageFileProperties(dAtA, i, uint64(m.ImageWidth))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintImageFileProperties(dAtA []byte, offset int, v uint64) int {
	offset -= sovImageFileProperties(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImageFileProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovImageFileProperties(uint64(m.ImageWidth))
	n += 1 + sovImageFileProperties(uint64(m.ImageHeight))
	n += 9
	n += 9
	n += 9
	return n
}

func sovImageFileProperties(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImageFileProperties(x uint64) (n int) {
	return sovImageFileProperties(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ImageFileProperties) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageFileProperties{`,
		`ImageWidth:` + fmt.Sprintf("%v", this.ImageWidth) + `,`,
		`ImageHeight:` + fmt.Sprintf("%v", this.ImageHeight) + `,`,
		`FocalLengthMm:` + fmt.Sprintf("%v", this.FocalLengthMm) + `,`,
		`FocalLength_35Mm:` + fmt.Sprintf("%v", this.FocalLength_35Mm) + `,`,
		`FocalLengthPixels:` + fmt.Sprintf("%v", this.FocalLengthPixels) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringImageFileProperties(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ImageFileProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImageFileProperties
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageFileProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageFileProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageWidth", wireType)
			}
			m.ImageWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageFileProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImageWidth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageHeight", wireType)
			}
			m.ImageHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageFileProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImageHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FocalLengthMm", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FocalLengthMm = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FocalLength_35Mm", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FocalLength_35Mm = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FocalLengthPixels", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FocalLengthPixels = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipImageFileProperties(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImageFileProperties
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImageFileProperties(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImageFileProperties
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImageFileProperties
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImageFileProperties
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImageFileProperties
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImageFileProperties
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImageFileProperties
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImageFileProperties        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImageFileProperties          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImageFileProperties = fmt.Errorf("proto: unexpected end of group")
)
