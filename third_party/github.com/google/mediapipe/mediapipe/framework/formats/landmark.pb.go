// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/formats/landmark.proto

package formats

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Landmark struct {
	X          float32 `protobuf:"fixed32,1,opt,name=x" json:"x"`
	Y          float32 `protobuf:"fixed32,2,opt,name=y" json:"y"`
	Z          float32 `protobuf:"fixed32,3,opt,name=z" json:"z"`
	Visibility float32 `protobuf:"fixed32,4,opt,name=visibility" json:"visibility"`
	Presence   float32 `protobuf:"fixed32,5,opt,name=presence" json:"presence"`
}

func (m *Landmark) Reset()      { *m = Landmark{} }
func (*Landmark) ProtoMessage() {}
func (*Landmark) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1a511d3f1dfb2bb, []int{0}
}
func (m *Landmark) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Landmark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Landmark.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Landmark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Landmark.Merge(m, src)
}
func (m *Landmark) XXX_Size() int {
	return m.Size()
}
func (m *Landmark) XXX_DiscardUnknown() {
	xxx_messageInfo_Landmark.DiscardUnknown(m)
}

var xxx_messageInfo_Landmark proto.InternalMessageInfo

func (m *Landmark) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Landmark) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Landmark) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

func (m *Landmark) GetVisibility() float32 {
	if m != nil {
		return m.Visibility
	}
	return 0
}

func (m *Landmark) GetPresence() float32 {
	if m != nil {
		return m.Presence
	}
	return 0
}

type LandmarkList struct {
	Landmark []*Landmark `protobuf:"bytes,1,rep,name=landmark" json:"landmark,omitempty"`
}

func (m *LandmarkList) Reset()      { *m = LandmarkList{} }
func (*LandmarkList) ProtoMessage() {}
func (*LandmarkList) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1a511d3f1dfb2bb, []int{1}
}
func (m *LandmarkList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LandmarkList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LandmarkList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LandmarkList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LandmarkList.Merge(m, src)
}
func (m *LandmarkList) XXX_Size() int {
	return m.Size()
}
func (m *LandmarkList) XXX_DiscardUnknown() {
	xxx_messageInfo_LandmarkList.DiscardUnknown(m)
}

var xxx_messageInfo_LandmarkList proto.InternalMessageInfo

func (m *LandmarkList) GetLandmark() []*Landmark {
	if m != nil {
		return m.Landmark
	}
	return nil
}

type LandmarkListCollection struct {
	LandmarkList []*LandmarkList `protobuf:"bytes,1,rep,name=landmark_list,json=landmarkList" json:"landmark_list,omitempty"`
}

func (m *LandmarkListCollection) Reset()      { *m = LandmarkListCollection{} }
func (*LandmarkListCollection) ProtoMessage() {}
func (*LandmarkListCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1a511d3f1dfb2bb, []int{2}
}
func (m *LandmarkListCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LandmarkListCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LandmarkListCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LandmarkListCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LandmarkListCollection.Merge(m, src)
}
func (m *LandmarkListCollection) XXX_Size() int {
	return m.Size()
}
func (m *LandmarkListCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_LandmarkListCollection.DiscardUnknown(m)
}

var xxx_messageInfo_LandmarkListCollection proto.InternalMessageInfo

func (m *LandmarkListCollection) GetLandmarkList() []*LandmarkList {
	if m != nil {
		return m.LandmarkList
	}
	return nil
}

type NormalizedLandmark struct {
	X          float32 `protobuf:"fixed32,1,opt,name=x" json:"x"`
	Y          float32 `protobuf:"fixed32,2,opt,name=y" json:"y"`
	Z          float32 `protobuf:"fixed32,3,opt,name=z" json:"z"`
	Visibility float32 `protobuf:"fixed32,4,opt,name=visibility" json:"visibility"`
	Presence   float32 `protobuf:"fixed32,5,opt,name=presence" json:"presence"`
}

func (m *NormalizedLandmark) Reset()      { *m = NormalizedLandmark{} }
func (*NormalizedLandmark) ProtoMessage() {}
func (*NormalizedLandmark) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1a511d3f1dfb2bb, []int{3}
}
func (m *NormalizedLandmark) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NormalizedLandmark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NormalizedLandmark.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NormalizedLandmark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NormalizedLandmark.Merge(m, src)
}
func (m *NormalizedLandmark) XXX_Size() int {
	return m.Size()
}
func (m *NormalizedLandmark) XXX_DiscardUnknown() {
	xxx_messageInfo_NormalizedLandmark.DiscardUnknown(m)
}

var xxx_messageInfo_NormalizedLandmark proto.InternalMessageInfo

func (m *NormalizedLandmark) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *NormalizedLandmark) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *NormalizedLandmark) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

func (m *NormalizedLandmark) GetVisibility() float32 {
	if m != nil {
		return m.Visibility
	}
	return 0
}

func (m *NormalizedLandmark) GetPresence() float32 {
	if m != nil {
		return m.Presence
	}
	return 0
}

type NormalizedLandmarkList struct {
	Landmark []*NormalizedLandmark `protobuf:"bytes,1,rep,name=landmark" json:"landmark,omitempty"`
}

func (m *NormalizedLandmarkList) Reset()      { *m = NormalizedLandmarkList{} }
func (*NormalizedLandmarkList) ProtoMessage() {}
func (*NormalizedLandmarkList) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1a511d3f1dfb2bb, []int{4}
}
func (m *NormalizedLandmarkList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NormalizedLandmarkList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NormalizedLandmarkList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NormalizedLandmarkList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NormalizedLandmarkList.Merge(m, src)
}
func (m *NormalizedLandmarkList) XXX_Size() int {
	return m.Size()
}
func (m *NormalizedLandmarkList) XXX_DiscardUnknown() {
	xxx_messageInfo_NormalizedLandmarkList.DiscardUnknown(m)
}

var xxx_messageInfo_NormalizedLandmarkList proto.InternalMessageInfo

func (m *NormalizedLandmarkList) GetLandmark() []*NormalizedLandmark {
	if m != nil {
		return m.Landmark
	}
	return nil
}

type NormalizedLandmarkListCollection struct {
	LandmarkList []*NormalizedLandmarkList `protobuf:"bytes,1,rep,name=landmark_list,json=landmarkList" json:"landmark_list,omitempty"`
}

func (m *NormalizedLandmarkListCollection) Reset()      { *m = NormalizedLandmarkListCollection{} }
func (*NormalizedLandmarkListCollection) ProtoMessage() {}
func (*NormalizedLandmarkListCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1a511d3f1dfb2bb, []int{5}
}
func (m *NormalizedLandmarkListCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NormalizedLandmarkListCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NormalizedLandmarkListCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NormalizedLandmarkListCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NormalizedLandmarkListCollection.Merge(m, src)
}
func (m *NormalizedLandmarkListCollection) XXX_Size() int {
	return m.Size()
}
func (m *NormalizedLandmarkListCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_NormalizedLandmarkListCollection.DiscardUnknown(m)
}

var xxx_messageInfo_NormalizedLandmarkListCollection proto.InternalMessageInfo

func (m *NormalizedLandmarkListCollection) GetLandmarkList() []*NormalizedLandmarkList {
	if m != nil {
		return m.LandmarkList
	}
	return nil
}

func init() {
	proto.RegisterType((*Landmark)(nil), "mediapipe.Landmark")
	proto.RegisterType((*LandmarkList)(nil), "mediapipe.LandmarkList")
	proto.RegisterType((*LandmarkListCollection)(nil), "mediapipe.LandmarkListCollection")
	proto.RegisterType((*NormalizedLandmark)(nil), "mediapipe.NormalizedLandmark")
	proto.RegisterType((*NormalizedLandmarkList)(nil), "mediapipe.NormalizedLandmarkList")
	proto.RegisterType((*NormalizedLandmarkListCollection)(nil), "mediapipe.NormalizedLandmarkListCollection")
}

func init() {
	proto.RegisterFile("mediapipe/framework/formats/landmark.proto", fileDescriptor_a1a511d3f1dfb2bb)
}

var fileDescriptor_a1a511d3f1dfb2bb = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x93, 0x31, 0x4b, 0xfb, 0x40,
	0x18, 0xc6, 0xf3, 0xb6, 0xfd, 0x43, 0xff, 0x67, 0xbb, 0x9c, 0x50, 0xb3, 0x78, 0xc6, 0xe0, 0x50,
	0x1c, 0x12, 0x70, 0x11, 0x41, 0x10, 0x2a, 0x38, 0x15, 0x91, 0x0a, 0x0e, 0x2e, 0x92, 0xa6, 0xd7,
	0x7a, 0xf6, 0xd2, 0x0b, 0x49, 0xd4, 0xb6, 0x93, 0x9f, 0x40, 0x1c, 0x1d, 0x1d, 0xfd, 0x28, 0x1d,
	0x3b, 0x76, 0x12, 0x7b, 0x5d, 0x1c, 0xfb, 0x11, 0x24, 0xb6, 0x89, 0x07, 0x29, 0x9d, 0x1d, 0xef,
	0xb9, 0xe7, 0x7d, 0xdf, 0xe7, 0x7e, 0xdc, 0x8b, 0xf6, 0x3d, 0xda, 0x62, 0x8e, 0xcf, 0x7c, 0x6a,
	0xb7, 0x03, 0xc7, 0xa3, 0x8f, 0x22, 0xe8, 0xda, 0x6d, 0x11, 0x78, 0x4e, 0x14, 0xda, 0xdc, 0xe9,
	0xb5, 0x3c, 0x27, 0xe8, 0x5a, 0x7e, 0x20, 0x22, 0x81, 0xff, 0xa7, 0x5e, 0xf3, 0x19, 0x50, 0xb1,
	0xbe, 0xbc, 0xc5, 0x18, 0x41, 0x5f, 0x07, 0x03, 0xaa, 0xb9, 0x5a, 0x61, 0xf4, 0xb1, 0xa3, 0x35,
	0xa0, 0x1f, 0x6b, 0x03, 0x3d, 0xa7, 0x6a, 0x83, 0x58, 0x1b, 0xea, 0x79, 0x55, 0x1b, 0xe2, 0x3d,
	0x84, 0x1e, 0x58, 0xc8, 0x9a, 0x8c, 0xb3, 0x68, 0xa0, 0x17, 0x94, 0x4b, 0x45, 0xc7, 0x06, 0x2a,
	0xfa, 0x01, 0x0d, 0x69, 0xcf, 0xa5, 0xfa, 0x3f, 0xc5, 0x93, 0xaa, 0xe6, 0x09, 0x2a, 0x25, 0x79,
	0xea, 0x2c, 0x8c, 0xb0, 0x8d, 0x8a, 0x49, 0x7a, 0x1d, 0x8c, 0x7c, 0x75, 0xe3, 0x60, 0xd3, 0x4a,
	0xe3, 0x5b, 0x89, 0xb5, 0x91, 0x9a, 0xcc, 0x2b, 0x54, 0x51, 0x1b, 0x9c, 0x0a, 0xce, 0xa9, 0x1b,
	0x31, 0xd1, 0xc3, 0xc7, 0xa8, 0x9c, 0xb8, 0x6e, 0x38, 0x0b, 0xa3, 0x65, 0xbf, 0xad, 0x15, 0xfd,
	0xe2, 0xca, 0x46, 0x89, 0x2b, 0x27, 0xf3, 0x15, 0x10, 0x3e, 0x8f, 0x79, 0x72, 0x36, 0xa4, 0xad,
	0x3f, 0xc5, 0xec, 0x12, 0x55, 0xb2, 0xc9, 0x7e, 0xe8, 0x1d, 0x65, 0xe8, 0x6d, 0x2b, 0xaf, 0xcd,
	0x16, 0x29, 0x1c, 0xef, 0x90, 0xb1, 0xba, 0xa9, 0x42, 0xf4, 0x6c, 0x35, 0xd1, 0xdd, 0xb5, 0x33,
	0xb2, 0x6c, 0x6b, 0x6f, 0x30, 0x9e, 0x12, 0x6d, 0x32, 0x25, 0xda, 0x7c, 0x4a, 0xe0, 0x49, 0x12,
	0x78, 0x97, 0x04, 0x46, 0x92, 0xc0, 0x58, 0x12, 0xf8, 0x94, 0x04, 0xbe, 0x24, 0xd1, 0xe6, 0x92,
	0xc0, 0xcb, 0x8c, 0x68, 0xe3, 0x19, 0xd1, 0x26, 0x33, 0xa2, 0x21, 0xd3, 0x15, 0x9e, 0xd5, 0x11,
	0xa2, 0xc3, 0xa9, 0x32, 0x71, 0xf9, 0xe9, 0x17, 0x7f, 0xbd, 0x56, 0x4e, 0xc6, 0x5e, 0xc4, 0xc7,
	0xeb, 0xc3, 0x0e, 0x8b, 0x6e, 0xef, 0x9b, 0x96, 0x2b, 0x3c, 0x7b, 0x51, 0x69, 0xff, 0x2e, 0xce,
	0x9a, 0x15, 0xfa, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x41, 0xd4, 0x11, 0x60, 0x03, 0x00, 0x00,
}

func (this *Landmark) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Landmark)
	if !ok {
		that2, ok := that.(Landmark)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	if this.Z != that1.Z {
		return false
	}
	if this.Visibility != that1.Visibility {
		return false
	}
	if this.Presence != that1.Presence {
		return false
	}
	return true
}
func (this *LandmarkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarkList)
	if !ok {
		that2, ok := that.(LandmarkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Landmark) != len(that1.Landmark) {
		return false
	}
	for i := range this.Landmark {
		if !this.Landmark[i].Equal(that1.Landmark[i]) {
			return false
		}
	}
	return true
}
func (this *LandmarkListCollection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LandmarkListCollection)
	if !ok {
		that2, ok := that.(LandmarkListCollection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LandmarkList) != len(that1.LandmarkList) {
		return false
	}
	for i := range this.LandmarkList {
		if !this.LandmarkList[i].Equal(that1.LandmarkList[i]) {
			return false
		}
	}
	return true
}
func (this *NormalizedLandmark) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NormalizedLandmark)
	if !ok {
		that2, ok := that.(NormalizedLandmark)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	if this.Z != that1.Z {
		return false
	}
	if this.Visibility != that1.Visibility {
		return false
	}
	if this.Presence != that1.Presence {
		return false
	}
	return true
}
func (this *NormalizedLandmarkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NormalizedLandmarkList)
	if !ok {
		that2, ok := that.(NormalizedLandmarkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Landmark) != len(that1.Landmark) {
		return false
	}
	for i := range this.Landmark {
		if !this.Landmark[i].Equal(that1.Landmark[i]) {
			return false
		}
	}
	return true
}
func (this *NormalizedLandmarkListCollection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NormalizedLandmarkListCollection)
	if !ok {
		that2, ok := that.(NormalizedLandmarkListCollection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LandmarkList) != len(that1.LandmarkList) {
		return false
	}
	for i := range this.LandmarkList {
		if !this.LandmarkList[i].Equal(that1.LandmarkList[i]) {
			return false
		}
	}
	return true
}
func (this *Landmark) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&formats.Landmark{")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	s = append(s, "Z: "+fmt.Sprintf("%#v", this.Z)+",\n")
	s = append(s, "Visibility: "+fmt.Sprintf("%#v", this.Visibility)+",\n")
	s = append(s, "Presence: "+fmt.Sprintf("%#v", this.Presence)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LandmarkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&formats.LandmarkList{")
	if this.Landmark != nil {
		s = append(s, "Landmark: "+fmt.Sprintf("%#v", this.Landmark)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LandmarkListCollection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&formats.LandmarkListCollection{")
	if this.LandmarkList != nil {
		s = append(s, "LandmarkList: "+fmt.Sprintf("%#v", this.LandmarkList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NormalizedLandmark) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&formats.NormalizedLandmark{")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	s = append(s, "Z: "+fmt.Sprintf("%#v", this.Z)+",\n")
	s = append(s, "Visibility: "+fmt.Sprintf("%#v", this.Visibility)+",\n")
	s = append(s, "Presence: "+fmt.Sprintf("%#v", this.Presence)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NormalizedLandmarkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&formats.NormalizedLandmarkList{")
	if this.Landmark != nil {
		s = append(s, "Landmark: "+fmt.Sprintf("%#v", this.Landmark)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NormalizedLandmarkListCollection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&formats.NormalizedLandmarkListCollection{")
	if this.LandmarkList != nil {
		s = append(s, "LandmarkList: "+fmt.Sprintf("%#v", this.LandmarkList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLandmark(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Landmark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Landmark) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Landmark) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Presence))))
	i--
	dAtA[i] = 0x2d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Visibility))))
	i--
	dAtA[i] = 0x25
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Z))))
	i--
	dAtA[i] = 0x1d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Y))))
	i--
	dAtA[i] = 0x15
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.X))))
	i--
	dAtA[i] = 0xd
	return len(dAtA) - i, nil
}

func (m *LandmarkList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LandmarkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Landmark) > 0 {
		for iNdEx := len(m.Landmark) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Landmark[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLandmark(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LandmarkListCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LandmarkListCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LandmarkListCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LandmarkList) > 0 {
		for iNdEx := len(m.LandmarkList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LandmarkList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLandmark(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NormalizedLandmark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NormalizedLandmark) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NormalizedLandmark) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Presence))))
	i--
	dAtA[i] = 0x2d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Visibility))))
	i--
	dAtA[i] = 0x25
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Z))))
	i--
	dAtA[i] = 0x1d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Y))))
	i--
	dAtA[i] = 0x15
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.X))))
	i--
	dAtA[i] = 0xd
	return len(dAtA) - i, nil
}

func (m *NormalizedLandmarkList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NormalizedLandmarkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NormalizedLandmarkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Landmark) > 0 {
		for iNdEx := len(m.Landmark) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Landmark[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLandmark(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NormalizedLandmarkListCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NormalizedLandmarkListCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NormalizedLandmarkListCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LandmarkList) > 0 {
		for iNdEx := len(m.LandmarkList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LandmarkList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLandmark(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintLandmark(dAtA []byte, offset int, v uint64) int {
	offset -= sovLandmark(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Landmark) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	n += 5
	n += 5
	n += 5
	n += 5
	return n
}

func (m *LandmarkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Landmark) > 0 {
		for _, e := range m.Landmark {
			l = e.Size()
			n += 1 + l + sovLandmark(uint64(l))
		}
	}
	return n
}

func (m *LandmarkListCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LandmarkList) > 0 {
		for _, e := range m.LandmarkList {
			l = e.Size()
			n += 1 + l + sovLandmark(uint64(l))
		}
	}
	return n
}

func (m *NormalizedLandmark) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	n += 5
	n += 5
	n += 5
	n += 5
	return n
}

func (m *NormalizedLandmarkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Landmark) > 0 {
		for _, e := range m.Landmark {
			l = e.Size()
			n += 1 + l + sovLandmark(uint64(l))
		}
	}
	return n
}

func (m *NormalizedLandmarkListCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LandmarkList) > 0 {
		for _, e := range m.LandmarkList {
			l = e.Size()
			n += 1 + l + sovLandmark(uint64(l))
		}
	}
	return n
}

func sovLandmark(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLandmark(x uint64) (n int) {
	return sovLandmark(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Landmark) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Landmark{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`Z:` + fmt.Sprintf("%v", this.Z) + `,`,
		`Visibility:` + fmt.Sprintf("%v", this.Visibility) + `,`,
		`Presence:` + fmt.Sprintf("%v", this.Presence) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LandmarkList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLandmark := "[]*Landmark{"
	for _, f := range this.Landmark {
		repeatedStringForLandmark += strings.Replace(f.String(), "Landmark", "Landmark", 1) + ","
	}
	repeatedStringForLandmark += "}"
	s := strings.Join([]string{`&LandmarkList{`,
		`Landmark:` + repeatedStringForLandmark + `,`,
		`}`,
	}, "")
	return s
}
func (this *LandmarkListCollection) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLandmarkList := "[]*LandmarkList{"
	for _, f := range this.LandmarkList {
		repeatedStringForLandmarkList += strings.Replace(f.String(), "LandmarkList", "LandmarkList", 1) + ","
	}
	repeatedStringForLandmarkList += "}"
	s := strings.Join([]string{`&LandmarkListCollection{`,
		`LandmarkList:` + repeatedStringForLandmarkList + `,`,
		`}`,
	}, "")
	return s
}
func (this *NormalizedLandmark) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NormalizedLandmark{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`Z:` + fmt.Sprintf("%v", this.Z) + `,`,
		`Visibility:` + fmt.Sprintf("%v", this.Visibility) + `,`,
		`Presence:` + fmt.Sprintf("%v", this.Presence) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NormalizedLandmarkList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLandmark := "[]*NormalizedLandmark{"
	for _, f := range this.Landmark {
		repeatedStringForLandmark += strings.Replace(f.String(), "NormalizedLandmark", "NormalizedLandmark", 1) + ","
	}
	repeatedStringForLandmark += "}"
	s := strings.Join([]string{`&NormalizedLandmarkList{`,
		`Landmark:` + repeatedStringForLandmark + `,`,
		`}`,
	}, "")
	return s
}
func (this *NormalizedLandmarkListCollection) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLandmarkList := "[]*NormalizedLandmarkList{"
	for _, f := range this.LandmarkList {
		repeatedStringForLandmarkList += strings.Replace(f.String(), "NormalizedLandmarkList", "NormalizedLandmarkList", 1) + ","
	}
	repeatedStringForLandmarkList += "}"
	s := strings.Join([]string{`&NormalizedLandmarkListCollection{`,
		`LandmarkList:` + repeatedStringForLandmarkList + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLandmark(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Landmark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Landmark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Landmark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Y = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Z = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Visibility = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Presence", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Presence = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipLandmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LandmarkList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LandmarkList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LandmarkList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Landmark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLandmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLandmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Landmark = append(m.Landmark, &Landmark{})
			if err := m.Landmark[len(m.Landmark)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLandmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LandmarkListCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LandmarkListCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LandmarkListCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LandmarkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLandmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLandmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LandmarkList = append(m.LandmarkList, &LandmarkList{})
			if err := m.LandmarkList[len(m.LandmarkList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLandmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NormalizedLandmark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NormalizedLandmark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NormalizedLandmark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Y = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Z = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Visibility = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Presence", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Presence = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipLandmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NormalizedLandmarkList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NormalizedLandmarkList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NormalizedLandmarkList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Landmark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLandmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLandmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Landmark = append(m.Landmark, &NormalizedLandmark{})
			if err := m.Landmark[len(m.Landmark)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLandmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NormalizedLandmarkListCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NormalizedLandmarkListCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NormalizedLandmarkListCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LandmarkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLandmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLandmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LandmarkList = append(m.LandmarkList, &NormalizedLandmarkList{})
			if err := m.LandmarkList[len(m.LandmarkList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLandmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLandmark(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLandmark
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLandmark
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLandmark
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLandmark
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLandmark
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLandmark
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLandmark        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLandmark          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLandmark = fmt.Errorf("proto: unexpected end of group")
)
