// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/formats/matrix_data.proto

package formats

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MatrixData_Layout int32

const (
	LAYOUT_COLUMN_MAJOR MatrixData_Layout = 0
	LAYOUT_ROW_MAJOR    MatrixData_Layout = 1
)

var MatrixData_Layout_name = map[int32]string{
	0: "LAYOUT_COLUMN_MAJOR",
	1: "LAYOUT_ROW_MAJOR",
}

var MatrixData_Layout_value = map[string]int32{
	"LAYOUT_COLUMN_MAJOR": 0,
	"LAYOUT_ROW_MAJOR":    1,
}

func (x MatrixData_Layout) Enum() *MatrixData_Layout {
	p := new(MatrixData_Layout)
	*p = x
	return p
}

func (x MatrixData_Layout) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(MatrixData_Layout_name, int32(x))
}

func (x *MatrixData_Layout) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MatrixData_Layout_value, data, "MatrixData_Layout")
	if err != nil {
		return err
	}
	*x = MatrixData_Layout(value)
	return nil
}

func (MatrixData_Layout) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_afab6a9b9bb5c0e5, []int{0, 0}
}

type MatrixData struct {
	Rows       int32              `protobuf:"varint,1,opt,name=rows" json:"rows"`
	Cols       int32              `protobuf:"varint,2,opt,name=cols" json:"cols"`
	PackedData []float32          `protobuf:"fixed32,3,rep,packed,name=packed_data,json=packedData" json:"packed_data,omitempty"`
	Layout     *MatrixData_Layout `protobuf:"varint,4,opt,name=layout,enum=mediapipe.MatrixData_Layout,def=0" json:"layout,omitempty"`
}

func (m *MatrixData) Reset()      { *m = MatrixData{} }
func (*MatrixData) ProtoMessage() {}
func (*MatrixData) Descriptor() ([]byte, []int) {
	return fileDescriptor_afab6a9b9bb5c0e5, []int{0}
}
func (m *MatrixData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatrixData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatrixData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatrixData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatrixData.Merge(m, src)
}
func (m *MatrixData) XXX_Size() int {
	return m.Size()
}
func (m *MatrixData) XXX_DiscardUnknown() {
	xxx_messageInfo_MatrixData.DiscardUnknown(m)
}

var xxx_messageInfo_MatrixData proto.InternalMessageInfo

const Default_MatrixData_Layout MatrixData_Layout = LAYOUT_COLUMN_MAJOR

func (m *MatrixData) GetRows() int32 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *MatrixData) GetCols() int32 {
	if m != nil {
		return m.Cols
	}
	return 0
}

func (m *MatrixData) GetPackedData() []float32 {
	if m != nil {
		return m.PackedData
	}
	return nil
}

func (m *MatrixData) GetLayout() MatrixData_Layout {
	if m != nil && m.Layout != nil {
		return *m.Layout
	}
	return Default_MatrixData_Layout
}

func init() {
	proto.RegisterEnum("mediapipe.MatrixData_Layout", MatrixData_Layout_name, MatrixData_Layout_value)
	proto.RegisterType((*MatrixData)(nil), "mediapipe.MatrixData")
}

func init() {
	proto.RegisterFile("mediapipe/framework/formats/matrix_data.proto", fileDescriptor_afab6a9b9bb5c0e5)
}

var fileDescriptor_afab6a9b9bb5c0e5 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xcd, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x2b, 0x4a, 0xcc, 0x4d, 0x2d, 0xcf, 0x2f, 0xca, 0xd6,
	0x4f, 0xcb, 0x2f, 0xca, 0x4d, 0x2c, 0x29, 0xd6, 0xcf, 0x4d, 0x2c, 0x29, 0xca, 0xac, 0x88, 0x4f,
	0x49, 0x2c, 0x49, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x2b, 0x57, 0x7a, 0xc9,
	0xc8, 0xc5, 0xe5, 0x0b, 0x56, 0xe0, 0x92, 0x58, 0x92, 0x28, 0x24, 0xc1, 0xc5, 0x52, 0x94, 0x5f,
	0x5e, 0x2c, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0xea, 0xc4, 0x72, 0xe2, 0x9e, 0x3c, 0x43, 0x10, 0x58,
	0x04, 0x24, 0x93, 0x9c, 0x9f, 0x53, 0x2c, 0xc1, 0x84, 0x2c, 0x03, 0x12, 0x11, 0x52, 0xe6, 0xe2,
	0x2e, 0x48, 0x4c, 0xce, 0x4e, 0x4d, 0x01, 0x5b, 0x21, 0xc1, 0xac, 0xc0, 0xac, 0xc1, 0xe4, 0xc4,
	0x24, 0xc0, 0x18, 0xc4, 0x05, 0x11, 0x06, 0x1b, 0xec, 0xc9, 0xc5, 0x96, 0x93, 0x58, 0x99, 0x5f,
	0x5a, 0x22, 0xc1, 0xa2, 0xc0, 0xa8, 0xc1, 0x67, 0x24, 0xa3, 0x07, 0x77, 0x83, 0x1e, 0xc2, 0x7e,
	0x3d, 0x1f, 0xb0, 0x1a, 0x2b, 0x61, 0x1f, 0xc7, 0x48, 0xff, 0xd0, 0x90, 0x78, 0x67, 0x7f, 0x9f,
	0x50, 0x5f, 0xbf, 0x78, 0x5f, 0x47, 0x2f, 0xff, 0xa0, 0x20, 0xa8, 0x01, 0x4a, 0xe6, 0x5c, 0x6c,
	0x10, 0x65, 0x42, 0xe2, 0x5c, 0xd8, 0x14, 0x0a, 0x30, 0x08, 0x89, 0x70, 0x09, 0x40, 0x25, 0x82,
	0xfc, 0xc3, 0xa1, 0xa2, 0x8c, 0x4e, 0x8b, 0x18, 0x2f, 0x3c, 0x94, 0x63, 0xb8, 0xf1, 0x50, 0x8e,
	0xe1, 0xc3, 0x43, 0x39, 0xc6, 0x86, 0x47, 0x72, 0x8c, 0x2b, 0x1e, 0xc9, 0x31, 0x9e, 0x78, 0x24,
	0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x2f, 0x1e, 0xc9, 0x31, 0x7c, 0x78,
	0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x70,
	0x29, 0x25, 0xe7, 0xe7, 0xea, 0xa5, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0x22, 0x39, 0x1a, 0x1a, 0xba,
	0x90, 0x10, 0x75, 0xe2, 0x47, 0xf8, 0x21, 0x00, 0x24, 0x10, 0x65, 0x9e, 0x9e, 0x59, 0x92, 0x51,
	0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x0f, 0xd1, 0xab, 0x8f, 0x88, 0x23, 0x3c, 0xb1, 0x05, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x68, 0x34, 0x00, 0x36, 0xcb, 0x01, 0x00, 0x00,
}

func (x MatrixData_Layout) String() string {
	s, ok := MatrixData_Layout_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MatrixData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MatrixData)
	if !ok {
		that2, ok := that.(MatrixData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rows != that1.Rows {
		return false
	}
	if this.Cols != that1.Cols {
		return false
	}
	if len(this.PackedData) != len(that1.PackedData) {
		return false
	}
	for i := range this.PackedData {
		if this.PackedData[i] != that1.PackedData[i] {
			return false
		}
	}
	if this.Layout != nil && that1.Layout != nil {
		if *this.Layout != *that1.Layout {
			return false
		}
	} else if this.Layout != nil {
		return false
	} else if that1.Layout != nil {
		return false
	}
	return true
}
func (this *MatrixData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&formats.MatrixData{")
	s = append(s, "Rows: "+fmt.Sprintf("%#v", this.Rows)+",\n")
	s = append(s, "Cols: "+fmt.Sprintf("%#v", this.Cols)+",\n")
	if this.PackedData != nil {
		s = append(s, "PackedData: "+fmt.Sprintf("%#v", this.PackedData)+",\n")
	}
	if this.Layout != nil {
		s = append(s, "Layout: "+valueToGoStringMatrixData(this.Layout, "MatrixData_Layout")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMatrixData(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MatrixData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatrixData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatrixData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Layout != nil {
		i = encodeVarintMatrixData(dAtA, i, uint64(*m.Layout))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PackedData) > 0 {
		for iNdEx := len(m.PackedData) - 1; iNdEx >= 0; iNdEx-- {
			f1 := math.Float32bits(float32(m.PackedData[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f1))
		}
		i = encodeVarintMatrixData(dAtA, i, uint64(len(m.PackedData)*4))
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintMatrixData(dAtA, i, uint64(m.Cols))
	i--
	dAtA[i] = 0x10
	i = encodeVarintMatrixData(dAtA, i, uint64(m.Rows))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintMatrixData(dAtA []byte, offset int, v uint64) int {
	offset -= sovMatrixData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MatrixData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMatrixData(uint64(m.Rows))
	n += 1 + sovMatrixData(uint64(m.Cols))
	if len(m.PackedData) > 0 {
		n += 1 + sovMatrixData(uint64(len(m.PackedData)*4)) + len(m.PackedData)*4
	}
	if m.Layout != nil {
		n += 1 + sovMatrixData(uint64(*m.Layout))
	}
	return n
}

func sovMatrixData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMatrixData(x uint64) (n int) {
	return sovMatrixData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MatrixData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MatrixData{`,
		`Rows:` + fmt.Sprintf("%v", this.Rows) + `,`,
		`Cols:` + fmt.Sprintf("%v", this.Cols) + `,`,
		`PackedData:` + fmt.Sprintf("%v", this.PackedData) + `,`,
		`Layout:` + valueToStringMatrixData(this.Layout) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMatrixData(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MatrixData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatrixData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatrixData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatrixData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatrixData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cols", wireType)
			}
			m.Cols = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatrixData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cols |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.PackedData = append(m.PackedData, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMatrixData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMatrixData
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMatrixData
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.PackedData) == 0 {
					m.PackedData = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.PackedData = append(m.PackedData, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PackedData", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layout", wireType)
			}
			var v MatrixData_Layout
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatrixData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MatrixData_Layout(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Layout = &v
		default:
			iNdEx = preIndex
			skippy, err := skipMatrixData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatrixData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMatrixData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMatrixData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatrixData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatrixData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMatrixData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMatrixData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMatrixData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMatrixData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMatrixData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMatrixData = fmt.Errorf("proto: unexpected end of group")
)
