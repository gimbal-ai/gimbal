// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/formats/motion/optical_flow_field_data.proto

package motion

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OpticalFlowFieldData struct {
	Width  int32     `protobuf:"varint,1,opt,name=width" json:"width"`
	Height int32     `protobuf:"varint,2,opt,name=height" json:"height"`
	Dx     []float32 `protobuf:"fixed32,3,rep,packed,name=dx" json:"dx,omitempty"`
	Dy     []float32 `protobuf:"fixed32,4,rep,packed,name=dy" json:"dy,omitempty"`
}

func (m *OpticalFlowFieldData) Reset()      { *m = OpticalFlowFieldData{} }
func (*OpticalFlowFieldData) ProtoMessage() {}
func (*OpticalFlowFieldData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2163c4eefe9b50, []int{0}
}
func (m *OpticalFlowFieldData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpticalFlowFieldData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpticalFlowFieldData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpticalFlowFieldData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticalFlowFieldData.Merge(m, src)
}
func (m *OpticalFlowFieldData) XXX_Size() int {
	return m.Size()
}
func (m *OpticalFlowFieldData) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticalFlowFieldData.DiscardUnknown(m)
}

var xxx_messageInfo_OpticalFlowFieldData proto.InternalMessageInfo

func (m *OpticalFlowFieldData) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *OpticalFlowFieldData) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *OpticalFlowFieldData) GetDx() []float32 {
	if m != nil {
		return m.Dx
	}
	return nil
}

func (m *OpticalFlowFieldData) GetDy() []float32 {
	if m != nil {
		return m.Dy
	}
	return nil
}

func init() {
	proto.RegisterType((*OpticalFlowFieldData)(nil), "mediapipe.OpticalFlowFieldData")
}

func init() {
	proto.RegisterFile("mediapipe/framework/formats/motion/optical_flow_field_data.proto", fileDescriptor_2b2163c4eefe9b50)
}

var fileDescriptor_2b2163c4eefe9b50 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0xd0, 0x31, 0x4e, 0xeb, 0x40,
	0x10, 0xc6, 0xf1, 0x1d, 0x27, 0x79, 0xd2, 0x73, 0x85, 0x2c, 0x0a, 0x0b, 0xa1, 0x21, 0xa2, 0x4a,
	0x95, 0xbd, 0x01, 0x42, 0x16, 0x4a, 0x8b, 0x94, 0x92, 0xc6, 0x5a, 0xb2, 0x6b, 0x7b, 0x85, 0x97,
	0xb1, 0xcc, 0x20, 0x3b, 0x1d, 0x47, 0xe0, 0x18, 0x1c, 0x25, 0xa5, 0xcb, 0x54, 0x08, 0xaf, 0x1b,
	0xca, 0x1c, 0x01, 0x41, 0x10, 0xa4, 0xa3, 0xfd, 0xcd, 0xa7, 0x29, 0xfe, 0xe1, 0xa5, 0x33, 0xda,
	0xaa, 0xca, 0x56, 0x46, 0x66, 0xb5, 0x72, 0xa6, 0xa1, 0xfa, 0x4e, 0x66, 0x54, 0x3b, 0xc5, 0x0f,
	0xd2, 0x11, 0x5b, 0xba, 0x97, 0x54, 0xb1, 0x5d, 0xa9, 0x32, 0xcd, 0x4a, 0x6a, 0xd2, 0xcc, 0x9a,
	0x52, 0xa7, 0x5a, 0xb1, 0x9a, 0x57, 0x35, 0x31, 0x45, 0xff, 0x7f, 0x3e, 0x9c, 0xb7, 0xe1, 0xf1,
	0xf5, 0x7e, 0xbb, 0x28, 0xa9, 0x59, 0x7c, 0x2e, 0xaf, 0x14, 0xab, 0xe8, 0x24, 0x9c, 0x34, 0x56,
	0x73, 0x11, 0xc3, 0x14, 0x66, 0x93, 0x64, 0xbc, 0x79, 0x3d, 0x13, 0xcb, 0x3d, 0x45, 0xa7, 0xe1,
	0xbf, 0xc2, 0xd8, 0xbc, 0xe0, 0x38, 0x38, 0x38, 0x7e, 0x5b, 0x14, 0x85, 0x81, 0x6e, 0xe3, 0xd1,
	0x74, 0x34, 0x0b, 0x92, 0xe0, 0x08, 0x96, 0x81, 0x6e, 0xbf, 0x6c, 0x1d, 0x8f, 0x0f, 0x6c, 0x9d,
	0x70, 0xd7, 0xa3, 0xd8, 0xf6, 0x28, 0x76, 0x3d, 0xc2, 0x93, 0x47, 0x78, 0xf1, 0x08, 0x1b, 0x8f,
	0xd0, 0x79, 0x84, 0x37, 0x8f, 0xf0, 0xee, 0x51, 0xec, 0x3c, 0xc2, 0xf3, 0x80, 0xa2, 0x1b, 0x50,
	0x6c, 0x07, 0x14, 0x37, 0x17, 0xb9, 0xe5, 0xe2, 0xf1, 0x76, 0xbe, 0x22, 0x27, 0x73, 0xa2, 0xbc,
	0x34, 0xf2, 0x37, 0xc7, 0xdf, 0x61, 0x3e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xca, 0x1a, 0xeb, 0xc5,
	0x3d, 0x01, 0x00, 0x00,
}

func (this *OpticalFlowFieldData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpticalFlowFieldData)
	if !ok {
		that2, ok := that.(OpticalFlowFieldData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if len(this.Dx) != len(that1.Dx) {
		return false
	}
	for i := range this.Dx {
		if this.Dx[i] != that1.Dx[i] {
			return false
		}
	}
	if len(this.Dy) != len(that1.Dy) {
		return false
	}
	for i := range this.Dy {
		if this.Dy[i] != that1.Dy[i] {
			return false
		}
	}
	return true
}
func (this *OpticalFlowFieldData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&motion.OpticalFlowFieldData{")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	if this.Dx != nil {
		s = append(s, "Dx: "+fmt.Sprintf("%#v", this.Dx)+",\n")
	}
	if this.Dy != nil {
		s = append(s, "Dy: "+fmt.Sprintf("%#v", this.Dy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOpticalFlowFieldData(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *OpticalFlowFieldData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpticalFlowFieldData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpticalFlowFieldData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dy) > 0 {
		for iNdEx := len(m.Dy) - 1; iNdEx >= 0; iNdEx-- {
			f1 := math.Float32bits(float32(m.Dy[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f1))
		}
		i = encodeVarintOpticalFlowFieldData(dAtA, i, uint64(len(m.Dy)*4))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Dx) > 0 {
		for iNdEx := len(m.Dx) - 1; iNdEx >= 0; iNdEx-- {
			f2 := math.Float32bits(float32(m.Dx[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f2))
		}
		i = encodeVarintOpticalFlowFieldData(dAtA, i, uint64(len(m.Dx)*4))
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintOpticalFlowFieldData(dAtA, i, uint64(m.Height))
	i--
	dAtA[i] = 0x10
	i = encodeVarintOpticalFlowFieldData(dAtA, i, uint64(m.Width))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintOpticalFlowFieldData(dAtA []byte, offset int, v uint64) int {
	offset -= sovOpticalFlowFieldData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OpticalFlowFieldData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOpticalFlowFieldData(uint64(m.Width))
	n += 1 + sovOpticalFlowFieldData(uint64(m.Height))
	if len(m.Dx) > 0 {
		n += 1 + sovOpticalFlowFieldData(uint64(len(m.Dx)*4)) + len(m.Dx)*4
	}
	if len(m.Dy) > 0 {
		n += 1 + sovOpticalFlowFieldData(uint64(len(m.Dy)*4)) + len(m.Dy)*4
	}
	return n
}

func sovOpticalFlowFieldData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOpticalFlowFieldData(x uint64) (n int) {
	return sovOpticalFlowFieldData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *OpticalFlowFieldData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpticalFlowFieldData{`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`Dx:` + fmt.Sprintf("%v", this.Dx) + `,`,
		`Dy:` + fmt.Sprintf("%v", this.Dy) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOpticalFlowFieldData(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *OpticalFlowFieldData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpticalFlowFieldData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpticalFlowFieldData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpticalFlowFieldData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpticalFlowFieldData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpticalFlowFieldData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Dx = append(m.Dx, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOpticalFlowFieldData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthOpticalFlowFieldData
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthOpticalFlowFieldData
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Dx) == 0 {
					m.Dx = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Dx = append(m.Dx, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dx", wireType)
			}
		case 4:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Dy = append(m.Dy, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOpticalFlowFieldData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthOpticalFlowFieldData
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthOpticalFlowFieldData
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Dy) == 0 {
					m.Dy = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Dy = append(m.Dy, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dy", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOpticalFlowFieldData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOpticalFlowFieldData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOpticalFlowFieldData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOpticalFlowFieldData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpticalFlowFieldData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpticalFlowFieldData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOpticalFlowFieldData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOpticalFlowFieldData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOpticalFlowFieldData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOpticalFlowFieldData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOpticalFlowFieldData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOpticalFlowFieldData = fmt.Errorf("proto: unexpected end of group")
)
