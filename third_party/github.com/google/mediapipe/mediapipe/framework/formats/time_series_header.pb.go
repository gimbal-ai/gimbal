// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/formats/time_series_header.proto

package formats

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	sort "sort"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TimeSeriesHeader struct {
	SampleRate                   float64 `protobuf:"fixed64,1,opt,name=sample_rate,json=sampleRate" json:"sample_rate"`
	NumChannels                  int32   `protobuf:"varint,2,opt,name=num_channels,json=numChannels" json:"num_channels"`
	NumSamples                   int32   `protobuf:"varint,3,opt,name=num_samples,json=numSamples" json:"num_samples"`
	PacketRate                   float64 `protobuf:"fixed64,4,opt,name=packet_rate,json=packetRate" json:"packet_rate"`
	AudioSampleRate              float64 `protobuf:"fixed64,5,opt,name=audio_sample_rate,json=audioSampleRate" json:"audio_sample_rate"`
	proto.XXX_InternalExtensions `json:"-"`
}

func (m *TimeSeriesHeader) Reset()      { *m = TimeSeriesHeader{} }
func (*TimeSeriesHeader) ProtoMessage() {}
func (*TimeSeriesHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_d590c1b8a8ce07c3, []int{0}
}

var extRange_TimeSeriesHeader = []proto.ExtensionRange{
	{Start: 20000, End: 536870911},
}

func (*TimeSeriesHeader) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_TimeSeriesHeader
}

func (m *TimeSeriesHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeSeriesHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeSeriesHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeSeriesHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeSeriesHeader.Merge(m, src)
}
func (m *TimeSeriesHeader) XXX_Size() int {
	return m.Size()
}
func (m *TimeSeriesHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeSeriesHeader.DiscardUnknown(m)
}

var xxx_messageInfo_TimeSeriesHeader proto.InternalMessageInfo

func (m *TimeSeriesHeader) GetSampleRate() float64 {
	if m != nil {
		return m.SampleRate
	}
	return 0
}

func (m *TimeSeriesHeader) GetNumChannels() int32 {
	if m != nil {
		return m.NumChannels
	}
	return 0
}

func (m *TimeSeriesHeader) GetNumSamples() int32 {
	if m != nil {
		return m.NumSamples
	}
	return 0
}

func (m *TimeSeriesHeader) GetPacketRate() float64 {
	if m != nil {
		return m.PacketRate
	}
	return 0
}

func (m *TimeSeriesHeader) GetAudioSampleRate() float64 {
	if m != nil {
		return m.AudioSampleRate
	}
	return 0
}

type MultiStreamTimeSeriesHeader struct {
	TimeSeriesHeader *TimeSeriesHeader `protobuf:"bytes,1,opt,name=time_series_header,json=timeSeriesHeader" json:"time_series_header,omitempty"`
	NumStreams       int32             `protobuf:"varint,2,opt,name=num_streams,json=numStreams" json:"num_streams"`
}

func (m *MultiStreamTimeSeriesHeader) Reset()      { *m = MultiStreamTimeSeriesHeader{} }
func (*MultiStreamTimeSeriesHeader) ProtoMessage() {}
func (*MultiStreamTimeSeriesHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_d590c1b8a8ce07c3, []int{1}
}
func (m *MultiStreamTimeSeriesHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiStreamTimeSeriesHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiStreamTimeSeriesHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiStreamTimeSeriesHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiStreamTimeSeriesHeader.Merge(m, src)
}
func (m *MultiStreamTimeSeriesHeader) XXX_Size() int {
	return m.Size()
}
func (m *MultiStreamTimeSeriesHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiStreamTimeSeriesHeader.DiscardUnknown(m)
}

var xxx_messageInfo_MultiStreamTimeSeriesHeader proto.InternalMessageInfo

func (m *MultiStreamTimeSeriesHeader) GetTimeSeriesHeader() *TimeSeriesHeader {
	if m != nil {
		return m.TimeSeriesHeader
	}
	return nil
}

func (m *MultiStreamTimeSeriesHeader) GetNumStreams() int32 {
	if m != nil {
		return m.NumStreams
	}
	return 0
}

func init() {
	proto.RegisterType((*TimeSeriesHeader)(nil), "mediapipe.TimeSeriesHeader")
	proto.RegisterType((*MultiStreamTimeSeriesHeader)(nil), "mediapipe.MultiStreamTimeSeriesHeader")
}

func init() {
	proto.RegisterFile("mediapipe/framework/formats/time_series_header.proto", fileDescriptor_d590c1b8a8ce07c3)
}

var fileDescriptor_d590c1b8a8ce07c3 = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xb1, 0x4e, 0x32, 0x41,
	0x14, 0x85, 0xf7, 0xf2, 0x43, 0xf2, 0x3b, 0x98, 0x88, 0x5b, 0x91, 0x90, 0x8c, 0x84, 0xc4, 0x48,
	0x2c, 0x76, 0x8d, 0x31, 0xb1, 0xc7, 0x46, 0x0b, 0x1b, 0xd6, 0xca, 0x66, 0x33, 0xc2, 0x05, 0x26,
	0xec, 0xec, 0x6c, 0x66, 0x67, 0x63, 0xbb, 0x6f, 0xa0, 0x0f, 0x60, 0x61, 0xe9, 0xa3, 0x50, 0x52,
	0x52, 0x19, 0x59, 0x1a, 0x2b, 0xc3, 0x23, 0x18, 0x66, 0x09, 0xae, 0x62, 0x6c, 0xe7, 0x7c, 0x77,
	0xce, 0x3d, 0x27, 0x97, 0x9c, 0x09, 0xec, 0x73, 0x16, 0xf1, 0x08, 0xdd, 0x81, 0x62, 0x02, 0xef,
	0xa5, 0x1a, 0xbb, 0x03, 0xa9, 0x04, 0xd3, 0xb1, 0xab, 0xb9, 0x40, 0x3f, 0x46, 0xc5, 0x31, 0xf6,
	0x47, 0xc8, 0xfa, 0xa8, 0x9c, 0x48, 0x49, 0x2d, 0xed, 0x9d, 0xcd, 0x54, 0xeb, 0x03, 0x48, 0xed,
	0x86, 0x0b, 0xf4, 0x0c, 0x76, 0x69, 0x28, 0xfb, 0x90, 0x54, 0x63, 0x26, 0xa2, 0x00, 0x7d, 0xc5,
	0x34, 0xd6, 0xa1, 0x09, 0x6d, 0xe8, 0x94, 0x27, 0xaf, 0x07, 0x56, 0x97, 0xe4, 0x42, 0x97, 0x69,
	0xb4, 0x8f, 0xc8, 0x6e, 0x98, 0x08, 0xbf, 0x37, 0x62, 0x61, 0x88, 0x41, 0x5c, 0x2f, 0x35, 0xa1,
	0x5d, 0x59, 0x73, 0xd5, 0x30, 0x11, 0x17, 0x6b, 0x61, 0xf5, 0xdf, 0x0a, 0xcc, 0x47, 0xe3, 0xfa,
	0xbf, 0x02, 0x47, 0xc2, 0x44, 0x78, 0xf9, 0xfb, 0x0a, 0x8b, 0x58, 0x6f, 0x8c, 0x3a, 0xb7, 0x2d,
	0x17, 0x6d, 0x73, 0xc1, 0xd8, 0x9e, 0x90, 0x7d, 0x96, 0xf4, 0xb9, 0xf4, 0x8b, 0x3b, 0x56, 0x0a,
	0xf0, 0x9e, 0x91, 0xbd, 0xcd, 0xa2, 0xc7, 0xe4, 0xff, 0xf3, 0x13, 0xd4, 0xd2, 0x34, 0x4d, 0x4b,
	0xad, 0x07, 0x20, 0x8d, 0xeb, 0x24, 0xd0, 0xdc, 0xd3, 0x0a, 0x99, 0xd8, 0xca, 0x7e, 0x45, 0xec,
	0xed, 0xde, 0x4c, 0x05, 0xd5, 0xd3, 0x86, 0xb3, 0x29, 0xce, 0xf9, 0x39, 0xd8, 0xad, 0xe9, 0x5f,
	0x6a, 0x34, 0xb1, 0x8d, 0xd1, 0xf7, 0x7a, 0x4c, 0xec, 0xfc, 0xbd, 0x23, 0xa6, 0x73, 0x6a, 0xcd,
	0xe6, 0xd4, 0x5a, 0xce, 0x29, 0xa4, 0x19, 0x85, 0x97, 0x8c, 0xc2, 0x24, 0xa3, 0x30, 0xcd, 0x28,
	0xbc, 0x65, 0x14, 0xde, 0x33, 0x6a, 0x2d, 0x33, 0x0a, 0x8f, 0x0b, 0x6a, 0x4d, 0x17, 0xd4, 0x9a,
	0x2d, 0xa8, 0x75, 0x7b, 0x3e, 0xe4, 0x7a, 0x94, 0xdc, 0x39, 0x3d, 0x29, 0xdc, 0xa1, 0x94, 0xc3,
	0x00, 0xdd, 0xaf, 0x5b, 0xf8, 0xe3, 0x2a, 0x3e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x46, 0x87, 0x2b,
	0xae, 0x33, 0x02, 0x00, 0x00,
}

func (this *TimeSeriesHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimeSeriesHeader)
	if !ok {
		that2, ok := that.(TimeSeriesHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SampleRate != that1.SampleRate {
		return false
	}
	if this.NumChannels != that1.NumChannels {
		return false
	}
	if this.NumSamples != that1.NumSamples {
		return false
	}
	if this.PacketRate != that1.PacketRate {
		return false
	}
	if this.AudioSampleRate != that1.AudioSampleRate {
		return false
	}
	thismap := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(this)
	thatmap := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(that1)
	for k, v := range thismap {
		if v2, ok := thatmap[k]; ok {
			if !v.Equal(&v2) {
				return false
			}
		} else {
			return false
		}
	}
	for k, _ := range thatmap {
		if _, ok := thismap[k]; !ok {
			return false
		}
	}
	return true
}
func (this *MultiStreamTimeSeriesHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MultiStreamTimeSeriesHeader)
	if !ok {
		that2, ok := that.(MultiStreamTimeSeriesHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TimeSeriesHeader.Equal(that1.TimeSeriesHeader) {
		return false
	}
	if this.NumStreams != that1.NumStreams {
		return false
	}
	return true
}
func (this *TimeSeriesHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&formats.TimeSeriesHeader{")
	s = append(s, "SampleRate: "+fmt.Sprintf("%#v", this.SampleRate)+",\n")
	s = append(s, "NumChannels: "+fmt.Sprintf("%#v", this.NumChannels)+",\n")
	s = append(s, "NumSamples: "+fmt.Sprintf("%#v", this.NumSamples)+",\n")
	s = append(s, "PacketRate: "+fmt.Sprintf("%#v", this.PacketRate)+",\n")
	s = append(s, "AudioSampleRate: "+fmt.Sprintf("%#v", this.AudioSampleRate)+",\n")
	s = append(s, "XXX_InternalExtensions: "+extensionToGoStringTimeSeriesHeader(this)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MultiStreamTimeSeriesHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&formats.MultiStreamTimeSeriesHeader{")
	if this.TimeSeriesHeader != nil {
		s = append(s, "TimeSeriesHeader: "+fmt.Sprintf("%#v", this.TimeSeriesHeader)+",\n")
	}
	s = append(s, "NumStreams: "+fmt.Sprintf("%#v", this.NumStreams)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTimeSeriesHeader(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringTimeSeriesHeader(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *TimeSeriesHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeSeriesHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeSeriesHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if n, err := github_com_gogo_protobuf_proto.EncodeInternalExtensionBackwards(m, dAtA[:i]); err != nil {
		return 0, err
	} else {
		i -= n
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AudioSampleRate))))
	i--
	dAtA[i] = 0x29
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PacketRate))))
	i--
	dAtA[i] = 0x21
	i = encodeVarintTimeSeriesHeader(dAtA, i, uint64(m.NumSamples))
	i--
	dAtA[i] = 0x18
	i = encodeVarintTimeSeriesHeader(dAtA, i, uint64(m.NumChannels))
	i--
	dAtA[i] = 0x10
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SampleRate))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *MultiStreamTimeSeriesHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiStreamTimeSeriesHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiStreamTimeSeriesHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintTimeSeriesHeader(dAtA, i, uint64(m.NumStreams))
	i--
	dAtA[i] = 0x10
	if m.TimeSeriesHeader != nil {
		{
			size, err := m.TimeSeriesHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTimeSeriesHeader(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTimeSeriesHeader(dAtA []byte, offset int, v uint64) int {
	offset -= sovTimeSeriesHeader(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TimeSeriesHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 1 + sovTimeSeriesHeader(uint64(m.NumChannels))
	n += 1 + sovTimeSeriesHeader(uint64(m.NumSamples))
	n += 9
	n += 9
	n += github_com_gogo_protobuf_proto.SizeOfInternalExtension(m)
	return n
}

func (m *MultiStreamTimeSeriesHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeSeriesHeader != nil {
		l = m.TimeSeriesHeader.Size()
		n += 1 + l + sovTimeSeriesHeader(uint64(l))
	}
	n += 1 + sovTimeSeriesHeader(uint64(m.NumStreams))
	return n
}

func sovTimeSeriesHeader(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTimeSeriesHeader(x uint64) (n int) {
	return sovTimeSeriesHeader(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TimeSeriesHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimeSeriesHeader{`,
		`SampleRate:` + fmt.Sprintf("%v", this.SampleRate) + `,`,
		`NumChannels:` + fmt.Sprintf("%v", this.NumChannels) + `,`,
		`NumSamples:` + fmt.Sprintf("%v", this.NumSamples) + `,`,
		`PacketRate:` + fmt.Sprintf("%v", this.PacketRate) + `,`,
		`AudioSampleRate:` + fmt.Sprintf("%v", this.AudioSampleRate) + `,`,
		`XXX_InternalExtensions:` + github_com_gogo_protobuf_proto.StringFromInternalExtension(this) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MultiStreamTimeSeriesHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MultiStreamTimeSeriesHeader{`,
		`TimeSeriesHeader:` + strings.Replace(this.TimeSeriesHeader.String(), "TimeSeriesHeader", "TimeSeriesHeader", 1) + `,`,
		`NumStreams:` + fmt.Sprintf("%v", this.NumStreams) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTimeSeriesHeader(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TimeSeriesHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimeSeriesHeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeSeriesHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeSeriesHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SampleRate = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumChannels", wireType)
			}
			m.NumChannels = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimeSeriesHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumChannels |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSamples", wireType)
			}
			m.NumSamples = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimeSeriesHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSamples |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PacketRate = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AudioSampleRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AudioSampleRate = float64(math.Float64frombits(v))
		default:
			if (fieldNum >= 20000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipTimeSeriesHeader(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthTimeSeriesHeader
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				github_com_gogo_protobuf_proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipTimeSeriesHeader(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthTimeSeriesHeader
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiStreamTimeSeriesHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimeSeriesHeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiStreamTimeSeriesHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiStreamTimeSeriesHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeSeriesHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimeSeriesHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimeSeriesHeader
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimeSeriesHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeSeriesHeader == nil {
				m.TimeSeriesHeader = &TimeSeriesHeader{}
			}
			if err := m.TimeSeriesHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumStreams", wireType)
			}
			m.NumStreams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimeSeriesHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumStreams |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTimeSeriesHeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimeSeriesHeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTimeSeriesHeader(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTimeSeriesHeader
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimeSeriesHeader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimeSeriesHeader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTimeSeriesHeader
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTimeSeriesHeader
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTimeSeriesHeader
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTimeSeriesHeader        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTimeSeriesHeader          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTimeSeriesHeader = fmt.Errorf("proto: unexpected end of group")
)
