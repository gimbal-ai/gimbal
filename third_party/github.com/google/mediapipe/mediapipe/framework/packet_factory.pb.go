// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/packet_factory.proto

package framework

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	sort "sort"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PacketFactoryOptions struct {
	proto.XXX_InternalExtensions `json:"-"`
}

func (m *PacketFactoryOptions) Reset()      { *m = PacketFactoryOptions{} }
func (*PacketFactoryOptions) ProtoMessage() {}
func (*PacketFactoryOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_87725ba929a72dc8, []int{0}
}

var extRange_PacketFactoryOptions = []proto.ExtensionRange{
	{Start: 20000, End: 536870911},
}

func (*PacketFactoryOptions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_PacketFactoryOptions
}

func (m *PacketFactoryOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketFactoryOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketFactoryOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketFactoryOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketFactoryOptions.Merge(m, src)
}
func (m *PacketFactoryOptions) XXX_Size() int {
	return m.Size()
}
func (m *PacketFactoryOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketFactoryOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PacketFactoryOptions proto.InternalMessageInfo

type PacketFactoryConfig struct {
	PacketFactory    string                `protobuf:"bytes,1,opt,name=packet_factory,json=packetFactory" json:"packet_factory"`
	OutputSidePacket string                `protobuf:"bytes,2,opt,name=output_side_packet,json=outputSidePacket" json:"output_side_packet"`
	ExternalOutput   string                `protobuf:"bytes,1002,opt,name=external_output,json=externalOutput" json:"external_output"`
	Options          *PacketFactoryOptions `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
}

func (m *PacketFactoryConfig) Reset()      { *m = PacketFactoryConfig{} }
func (*PacketFactoryConfig) ProtoMessage() {}
func (*PacketFactoryConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_87725ba929a72dc8, []int{1}
}
func (m *PacketFactoryConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketFactoryConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketFactoryConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketFactoryConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketFactoryConfig.Merge(m, src)
}
func (m *PacketFactoryConfig) XXX_Size() int {
	return m.Size()
}
func (m *PacketFactoryConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketFactoryConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PacketFactoryConfig proto.InternalMessageInfo

func (m *PacketFactoryConfig) GetPacketFactory() string {
	if m != nil {
		return m.PacketFactory
	}
	return ""
}

func (m *PacketFactoryConfig) GetOutputSidePacket() string {
	if m != nil {
		return m.OutputSidePacket
	}
	return ""
}

func (m *PacketFactoryConfig) GetExternalOutput() string {
	if m != nil {
		return m.ExternalOutput
	}
	return ""
}

func (m *PacketFactoryConfig) GetOptions() *PacketFactoryOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type PacketManagerConfig struct {
	Packet []*PacketFactoryConfig `protobuf:"bytes,1,rep,name=packet" json:"packet,omitempty"`
}

func (m *PacketManagerConfig) Reset()      { *m = PacketManagerConfig{} }
func (*PacketManagerConfig) ProtoMessage() {}
func (*PacketManagerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_87725ba929a72dc8, []int{2}
}
func (m *PacketManagerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketManagerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketManagerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketManagerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketManagerConfig.Merge(m, src)
}
func (m *PacketManagerConfig) XXX_Size() int {
	return m.Size()
}
func (m *PacketManagerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketManagerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PacketManagerConfig proto.InternalMessageInfo

func (m *PacketManagerConfig) GetPacket() []*PacketFactoryConfig {
	if m != nil {
		return m.Packet
	}
	return nil
}

func init() {
	proto.RegisterType((*PacketFactoryOptions)(nil), "mediapipe.PacketFactoryOptions")
	proto.RegisterType((*PacketFactoryConfig)(nil), "mediapipe.PacketFactoryConfig")
	proto.RegisterType((*PacketManagerConfig)(nil), "mediapipe.PacketManagerConfig")
}

func init() {
	proto.RegisterFile("mediapipe/framework/packet_factory.proto", fileDescriptor_87725ba929a72dc8)
}

var fileDescriptor_87725ba929a72dc8 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xb1, 0x4f, 0xf2, 0x40,
	0x18, 0xc6, 0xfb, 0xc2, 0x97, 0x8f, 0x8f, 0x23, 0x1f, 0x92, 0xea, 0xd0, 0x38, 0xbc, 0x90, 0x4e,
	0x8d, 0x26, 0x6d, 0xc2, 0x60, 0xe2, 0x8a, 0x89, 0x1b, 0x81, 0xe0, 0xe6, 0xd2, 0xd4, 0x72, 0xd4,
	0x06, 0xda, 0xbb, 0x94, 0x23, 0xea, 0xd6, 0x3f, 0xc1, 0xc5, 0xcd, 0xc1, 0xd1, 0x3f, 0x85, 0x91,
	0x91, 0xc9, 0xd8, 0x63, 0x31, 0x4e, 0xfc, 0x09, 0x46, 0x0e, 0xb0, 0x24, 0xb8, 0xde, 0xf3, 0x7b,
	0xde, 0xe7, 0x7d, 0x72, 0x2f, 0xb1, 0x22, 0xda, 0x0f, 0x3d, 0x1e, 0x72, 0xea, 0x0c, 0x12, 0x2f,
	0xa2, 0x77, 0x2c, 0x19, 0x3a, 0xdc, 0xf3, 0x87, 0x54, 0xb8, 0x03, 0xcf, 0x17, 0x2c, 0x79, 0xb0,
	0x79, 0xc2, 0x04, 0xd3, 0xcb, 0x5b, 0xd2, 0x34, 0xc9, 0x51, 0x77, 0x85, 0x5c, 0x2a, 0xa2, 0xc3,
	0x45, 0xc8, 0xe2, 0xf1, 0x09, 0xf9, 0xf7, 0xf2, 0x0c, 0xb5, 0x34, 0x4d, 0xd3, 0x82, 0x99, 0x01,
	0x39, 0xdc, 0x81, 0x2e, 0x58, 0x3c, 0x08, 0x03, 0xfd, 0x94, 0x54, 0x77, 0xc7, 0x1b, 0xd0, 0x00,
	0xab, 0xdc, 0xfa, 0x33, 0x7d, 0xab, 0x6b, 0xbd, 0xff, 0x3c, 0x6f, 0xd1, 0x9b, 0x44, 0x67, 0x13,
	0xc1, 0x27, 0xc2, 0x1d, 0x87, 0x7d, 0xea, 0x2a, 0xd1, 0x28, 0xe4, 0x0c, 0x35, 0xa5, 0x5f, 0x85,
	0x7d, 0xaa, 0xd2, 0x74, 0x9b, 0x1c, 0xd0, 0x7b, 0x41, 0x93, 0xd8, 0x1b, 0xb9, 0x4a, 0x34, 0x3e,
	0x4b, 0x39, 0x47, 0x75, 0xa3, 0x76, 0x56, 0xa2, 0x7e, 0x4e, 0x4a, 0x4c, 0xed, 0x6f, 0x14, 0x1b,
	0x60, 0x55, 0x9a, 0x75, 0x7b, 0xdb, 0xd4, 0xde, 0x57, 0xb3, 0xb7, 0xe1, 0xcd, 0xf6, 0xa6, 0x62,
	0xdb, 0x8b, 0xbd, 0x80, 0x26, 0xeb, 0x8a, 0x67, 0xe4, 0xef, 0x7a, 0x53, 0x68, 0x14, 0xad, 0x4a,
	0x13, 0x7f, 0x1b, 0xa8, 0xf8, 0xde, 0x9a, 0x6e, 0x3d, 0xc1, 0x2c, 0x43, 0x6d, 0x9e, 0xa1, 0xb6,
	0xcc, 0x10, 0x52, 0x89, 0xf0, 0x2a, 0x11, 0xa6, 0x12, 0x61, 0x26, 0x11, 0xde, 0x25, 0xc2, 0x87,
	0x44, 0x6d, 0x29, 0x11, 0x1e, 0x17, 0xa8, 0xcd, 0x16, 0xa8, 0xcd, 0x17, 0xa8, 0x91, 0x63, 0x9f,
	0x45, 0x76, 0xc0, 0x58, 0x30, 0xa2, 0xb9, 0xa0, 0xd5, 0xa7, 0xb5, 0xf4, 0x9d, 0xbc, 0xee, 0xf7,
	0xdb, 0xb5, 0x13, 0x84, 0xe2, 0x76, 0x72, 0x63, 0xfb, 0x2c, 0x72, 0x94, 0xcd, 0xf9, 0x39, 0x82,
	0x3d, 0xe7, 0xf0, 0x15, 0x00, 0x00, 0xff, 0xff, 0x99, 0xdf, 0x46, 0x49, 0x24, 0x02, 0x00, 0x00,
}

func (this *PacketFactoryOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PacketFactoryOptions)
	if !ok {
		that2, ok := that.(PacketFactoryOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	thismap := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(this)
	thatmap := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(that1)
	for k, v := range thismap {
		if v2, ok := thatmap[k]; ok {
			if !v.Equal(&v2) {
				return false
			}
		} else {
			return false
		}
	}
	for k, _ := range thatmap {
		if _, ok := thismap[k]; !ok {
			return false
		}
	}
	return true
}
func (this *PacketFactoryConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PacketFactoryConfig)
	if !ok {
		that2, ok := that.(PacketFactoryConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PacketFactory != that1.PacketFactory {
		return false
	}
	if this.OutputSidePacket != that1.OutputSidePacket {
		return false
	}
	if this.ExternalOutput != that1.ExternalOutput {
		return false
	}
	if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *PacketManagerConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PacketManagerConfig)
	if !ok {
		that2, ok := that.(PacketManagerConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Packet) != len(that1.Packet) {
		return false
	}
	for i := range this.Packet {
		if !this.Packet[i].Equal(that1.Packet[i]) {
			return false
		}
	}
	return true
}
func (this *PacketFactoryOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&framework.PacketFactoryOptions{")
	s = append(s, "XXX_InternalExtensions: "+extensionToGoStringPacketFactory(this)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PacketFactoryConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&framework.PacketFactoryConfig{")
	s = append(s, "PacketFactory: "+fmt.Sprintf("%#v", this.PacketFactory)+",\n")
	s = append(s, "OutputSidePacket: "+fmt.Sprintf("%#v", this.OutputSidePacket)+",\n")
	s = append(s, "ExternalOutput: "+fmt.Sprintf("%#v", this.ExternalOutput)+",\n")
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PacketManagerConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&framework.PacketManagerConfig{")
	if this.Packet != nil {
		s = append(s, "Packet: "+fmt.Sprintf("%#v", this.Packet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPacketFactory(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringPacketFactory(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *PacketFactoryOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketFactoryOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketFactoryOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if n, err := github_com_gogo_protobuf_proto.EncodeInternalExtensionBackwards(m, dAtA[:i]); err != nil {
		return 0, err
	} else {
		i -= n
	}
	return len(dAtA) - i, nil
}

func (m *PacketFactoryConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketFactoryConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketFactoryConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ExternalOutput)
	copy(dAtA[i:], m.ExternalOutput)
	i = encodeVarintPacketFactory(dAtA, i, uint64(len(m.ExternalOutput)))
	i--
	dAtA[i] = 0x3e
	i--
	dAtA[i] = 0xd2
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacketFactory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i -= len(m.OutputSidePacket)
	copy(dAtA[i:], m.OutputSidePacket)
	i = encodeVarintPacketFactory(dAtA, i, uint64(len(m.OutputSidePacket)))
	i--
	dAtA[i] = 0x12
	i -= len(m.PacketFactory)
	copy(dAtA[i:], m.PacketFactory)
	i = encodeVarintPacketFactory(dAtA, i, uint64(len(m.PacketFactory)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PacketManagerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketManagerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketManagerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Packet) > 0 {
		for iNdEx := len(m.Packet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Packet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPacketFactory(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacketFactory(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacketFactory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PacketFactoryOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += github_com_gogo_protobuf_proto.SizeOfInternalExtension(m)
	return n
}

func (m *PacketFactoryConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PacketFactory)
	n += 1 + l + sovPacketFactory(uint64(l))
	l = len(m.OutputSidePacket)
	n += 1 + l + sovPacketFactory(uint64(l))
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovPacketFactory(uint64(l))
	}
	l = len(m.ExternalOutput)
	n += 2 + l + sovPacketFactory(uint64(l))
	return n
}

func (m *PacketManagerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Packet) > 0 {
		for _, e := range m.Packet {
			l = e.Size()
			n += 1 + l + sovPacketFactory(uint64(l))
		}
	}
	return n
}

func sovPacketFactory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacketFactory(x uint64) (n int) {
	return sovPacketFactory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PacketFactoryOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PacketFactoryOptions{`,
		`XXX_InternalExtensions:` + github_com_gogo_protobuf_proto.StringFromInternalExtension(this) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PacketFactoryConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PacketFactoryConfig{`,
		`PacketFactory:` + fmt.Sprintf("%v", this.PacketFactory) + `,`,
		`OutputSidePacket:` + fmt.Sprintf("%v", this.OutputSidePacket) + `,`,
		`Options:` + strings.Replace(this.Options.String(), "PacketFactoryOptions", "PacketFactoryOptions", 1) + `,`,
		`ExternalOutput:` + fmt.Sprintf("%v", this.ExternalOutput) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PacketManagerConfig) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPacket := "[]*PacketFactoryConfig{"
	for _, f := range this.Packet {
		repeatedStringForPacket += strings.Replace(f.String(), "PacketFactoryConfig", "PacketFactoryConfig", 1) + ","
	}
	repeatedStringForPacket += "}"
	s := strings.Join([]string{`&PacketManagerConfig{`,
		`Packet:` + repeatedStringForPacket + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPacketFactory(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PacketFactoryOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketFactory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketFactoryOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketFactoryOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			if (fieldNum >= 20000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipPacketFactory(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthPacketFactory
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				github_com_gogo_protobuf_proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipPacketFactory(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthPacketFactory
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketFactoryConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketFactory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketFactoryConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketFactoryConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketFactory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketFactory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacketFactory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketFactory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketFactory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputSidePacket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketFactory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacketFactory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketFactory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputSidePacket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketFactory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketFactory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketFactory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &PacketFactoryOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalOutput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketFactory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacketFactory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketFactory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalOutput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketFactory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacketFactory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketManagerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketFactory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketManagerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketManagerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketFactory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketFactory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketFactory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packet = append(m.Packet, &PacketFactoryConfig{})
			if err := m.Packet[len(m.Packet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketFactory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacketFactory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacketFactory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacketFactory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketFactory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketFactory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacketFactory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacketFactory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacketFactory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacketFactory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacketFactory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacketFactory = fmt.Errorf("proto: unexpected end of group")
)
