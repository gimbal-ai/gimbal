// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/packet_test.proto

package framework

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PacketTestProto struct {
	X []int32 `protobuf:"varint,1777,rep,name=x" json:"x,omitempty"`
	Y []int32 `protobuf:"varint,268437233,rep,name=y" json:"y,omitempty"`
}

func (m *PacketTestProto) Reset()      { *m = PacketTestProto{} }
func (*PacketTestProto) ProtoMessage() {}
func (*PacketTestProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_df1ceb3c28fc9dad, []int{0}
}
func (m *PacketTestProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketTestProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketTestProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketTestProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketTestProto.Merge(m, src)
}
func (m *PacketTestProto) XXX_Size() int {
	return m.Size()
}
func (m *PacketTestProto) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketTestProto.DiscardUnknown(m)
}

var xxx_messageInfo_PacketTestProto proto.InternalMessageInfo

func (m *PacketTestProto) GetX() []int32 {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *PacketTestProto) GetY() []int32 {
	if m != nil {
		return m.Y
	}
	return nil
}

type SimpleProto struct {
	Value [][]byte `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *SimpleProto) Reset()      { *m = SimpleProto{} }
func (*SimpleProto) ProtoMessage() {}
func (*SimpleProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_df1ceb3c28fc9dad, []int{1}
}
func (m *SimpleProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleProto.Merge(m, src)
}
func (m *SimpleProto) XXX_Size() int {
	return m.Size()
}
func (m *SimpleProto) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleProto.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleProto proto.InternalMessageInfo

func (m *SimpleProto) GetValue() [][]byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type SerializationProxyProto struct {
	BoolValue   bool      `protobuf:"varint,1,opt,name=bool_value,json=boolValue" json:"bool_value"`
	FloatValue  []float32 `protobuf:"fixed32,2,rep,name=float_value,json=floatValue" json:"float_value,omitempty"`
	StringValue []string  `protobuf:"bytes,3,rep,name=string_value,json=stringValue" json:"string_value,omitempty"`
}

func (m *SerializationProxyProto) Reset()      { *m = SerializationProxyProto{} }
func (*SerializationProxyProto) ProtoMessage() {}
func (*SerializationProxyProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_df1ceb3c28fc9dad, []int{2}
}
func (m *SerializationProxyProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SerializationProxyProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SerializationProxyProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SerializationProxyProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializationProxyProto.Merge(m, src)
}
func (m *SerializationProxyProto) XXX_Size() int {
	return m.Size()
}
func (m *SerializationProxyProto) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializationProxyProto.DiscardUnknown(m)
}

var xxx_messageInfo_SerializationProxyProto proto.InternalMessageInfo

func (m *SerializationProxyProto) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

func (m *SerializationProxyProto) GetFloatValue() []float32 {
	if m != nil {
		return m.FloatValue
	}
	return nil
}

func (m *SerializationProxyProto) GetStringValue() []string {
	if m != nil {
		return m.StringValue
	}
	return nil
}

type InputOnlyProto struct {
	X int32 `protobuf:"varint,1,opt,name=x" json:"x"`
}

func (m *InputOnlyProto) Reset()      { *m = InputOnlyProto{} }
func (*InputOnlyProto) ProtoMessage() {}
func (*InputOnlyProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_df1ceb3c28fc9dad, []int{3}
}
func (m *InputOnlyProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputOnlyProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InputOnlyProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InputOnlyProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputOnlyProto.Merge(m, src)
}
func (m *InputOnlyProto) XXX_Size() int {
	return m.Size()
}
func (m *InputOnlyProto) XXX_DiscardUnknown() {
	xxx_messageInfo_InputOnlyProto.DiscardUnknown(m)
}

var xxx_messageInfo_InputOnlyProto proto.InternalMessageInfo

func (m *InputOnlyProto) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func init() {
	proto.RegisterType((*PacketTestProto)(nil), "mediapipe.PacketTestProto")
	proto.RegisterType((*SimpleProto)(nil), "mediapipe.SimpleProto")
	proto.RegisterType((*SerializationProxyProto)(nil), "mediapipe.SerializationProxyProto")
	proto.RegisterType((*InputOnlyProto)(nil), "mediapipe.InputOnlyProto")
}

func init() {
	proto.RegisterFile("mediapipe/framework/packet_test.proto", fileDescriptor_df1ceb3c28fc9dad)
}

var fileDescriptor_df1ceb3c28fc9dad = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x3f, 0x4f, 0xfa, 0x40,
	0x1c, 0xc6, 0xfb, 0xa5, 0x3f, 0x92, 0x1f, 0x07, 0xa8, 0x69, 0x4c, 0x64, 0xfa, 0x82, 0x45, 0x93,
	0x4e, 0x34, 0xf1, 0x25, 0xb0, 0x39, 0x49, 0x8a, 0x71, 0x70, 0x21, 0x07, 0x1e, 0xf5, 0xc2, 0xb5,
	0xd7, 0x94, 0x43, 0x8b, 0x13, 0x71, 0x37, 0xf1, 0x65, 0xf8, 0x52, 0x18, 0x19, 0x99, 0x8c, 0x1c,
	0x8b, 0x23, 0xbc, 0x03, 0xd3, 0x3f, 0xea, 0xe2, 0x78, 0x9f, 0xe7, 0xf3, 0xe4, 0xc9, 0xdd, 0x91,
	0xf3, 0x80, 0xdd, 0x71, 0x1a, 0xf1, 0x88, 0xb9, 0xe3, 0x98, 0x06, 0xec, 0x51, 0xc6, 0x13, 0x37,
	0xa2, 0xa3, 0x09, 0x53, 0x03, 0xc5, 0xa6, 0xaa, 0x13, 0xc5, 0x52, 0x49, 0xab, 0xf2, 0xa3, 0xd9,
	0x17, 0xe4, 0xb0, 0x97, 0xe5, 0xd7, 0x6c, 0xaa, 0x7a, 0x59, 0x5a, 0x27, 0x90, 0x34, 0xf6, 0xf5,
	0x96, 0xe9, 0x94, 0x3d, 0x48, 0xac, 0x23, 0x02, 0xf3, 0xc6, 0xfe, 0x65, 0xb1, 0x80, 0x9c, 0xcc,
	0xed, 0x36, 0xa9, 0xf6, 0x79, 0x10, 0x09, 0x96, 0xfb, 0xc7, 0xa4, 0xfc, 0x40, 0xc5, 0x8c, 0x35,
	0x52, 0xa1, 0xe6, 0xe5, 0x07, 0xfb, 0x19, 0xc8, 0x49, 0x9f, 0xc5, 0x9c, 0x0a, 0xfe, 0x44, 0x15,
	0x97, 0x61, 0x2f, 0x96, 0xc9, 0x3c, 0x6f, 0xb4, 0x09, 0x19, 0x4a, 0x29, 0x06, 0xdf, 0x35, 0x70,
	0xfe, 0x77, 0xff, 0x2d, 0xdf, 0x9b, 0x86, 0x57, 0x49, 0xf9, 0x4d, 0x8a, 0xad, 0x26, 0xa9, 0x8e,
	0x85, 0xa4, 0xaa, 0xb0, 0x4a, 0x2d, 0xd3, 0x29, 0x79, 0x24, 0x43, 0xb9, 0x70, 0x4a, 0x6a, 0x53,
	0x15, 0xf3, 0xd0, 0x2f, 0x0c, 0xb3, 0x65, 0x3a, 0x15, 0xaf, 0x9a, 0xb3, 0x4c, 0xb1, 0xcf, 0xc8,
	0xc1, 0x65, 0x18, 0xcd, 0xd4, 0x55, 0x28, 0x8a, 0x69, 0x2b, 0xbd, 0x5c, 0xba, 0x58, 0x2e, 0x16,
	0x21, 0xe9, 0xb2, 0xd5, 0x06, 0x8d, 0xf5, 0x06, 0x8d, 0xdd, 0x06, 0x61, 0xa1, 0x11, 0xde, 0x34,
	0xc2, 0x52, 0x23, 0xac, 0x34, 0xc2, 0x87, 0x46, 0xf8, 0xd4, 0x68, 0xec, 0x34, 0xc2, 0xeb, 0x16,
	0x8d, 0xd5, 0x16, 0x8d, 0xf5, 0x16, 0x8d, 0x5b, 0xd7, 0xe7, 0xea, 0x7e, 0x36, 0xec, 0x8c, 0x64,
	0xe0, 0xfa, 0x52, 0xfa, 0x82, 0xb9, 0xbf, 0xaf, 0xff, 0xc7, 0x3f, 0x7c, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x4f, 0x41, 0x31, 0x6e, 0x9d, 0x01, 0x00, 0x00,
}

func (this *PacketTestProto) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PacketTestProto)
	if !ok {
		that2, ok := that.(PacketTestProto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.X) != len(that1.X) {
		return false
	}
	for i := range this.X {
		if this.X[i] != that1.X[i] {
			return false
		}
	}
	if len(this.Y) != len(that1.Y) {
		return false
	}
	for i := range this.Y {
		if this.Y[i] != that1.Y[i] {
			return false
		}
	}
	return true
}
func (this *SimpleProto) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleProto)
	if !ok {
		that2, ok := that.(SimpleProto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Value) != len(that1.Value) {
		return false
	}
	for i := range this.Value {
		if !bytes.Equal(this.Value[i], that1.Value[i]) {
			return false
		}
	}
	return true
}
func (this *SerializationProxyProto) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SerializationProxyProto)
	if !ok {
		that2, ok := that.(SerializationProxyProto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BoolValue != that1.BoolValue {
		return false
	}
	if len(this.FloatValue) != len(that1.FloatValue) {
		return false
	}
	for i := range this.FloatValue {
		if this.FloatValue[i] != that1.FloatValue[i] {
			return false
		}
	}
	if len(this.StringValue) != len(that1.StringValue) {
		return false
	}
	for i := range this.StringValue {
		if this.StringValue[i] != that1.StringValue[i] {
			return false
		}
	}
	return true
}
func (this *InputOnlyProto) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InputOnlyProto)
	if !ok {
		that2, ok := that.(InputOnlyProto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	return true
}
func (this *PacketTestProto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&framework.PacketTestProto{")
	if this.X != nil {
		s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	}
	if this.Y != nil {
		s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleProto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&framework.SimpleProto{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SerializationProxyProto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&framework.SerializationProxyProto{")
	s = append(s, "BoolValue: "+fmt.Sprintf("%#v", this.BoolValue)+",\n")
	if this.FloatValue != nil {
		s = append(s, "FloatValue: "+fmt.Sprintf("%#v", this.FloatValue)+",\n")
	}
	if this.StringValue != nil {
		s = append(s, "StringValue: "+fmt.Sprintf("%#v", this.StringValue)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InputOnlyProto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&framework.InputOnlyProto{")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPacketTest(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PacketTestProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketTestProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketTestProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Y) > 0 {
		for iNdEx := len(m.Y) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintPacketTest(dAtA, i, uint64(m.Y[iNdEx]))
			i--
			dAtA[i] = 0x8
			i--
			dAtA[i] = 0x80
			i--
			dAtA[i] = 0x80
			i--
			dAtA[i] = 0xef
			i--
			dAtA[i] = 0x88
		}
	}
	if len(m.X) > 0 {
		for iNdEx := len(m.X) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintPacketTest(dAtA, i, uint64(m.X[iNdEx]))
			i--
			dAtA[i] = 0x6f
			i--
			dAtA[i] = 0x88
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Value[iNdEx])
			copy(dAtA[i:], m.Value[iNdEx])
			i = encodeVarintPacketTest(dAtA, i, uint64(len(m.Value[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SerializationProxyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SerializationProxyProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SerializationProxyProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StringValue) > 0 {
		for iNdEx := len(m.StringValue) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StringValue[iNdEx])
			copy(dAtA[i:], m.StringValue[iNdEx])
			i = encodeVarintPacketTest(dAtA, i, uint64(len(m.StringValue[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FloatValue) > 0 {
		for iNdEx := len(m.FloatValue) - 1; iNdEx >= 0; iNdEx-- {
			f1 := math.Float32bits(float32(m.FloatValue[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f1))
			i--
			dAtA[i] = 0x15
		}
	}
	i--
	if m.BoolValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *InputOnlyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputOnlyProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputOnlyProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintPacketTest(dAtA, i, uint64(m.X))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintPacketTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacketTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PacketTestProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.X) > 0 {
		for _, e := range m.X {
			n += 2 + sovPacketTest(uint64(e))
		}
	}
	if len(m.Y) > 0 {
		for _, e := range m.Y {
			n += 5 + sovPacketTest(uint64(e))
		}
	}
	return n
}

func (m *SimpleProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, b := range m.Value {
			l = len(b)
			n += 1 + l + sovPacketTest(uint64(l))
		}
	}
	return n
}

func (m *SerializationProxyProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	if len(m.FloatValue) > 0 {
		n += 5 * len(m.FloatValue)
	}
	if len(m.StringValue) > 0 {
		for _, s := range m.StringValue {
			l = len(s)
			n += 1 + l + sovPacketTest(uint64(l))
		}
	}
	return n
}

func (m *InputOnlyProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPacketTest(uint64(m.X))
	return n
}

func sovPacketTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacketTest(x uint64) (n int) {
	return sovPacketTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PacketTestProto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PacketTestProto{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleProto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleProto{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SerializationProxyProto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SerializationProxyProto{`,
		`BoolValue:` + fmt.Sprintf("%v", this.BoolValue) + `,`,
		`FloatValue:` + fmt.Sprintf("%v", this.FloatValue) + `,`,
		`StringValue:` + fmt.Sprintf("%v", this.StringValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InputOnlyProto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InputOnlyProto{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPacketTest(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PacketTestProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketTestProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketTestProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1777:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPacketTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.X = append(m.X, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPacketTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPacketTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPacketTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.X) == 0 {
					m.X = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPacketTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.X = append(m.X, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
		case 268437233:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPacketTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Y = append(m.Y, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPacketTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPacketTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPacketTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Y) == 0 {
					m.Y = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPacketTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Y = append(m.Y, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacketTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacketTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacketTest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, make([]byte, postIndex-iNdEx))
			copy(m.Value[len(m.Value)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacketTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SerializationProxyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializationProxyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializationProxyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoolValue = bool(v != 0)
		case 2:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.FloatValue = append(m.FloatValue, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPacketTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPacketTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPacketTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.FloatValue) == 0 {
					m.FloatValue = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.FloatValue = append(m.FloatValue, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatValue", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacketTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringValue = append(m.StringValue, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacketTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputOnlyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputOnlyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputOnlyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacketTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacketTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacketTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacketTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacketTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacketTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacketTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacketTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacketTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacketTest = fmt.Errorf("proto: unexpected end of group")
)
