// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/status_handler.proto

package framework

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StatusHandlerConfig struct {
	StatusHandler   string            `protobuf:"bytes,1,opt,name=status_handler,json=statusHandler" json:"status_handler"`
	InputSidePacket []string          `protobuf:"bytes,2,rep,name=input_side_packet,json=inputSidePacket" json:"input_side_packet,omitempty"`
	ExternalInput   []string          `protobuf:"bytes,1002,rep,name=external_input,json=externalInput" json:"external_input,omitempty"`
	Options         *MediaPipeOptions `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
}

func (m *StatusHandlerConfig) Reset()      { *m = StatusHandlerConfig{} }
func (*StatusHandlerConfig) ProtoMessage() {}
func (*StatusHandlerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_60a6fe8831c3ed37, []int{0}
}
func (m *StatusHandlerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusHandlerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusHandlerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusHandlerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusHandlerConfig.Merge(m, src)
}
func (m *StatusHandlerConfig) XXX_Size() int {
	return m.Size()
}
func (m *StatusHandlerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusHandlerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StatusHandlerConfig proto.InternalMessageInfo

func (m *StatusHandlerConfig) GetStatusHandler() string {
	if m != nil {
		return m.StatusHandler
	}
	return ""
}

func (m *StatusHandlerConfig) GetInputSidePacket() []string {
	if m != nil {
		return m.InputSidePacket
	}
	return nil
}

func (m *StatusHandlerConfig) GetExternalInput() []string {
	if m != nil {
		return m.ExternalInput
	}
	return nil
}

func (m *StatusHandlerConfig) GetOptions() *MediaPipeOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func init() {
	proto.RegisterType((*StatusHandlerConfig)(nil), "mediapipe.StatusHandlerConfig")
}

func init() {
	proto.RegisterFile("mediapipe/framework/status_handler.proto", fileDescriptor_60a6fe8831c3ed37)
}

var fileDescriptor_60a6fe8831c3ed37 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xc8, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x2b, 0x4a, 0xcc, 0x4d, 0x2d, 0xcf, 0x2f, 0xca, 0xd6,
	0x2f, 0x2e, 0x49, 0x2c, 0x29, 0x2d, 0x8e, 0xcf, 0x48, 0xcc, 0x4b, 0xc9, 0x49, 0x2d, 0xd2, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0xab, 0x94, 0xd2, 0xc6, 0xa6, 0x09, 0x2e, 0x16, 0x9f,
	0x5f, 0x50, 0x92, 0x99, 0x9f, 0x57, 0x0c, 0xd1, 0xa7, 0x74, 0x96, 0x91, 0x4b, 0x38, 0x18, 0x6c,
	0xa0, 0x07, 0xc4, 0x3c, 0xe7, 0xfc, 0xbc, 0xb4, 0xcc, 0x74, 0x21, 0x6d, 0x2e, 0x3e, 0x54, 0x7b,
	0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x9d, 0x58, 0x4e, 0xdc, 0x93, 0x67, 0x08, 0xe2, 0x2d, 0x46,
	0xd6, 0x22, 0xa4, 0xc5, 0x25, 0x98, 0x99, 0x57, 0x50, 0x5a, 0x12, 0x5f, 0x9c, 0x99, 0x92, 0x1a,
	0x5f, 0x90, 0x98, 0x9c, 0x9d, 0x5a, 0x22, 0xc1, 0xa4, 0xc0, 0xac, 0xc1, 0x19, 0xc4, 0x0f, 0x96,
	0x08, 0xce, 0x4c, 0x49, 0x0d, 0x00, 0x0b, 0x0b, 0xa9, 0x71, 0xf1, 0xa5, 0x56, 0x94, 0xa4, 0x16,
	0xe5, 0x25, 0xe6, 0xc4, 0x83, 0xe5, 0x24, 0x5e, 0xb1, 0x83, 0x55, 0xf2, 0xc2, 0x84, 0x3d, 0x41,
	0xa2, 0x42, 0xa6, 0x5c, 0xec, 0x50, 0x97, 0x4a, 0x30, 0x2b, 0x30, 0x6a, 0x70, 0x1b, 0x49, 0xeb,
	0xc1, 0xfd, 0xa0, 0xe7, 0x0b, 0x62, 0x05, 0x64, 0x16, 0xa4, 0xfa, 0x43, 0x94, 0x04, 0xc1, 0xd4,
	0x3a, 0x4d, 0x65, 0xbc, 0xf0, 0x50, 0x8e, 0xe1, 0xc6, 0x43, 0x39, 0x86, 0x0f, 0x0f, 0xe5, 0x18,
	0x1b, 0x1e, 0xc9, 0x31, 0xae, 0x78, 0x24, 0xc7, 0x78, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72,
	0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xbe, 0x78, 0x24, 0xc7, 0xf0, 0xe1, 0x91, 0x1c, 0xe3, 0x84, 0xc7,
	0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0xc0, 0x25, 0x95, 0x9c, 0x9f, 0xab,
	0x97, 0x9e, 0x9f, 0x9f, 0x9e, 0x93, 0x8a, 0x64, 0x0d, 0x38, 0x88, 0x9c, 0x84, 0x50, 0xc2, 0x27,
	0x00, 0x24, 0x16, 0xa5, 0x9f, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x0f,
	0xd1, 0x86, 0x08, 0x61, 0x7d, 0x2c, 0xe1, 0x0f, 0x08, 0x00, 0x00, 0xff, 0xff, 0xd0, 0xc3, 0x01,
	0xbe, 0xca, 0x01, 0x00, 0x00,
}

func (this *StatusHandlerConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusHandlerConfig)
	if !ok {
		that2, ok := that.(StatusHandlerConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StatusHandler != that1.StatusHandler {
		return false
	}
	if len(this.InputSidePacket) != len(that1.InputSidePacket) {
		return false
	}
	for i := range this.InputSidePacket {
		if this.InputSidePacket[i] != that1.InputSidePacket[i] {
			return false
		}
	}
	if len(this.ExternalInput) != len(that1.ExternalInput) {
		return false
	}
	for i := range this.ExternalInput {
		if this.ExternalInput[i] != that1.ExternalInput[i] {
			return false
		}
	}
	if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *StatusHandlerConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&framework.StatusHandlerConfig{")
	s = append(s, "StatusHandler: "+fmt.Sprintf("%#v", this.StatusHandler)+",\n")
	if this.InputSidePacket != nil {
		s = append(s, "InputSidePacket: "+fmt.Sprintf("%#v", this.InputSidePacket)+",\n")
	}
	if this.ExternalInput != nil {
		s = append(s, "ExternalInput: "+fmt.Sprintf("%#v", this.ExternalInput)+",\n")
	}
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStatusHandler(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *StatusHandlerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusHandlerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusHandlerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalInput) > 0 {
		for iNdEx := len(m.ExternalInput) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExternalInput[iNdEx])
			copy(dAtA[i:], m.ExternalInput[iNdEx])
			i = encodeVarintStatusHandler(dAtA, i, uint64(len(m.ExternalInput[iNdEx])))
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xd2
		}
	}
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStatusHandler(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InputSidePacket) > 0 {
		for iNdEx := len(m.InputSidePacket) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InputSidePacket[iNdEx])
			copy(dAtA[i:], m.InputSidePacket[iNdEx])
			i = encodeVarintStatusHandler(dAtA, i, uint64(len(m.InputSidePacket[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.StatusHandler)
	copy(dAtA[i:], m.StatusHandler)
	i = encodeVarintStatusHandler(dAtA, i, uint64(len(m.StatusHandler)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintStatusHandler(dAtA []byte, offset int, v uint64) int {
	offset -= sovStatusHandler(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StatusHandlerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StatusHandler)
	n += 1 + l + sovStatusHandler(uint64(l))
	if len(m.InputSidePacket) > 0 {
		for _, s := range m.InputSidePacket {
			l = len(s)
			n += 1 + l + sovStatusHandler(uint64(l))
		}
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovStatusHandler(uint64(l))
	}
	if len(m.ExternalInput) > 0 {
		for _, s := range m.ExternalInput {
			l = len(s)
			n += 2 + l + sovStatusHandler(uint64(l))
		}
	}
	return n
}

func sovStatusHandler(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStatusHandler(x uint64) (n int) {
	return sovStatusHandler(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StatusHandlerConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatusHandlerConfig{`,
		`StatusHandler:` + fmt.Sprintf("%v", this.StatusHandler) + `,`,
		`InputSidePacket:` + fmt.Sprintf("%v", this.InputSidePacket) + `,`,
		`Options:` + strings.Replace(fmt.Sprintf("%v", this.Options), "MediaPipeOptions", "MediaPipeOptions", 1) + `,`,
		`ExternalInput:` + fmt.Sprintf("%v", this.ExternalInput) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStatusHandler(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StatusHandlerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusHandlerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusHandlerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusHandler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatusHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatusHandler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusHandler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputSidePacket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatusHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatusHandler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputSidePacket = append(m.InputSidePacket, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatusHandler
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatusHandler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &MediaPipeOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalInput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatusHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatusHandler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalInput = append(m.ExternalInput, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatusHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatusHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStatusHandler(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStatusHandler
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatusHandler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatusHandler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStatusHandler
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStatusHandler
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStatusHandler
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStatusHandler        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStatusHandler          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStatusHandler = fmt.Errorf("proto: unexpected end of group")
)
