// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/stream_handler/default_input_stream_handler.proto

package stream_handler

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DefaultInputStreamHandlerOptions struct {
	BatchSize *int32 `protobuf:"varint,1,opt,name=batch_size,json=batchSize,def=1" json:"batch_size,omitempty"`
}

func (m *DefaultInputStreamHandlerOptions) Reset()      { *m = DefaultInputStreamHandlerOptions{} }
func (*DefaultInputStreamHandlerOptions) ProtoMessage() {}
func (*DefaultInputStreamHandlerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_be3fa9490f718860, []int{0}
}
func (m *DefaultInputStreamHandlerOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultInputStreamHandlerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefaultInputStreamHandlerOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefaultInputStreamHandlerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultInputStreamHandlerOptions.Merge(m, src)
}
func (m *DefaultInputStreamHandlerOptions) XXX_Size() int {
	return m.Size()
}
func (m *DefaultInputStreamHandlerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultInputStreamHandlerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultInputStreamHandlerOptions proto.InternalMessageInfo

const Default_DefaultInputStreamHandlerOptions_BatchSize int32 = 1

func (m *DefaultInputStreamHandlerOptions) GetBatchSize() int32 {
	if m != nil && m.BatchSize != nil {
		return *m.BatchSize
	}
	return Default_DefaultInputStreamHandlerOptions_BatchSize
}

var E_DefaultInputStreamHandlerOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.MediaPipeOptions)(nil),
	ExtensionType: (*DefaultInputStreamHandlerOptions)(nil),
	Field:         164312821,
	Name:          "mediapipe.DefaultInputStreamHandlerOptions.ext",
	Tag:           "bytes,164312821,opt,name=ext",
	Filename:      "mediapipe/framework/stream_handler/default_input_stream_handler.proto",
}

func init() {
	proto.RegisterExtension(E_DefaultInputStreamHandlerOptions_Ext)
	proto.RegisterType((*DefaultInputStreamHandlerOptions)(nil), "mediapipe.DefaultInputStreamHandlerOptions")
}

func init() {
	proto.RegisterFile("mediapipe/framework/stream_handler/default_input_stream_handler.proto", fileDescriptor_be3fa9490f718860)
}

var fileDescriptor_be3fa9490f718860 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0xcd, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x2b, 0x4a, 0xcc, 0x4d, 0x2d, 0xcf, 0x2f, 0xca, 0xd6,
	0x2f, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x8d, 0xcf, 0x48, 0xcc, 0x4b, 0xc9, 0x49, 0x2d, 0xd2, 0x4f,
	0x49, 0x4d, 0x4b, 0x2c, 0xcd, 0x29, 0x89, 0xcf, 0xcc, 0x2b, 0x28, 0x2d, 0x89, 0x47, 0x95, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x1b, 0x23, 0xa5, 0x8d, 0xcd, 0x44, 0xb8, 0x58,
	0x7c, 0x7e, 0x41, 0x49, 0x66, 0x7e, 0x5e, 0x31, 0x44, 0x9f, 0xd2, 0x62, 0x46, 0x2e, 0x05, 0x17,
	0x88, 0xf1, 0x9e, 0x20, 0xd3, 0x83, 0xc1, 0x86, 0x7b, 0x40, 0xcc, 0xf6, 0x87, 0x28, 0x15, 0x52,
	0xe0, 0xe2, 0x4a, 0x4a, 0x2c, 0x49, 0xce, 0x88, 0x2f, 0xce, 0xac, 0x4a, 0x95, 0x60, 0x54, 0x60,
	0xd4, 0x60, 0xb5, 0x62, 0x34, 0x0c, 0xe2, 0x04, 0x0b, 0x06, 0x67, 0x56, 0xa5, 0x1a, 0xc5, 0x72,
	0x31, 0xa7, 0x56, 0x94, 0x08, 0x49, 0xeb, 0xc1, 0xed, 0xd1, 0xf3, 0x05, 0xb1, 0x02, 0x32, 0x0b,
	0x52, 0xa1, 0xa6, 0x48, 0x7c, 0x7d, 0xbb, 0xc6, 0x4f, 0x81, 0x51, 0x83, 0xdb, 0x48, 0x1b, 0x49,
	0x15, 0x21, 0xbb, 0x83, 0x40, 0xe6, 0x3a, 0x95, 0x5c, 0x78, 0x28, 0xc7, 0x70, 0xe3, 0xa1, 0x1c,
	0xc3, 0x87, 0x87, 0x72, 0x8c, 0x0d, 0x8f, 0xe4, 0x18, 0x57, 0x3c, 0x92, 0x63, 0x3c, 0xf1, 0x48,
	0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x5f, 0x3c, 0x92, 0x63, 0xf8, 0xf0,
	0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88,
	0xb2, 0x4b, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0xcf, 0x4f,
	0xcf, 0x49, 0x45, 0x04, 0x83, 0x3e, 0xe1, 0x60, 0x07, 0x04, 0x00, 0x00, 0xff, 0xff, 0x44, 0xf0,
	0x5d, 0xba, 0x9b, 0x01, 0x00, 0x00,
}

func (this *DefaultInputStreamHandlerOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultInputStreamHandlerOptions)
	if !ok {
		that2, ok := that.(DefaultInputStreamHandlerOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BatchSize != nil && that1.BatchSize != nil {
		if *this.BatchSize != *that1.BatchSize {
			return false
		}
	} else if this.BatchSize != nil {
		return false
	} else if that1.BatchSize != nil {
		return false
	}
	return true
}
func (this *DefaultInputStreamHandlerOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&stream_handler.DefaultInputStreamHandlerOptions{")
	if this.BatchSize != nil {
		s = append(s, "BatchSize: "+valueToGoStringDefaultInputStreamHandler(this.BatchSize, "int32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDefaultInputStreamHandler(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DefaultInputStreamHandlerOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultInputStreamHandlerOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultInputStreamHandlerOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchSize != nil {
		i = encodeVarintDefaultInputStreamHandler(dAtA, i, uint64(*m.BatchSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDefaultInputStreamHandler(dAtA []byte, offset int, v uint64) int {
	offset -= sovDefaultInputStreamHandler(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DefaultInputStreamHandlerOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchSize != nil {
		n += 1 + sovDefaultInputStreamHandler(uint64(*m.BatchSize))
	}
	return n
}

func sovDefaultInputStreamHandler(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDefaultInputStreamHandler(x uint64) (n int) {
	return sovDefaultInputStreamHandler(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DefaultInputStreamHandlerOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DefaultInputStreamHandlerOptions{`,
		`BatchSize:` + valueToStringDefaultInputStreamHandler(this.BatchSize) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDefaultInputStreamHandler(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DefaultInputStreamHandlerOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefaultInputStreamHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultInputStreamHandlerOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultInputStreamHandlerOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefaultInputStreamHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BatchSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipDefaultInputStreamHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefaultInputStreamHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDefaultInputStreamHandler(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDefaultInputStreamHandler
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDefaultInputStreamHandler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDefaultInputStreamHandler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDefaultInputStreamHandler
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDefaultInputStreamHandler
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDefaultInputStreamHandler
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDefaultInputStreamHandler        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDefaultInputStreamHandler          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDefaultInputStreamHandler = fmt.Errorf("proto: unexpected end of group")
)
