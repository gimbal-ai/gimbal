// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/stream_handler/fixed_size_input_stream_handler.proto

package stream_handler

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FixedSizeInputStreamHandlerOptions struct {
	TriggerQueueSize *int32 `protobuf:"varint,1,opt,name=trigger_queue_size,json=triggerQueueSize,def=2" json:"trigger_queue_size,omitempty"`
	TargetQueueSize  *int32 `protobuf:"varint,2,opt,name=target_queue_size,json=targetQueueSize,def=1" json:"target_queue_size,omitempty"`
	FixedMinSize     *bool  `protobuf:"varint,3,opt,name=fixed_min_size,json=fixedMinSize,def=0" json:"fixed_min_size,omitempty"`
}

func (m *FixedSizeInputStreamHandlerOptions) Reset()      { *m = FixedSizeInputStreamHandlerOptions{} }
func (*FixedSizeInputStreamHandlerOptions) ProtoMessage() {}
func (*FixedSizeInputStreamHandlerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f46150d5a32dda37, []int{0}
}
func (m *FixedSizeInputStreamHandlerOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FixedSizeInputStreamHandlerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FixedSizeInputStreamHandlerOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FixedSizeInputStreamHandlerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixedSizeInputStreamHandlerOptions.Merge(m, src)
}
func (m *FixedSizeInputStreamHandlerOptions) XXX_Size() int {
	return m.Size()
}
func (m *FixedSizeInputStreamHandlerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FixedSizeInputStreamHandlerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FixedSizeInputStreamHandlerOptions proto.InternalMessageInfo

const Default_FixedSizeInputStreamHandlerOptions_TriggerQueueSize int32 = 2
const Default_FixedSizeInputStreamHandlerOptions_TargetQueueSize int32 = 1
const Default_FixedSizeInputStreamHandlerOptions_FixedMinSize bool = false

func (m *FixedSizeInputStreamHandlerOptions) GetTriggerQueueSize() int32 {
	if m != nil && m.TriggerQueueSize != nil {
		return *m.TriggerQueueSize
	}
	return Default_FixedSizeInputStreamHandlerOptions_TriggerQueueSize
}

func (m *FixedSizeInputStreamHandlerOptions) GetTargetQueueSize() int32 {
	if m != nil && m.TargetQueueSize != nil {
		return *m.TargetQueueSize
	}
	return Default_FixedSizeInputStreamHandlerOptions_TargetQueueSize
}

func (m *FixedSizeInputStreamHandlerOptions) GetFixedMinSize() bool {
	if m != nil && m.FixedMinSize != nil {
		return *m.FixedMinSize
	}
	return Default_FixedSizeInputStreamHandlerOptions_FixedMinSize
}

var E_FixedSizeInputStreamHandlerOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.MediaPipeOptions)(nil),
	ExtensionType: (*FixedSizeInputStreamHandlerOptions)(nil),
	Field:         125744319,
	Name:          "mediapipe.FixedSizeInputStreamHandlerOptions.ext",
	Tag:           "bytes,125744319,opt,name=ext",
	Filename:      "mediapipe/framework/stream_handler/fixed_size_input_stream_handler.proto",
}

func init() {
	proto.RegisterExtension(E_FixedSizeInputStreamHandlerOptions_Ext)
	proto.RegisterType((*FixedSizeInputStreamHandlerOptions)(nil), "mediapipe.FixedSizeInputStreamHandlerOptions")
}

func init() {
	proto.RegisterFile("mediapipe/framework/stream_handler/fixed_size_input_stream_handler.proto", fileDescriptor_f46150d5a32dda37)
}

var fileDescriptor_f46150d5a32dda37 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x3f, 0x4f, 0x02, 0x31,
	0x18, 0xc6, 0xaf, 0x10, 0x12, 0x3d, 0x8d, 0x7f, 0x6e, 0x22, 0x9a, 0xbc, 0x21, 0x4c, 0x24, 0x84,
	0xbb, 0xc8, 0x88, 0x89, 0x83, 0x83, 0xc1, 0x81, 0xa8, 0xc7, 0xe6, 0xd2, 0x9c, 0xf2, 0x72, 0x34,
	0x72, 0xd7, 0xb3, 0xd7, 0x8b, 0x84, 0xc9, 0x8f, 0x60, 0xfc, 0x14, 0x7e, 0x0b, 0x57, 0x47, 0x46,
	0x46, 0x29, 0x8b, 0x6e, 0xcc, 0x4e, 0xa6, 0x94, 0x00, 0x26, 0x26, 0x6c, 0x4d, 0x9f, 0x5f, 0x7f,
	0x7d, 0x9f, 0xd6, 0x6e, 0x46, 0xd8, 0x61, 0x41, 0xc2, 0x12, 0xf4, 0xba, 0x22, 0x88, 0xf0, 0x89,
	0x8b, 0x07, 0x2f, 0x95, 0x02, 0x83, 0x88, 0xf6, 0x82, 0xb8, 0xd3, 0x47, 0xe1, 0x75, 0xd9, 0x00,
	0x3b, 0x34, 0x65, 0x43, 0xa4, 0x2c, 0x4e, 0x32, 0x49, 0xff, 0xe6, 0x6e, 0x22, 0xb8, 0xe4, 0xce,
	0xf6, 0xd2, 0x74, 0x54, 0xfd, 0x4f, 0xba, 0xdc, 0xa3, 0x3c, 0x91, 0x8c, 0xc7, 0xa9, 0x39, 0x57,
	0x7e, 0xcd, 0xd9, 0xe5, 0x0b, 0x7d, 0x43, 0x9b, 0x0d, 0xf1, 0x52, 0xfb, 0xdb, 0x73, 0x7d, 0xd3,
	0xd8, 0xaf, 0x0c, 0xec, 0x78, 0xb6, 0x23, 0x05, 0x0b, 0x43, 0x14, 0xf4, 0x31, 0xc3, 0x0c, 0xe7,
	0xf3, 0x14, 0x49, 0x89, 0x54, 0x0a, 0x0d, 0x52, 0xf7, 0x0f, 0x16, 0xe1, 0x8d, 0xce, 0xb4, 0xc9,
	0xa9, 0xd9, 0x87, 0x32, 0x10, 0x21, 0xca, 0x75, 0x3e, 0x67, 0xf8, 0x13, 0x7f, 0xdf, 0x64, 0x2b,
	0xbc, 0x6a, 0xef, 0x99, 0x9e, 0x11, 0x8b, 0x0d, 0x9b, 0x2f, 0x91, 0xca, 0x56, 0xa3, 0xd0, 0x0d,
	0xfa, 0x29, 0xfa, 0xbb, 0xf3, 0xb0, 0xc5, 0x62, 0x0d, 0xd7, 0xa9, 0x9d, 0xc7, 0x81, 0x74, 0x8e,
	0xdd, 0x65, 0x29, 0xb7, 0xa5, 0x57, 0xd7, 0x2c, 0xc1, 0xc5, 0xc0, 0xc5, 0xf7, 0xef, 0x9f, 0xd3,
	0x12, 0xa9, 0xec, 0xd4, 0x6b, 0x6b, 0xd4, 0xe6, 0xa2, 0xbe, 0x36, 0x9f, 0xcb, 0xd1, 0x04, 0xac,
	0xf1, 0x04, 0xac, 0xd9, 0x04, 0xc8, 0xb3, 0x02, 0xf2, 0xa6, 0x80, 0x7c, 0x28, 0x20, 0x23, 0x05,
	0xe4, 0x53, 0x01, 0xf9, 0x52, 0x60, 0xcd, 0x14, 0x90, 0x97, 0x29, 0x58, 0xa3, 0x29, 0x58, 0xe3,
	0x29, 0x58, 0xb7, 0x67, 0x21, 0x93, 0xbd, 0xec, 0xce, 0xbd, 0xe7, 0x91, 0x17, 0x72, 0x1e, 0xf6,
	0x71, 0xf5, 0xea, 0xde, 0xe6, 0x8f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x69, 0xc5, 0x56, 0x18,
	0x0d, 0x02, 0x00, 0x00,
}

func (this *FixedSizeInputStreamHandlerOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FixedSizeInputStreamHandlerOptions)
	if !ok {
		that2, ok := that.(FixedSizeInputStreamHandlerOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TriggerQueueSize != nil && that1.TriggerQueueSize != nil {
		if *this.TriggerQueueSize != *that1.TriggerQueueSize {
			return false
		}
	} else if this.TriggerQueueSize != nil {
		return false
	} else if that1.TriggerQueueSize != nil {
		return false
	}
	if this.TargetQueueSize != nil && that1.TargetQueueSize != nil {
		if *this.TargetQueueSize != *that1.TargetQueueSize {
			return false
		}
	} else if this.TargetQueueSize != nil {
		return false
	} else if that1.TargetQueueSize != nil {
		return false
	}
	if this.FixedMinSize != nil && that1.FixedMinSize != nil {
		if *this.FixedMinSize != *that1.FixedMinSize {
			return false
		}
	} else if this.FixedMinSize != nil {
		return false
	} else if that1.FixedMinSize != nil {
		return false
	}
	return true
}
func (this *FixedSizeInputStreamHandlerOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&stream_handler.FixedSizeInputStreamHandlerOptions{")
	if this.TriggerQueueSize != nil {
		s = append(s, "TriggerQueueSize: "+valueToGoStringFixedSizeInputStreamHandler(this.TriggerQueueSize, "int32")+",\n")
	}
	if this.TargetQueueSize != nil {
		s = append(s, "TargetQueueSize: "+valueToGoStringFixedSizeInputStreamHandler(this.TargetQueueSize, "int32")+",\n")
	}
	if this.FixedMinSize != nil {
		s = append(s, "FixedMinSize: "+valueToGoStringFixedSizeInputStreamHandler(this.FixedMinSize, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFixedSizeInputStreamHandler(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FixedSizeInputStreamHandlerOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FixedSizeInputStreamHandlerOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FixedSizeInputStreamHandlerOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FixedMinSize != nil {
		i--
		if *m.FixedMinSize {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.TargetQueueSize != nil {
		i = encodeVarintFixedSizeInputStreamHandler(dAtA, i, uint64(*m.TargetQueueSize))
		i--
		dAtA[i] = 0x10
	}
	if m.TriggerQueueSize != nil {
		i = encodeVarintFixedSizeInputStreamHandler(dAtA, i, uint64(*m.TriggerQueueSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFixedSizeInputStreamHandler(dAtA []byte, offset int, v uint64) int {
	offset -= sovFixedSizeInputStreamHandler(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FixedSizeInputStreamHandlerOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TriggerQueueSize != nil {
		n += 1 + sovFixedSizeInputStreamHandler(uint64(*m.TriggerQueueSize))
	}
	if m.TargetQueueSize != nil {
		n += 1 + sovFixedSizeInputStreamHandler(uint64(*m.TargetQueueSize))
	}
	if m.FixedMinSize != nil {
		n += 2
	}
	return n
}

func sovFixedSizeInputStreamHandler(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFixedSizeInputStreamHandler(x uint64) (n int) {
	return sovFixedSizeInputStreamHandler(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FixedSizeInputStreamHandlerOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FixedSizeInputStreamHandlerOptions{`,
		`TriggerQueueSize:` + valueToStringFixedSizeInputStreamHandler(this.TriggerQueueSize) + `,`,
		`TargetQueueSize:` + valueToStringFixedSizeInputStreamHandler(this.TargetQueueSize) + `,`,
		`FixedMinSize:` + valueToStringFixedSizeInputStreamHandler(this.FixedMinSize) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFixedSizeInputStreamHandler(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FixedSizeInputStreamHandlerOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFixedSizeInputStreamHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixedSizeInputStreamHandlerOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixedSizeInputStreamHandlerOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerQueueSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixedSizeInputStreamHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TriggerQueueSize = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetQueueSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixedSizeInputStreamHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TargetQueueSize = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedMinSize", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixedSizeInputStreamHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FixedMinSize = &b
		default:
			iNdEx = preIndex
			skippy, err := skipFixedSizeInputStreamHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFixedSizeInputStreamHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFixedSizeInputStreamHandler(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFixedSizeInputStreamHandler
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFixedSizeInputStreamHandler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFixedSizeInputStreamHandler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFixedSizeInputStreamHandler
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFixedSizeInputStreamHandler
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFixedSizeInputStreamHandler
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFixedSizeInputStreamHandler        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFixedSizeInputStreamHandler          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFixedSizeInputStreamHandler = fmt.Errorf("proto: unexpected end of group")
)
