// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/stream_handler/sync_set_input_stream_handler.proto

package stream_handler

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SyncSetInputStreamHandlerOptions struct {
	SyncSet []*SyncSetInputStreamHandlerOptions_SyncSet `protobuf:"bytes,1,rep,name=sync_set,json=syncSet" json:"sync_set,omitempty"`
}

func (m *SyncSetInputStreamHandlerOptions) Reset()      { *m = SyncSetInputStreamHandlerOptions{} }
func (*SyncSetInputStreamHandlerOptions) ProtoMessage() {}
func (*SyncSetInputStreamHandlerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_5329d2972a2f1aaa, []int{0}
}
func (m *SyncSetInputStreamHandlerOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncSetInputStreamHandlerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncSetInputStreamHandlerOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncSetInputStreamHandlerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncSetInputStreamHandlerOptions.Merge(m, src)
}
func (m *SyncSetInputStreamHandlerOptions) XXX_Size() int {
	return m.Size()
}
func (m *SyncSetInputStreamHandlerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncSetInputStreamHandlerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SyncSetInputStreamHandlerOptions proto.InternalMessageInfo

func (m *SyncSetInputStreamHandlerOptions) GetSyncSet() []*SyncSetInputStreamHandlerOptions_SyncSet {
	if m != nil {
		return m.SyncSet
	}
	return nil
}

var E_SyncSetInputStreamHandlerOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.MediaPipeOptions)(nil),
	ExtensionType: (*SyncSetInputStreamHandlerOptions)(nil),
	Field:         155816273,
	Name:          "mediapipe.SyncSetInputStreamHandlerOptions.ext",
	Tag:           "bytes,155816273,opt,name=ext",
	Filename:      "mediapipe/framework/stream_handler/sync_set_input_stream_handler.proto",
}

type SyncSetInputStreamHandlerOptions_SyncSet struct {
	TagIndex []string `protobuf:"bytes,1,rep,name=tag_index,json=tagIndex" json:"tag_index,omitempty"`
}

func (m *SyncSetInputStreamHandlerOptions_SyncSet) Reset() {
	*m = SyncSetInputStreamHandlerOptions_SyncSet{}
}
func (*SyncSetInputStreamHandlerOptions_SyncSet) ProtoMessage() {}
func (*SyncSetInputStreamHandlerOptions_SyncSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_5329d2972a2f1aaa, []int{0, 0}
}
func (m *SyncSetInputStreamHandlerOptions_SyncSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncSetInputStreamHandlerOptions_SyncSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncSetInputStreamHandlerOptions_SyncSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncSetInputStreamHandlerOptions_SyncSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncSetInputStreamHandlerOptions_SyncSet.Merge(m, src)
}
func (m *SyncSetInputStreamHandlerOptions_SyncSet) XXX_Size() int {
	return m.Size()
}
func (m *SyncSetInputStreamHandlerOptions_SyncSet) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncSetInputStreamHandlerOptions_SyncSet.DiscardUnknown(m)
}

var xxx_messageInfo_SyncSetInputStreamHandlerOptions_SyncSet proto.InternalMessageInfo

func (m *SyncSetInputStreamHandlerOptions_SyncSet) GetTagIndex() []string {
	if m != nil {
		return m.TagIndex
	}
	return nil
}

func init() {
	proto.RegisterExtension(E_SyncSetInputStreamHandlerOptions_Ext)
	proto.RegisterType((*SyncSetInputStreamHandlerOptions)(nil), "mediapipe.SyncSetInputStreamHandlerOptions")
	proto.RegisterType((*SyncSetInputStreamHandlerOptions_SyncSet)(nil), "mediapipe.SyncSetInputStreamHandlerOptions.SyncSet")
}

func init() {
	proto.RegisterFile("mediapipe/framework/stream_handler/sync_set_input_stream_handler.proto", fileDescriptor_5329d2972a2f1aaa)
}

var fileDescriptor_5329d2972a2f1aaa = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0xcb, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x2b, 0x4a, 0xcc, 0x4d, 0x2d, 0xcf, 0x2f, 0xca, 0xd6,
	0x2f, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x8d, 0xcf, 0x48, 0xcc, 0x4b, 0xc9, 0x49, 0x2d, 0xd2, 0x2f,
	0xae, 0xcc, 0x4b, 0x8e, 0x2f, 0x4e, 0x2d, 0x89, 0xcf, 0xcc, 0x2b, 0x28, 0x2d, 0x89, 0x47, 0x95,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x9b, 0x23, 0xa5, 0x8d, 0xcd, 0x48, 0xb8,
	0x58, 0x7c, 0x7e, 0x41, 0x49, 0x66, 0x7e, 0x5e, 0x31, 0x44, 0x9f, 0xd2, 0x4f, 0x46, 0x2e, 0x85,
	0xe0, 0xca, 0xbc, 0xe4, 0xe0, 0xd4, 0x12, 0x4f, 0x90, 0xe9, 0xc1, 0x60, 0xc3, 0x3d, 0x20, 0x66,
	0xfb, 0x43, 0x94, 0x0a, 0xf9, 0x71, 0x71, 0xc0, 0xdc, 0x20, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x6d,
	0x64, 0xac, 0x07, 0x37, 0x50, 0x8f, 0x90, 0x76, 0x98, 0x82, 0x20, 0xf6, 0x62, 0x08, 0x43, 0x4a,
	0x8d, 0x8b, 0x1d, 0x2a, 0x26, 0x24, 0xcd, 0xc5, 0x59, 0x92, 0x98, 0x1e, 0x9f, 0x99, 0x97, 0x92,
	0x5a, 0x01, 0x36, 0x9b, 0x33, 0x88, 0xa3, 0x24, 0x31, 0xdd, 0x13, 0xc4, 0x37, 0x8a, 0xe5, 0x62,
	0x4e, 0xad, 0x28, 0x11, 0x92, 0x46, 0xb2, 0xcc, 0x17, 0xc4, 0x0a, 0xc8, 0x2c, 0x48, 0x85, 0x1a,
	0x2e, 0x71, 0x71, 0xd1, 0x32, 0x2f, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x6d, 0x12, 0x9c, 0x14, 0x04,
	0x32, 0xd7, 0xa9, 0xe4, 0xc2, 0x43, 0x39, 0x86, 0x1b, 0x0f, 0xe5, 0x18, 0x3e, 0x3c, 0x94, 0x63,
	0x6c, 0x78, 0x24, 0xc7, 0xb8, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9,
	0x31, 0x3e, 0x78, 0x24, 0xc7, 0xf8, 0xe2, 0x91, 0x1c, 0xc3, 0x87, 0x47, 0x72, 0x8c, 0x13, 0x1e,
	0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x5d, 0x7a, 0x66, 0x49,
	0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x7a, 0x7e, 0x7e, 0x7a, 0x4e, 0x2a, 0x22, 0x70,
	0xf5, 0x09, 0xc7, 0x26, 0x20, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x42, 0xe4, 0xa9, 0xf2, 0x01, 0x00,
	0x00,
}

func (this *SyncSetInputStreamHandlerOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncSetInputStreamHandlerOptions)
	if !ok {
		that2, ok := that.(SyncSetInputStreamHandlerOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SyncSet) != len(that1.SyncSet) {
		return false
	}
	for i := range this.SyncSet {
		if !this.SyncSet[i].Equal(that1.SyncSet[i]) {
			return false
		}
	}
	return true
}
func (this *SyncSetInputStreamHandlerOptions_SyncSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncSetInputStreamHandlerOptions_SyncSet)
	if !ok {
		that2, ok := that.(SyncSetInputStreamHandlerOptions_SyncSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TagIndex) != len(that1.TagIndex) {
		return false
	}
	for i := range this.TagIndex {
		if this.TagIndex[i] != that1.TagIndex[i] {
			return false
		}
	}
	return true
}
func (this *SyncSetInputStreamHandlerOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&stream_handler.SyncSetInputStreamHandlerOptions{")
	if this.SyncSet != nil {
		s = append(s, "SyncSet: "+fmt.Sprintf("%#v", this.SyncSet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SyncSetInputStreamHandlerOptions_SyncSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&stream_handler.SyncSetInputStreamHandlerOptions_SyncSet{")
	if this.TagIndex != nil {
		s = append(s, "TagIndex: "+fmt.Sprintf("%#v", this.TagIndex)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSyncSetInputStreamHandler(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SyncSetInputStreamHandlerOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncSetInputStreamHandlerOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncSetInputStreamHandlerOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SyncSet) > 0 {
		for iNdEx := len(m.SyncSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SyncSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSyncSetInputStreamHandler(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SyncSetInputStreamHandlerOptions_SyncSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncSetInputStreamHandlerOptions_SyncSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncSetInputStreamHandlerOptions_SyncSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TagIndex) > 0 {
		for iNdEx := len(m.TagIndex) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TagIndex[iNdEx])
			copy(dAtA[i:], m.TagIndex[iNdEx])
			i = encodeVarintSyncSetInputStreamHandler(dAtA, i, uint64(len(m.TagIndex[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSyncSetInputStreamHandler(dAtA []byte, offset int, v uint64) int {
	offset -= sovSyncSetInputStreamHandler(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SyncSetInputStreamHandlerOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SyncSet) > 0 {
		for _, e := range m.SyncSet {
			l = e.Size()
			n += 1 + l + sovSyncSetInputStreamHandler(uint64(l))
		}
	}
	return n
}

func (m *SyncSetInputStreamHandlerOptions_SyncSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TagIndex) > 0 {
		for _, s := range m.TagIndex {
			l = len(s)
			n += 1 + l + sovSyncSetInputStreamHandler(uint64(l))
		}
	}
	return n
}

func sovSyncSetInputStreamHandler(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSyncSetInputStreamHandler(x uint64) (n int) {
	return sovSyncSetInputStreamHandler(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SyncSetInputStreamHandlerOptions) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSyncSet := "[]*SyncSetInputStreamHandlerOptions_SyncSet{"
	for _, f := range this.SyncSet {
		repeatedStringForSyncSet += strings.Replace(fmt.Sprintf("%v", f), "SyncSetInputStreamHandlerOptions_SyncSet", "SyncSetInputStreamHandlerOptions_SyncSet", 1) + ","
	}
	repeatedStringForSyncSet += "}"
	s := strings.Join([]string{`&SyncSetInputStreamHandlerOptions{`,
		`SyncSet:` + repeatedStringForSyncSet + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyncSetInputStreamHandlerOptions_SyncSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyncSetInputStreamHandlerOptions_SyncSet{`,
		`TagIndex:` + fmt.Sprintf("%v", this.TagIndex) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSyncSetInputStreamHandler(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SyncSetInputStreamHandlerOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyncSetInputStreamHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncSetInputStreamHandlerOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncSetInputStreamHandlerOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncSetInputStreamHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyncSetInputStreamHandler
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSyncSetInputStreamHandler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SyncSet = append(m.SyncSet, &SyncSetInputStreamHandlerOptions_SyncSet{})
			if err := m.SyncSet[len(m.SyncSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyncSetInputStreamHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSyncSetInputStreamHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncSetInputStreamHandlerOptions_SyncSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyncSetInputStreamHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncSetInputStreamHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyncSetInputStreamHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSyncSetInputStreamHandler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagIndex = append(m.TagIndex, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyncSetInputStreamHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSyncSetInputStreamHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSyncSetInputStreamHandler(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSyncSetInputStreamHandler
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyncSetInputStreamHandler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyncSetInputStreamHandler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSyncSetInputStreamHandler
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSyncSetInputStreamHandler
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSyncSetInputStreamHandler
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSyncSetInputStreamHandler        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSyncSetInputStreamHandler          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSyncSetInputStreamHandler = fmt.Errorf("proto: unexpected end of group")
)
