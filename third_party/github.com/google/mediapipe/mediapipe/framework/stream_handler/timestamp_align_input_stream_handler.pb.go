// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/stream_handler/timestamp_align_input_stream_handler.proto

package stream_handler

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TimestampAlignInputStreamHandlerOptions struct {
	TimestampBaseTagIndex string `protobuf:"bytes,1,opt,name=timestamp_base_tag_index,json=timestampBaseTagIndex" json:"timestamp_base_tag_index"`
}

func (m *TimestampAlignInputStreamHandlerOptions) Reset() {
	*m = TimestampAlignInputStreamHandlerOptions{}
}
func (*TimestampAlignInputStreamHandlerOptions) ProtoMessage() {}
func (*TimestampAlignInputStreamHandlerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_a00b009e1a1863ef, []int{0}
}
func (m *TimestampAlignInputStreamHandlerOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimestampAlignInputStreamHandlerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimestampAlignInputStreamHandlerOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimestampAlignInputStreamHandlerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimestampAlignInputStreamHandlerOptions.Merge(m, src)
}
func (m *TimestampAlignInputStreamHandlerOptions) XXX_Size() int {
	return m.Size()
}
func (m *TimestampAlignInputStreamHandlerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TimestampAlignInputStreamHandlerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TimestampAlignInputStreamHandlerOptions proto.InternalMessageInfo

func (m *TimestampAlignInputStreamHandlerOptions) GetTimestampBaseTagIndex() string {
	if m != nil {
		return m.TimestampBaseTagIndex
	}
	return ""
}

var E_TimestampAlignInputStreamHandlerOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.MediaPipeOptions)(nil),
	ExtensionType: (*TimestampAlignInputStreamHandlerOptions)(nil),
	Field:         190104979,
	Name:          "mediapipe.TimestampAlignInputStreamHandlerOptions.ext",
	Tag:           "bytes,190104979,opt,name=ext",
	Filename:      "mediapipe/framework/stream_handler/timestamp_align_input_stream_handler.proto",
}

func init() {
	proto.RegisterExtension(E_TimestampAlignInputStreamHandlerOptions_Ext)
	proto.RegisterType((*TimestampAlignInputStreamHandlerOptions)(nil), "mediapipe.TimestampAlignInputStreamHandlerOptions")
}

func init() {
	proto.RegisterFile("mediapipe/framework/stream_handler/timestamp_align_input_stream_handler.proto", fileDescriptor_a00b009e1a1863ef)
}

var fileDescriptor_a00b009e1a1863ef = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x31, 0x4b, 0x03, 0x31,
	0x18, 0x86, 0x13, 0x74, 0xe9, 0xb9, 0x15, 0x84, 0xa2, 0xf0, 0x59, 0x5c, 0x2c, 0x08, 0x77, 0xd0,
	0x5d, 0xc1, 0x4e, 0x76, 0x28, 0x4a, 0xed, 0xd4, 0x25, 0xa4, 0xde, 0x67, 0x1a, 0xbc, 0x5c, 0xc2,
	0x5d, 0x8a, 0x1d, 0xdd, 0x5d, 0x04, 0xff, 0x84, 0x3f, 0xa5, 0x93, 0x1c, 0xb8, 0x74, 0x12, 0x2f,
	0xb7, 0x38, 0xf6, 0x27, 0xc8, 0x79, 0x7a, 0x55, 0x10, 0x74, 0x0b, 0xe1, 0x79, 0xdf, 0xe7, 0x25,
	0xf1, 0x06, 0x0a, 0x43, 0xc9, 0x8d, 0x34, 0x18, 0x5c, 0x25, 0x5c, 0xe1, 0x8d, 0x4e, 0xae, 0x83,
	0xd4, 0x26, 0xc8, 0x15, 0x9b, 0xf2, 0x38, 0x8c, 0x30, 0x09, 0xac, 0x54, 0x98, 0x5a, 0xae, 0x0c,
	0xe3, 0x91, 0x14, 0x31, 0x93, 0xb1, 0x99, 0x59, 0xf6, 0x13, 0xf2, 0x4d, 0xa2, 0xad, 0x6e, 0x36,
	0xea, 0xba, 0x9d, 0xc3, 0xdf, 0x9a, 0xeb, 0x3b, 0xa6, 0x8d, 0x95, 0x3a, 0x4e, 0xab, 0xdc, 0xfe,
	0x13, 0xf5, 0x0e, 0x46, 0x5f, 0x9a, 0x93, 0xd2, 0xd2, 0x2f, 0x25, 0x17, 0x1f, 0x8e, 0xd3, 0x4a,
	0x71, 0x56, 0x25, 0x9a, 0x47, 0x5e, 0x6b, 0xbd, 0x68, 0xc2, 0x53, 0x64, 0x96, 0x0b, 0x26, 0xe3,
	0x10, 0xe7, 0x2d, 0xda, 0xa6, 0x9d, 0x46, 0x6f, 0x73, 0xf1, 0xb2, 0x47, 0x86, 0xdb, 0x35, 0xd5,
	0xe3, 0x29, 0x8e, 0xb8, 0xe8, 0x97, 0x48, 0x37, 0xf4, 0x36, 0x70, 0x6e, 0x9b, 0xbb, 0x7e, 0xbd,
	0xc5, 0x1f, 0x94, 0xa7, 0x73, 0x69, 0xf0, 0x53, 0xd1, 0x7a, 0xb8, 0x7b, 0x1e, 0xb7, 0x69, 0x67,
	0xab, 0xdb, 0xfd, 0x46, 0xfd, 0x73, 0xdf, 0xb0, 0xac, 0xef, 0xd9, 0x2c, 0x07, 0xb2, 0xcc, 0x81,
	0xac, 0x72, 0xa0, 0xb7, 0x0e, 0xe8, 0xa3, 0x03, 0xba, 0x70, 0x40, 0x33, 0x07, 0xf4, 0xd5, 0x01,
	0x7d, 0x73, 0x40, 0x56, 0x0e, 0xe8, 0x7d, 0x01, 0x24, 0x2b, 0x80, 0x2c, 0x0b, 0x20, 0xe3, 0x63,
	0x21, 0xed, 0x74, 0x36, 0xf1, 0x2f, 0xb5, 0x0a, 0x84, 0xd6, 0x22, 0xc2, 0xf5, 0x8b, 0x05, 0x7f,
	0xff, 0xd4, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x46, 0x67, 0x3b, 0xce, 0x01, 0x00, 0x00,
}

func (this *TimestampAlignInputStreamHandlerOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimestampAlignInputStreamHandlerOptions)
	if !ok {
		that2, ok := that.(TimestampAlignInputStreamHandlerOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimestampBaseTagIndex != that1.TimestampBaseTagIndex {
		return false
	}
	return true
}
func (this *TimestampAlignInputStreamHandlerOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&stream_handler.TimestampAlignInputStreamHandlerOptions{")
	s = append(s, "TimestampBaseTagIndex: "+fmt.Sprintf("%#v", this.TimestampBaseTagIndex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTimestampAlignInputStreamHandler(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TimestampAlignInputStreamHandlerOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimestampAlignInputStreamHandlerOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimestampAlignInputStreamHandlerOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.TimestampBaseTagIndex)
	copy(dAtA[i:], m.TimestampBaseTagIndex)
	i = encodeVarintTimestampAlignInputStreamHandler(dAtA, i, uint64(len(m.TimestampBaseTagIndex)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTimestampAlignInputStreamHandler(dAtA []byte, offset int, v uint64) int {
	offset -= sovTimestampAlignInputStreamHandler(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TimestampAlignInputStreamHandlerOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TimestampBaseTagIndex)
	n += 1 + l + sovTimestampAlignInputStreamHandler(uint64(l))
	return n
}

func sovTimestampAlignInputStreamHandler(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTimestampAlignInputStreamHandler(x uint64) (n int) {
	return sovTimestampAlignInputStreamHandler(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TimestampAlignInputStreamHandlerOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimestampAlignInputStreamHandlerOptions{`,
		`TimestampBaseTagIndex:` + fmt.Sprintf("%v", this.TimestampBaseTagIndex) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTimestampAlignInputStreamHandler(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TimestampAlignInputStreamHandlerOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimestampAlignInputStreamHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimestampAlignInputStreamHandlerOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimestampAlignInputStreamHandlerOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampBaseTagIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestampAlignInputStreamHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimestampAlignInputStreamHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimestampAlignInputStreamHandler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimestampBaseTagIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimestampAlignInputStreamHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimestampAlignInputStreamHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTimestampAlignInputStreamHandler(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTimestampAlignInputStreamHandler
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimestampAlignInputStreamHandler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimestampAlignInputStreamHandler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTimestampAlignInputStreamHandler
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTimestampAlignInputStreamHandler
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTimestampAlignInputStreamHandler
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTimestampAlignInputStreamHandler        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTimestampAlignInputStreamHandler          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTimestampAlignInputStreamHandler = fmt.Errorf("proto: unexpected end of group")
)
