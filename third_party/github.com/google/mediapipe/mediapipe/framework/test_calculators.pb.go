// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/test_calculators.proto

package framework

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RandomMatrixCalculatorOptions struct {
	Rows           int32 `protobuf:"varint,1,opt,name=rows" json:"rows"`
	Cols           int32 `protobuf:"varint,2,opt,name=cols" json:"cols"`
	StartTimestamp int64 `protobuf:"varint,3,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp"`
	LimitTimestamp int64 `protobuf:"varint,4,opt,name=limit_timestamp,json=limitTimestamp" json:"limit_timestamp"`
	TimestampStep  int64 `protobuf:"varint,5,opt,name=timestamp_step,json=timestampStep" json:"timestamp_step"`
}

func (m *RandomMatrixCalculatorOptions) Reset()      { *m = RandomMatrixCalculatorOptions{} }
func (*RandomMatrixCalculatorOptions) ProtoMessage() {}
func (*RandomMatrixCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ad5c815ef3508f0, []int{0}
}
func (m *RandomMatrixCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RandomMatrixCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RandomMatrixCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RandomMatrixCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RandomMatrixCalculatorOptions.Merge(m, src)
}
func (m *RandomMatrixCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *RandomMatrixCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RandomMatrixCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RandomMatrixCalculatorOptions proto.InternalMessageInfo

func (m *RandomMatrixCalculatorOptions) GetRows() int32 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *RandomMatrixCalculatorOptions) GetCols() int32 {
	if m != nil {
		return m.Cols
	}
	return 0
}

func (m *RandomMatrixCalculatorOptions) GetStartTimestamp() int64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

func (m *RandomMatrixCalculatorOptions) GetLimitTimestamp() int64 {
	if m != nil {
		return m.LimitTimestamp
	}
	return 0
}

func (m *RandomMatrixCalculatorOptions) GetTimestampStep() int64 {
	if m != nil {
		return m.TimestampStep
	}
	return 0
}

var E_RandomMatrixCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*CalculatorOptions)(nil),
	ExtensionType: (*RandomMatrixCalculatorOptions)(nil),
	Field:         52056136,
	Name:          "mediapipe.RandomMatrixCalculatorOptions.ext",
	Tag:           "bytes,52056136,opt,name=ext",
	Filename:      "mediapipe/framework/test_calculators.proto",
}

func init() {
	proto.RegisterExtension(E_RandomMatrixCalculatorOptions_Ext)
	proto.RegisterType((*RandomMatrixCalculatorOptions)(nil), "mediapipe.RandomMatrixCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/framework/test_calculators.proto", fileDescriptor_9ad5c815ef3508f0)
}

var fileDescriptor_9ad5c815ef3508f0 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xd1, 0x3f, 0x4a, 0x3b, 0x41,
	0x14, 0x07, 0xf0, 0x99, 0xfc, 0x29, 0x7e, 0xfb, 0xc3, 0x08, 0x5b, 0x0d, 0xa2, 0xcf, 0x20, 0x16,
	0x8b, 0xe2, 0x2e, 0xe4, 0x08, 0xb1, 0x16, 0x21, 0x5a, 0x69, 0x11, 0xc6, 0xcd, 0x18, 0x07, 0x77,
	0x32, 0xc3, 0xcc, 0x0b, 0x49, 0xe9, 0x11, 0x3c, 0x82, 0xa5, 0x77, 0xf0, 0x02, 0x29, 0x53, 0xa6,
	0x12, 0x33, 0x69, 0xb4, 0xcb, 0x11, 0x64, 0xa3, 0x6e, 0x16, 0x0c, 0xb6, 0xef, 0xfb, 0xf9, 0x0e,
	0xcc, 0x7b, 0xc1, 0x91, 0x12, 0x3d, 0xc9, 0x8d, 0x34, 0x22, 0xb9, 0xb5, 0x5c, 0x89, 0x91, 0xb6,
	0xf7, 0x09, 0x0a, 0x87, 0xdd, 0x94, 0x67, 0xe9, 0x30, 0xe3, 0xa8, 0xad, 0x8b, 0x8d, 0xd5, 0xa8,
	0xc3, 0x7f, 0x85, 0xdd, 0x39, 0xdc, 0x54, 0x5b, 0x37, 0xbe, 0x0a, 0x07, 0x2f, 0x95, 0x60, 0xaf,
	0xc3, 0x07, 0x3d, 0xad, 0xce, 0x38, 0x5a, 0x39, 0x3e, 0x2d, 0xc0, 0xb9, 0x41, 0xa9, 0x07, 0x2e,
	0x64, 0x41, 0xcd, 0xea, 0x91, 0x63, 0xb4, 0x49, 0xa3, 0x7a, 0xbb, 0x36, 0x79, 0xdd, 0x27, 0x9d,
	0xd5, 0x24, 0x4f, 0x52, 0x9d, 0x39, 0x56, 0x29, 0x27, 0xf9, 0x24, 0x3c, 0x09, 0xb6, 0x1d, 0x72,
	0x8b, 0x5d, 0x94, 0x4a, 0x38, 0xe4, 0xca, 0xb0, 0x6a, 0x93, 0x46, 0xd5, 0x6f, 0xd4, 0x58, 0x85,
	0x97, 0x3f, 0x59, 0xce, 0x33, 0xa9, 0x64, 0x99, 0xd7, 0xca, 0x7c, 0x15, 0xae, 0xf9, 0x71, 0xd0,
	0x28, 0x60, 0xd7, 0xa1, 0x30, 0xac, 0x5e, 0xd2, 0x5b, 0x45, 0x76, 0x81, 0xc2, 0xb4, 0xae, 0x83,
	0xaa, 0x18, 0x63, 0xb8, 0x1b, 0x17, 0xeb, 0x88, 0x7f, 0xfd, 0x91, 0x4d, 0x9e, 0x3e, 0x58, 0x93,
	0x46, 0xff, 0x5b, 0x51, 0x89, 0xfd, 0xb9, 0x96, 0x4e, 0xfe, 0x6a, 0x5b, 0x4c, 0xe7, 0x40, 0x66,
	0x73, 0x20, 0xcb, 0x39, 0xd0, 0x07, 0x0f, 0xf4, 0xd9, 0x03, 0x9d, 0x78, 0xa0, 0x53, 0x0f, 0xf4,
	0xcd, 0x03, 0x7d, 0xf7, 0x40, 0x96, 0x1e, 0xe8, 0xe3, 0x02, 0xc8, 0x74, 0x01, 0x64, 0xb6, 0x00,
	0x72, 0x95, 0xf4, 0x25, 0xde, 0x0d, 0x6f, 0xe2, 0x54, 0xab, 0xa4, 0xaf, 0x75, 0x3f, 0x13, 0xc9,
	0xfa, 0x56, 0x1b, 0xae, 0xf6, 0x19, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x7d, 0xcf, 0xdd, 0x02, 0x02,
	0x00, 0x00,
}

func (this *RandomMatrixCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RandomMatrixCalculatorOptions)
	if !ok {
		that2, ok := that.(RandomMatrixCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rows != that1.Rows {
		return false
	}
	if this.Cols != that1.Cols {
		return false
	}
	if this.StartTimestamp != that1.StartTimestamp {
		return false
	}
	if this.LimitTimestamp != that1.LimitTimestamp {
		return false
	}
	if this.TimestampStep != that1.TimestampStep {
		return false
	}
	return true
}
func (this *RandomMatrixCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&framework.RandomMatrixCalculatorOptions{")
	s = append(s, "Rows: "+fmt.Sprintf("%#v", this.Rows)+",\n")
	s = append(s, "Cols: "+fmt.Sprintf("%#v", this.Cols)+",\n")
	s = append(s, "StartTimestamp: "+fmt.Sprintf("%#v", this.StartTimestamp)+",\n")
	s = append(s, "LimitTimestamp: "+fmt.Sprintf("%#v", this.LimitTimestamp)+",\n")
	s = append(s, "TimestampStep: "+fmt.Sprintf("%#v", this.TimestampStep)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTestCalculators(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RandomMatrixCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomMatrixCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RandomMatrixCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintTestCalculators(dAtA, i, uint64(m.TimestampStep))
	i--
	dAtA[i] = 0x28
	i = encodeVarintTestCalculators(dAtA, i, uint64(m.LimitTimestamp))
	i--
	dAtA[i] = 0x20
	i = encodeVarintTestCalculators(dAtA, i, uint64(m.StartTimestamp))
	i--
	dAtA[i] = 0x18
	i = encodeVarintTestCalculators(dAtA, i, uint64(m.Cols))
	i--
	dAtA[i] = 0x10
	i = encodeVarintTestCalculators(dAtA, i, uint64(m.Rows))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintTestCalculators(dAtA []byte, offset int, v uint64) int {
	offset -= sovTestCalculators(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RandomMatrixCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTestCalculators(uint64(m.Rows))
	n += 1 + sovTestCalculators(uint64(m.Cols))
	n += 1 + sovTestCalculators(uint64(m.StartTimestamp))
	n += 1 + sovTestCalculators(uint64(m.LimitTimestamp))
	n += 1 + sovTestCalculators(uint64(m.TimestampStep))
	return n
}

func sovTestCalculators(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTestCalculators(x uint64) (n int) {
	return sovTestCalculators(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RandomMatrixCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RandomMatrixCalculatorOptions{`,
		`Rows:` + fmt.Sprintf("%v", this.Rows) + `,`,
		`Cols:` + fmt.Sprintf("%v", this.Cols) + `,`,
		`StartTimestamp:` + fmt.Sprintf("%v", this.StartTimestamp) + `,`,
		`LimitTimestamp:` + fmt.Sprintf("%v", this.LimitTimestamp) + `,`,
		`TimestampStep:` + fmt.Sprintf("%v", this.TimestampStep) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTestCalculators(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RandomMatrixCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestCalculators
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RandomMatrixCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RandomMatrixCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestCalculators
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cols", wireType)
			}
			m.Cols = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestCalculators
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cols |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			m.StartTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestCalculators
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitTimestamp", wireType)
			}
			m.LimitTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestCalculators
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimitTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampStep", wireType)
			}
			m.TimestampStep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestCalculators
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampStep |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTestCalculators(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestCalculators
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTestCalculators(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTestCalculators
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestCalculators
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestCalculators
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTestCalculators
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTestCalculators
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTestCalculators
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTestCalculators        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTestCalculators          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTestCalculators = fmt.Errorf("proto: unexpected end of group")
)
