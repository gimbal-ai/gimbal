// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/tool/calculator_graph_template.proto

package tool

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	deps "github.com/google/mediapipe/mediapipe/framework/deps"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TemplateExpression struct {
	Param      string                           `protobuf:"bytes,1,opt,name=param" json:"param"`
	Op         string                           `protobuf:"bytes,2,opt,name=op" json:"op"`
	Arg        []*TemplateExpression            `protobuf:"bytes,3,rep,name=arg" json:"arg,omitempty"`
	Path       string                           `protobuf:"bytes,4,opt,name=path" json:"path"`
	FieldType  deps.FieldDescriptorProto_Type   `protobuf:"varint,5,opt,name=field_type,json=fieldType,enum=mediapipe.FieldDescriptorProto_Type" json:"field_type"`
	KeyType    []deps.FieldDescriptorProto_Type `protobuf:"varint,6,rep,name=key_type,json=keyType,enum=mediapipe.FieldDescriptorProto_Type" json:"key_type,omitempty"`
	FieldValue string                           `protobuf:"bytes,7,opt,name=field_value,json=fieldValue" json:"field_value"`
}

func (m *TemplateExpression) Reset()      { *m = TemplateExpression{} }
func (*TemplateExpression) ProtoMessage() {}
func (*TemplateExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_98a77afbdf545bd0, []int{0}
}
func (m *TemplateExpression) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TemplateExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TemplateExpression.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TemplateExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemplateExpression.Merge(m, src)
}
func (m *TemplateExpression) XXX_Size() int {
	return m.Size()
}
func (m *TemplateExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_TemplateExpression.DiscardUnknown(m)
}

var xxx_messageInfo_TemplateExpression proto.InternalMessageInfo

func (m *TemplateExpression) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *TemplateExpression) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *TemplateExpression) GetArg() []*TemplateExpression {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (m *TemplateExpression) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *TemplateExpression) GetFieldType() deps.FieldDescriptorProto_Type {
	if m != nil {
		return m.FieldType
	}
	return deps.TYPE_INVALID
}

func (m *TemplateExpression) GetKeyType() []deps.FieldDescriptorProto_Type {
	if m != nil {
		return m.KeyType
	}
	return nil
}

func (m *TemplateExpression) GetFieldValue() string {
	if m != nil {
		return m.FieldValue
	}
	return ""
}

type CalculatorGraphTemplate struct {
	Config *framework.CalculatorGraphConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	Rule   []*TemplateExpression            `protobuf:"bytes,2,rep,name=rule" json:"rule,omitempty"`
}

func (m *CalculatorGraphTemplate) Reset()      { *m = CalculatorGraphTemplate{} }
func (*CalculatorGraphTemplate) ProtoMessage() {}
func (*CalculatorGraphTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_98a77afbdf545bd0, []int{1}
}
func (m *CalculatorGraphTemplate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalculatorGraphTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalculatorGraphTemplate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalculatorGraphTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculatorGraphTemplate.Merge(m, src)
}
func (m *CalculatorGraphTemplate) XXX_Size() int {
	return m.Size()
}
func (m *CalculatorGraphTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculatorGraphTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_CalculatorGraphTemplate proto.InternalMessageInfo

func (m *CalculatorGraphTemplate) GetConfig() *framework.CalculatorGraphConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *CalculatorGraphTemplate) GetRule() []*TemplateExpression {
	if m != nil {
		return m.Rule
	}
	return nil
}

type TemplateSubgraphOptions struct {
	Dict *TemplateDict `protobuf:"bytes,1,opt,name=dict" json:"dict,omitempty"`
}

func (m *TemplateSubgraphOptions) Reset()      { *m = TemplateSubgraphOptions{} }
func (*TemplateSubgraphOptions) ProtoMessage() {}
func (*TemplateSubgraphOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_98a77afbdf545bd0, []int{2}
}
func (m *TemplateSubgraphOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TemplateSubgraphOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TemplateSubgraphOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TemplateSubgraphOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemplateSubgraphOptions.Merge(m, src)
}
func (m *TemplateSubgraphOptions) XXX_Size() int {
	return m.Size()
}
func (m *TemplateSubgraphOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TemplateSubgraphOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TemplateSubgraphOptions proto.InternalMessageInfo

func (m *TemplateSubgraphOptions) GetDict() *TemplateDict {
	if m != nil {
		return m.Dict
	}
	return nil
}

var E_TemplateSubgraphOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*TemplateSubgraphOptions)(nil),
	Field:         172998261,
	Name:          "mediapipe.TemplateSubgraphOptions.ext",
	Tag:           "bytes,172998261,opt,name=ext",
	Filename:      "mediapipe/framework/tool/calculator_graph_template.proto",
}

func init() {
	proto.RegisterType((*TemplateExpression)(nil), "mediapipe.TemplateExpression")
	proto.RegisterType((*CalculatorGraphTemplate)(nil), "mediapipe.CalculatorGraphTemplate")
	proto.RegisterExtension(E_TemplateSubgraphOptions_Ext)
	proto.RegisterType((*TemplateSubgraphOptions)(nil), "mediapipe.TemplateSubgraphOptions")
}

func init() {
	proto.RegisterFile("mediapipe/framework/tool/calculator_graph_template.proto", fileDescriptor_98a77afbdf545bd0)
}

var fileDescriptor_98a77afbdf545bd0 = []byte{
	// 523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xb1, 0x6f, 0xd3, 0x40,
	0x14, 0xc6, 0x7d, 0x89, 0xdb, 0xd2, 0x8b, 0xc4, 0x70, 0x42, 0x8a, 0x15, 0xc1, 0x61, 0x45, 0x45,
	0x8a, 0x04, 0xb2, 0x45, 0xc4, 0xd0, 0x0d, 0x91, 0x16, 0x10, 0x13, 0xc8, 0x14, 0x06, 0x16, 0xeb,
	0x6a, 0x5f, 0x9c, 0x53, 0xec, 0xdc, 0xe9, 0x7c, 0x86, 0x66, 0x63, 0x62, 0x66, 0x46, 0x62, 0xe7,
	0xaf, 0x60, 0x62, 0xe8, 0x98, 0xb1, 0x13, 0x22, 0xce, 0xc2, 0xd8, 0x85, 0x8d, 0x01, 0xf9, 0xec,
	0xa6, 0xa6, 0x18, 0x54, 0xd6, 0xf7, 0xbe, 0xf7, 0xbb, 0xef, 0x7d, 0x77, 0x07, 0x77, 0x13, 0x1a,
	0x32, 0x22, 0x98, 0xa0, 0xee, 0x58, 0x92, 0x84, 0xbe, 0xe1, 0x72, 0xea, 0x2a, 0xce, 0x63, 0x37,
	0x20, 0x71, 0x90, 0xc5, 0x44, 0x71, 0xe9, 0x47, 0x92, 0x88, 0x89, 0xaf, 0x68, 0x22, 0x62, 0xa2,
	0xa8, 0x23, 0x24, 0x57, 0x1c, 0x6d, 0xaf, 0x27, 0x7b, 0x3b, 0x4d, 0x90, 0xf3, 0xf9, 0x72, 0xa0,
	0x77, 0xe7, 0xdf, 0x2a, 0x9f, 0x0b, 0xc5, 0xf8, 0x2c, 0xad, 0xd4, 0x6e, 0x93, 0x3a, 0xa4, 0x22,
	0x75, 0x75, 0xdf, 0x0f, 0x69, 0x1a, 0x48, 0x26, 0xce, 0xf1, 0x0f, 0xfe, 0x7f, 0x13, 0x9f, 0xc8,
	0x28, 0x4b, 0xe8, 0x4c, 0x95, 0x88, 0xfe, 0x97, 0x16, 0x44, 0x07, 0x55, 0xef, 0xe1, 0x91, 0x90,
	0x34, 0x4d, 0x19, 0x9f, 0xa1, 0x1e, 0xdc, 0x10, 0x44, 0x92, 0xc4, 0x02, 0x36, 0x18, 0x6c, 0x8f,
	0xcc, 0xe3, 0xaf, 0x37, 0x0d, 0xaf, 0x2c, 0xa1, 0x6b, 0xb0, 0xc5, 0x85, 0xd5, 0xaa, 0x35, 0x5a,
	0x5c, 0x20, 0x17, 0xb6, 0x89, 0x8c, 0xac, 0xb6, 0xdd, 0x1e, 0x74, 0x86, 0x37, 0x9c, 0xb5, 0x33,
	0xe7, 0x4f, 0xba, 0x57, 0x28, 0x91, 0x05, 0x4d, 0x41, 0xd4, 0xc4, 0x32, 0x6b, 0x20, 0x5d, 0x41,
	0x4f, 0x20, 0x1c, 0x33, 0x1a, 0x87, 0xbe, 0x9a, 0x0b, 0x6a, 0x6d, 0xd8, 0x60, 0x70, 0x75, 0xb8,
	0x53, 0x23, 0x3e, 0x2a, 0x9a, 0xfb, 0xeb, 0x30, 0x9e, 0x15, 0x8b, 0x38, 0x07, 0x73, 0x41, 0x2b,
	0xca, 0xb6, 0x9e, 0x2e, 0x0a, 0xe8, 0x3e, 0xbc, 0x32, 0xa5, 0xf3, 0x12, 0xb4, 0x69, 0xb7, 0x2f,
	0x0b, 0xf2, 0xb6, 0xa6, 0x74, 0xae, 0x01, 0xb7, 0x60, 0xa7, 0xf4, 0xf2, 0x9a, 0xc4, 0x19, 0xb5,
	0xb6, 0x6a, 0x66, 0x4b, 0x93, 0x2f, 0x8b, 0x7a, 0xff, 0x1d, 0x80, 0xdd, 0xbd, 0x75, 0xe6, 0x8f,
	0x8b, 0xc8, 0xcf, 0xf6, 0x46, 0xbb, 0x70, 0x33, 0xe0, 0xb3, 0x31, 0x8b, 0x74, 0x98, 0x9d, 0xa1,
	0x5d, 0x73, 0x70, 0x61, 0x66, 0x4f, 0xeb, 0xbc, 0x4a, 0x8f, 0xee, 0x42, 0x53, 0x66, 0x31, 0xb5,
	0x5a, 0x97, 0x09, 0x55, 0x4b, 0xfb, 0x1f, 0x01, 0xec, 0x9e, 0x35, 0x9f, 0x67, 0x87, 0xfa, 0xf2,
	0x9f, 0x96, 0xaf, 0x0c, 0xdd, 0x86, 0x66, 0xc8, 0x02, 0x55, 0xd9, 0xe8, 0x36, 0xe0, 0xf6, 0x59,
	0xa0, 0x3c, 0x2d, 0x1a, 0xbe, 0x80, 0x6d, 0x7a, 0xa4, 0xd0, 0xf5, 0x46, 0xb3, 0x15, 0xd1, 0xfa,
	0xf1, 0xf3, 0xb3, 0xa7, 0x61, 0xfd, 0x06, 0xd8, 0x85, 0xe3, 0xbd, 0x82, 0x37, 0xfa, 0x00, 0x16,
	0x4b, 0x6c, 0x9c, 0x2c, 0xb1, 0x71, 0xba, 0xc4, 0xe0, 0x6d, 0x8e, 0xc1, 0xa7, 0x1c, 0x83, 0xe3,
	0x1c, 0x83, 0x45, 0x8e, 0xc1, 0xb7, 0x1c, 0x83, 0xef, 0x39, 0x36, 0x4e, 0x73, 0x0c, 0xde, 0xaf,
	0xb0, 0xb1, 0x58, 0x61, 0xe3, 0x64, 0x85, 0x0d, 0xd8, 0x0b, 0x78, 0xe2, 0x44, 0x9c, 0x47, 0x31,
	0xad, 0x9d, 0xa4, 0x9f, 0xf0, 0x08, 0xfd, 0x16, 0xb7, 0xbe, 0xc4, 0x57, 0xf7, 0x22, 0xa6, 0x26,
	0xd9, 0xa1, 0x13, 0xf0, 0xc4, 0x2d, 0xc7, 0x6a, 0x9f, 0xeb, 0x6f, 0xbf, 0xe6, 0x57, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x9d, 0x6c, 0xb4, 0xc1, 0x1a, 0x04, 0x00, 0x00,
}

func (this *TemplateExpression) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TemplateExpression)
	if !ok {
		that2, ok := that.(TemplateExpression)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Param != that1.Param {
		return false
	}
	if this.Op != that1.Op {
		return false
	}
	if len(this.Arg) != len(that1.Arg) {
		return false
	}
	for i := range this.Arg {
		if !this.Arg[i].Equal(that1.Arg[i]) {
			return false
		}
	}
	if this.Path != that1.Path {
		return false
	}
	if this.FieldType != that1.FieldType {
		return false
	}
	if len(this.KeyType) != len(that1.KeyType) {
		return false
	}
	for i := range this.KeyType {
		if this.KeyType[i] != that1.KeyType[i] {
			return false
		}
	}
	if this.FieldValue != that1.FieldValue {
		return false
	}
	return true
}
func (this *CalculatorGraphTemplate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CalculatorGraphTemplate)
	if !ok {
		that2, ok := that.(CalculatorGraphTemplate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if len(this.Rule) != len(that1.Rule) {
		return false
	}
	for i := range this.Rule {
		if !this.Rule[i].Equal(that1.Rule[i]) {
			return false
		}
	}
	return true
}
func (this *TemplateSubgraphOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TemplateSubgraphOptions)
	if !ok {
		that2, ok := that.(TemplateSubgraphOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Dict.Equal(that1.Dict) {
		return false
	}
	return true
}
func (this *TemplateExpression) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&tool.TemplateExpression{")
	s = append(s, "Param: "+fmt.Sprintf("%#v", this.Param)+",\n")
	s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	if this.Arg != nil {
		s = append(s, "Arg: "+fmt.Sprintf("%#v", this.Arg)+",\n")
	}
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "FieldType: "+fmt.Sprintf("%#v", this.FieldType)+",\n")
	if this.KeyType != nil {
		s = append(s, "KeyType: "+fmt.Sprintf("%#v", this.KeyType)+",\n")
	}
	s = append(s, "FieldValue: "+fmt.Sprintf("%#v", this.FieldValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CalculatorGraphTemplate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tool.CalculatorGraphTemplate{")
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	if this.Rule != nil {
		s = append(s, "Rule: "+fmt.Sprintf("%#v", this.Rule)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TemplateSubgraphOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tool.TemplateSubgraphOptions{")
	if this.Dict != nil {
		s = append(s, "Dict: "+fmt.Sprintf("%#v", this.Dict)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCalculatorGraphTemplate(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TemplateExpression) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TemplateExpression) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TemplateExpression) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.FieldValue)
	copy(dAtA[i:], m.FieldValue)
	i = encodeVarintCalculatorGraphTemplate(dAtA, i, uint64(len(m.FieldValue)))
	i--
	dAtA[i] = 0x3a
	if len(m.KeyType) > 0 {
		for iNdEx := len(m.KeyType) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCalculatorGraphTemplate(dAtA, i, uint64(m.KeyType[iNdEx]))
			i--
			dAtA[i] = 0x30
		}
	}
	i = encodeVarintCalculatorGraphTemplate(dAtA, i, uint64(m.FieldType))
	i--
	dAtA[i] = 0x28
	i -= len(m.Path)
	copy(dAtA[i:], m.Path)
	i = encodeVarintCalculatorGraphTemplate(dAtA, i, uint64(len(m.Path)))
	i--
	dAtA[i] = 0x22
	if len(m.Arg) > 0 {
		for iNdEx := len(m.Arg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Arg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCalculatorGraphTemplate(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.Op)
	copy(dAtA[i:], m.Op)
	i = encodeVarintCalculatorGraphTemplate(dAtA, i, uint64(len(m.Op)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Param)
	copy(dAtA[i:], m.Param)
	i = encodeVarintCalculatorGraphTemplate(dAtA, i, uint64(len(m.Param)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CalculatorGraphTemplate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculatorGraphTemplate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalculatorGraphTemplate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rule) > 0 {
		for iNdEx := len(m.Rule) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rule[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCalculatorGraphTemplate(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalculatorGraphTemplate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TemplateSubgraphOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TemplateSubgraphOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TemplateSubgraphOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Dict != nil {
		{
			size, err := m.Dict.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalculatorGraphTemplate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCalculatorGraphTemplate(dAtA []byte, offset int, v uint64) int {
	offset -= sovCalculatorGraphTemplate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TemplateExpression) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Param)
	n += 1 + l + sovCalculatorGraphTemplate(uint64(l))
	l = len(m.Op)
	n += 1 + l + sovCalculatorGraphTemplate(uint64(l))
	if len(m.Arg) > 0 {
		for _, e := range m.Arg {
			l = e.Size()
			n += 1 + l + sovCalculatorGraphTemplate(uint64(l))
		}
	}
	l = len(m.Path)
	n += 1 + l + sovCalculatorGraphTemplate(uint64(l))
	n += 1 + sovCalculatorGraphTemplate(uint64(m.FieldType))
	if len(m.KeyType) > 0 {
		for _, e := range m.KeyType {
			n += 1 + sovCalculatorGraphTemplate(uint64(e))
		}
	}
	l = len(m.FieldValue)
	n += 1 + l + sovCalculatorGraphTemplate(uint64(l))
	return n
}

func (m *CalculatorGraphTemplate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovCalculatorGraphTemplate(uint64(l))
	}
	if len(m.Rule) > 0 {
		for _, e := range m.Rule {
			l = e.Size()
			n += 1 + l + sovCalculatorGraphTemplate(uint64(l))
		}
	}
	return n
}

func (m *TemplateSubgraphOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dict != nil {
		l = m.Dict.Size()
		n += 1 + l + sovCalculatorGraphTemplate(uint64(l))
	}
	return n
}

func sovCalculatorGraphTemplate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCalculatorGraphTemplate(x uint64) (n int) {
	return sovCalculatorGraphTemplate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TemplateExpression) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArg := "[]*TemplateExpression{"
	for _, f := range this.Arg {
		repeatedStringForArg += strings.Replace(f.String(), "TemplateExpression", "TemplateExpression", 1) + ","
	}
	repeatedStringForArg += "}"
	s := strings.Join([]string{`&TemplateExpression{`,
		`Param:` + fmt.Sprintf("%v", this.Param) + `,`,
		`Op:` + fmt.Sprintf("%v", this.Op) + `,`,
		`Arg:` + repeatedStringForArg + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`FieldType:` + fmt.Sprintf("%v", this.FieldType) + `,`,
		`KeyType:` + fmt.Sprintf("%v", this.KeyType) + `,`,
		`FieldValue:` + fmt.Sprintf("%v", this.FieldValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CalculatorGraphTemplate) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRule := "[]*TemplateExpression{"
	for _, f := range this.Rule {
		repeatedStringForRule += strings.Replace(f.String(), "TemplateExpression", "TemplateExpression", 1) + ","
	}
	repeatedStringForRule += "}"
	s := strings.Join([]string{`&CalculatorGraphTemplate{`,
		`Config:` + strings.Replace(fmt.Sprintf("%v", this.Config), "CalculatorGraphConfig", "framework.CalculatorGraphConfig", 1) + `,`,
		`Rule:` + repeatedStringForRule + `,`,
		`}`,
	}, "")
	return s
}
func (this *TemplateSubgraphOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TemplateSubgraphOptions{`,
		`Dict:` + strings.Replace(fmt.Sprintf("%v", this.Dict), "TemplateDict", "TemplateDict", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCalculatorGraphTemplate(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TemplateExpression) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculatorGraphTemplate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TemplateExpression: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TemplateExpression: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorGraphTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorGraphTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Op = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorGraphTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arg = append(m.Arg, &TemplateExpression{})
			if err := m.Arg[len(m.Arg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorGraphTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldType", wireType)
			}
			m.FieldType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorGraphTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldType |= deps.FieldDescriptorProto_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v deps.FieldDescriptorProto_Type
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCalculatorGraphTemplate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= deps.FieldDescriptorProto_Type(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyType = append(m.KeyType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCalculatorGraphTemplate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCalculatorGraphTemplate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCalculatorGraphTemplate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.KeyType) == 0 {
					m.KeyType = make([]deps.FieldDescriptorProto_Type, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v deps.FieldDescriptorProto_Type
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCalculatorGraphTemplate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= deps.FieldDescriptorProto_Type(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyType = append(m.KeyType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorGraphTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalculatorGraphTemplate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculatorGraphTemplate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculatorGraphTemplate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculatorGraphTemplate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculatorGraphTemplate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorGraphTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &framework.CalculatorGraphConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorGraphTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = append(m.Rule, &TemplateExpression{})
			if err := m.Rule[len(m.Rule)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalculatorGraphTemplate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TemplateSubgraphOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculatorGraphTemplate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TemplateSubgraphOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TemplateSubgraphOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dict", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorGraphTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dict == nil {
				m.Dict = &TemplateDict{}
			}
			if err := m.Dict.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalculatorGraphTemplate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCalculatorGraphTemplate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCalculatorGraphTemplate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCalculatorGraphTemplate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalculatorGraphTemplate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalculatorGraphTemplate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCalculatorGraphTemplate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCalculatorGraphTemplate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCalculatorGraphTemplate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCalculatorGraphTemplate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCalculatorGraphTemplate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCalculatorGraphTemplate = fmt.Errorf("proto: unexpected end of group")
)
