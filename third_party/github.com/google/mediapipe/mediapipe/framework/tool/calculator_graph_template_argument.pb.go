// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/tool/calculator_graph_template_argument.proto

package tool

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TemplateArgument struct {
	// Types that are valid to be assigned to ParamValue:
	//	*TemplateArgument_Str
	//	*TemplateArgument_Num
	//	*TemplateArgument_Dict
	ParamValue isTemplateArgument_ParamValue `protobuf_oneof:"param_value"`
	Element    []*TemplateArgument           `protobuf:"bytes,4,rep,name=element,proto3" json:"element,omitempty"`
}

func (m *TemplateArgument) Reset()      { *m = TemplateArgument{} }
func (*TemplateArgument) ProtoMessage() {}
func (*TemplateArgument) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5eade8feb0a4c05, []int{0}
}
func (m *TemplateArgument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TemplateArgument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TemplateArgument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TemplateArgument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemplateArgument.Merge(m, src)
}
func (m *TemplateArgument) XXX_Size() int {
	return m.Size()
}
func (m *TemplateArgument) XXX_DiscardUnknown() {
	xxx_messageInfo_TemplateArgument.DiscardUnknown(m)
}

var xxx_messageInfo_TemplateArgument proto.InternalMessageInfo

type isTemplateArgument_ParamValue interface {
	isTemplateArgument_ParamValue()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TemplateArgument_Str struct {
	Str string `protobuf:"bytes,1,opt,name=str,proto3,oneof" json:"str,omitempty"`
}
type TemplateArgument_Num struct {
	Num float64 `protobuf:"fixed64,2,opt,name=num,proto3,oneof" json:"num,omitempty"`
}
type TemplateArgument_Dict struct {
	Dict *TemplateDict `protobuf:"bytes,3,opt,name=dict,proto3,oneof" json:"dict,omitempty"`
}

func (*TemplateArgument_Str) isTemplateArgument_ParamValue()  {}
func (*TemplateArgument_Num) isTemplateArgument_ParamValue()  {}
func (*TemplateArgument_Dict) isTemplateArgument_ParamValue() {}

func (m *TemplateArgument) GetParamValue() isTemplateArgument_ParamValue {
	if m != nil {
		return m.ParamValue
	}
	return nil
}

func (m *TemplateArgument) GetStr() string {
	if x, ok := m.GetParamValue().(*TemplateArgument_Str); ok {
		return x.Str
	}
	return ""
}

func (m *TemplateArgument) GetNum() float64 {
	if x, ok := m.GetParamValue().(*TemplateArgument_Num); ok {
		return x.Num
	}
	return 0
}

func (m *TemplateArgument) GetDict() *TemplateDict {
	if x, ok := m.GetParamValue().(*TemplateArgument_Dict); ok {
		return x.Dict
	}
	return nil
}

func (m *TemplateArgument) GetElement() []*TemplateArgument {
	if m != nil {
		return m.Element
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TemplateArgument) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TemplateArgument_Str)(nil),
		(*TemplateArgument_Num)(nil),
		(*TemplateArgument_Dict)(nil),
	}
}

type TemplateDict struct {
	Arg []*TemplateDict_Parameter `protobuf:"bytes,1,rep,name=arg,proto3" json:"arg,omitempty"`
}

func (m *TemplateDict) Reset()      { *m = TemplateDict{} }
func (*TemplateDict) ProtoMessage() {}
func (*TemplateDict) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5eade8feb0a4c05, []int{1}
}
func (m *TemplateDict) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TemplateDict) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TemplateDict.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TemplateDict) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemplateDict.Merge(m, src)
}
func (m *TemplateDict) XXX_Size() int {
	return m.Size()
}
func (m *TemplateDict) XXX_DiscardUnknown() {
	xxx_messageInfo_TemplateDict.DiscardUnknown(m)
}

var xxx_messageInfo_TemplateDict proto.InternalMessageInfo

func (m *TemplateDict) GetArg() []*TemplateDict_Parameter {
	if m != nil {
		return m.Arg
	}
	return nil
}

type TemplateDict_Parameter struct {
	Key   string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *TemplateArgument `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *TemplateDict_Parameter) Reset()      { *m = TemplateDict_Parameter{} }
func (*TemplateDict_Parameter) ProtoMessage() {}
func (*TemplateDict_Parameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5eade8feb0a4c05, []int{1, 0}
}
func (m *TemplateDict_Parameter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TemplateDict_Parameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TemplateDict_Parameter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TemplateDict_Parameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemplateDict_Parameter.Merge(m, src)
}
func (m *TemplateDict_Parameter) XXX_Size() int {
	return m.Size()
}
func (m *TemplateDict_Parameter) XXX_DiscardUnknown() {
	xxx_messageInfo_TemplateDict_Parameter.DiscardUnknown(m)
}

var xxx_messageInfo_TemplateDict_Parameter proto.InternalMessageInfo

func (m *TemplateDict_Parameter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TemplateDict_Parameter) GetValue() *TemplateArgument {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*TemplateArgument)(nil), "mediapipe.TemplateArgument")
	proto.RegisterType((*TemplateDict)(nil), "mediapipe.TemplateDict")
	proto.RegisterType((*TemplateDict_Parameter)(nil), "mediapipe.TemplateDict.Parameter")
}

func init() {
	proto.RegisterFile("mediapipe/framework/tool/calculator_graph_template_argument.proto", fileDescriptor_e5eade8feb0a4c05)
}

var fileDescriptor_e5eade8feb0a4c05 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x3f, 0x4e, 0xc3, 0x30,
	0x14, 0xc6, 0xfd, 0x48, 0x01, 0xd5, 0x05, 0xa9, 0xf2, 0x42, 0x04, 0x92, 0x15, 0x3a, 0x65, 0x21,
	0x11, 0x2d, 0x1c, 0xa0, 0x15, 0x43, 0xc7, 0x2a, 0x62, 0x62, 0x89, 0xdc, 0xd4, 0xa4, 0xa1, 0x71,
	0x1d, 0x19, 0x07, 0xc4, 0xc6, 0x11, 0x58, 0xb8, 0x03, 0x1b, 0xd7, 0x60, 0xec, 0xd8, 0x91, 0xa6,
	0x0b, 0x63, 0x8f, 0x80, 0x9c, 0xfe, 0x81, 0x81, 0x8a, 0x2d, 0x79, 0xfa, 0xf9, 0xf7, 0xbe, 0xa7,
	0x0f, 0xb7, 0x05, 0x1f, 0x24, 0x2c, 0x4b, 0x32, 0xee, 0xdf, 0x2a, 0x26, 0xf8, 0xa3, 0x54, 0x23,
	0x5f, 0x4b, 0x99, 0xfa, 0x11, 0x4b, 0xa3, 0x3c, 0x65, 0x5a, 0xaa, 0x30, 0x56, 0x2c, 0x1b, 0x86,
	0x9a, 0x8b, 0x2c, 0x65, 0x9a, 0x87, 0x4c, 0xc5, 0xb9, 0xe0, 0x63, 0xed, 0x65, 0x4a, 0x6a, 0x49,
	0xaa, 0x1b, 0x45, 0xe3, 0x1d, 0x70, 0xfd, 0x7a, 0x85, 0xb5, 0x57, 0x14, 0x21, 0xd8, 0xba, 0xd7,
	0xca, 0x06, 0x07, 0xdc, 0x6a, 0x17, 0x05, 0xe6, 0xc7, 0xcc, 0xc6, 0xb9, 0xb0, 0x77, 0x1c, 0x70,
	0xc1, 0xcc, 0xc6, 0xb9, 0x20, 0x67, 0xb8, 0x32, 0x48, 0x22, 0x6d, 0x5b, 0x0e, 0xb8, 0xb5, 0xe6,
	0x91, 0xb7, 0xd1, 0x7a, 0x6b, 0xe5, 0x55, 0x12, 0xe9, 0x2e, 0x0a, 0x4a, 0x8c, 0x5c, 0xe2, 0x7d,
	0x9e, 0x72, 0xb3, 0xc1, 0xae, 0x38, 0x96, 0x5b, 0x6b, 0x9e, 0xfc, 0xf1, 0x62, 0x1d, 0x22, 0x58,
	0xb3, 0x9d, 0x43, 0x5c, 0xcb, 0x98, 0x62, 0x22, 0x7c, 0x60, 0x69, 0xce, 0x1b, 0xaf, 0x80, 0x0f,
	0x7e, 0xeb, 0x49, 0x0b, 0x5b, 0x4c, 0xc5, 0x36, 0x94, 0xca, 0xd3, 0x2d, 0x21, 0xbc, 0x9e, 0x51,
	0x70, 0xcd, 0x55, 0x60, 0xe8, 0xe3, 0x1e, 0xae, 0x6e, 0x26, 0xa4, 0x8e, 0xad, 0x11, 0x7f, 0x5a,
	0xde, 0x1b, 0x98, 0x4f, 0x72, 0x8e, 0x77, 0xcb, 0x6d, 0xe5, 0xbd, 0xff, 0x04, 0x5d, 0x92, 0x9d,
	0xbb, 0xc9, 0x8c, 0xa2, 0xe9, 0x8c, 0xa2, 0xc5, 0x8c, 0xc2, 0x73, 0x41, 0xe1, 0xad, 0xa0, 0xf0,
	0x51, 0x50, 0x98, 0x14, 0x14, 0x3e, 0x0b, 0x0a, 0x5f, 0x05, 0x45, 0x8b, 0x82, 0xc2, 0xcb, 0x9c,
	0xa2, 0xc9, 0x9c, 0xa2, 0xe9, 0x9c, 0xa2, 0x9b, 0x8b, 0x38, 0xd1, 0xc3, 0xbc, 0xef, 0x45, 0x52,
	0xf8, 0xb1, 0x94, 0x71, 0xca, 0xfd, 0x9f, 0x7e, 0xb7, 0x35, 0xdd, 0xdf, 0x2b, 0x7b, 0x6c, 0x7d,
	0x07, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x82, 0x72, 0x07, 0x0c, 0x02, 0x00, 0x00,
}

func (this *TemplateArgument) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TemplateArgument)
	if !ok {
		that2, ok := that.(TemplateArgument)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ParamValue == nil {
		if this.ParamValue != nil {
			return false
		}
	} else if this.ParamValue == nil {
		return false
	} else if !this.ParamValue.Equal(that1.ParamValue) {
		return false
	}
	if len(this.Element) != len(that1.Element) {
		return false
	}
	for i := range this.Element {
		if !this.Element[i].Equal(that1.Element[i]) {
			return false
		}
	}
	return true
}
func (this *TemplateArgument_Str) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TemplateArgument_Str)
	if !ok {
		that2, ok := that.(TemplateArgument_Str)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Str != that1.Str {
		return false
	}
	return true
}
func (this *TemplateArgument_Num) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TemplateArgument_Num)
	if !ok {
		that2, ok := that.(TemplateArgument_Num)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *TemplateArgument_Dict) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TemplateArgument_Dict)
	if !ok {
		that2, ok := that.(TemplateArgument_Dict)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Dict.Equal(that1.Dict) {
		return false
	}
	return true
}
func (this *TemplateDict) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TemplateDict)
	if !ok {
		that2, ok := that.(TemplateDict)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Arg) != len(that1.Arg) {
		return false
	}
	for i := range this.Arg {
		if !this.Arg[i].Equal(that1.Arg[i]) {
			return false
		}
	}
	return true
}
func (this *TemplateDict_Parameter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TemplateDict_Parameter)
	if !ok {
		that2, ok := that.(TemplateDict_Parameter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *TemplateArgument) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tool.TemplateArgument{")
	if this.ParamValue != nil {
		s = append(s, "ParamValue: "+fmt.Sprintf("%#v", this.ParamValue)+",\n")
	}
	if this.Element != nil {
		s = append(s, "Element: "+fmt.Sprintf("%#v", this.Element)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TemplateArgument_Str) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tool.TemplateArgument_Str{` +
		`Str:` + fmt.Sprintf("%#v", this.Str) + `}`}, ", ")
	return s
}
func (this *TemplateArgument_Num) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tool.TemplateArgument_Num{` +
		`Num:` + fmt.Sprintf("%#v", this.Num) + `}`}, ", ")
	return s
}
func (this *TemplateArgument_Dict) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tool.TemplateArgument_Dict{` +
		`Dict:` + fmt.Sprintf("%#v", this.Dict) + `}`}, ", ")
	return s
}
func (this *TemplateDict) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tool.TemplateDict{")
	if this.Arg != nil {
		s = append(s, "Arg: "+fmt.Sprintf("%#v", this.Arg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TemplateDict_Parameter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tool.TemplateDict_Parameter{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCalculatorGraphTemplateArgument(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TemplateArgument) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TemplateArgument) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TemplateArgument) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Element) > 0 {
		for iNdEx := len(m.Element) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Element[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCalculatorGraphTemplateArgument(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ParamValue != nil {
		{
			size := m.ParamValue.Size()
			i -= size
			if _, err := m.ParamValue.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TemplateArgument_Str) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TemplateArgument_Str) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Str)
	copy(dAtA[i:], m.Str)
	i = encodeVarintCalculatorGraphTemplateArgument(dAtA, i, uint64(len(m.Str)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *TemplateArgument_Num) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TemplateArgument_Num) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Num))))
	i--
	dAtA[i] = 0x11
	return len(dAtA) - i, nil
}
func (m *TemplateArgument_Dict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TemplateArgument_Dict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Dict != nil {
		{
			size, err := m.Dict.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalculatorGraphTemplateArgument(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *TemplateDict) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TemplateDict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TemplateDict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Arg) > 0 {
		for iNdEx := len(m.Arg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Arg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCalculatorGraphTemplateArgument(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TemplateDict_Parameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TemplateDict_Parameter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TemplateDict_Parameter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalculatorGraphTemplateArgument(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCalculatorGraphTemplateArgument(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCalculatorGraphTemplateArgument(dAtA []byte, offset int, v uint64) int {
	offset -= sovCalculatorGraphTemplateArgument(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TemplateArgument) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParamValue != nil {
		n += m.ParamValue.Size()
	}
	if len(m.Element) > 0 {
		for _, e := range m.Element {
			l = e.Size()
			n += 1 + l + sovCalculatorGraphTemplateArgument(uint64(l))
		}
	}
	return n
}

func (m *TemplateArgument_Str) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Str)
	n += 1 + l + sovCalculatorGraphTemplateArgument(uint64(l))
	return n
}
func (m *TemplateArgument_Num) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *TemplateArgument_Dict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dict != nil {
		l = m.Dict.Size()
		n += 1 + l + sovCalculatorGraphTemplateArgument(uint64(l))
	}
	return n
}
func (m *TemplateDict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Arg) > 0 {
		for _, e := range m.Arg {
			l = e.Size()
			n += 1 + l + sovCalculatorGraphTemplateArgument(uint64(l))
		}
	}
	return n
}

func (m *TemplateDict_Parameter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCalculatorGraphTemplateArgument(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovCalculatorGraphTemplateArgument(uint64(l))
	}
	return n
}

func sovCalculatorGraphTemplateArgument(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCalculatorGraphTemplateArgument(x uint64) (n int) {
	return sovCalculatorGraphTemplateArgument(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TemplateArgument) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForElement := "[]*TemplateArgument{"
	for _, f := range this.Element {
		repeatedStringForElement += strings.Replace(f.String(), "TemplateArgument", "TemplateArgument", 1) + ","
	}
	repeatedStringForElement += "}"
	s := strings.Join([]string{`&TemplateArgument{`,
		`ParamValue:` + fmt.Sprintf("%v", this.ParamValue) + `,`,
		`Element:` + repeatedStringForElement + `,`,
		`}`,
	}, "")
	return s
}
func (this *TemplateArgument_Str) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TemplateArgument_Str{`,
		`Str:` + fmt.Sprintf("%v", this.Str) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TemplateArgument_Num) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TemplateArgument_Num{`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TemplateArgument_Dict) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TemplateArgument_Dict{`,
		`Dict:` + strings.Replace(fmt.Sprintf("%v", this.Dict), "TemplateDict", "TemplateDict", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TemplateDict) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArg := "[]*TemplateDict_Parameter{"
	for _, f := range this.Arg {
		repeatedStringForArg += strings.Replace(fmt.Sprintf("%v", f), "TemplateDict_Parameter", "TemplateDict_Parameter", 1) + ","
	}
	repeatedStringForArg += "}"
	s := strings.Join([]string{`&TemplateDict{`,
		`Arg:` + repeatedStringForArg + `,`,
		`}`,
	}, "")
	return s
}
func (this *TemplateDict_Parameter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TemplateDict_Parameter{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + strings.Replace(this.Value.String(), "TemplateArgument", "TemplateArgument", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCalculatorGraphTemplateArgument(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TemplateArgument) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculatorGraphTemplateArgument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TemplateArgument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TemplateArgument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorGraphTemplateArgument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalculatorGraphTemplateArgument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorGraphTemplateArgument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamValue = &TemplateArgument_Str{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ParamValue = &TemplateArgument_Num{float64(math.Float64frombits(v))}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dict", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorGraphTemplateArgument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorGraphTemplateArgument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorGraphTemplateArgument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TemplateDict{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ParamValue = &TemplateArgument_Dict{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Element", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorGraphTemplateArgument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorGraphTemplateArgument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorGraphTemplateArgument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Element = append(m.Element, &TemplateArgument{})
			if err := m.Element[len(m.Element)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalculatorGraphTemplateArgument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCalculatorGraphTemplateArgument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TemplateDict) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculatorGraphTemplateArgument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TemplateDict: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TemplateDict: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorGraphTemplateArgument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorGraphTemplateArgument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorGraphTemplateArgument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arg = append(m.Arg, &TemplateDict_Parameter{})
			if err := m.Arg[len(m.Arg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalculatorGraphTemplateArgument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCalculatorGraphTemplateArgument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TemplateDict_Parameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculatorGraphTemplateArgument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Parameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Parameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorGraphTemplateArgument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalculatorGraphTemplateArgument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorGraphTemplateArgument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculatorGraphTemplateArgument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculatorGraphTemplateArgument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculatorGraphTemplateArgument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &TemplateArgument{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalculatorGraphTemplateArgument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCalculatorGraphTemplateArgument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCalculatorGraphTemplateArgument(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCalculatorGraphTemplateArgument
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalculatorGraphTemplateArgument
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalculatorGraphTemplateArgument
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCalculatorGraphTemplateArgument
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCalculatorGraphTemplateArgument
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCalculatorGraphTemplateArgument
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCalculatorGraphTemplateArgument        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCalculatorGraphTemplateArgument          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCalculatorGraphTemplateArgument = fmt.Errorf("proto: unexpected end of group")
)
