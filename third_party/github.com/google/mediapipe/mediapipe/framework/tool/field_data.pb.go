// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/tool/field_data.proto

package tool

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MessageData struct {
	TypeUrl string `protobuf:"bytes,1,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	Value   []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MessageData) Reset()      { *m = MessageData{} }
func (*MessageData) ProtoMessage() {}
func (*MessageData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b52e8895ee1d019, []int{0}
}
func (m *MessageData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageData.Merge(m, src)
}
func (m *MessageData) XXX_Size() int {
	return m.Size()
}
func (m *MessageData) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageData.DiscardUnknown(m)
}

var xxx_messageInfo_MessageData proto.InternalMessageInfo

func (m *MessageData) GetTypeUrl() string {
	if m != nil {
		return m.TypeUrl
	}
	return ""
}

func (m *MessageData) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type FieldData struct {
	// Types that are valid to be assigned to Value:
	//	*FieldData_Int32Value
	//	*FieldData_Int64Value
	//	*FieldData_Uint32Value
	//	*FieldData_Uint64Value
	//	*FieldData_DoubleValue
	//	*FieldData_FloatValue
	//	*FieldData_BoolValue
	//	*FieldData_EnumValue
	//	*FieldData_StringValue
	//	*FieldData_MessageValue
	Value isFieldData_Value `protobuf_oneof:"value"`
}

func (m *FieldData) Reset()      { *m = FieldData{} }
func (*FieldData) ProtoMessage() {}
func (*FieldData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b52e8895ee1d019, []int{1}
}
func (m *FieldData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FieldData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldData.Merge(m, src)
}
func (m *FieldData) XXX_Size() int {
	return m.Size()
}
func (m *FieldData) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldData.DiscardUnknown(m)
}

var xxx_messageInfo_FieldData proto.InternalMessageInfo

type isFieldData_Value interface {
	isFieldData_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FieldData_Int32Value struct {
	Int32Value int32 `protobuf:"zigzag32,1,opt,name=int32_value,json=int32Value,proto3,oneof" json:"int32_value,omitempty"`
}
type FieldData_Int64Value struct {
	Int64Value int64 `protobuf:"zigzag64,2,opt,name=int64_value,json=int64Value,proto3,oneof" json:"int64_value,omitempty"`
}
type FieldData_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,3,opt,name=uint32_value,json=uint32Value,proto3,oneof" json:"uint32_value,omitempty"`
}
type FieldData_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,4,opt,name=uint64_value,json=uint64Value,proto3,oneof" json:"uint64_value,omitempty"`
}
type FieldData_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,5,opt,name=double_value,json=doubleValue,proto3,oneof" json:"double_value,omitempty"`
}
type FieldData_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,6,opt,name=float_value,json=floatValue,proto3,oneof" json:"float_value,omitempty"`
}
type FieldData_BoolValue struct {
	BoolValue bool `protobuf:"varint,7,opt,name=bool_value,json=boolValue,proto3,oneof" json:"bool_value,omitempty"`
}
type FieldData_EnumValue struct {
	EnumValue int32 `protobuf:"zigzag32,8,opt,name=enum_value,json=enumValue,proto3,oneof" json:"enum_value,omitempty"`
}
type FieldData_StringValue struct {
	StringValue string `protobuf:"bytes,9,opt,name=string_value,json=stringValue,proto3,oneof" json:"string_value,omitempty"`
}
type FieldData_MessageValue struct {
	MessageValue *MessageData `protobuf:"bytes,10,opt,name=message_value,json=messageValue,proto3,oneof" json:"message_value,omitempty"`
}

func (*FieldData_Int32Value) isFieldData_Value()   {}
func (*FieldData_Int64Value) isFieldData_Value()   {}
func (*FieldData_Uint32Value) isFieldData_Value()  {}
func (*FieldData_Uint64Value) isFieldData_Value()  {}
func (*FieldData_DoubleValue) isFieldData_Value()  {}
func (*FieldData_FloatValue) isFieldData_Value()   {}
func (*FieldData_BoolValue) isFieldData_Value()    {}
func (*FieldData_EnumValue) isFieldData_Value()    {}
func (*FieldData_StringValue) isFieldData_Value()  {}
func (*FieldData_MessageValue) isFieldData_Value() {}

func (m *FieldData) GetValue() isFieldData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FieldData) GetInt32Value() int32 {
	if x, ok := m.GetValue().(*FieldData_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (m *FieldData) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*FieldData_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *FieldData) GetUint32Value() uint32 {
	if x, ok := m.GetValue().(*FieldData_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (m *FieldData) GetUint64Value() uint64 {
	if x, ok := m.GetValue().(*FieldData_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (m *FieldData) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*FieldData_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *FieldData) GetFloatValue() float32 {
	if x, ok := m.GetValue().(*FieldData_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *FieldData) GetBoolValue() bool {
	if x, ok := m.GetValue().(*FieldData_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *FieldData) GetEnumValue() int32 {
	if x, ok := m.GetValue().(*FieldData_EnumValue); ok {
		return x.EnumValue
	}
	return 0
}

func (m *FieldData) GetStringValue() string {
	if x, ok := m.GetValue().(*FieldData_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *FieldData) GetMessageValue() *MessageData {
	if x, ok := m.GetValue().(*FieldData_MessageValue); ok {
		return x.MessageValue
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FieldData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FieldData_Int32Value)(nil),
		(*FieldData_Int64Value)(nil),
		(*FieldData_Uint32Value)(nil),
		(*FieldData_Uint64Value)(nil),
		(*FieldData_DoubleValue)(nil),
		(*FieldData_FloatValue)(nil),
		(*FieldData_BoolValue)(nil),
		(*FieldData_EnumValue)(nil),
		(*FieldData_StringValue)(nil),
		(*FieldData_MessageValue)(nil),
	}
}

func init() {
	proto.RegisterType((*MessageData)(nil), "mediapipe.MessageData")
	proto.RegisterType((*FieldData)(nil), "mediapipe.FieldData")
}

func init() {
	proto.RegisterFile("mediapipe/framework/tool/field_data.proto", fileDescriptor_7b52e8895ee1d019)
}

var fileDescriptor_7b52e8895ee1d019 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xd2, 0x3f, 0x8f, 0xd3, 0x30,
	0x18, 0x06, 0x70, 0xbf, 0xf7, 0xaf, 0x8d, 0xd3, 0x1b, 0x88, 0x10, 0x3a, 0x16, 0x63, 0x8e, 0xc5,
	0x2c, 0x89, 0x74, 0x57, 0xdd, 0x06, 0x43, 0x85, 0x50, 0x16, 0x96, 0x48, 0x30, 0xb0, 0x44, 0x0e,
	0x71, 0x43, 0xc0, 0xa9, 0xa3, 0xd4, 0x01, 0xb1, 0xf1, 0x11, 0x10, 0x9f, 0x82, 0x8f, 0xc2, 0xd8,
	0xb1, 0x23, 0x4d, 0x17, 0xc6, 0x7e, 0x04, 0xe4, 0xd8, 0xa4, 0x59, 0x6e, 0xf4, 0xa3, 0x9f, 0x1f,
	0xbd, 0xc9, 0x6b, 0xfc, 0xbc, 0x12, 0x79, 0xc9, 0xeb, 0xb2, 0x16, 0xd1, 0xb2, 0xe1, 0x95, 0xf8,
	0xaa, 0x9a, 0xcf, 0x91, 0x56, 0x4a, 0x46, 0xcb, 0x52, 0xc8, 0x3c, 0xcd, 0xb9, 0xe6, 0x61, 0xdd,
	0x28, 0xad, 0x02, 0x6f, 0xa0, 0xd7, 0x2f, 0xb1, 0xff, 0x46, 0xac, 0xd7, 0xbc, 0x10, 0xaf, 0xb8,
	0xe6, 0xc1, 0x63, 0x3c, 0xd5, 0xdf, 0x6a, 0x91, 0xb6, 0x8d, 0xbc, 0x02, 0x0a, 0xcc, 0x4b, 0x26,
	0xe6, 0xfc, 0xb6, 0x91, 0xc1, 0x43, 0x7c, 0xfe, 0x85, 0xcb, 0x56, 0x5c, 0x9d, 0x50, 0x60, 0xb3,
	0xc4, 0x1e, 0xae, 0x7f, 0x9e, 0x62, 0xef, 0xb5, 0xe9, 0xef, 0xaf, 0x3f, 0xc5, 0x7e, 0xb9, 0xd2,
	0xb7, 0x37, 0xa9, 0x95, 0xa6, 0xe1, 0x41, 0x8c, 0x12, 0xdc, 0x87, 0xef, 0x4c, 0xe6, 0xc8, 0xdd,
	0x3c, 0x3d, 0x96, 0x05, 0x8e, 0xdc, 0xcd, 0x2d, 0x79, 0x86, 0x67, 0xed, 0xb8, 0xe6, 0x94, 0x02,
	0xbb, 0x8c, 0x51, 0xe2, 0xb7, 0xa3, 0x1e, 0x87, 0x86, 0xa2, 0x33, 0x0a, 0xec, 0xec, 0x3f, 0x1a,
	0x35, 0xe5, 0xaa, 0xcd, 0xa4, 0x70, 0xe8, 0x9c, 0x02, 0x03, 0x83, 0x6c, 0x3a, 0x4c, 0xb4, 0x94,
	0x8a, 0x6b, 0x67, 0x2e, 0x28, 0xb0, 0x13, 0x33, 0x51, 0x1f, 0x5a, 0xf2, 0x04, 0xe3, 0x4c, 0x29,
	0xe9, 0xc4, 0x84, 0x02, 0x9b, 0xc6, 0x28, 0xf1, 0x4c, 0x36, 0x00, 0xb1, 0x6a, 0x2b, 0x07, 0xa6,
	0xee, 0xbb, 0x3d, 0x93, 0x0d, 0x93, 0xac, 0x75, 0x53, 0xae, 0x0a, 0x47, 0x3c, 0xf3, 0x73, 0xcd,
	0x24, 0x36, 0xb5, 0xe8, 0x05, 0xbe, 0xac, 0xec, 0x32, 0x9c, 0xc2, 0x14, 0x98, 0x7f, 0xf3, 0x28,
	0x1c, 0xf6, 0x15, 0x8e, 0x96, 0x15, 0xa3, 0x64, 0xe6, 0x78, 0x7f, 0x7d, 0x31, 0x71, 0x1b, 0x5a,
	0x7c, 0xda, 0xec, 0x08, 0xda, 0xee, 0x08, 0x3a, 0xec, 0x08, 0x7c, 0xef, 0x08, 0xfc, 0xea, 0x08,
	0xfc, 0xee, 0x08, 0x6c, 0x3a, 0x02, 0x7f, 0x3a, 0x02, 0x7f, 0x3b, 0x82, 0x0e, 0x1d, 0x81, 0x1f,
	0x7b, 0x82, 0x36, 0x7b, 0x82, 0xb6, 0x7b, 0x82, 0xde, 0xcf, 0x8b, 0x52, 0x7f, 0x6c, 0xb3, 0xf0,
	0x83, 0xaa, 0xa2, 0x42, 0xa9, 0x42, 0x8a, 0xe8, 0xf8, 0xa4, 0xee, 0x7b, 0x5c, 0xd9, 0x45, 0xff,
	0xa4, 0x6e, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x35, 0xfb, 0x53, 0x7f, 0x02, 0x00, 0x00,
}

func (this *MessageData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageData)
	if !ok {
		that2, ok := that.(MessageData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TypeUrl != that1.TypeUrl {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *FieldData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldData)
	if !ok {
		that2, ok := that.(FieldData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *FieldData_Int32Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldData_Int32Value)
	if !ok {
		that2, ok := that.(FieldData_Int32Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Int32Value != that1.Int32Value {
		return false
	}
	return true
}
func (this *FieldData_Int64Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldData_Int64Value)
	if !ok {
		that2, ok := that.(FieldData_Int64Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Int64Value != that1.Int64Value {
		return false
	}
	return true
}
func (this *FieldData_Uint32Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldData_Uint32Value)
	if !ok {
		that2, ok := that.(FieldData_Uint32Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uint32Value != that1.Uint32Value {
		return false
	}
	return true
}
func (this *FieldData_Uint64Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldData_Uint64Value)
	if !ok {
		that2, ok := that.(FieldData_Uint64Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uint64Value != that1.Uint64Value {
		return false
	}
	return true
}
func (this *FieldData_DoubleValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldData_DoubleValue)
	if !ok {
		that2, ok := that.(FieldData_DoubleValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DoubleValue != that1.DoubleValue {
		return false
	}
	return true
}
func (this *FieldData_FloatValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldData_FloatValue)
	if !ok {
		that2, ok := that.(FieldData_FloatValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FloatValue != that1.FloatValue {
		return false
	}
	return true
}
func (this *FieldData_BoolValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldData_BoolValue)
	if !ok {
		that2, ok := that.(FieldData_BoolValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BoolValue != that1.BoolValue {
		return false
	}
	return true
}
func (this *FieldData_EnumValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldData_EnumValue)
	if !ok {
		that2, ok := that.(FieldData_EnumValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EnumValue != that1.EnumValue {
		return false
	}
	return true
}
func (this *FieldData_StringValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldData_StringValue)
	if !ok {
		that2, ok := that.(FieldData_StringValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StringValue != that1.StringValue {
		return false
	}
	return true
}
func (this *FieldData_MessageValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldData_MessageValue)
	if !ok {
		that2, ok := that.(FieldData_MessageValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MessageValue.Equal(that1.MessageValue) {
		return false
	}
	return true
}
func (this *MessageData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tool.MessageData{")
	s = append(s, "TypeUrl: "+fmt.Sprintf("%#v", this.TypeUrl)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FieldData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&tool.FieldData{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FieldData_Int32Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tool.FieldData_Int32Value{` +
		`Int32Value:` + fmt.Sprintf("%#v", this.Int32Value) + `}`}, ", ")
	return s
}
func (this *FieldData_Int64Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tool.FieldData_Int64Value{` +
		`Int64Value:` + fmt.Sprintf("%#v", this.Int64Value) + `}`}, ", ")
	return s
}
func (this *FieldData_Uint32Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tool.FieldData_Uint32Value{` +
		`Uint32Value:` + fmt.Sprintf("%#v", this.Uint32Value) + `}`}, ", ")
	return s
}
func (this *FieldData_Uint64Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tool.FieldData_Uint64Value{` +
		`Uint64Value:` + fmt.Sprintf("%#v", this.Uint64Value) + `}`}, ", ")
	return s
}
func (this *FieldData_DoubleValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tool.FieldData_DoubleValue{` +
		`DoubleValue:` + fmt.Sprintf("%#v", this.DoubleValue) + `}`}, ", ")
	return s
}
func (this *FieldData_FloatValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tool.FieldData_FloatValue{` +
		`FloatValue:` + fmt.Sprintf("%#v", this.FloatValue) + `}`}, ", ")
	return s
}
func (this *FieldData_BoolValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tool.FieldData_BoolValue{` +
		`BoolValue:` + fmt.Sprintf("%#v", this.BoolValue) + `}`}, ", ")
	return s
}
func (this *FieldData_EnumValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tool.FieldData_EnumValue{` +
		`EnumValue:` + fmt.Sprintf("%#v", this.EnumValue) + `}`}, ", ")
	return s
}
func (this *FieldData_StringValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tool.FieldData_StringValue{` +
		`StringValue:` + fmt.Sprintf("%#v", this.StringValue) + `}`}, ", ")
	return s
}
func (this *FieldData_MessageValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tool.FieldData_MessageValue{` +
		`MessageValue:` + fmt.Sprintf("%#v", this.MessageValue) + `}`}, ", ")
	return s
}
func valueToGoStringFieldData(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MessageData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintFieldData(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TypeUrl) > 0 {
		i -= len(m.TypeUrl)
		copy(dAtA[i:], m.TypeUrl)
		i = encodeVarintFieldData(dAtA, i, uint64(len(m.TypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FieldData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FieldData_Int32Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldData_Int32Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintFieldData(dAtA, i, uint64((uint32(m.Int32Value)<<1)^uint32((m.Int32Value>>31))))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *FieldData_Int64Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldData_Int64Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintFieldData(dAtA, i, uint64((uint64(m.Int64Value)<<1)^uint64((m.Int64Value>>63))))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *FieldData_Uint32Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldData_Uint32Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintFieldData(dAtA, i, uint64(m.Uint32Value))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *FieldData_Uint64Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldData_Uint64Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintFieldData(dAtA, i, uint64(m.Uint64Value))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *FieldData_DoubleValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldData_DoubleValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DoubleValue))))
	i--
	dAtA[i] = 0x29
	return len(dAtA) - i, nil
}
func (m *FieldData_FloatValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldData_FloatValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FloatValue))))
	i--
	dAtA[i] = 0x35
	return len(dAtA) - i, nil
}
func (m *FieldData_BoolValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldData_BoolValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.BoolValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *FieldData_EnumValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldData_EnumValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintFieldData(dAtA, i, uint64((uint32(m.EnumValue)<<1)^uint32((m.EnumValue>>31))))
	i--
	dAtA[i] = 0x40
	return len(dAtA) - i, nil
}
func (m *FieldData_StringValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldData_StringValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.StringValue)
	copy(dAtA[i:], m.StringValue)
	i = encodeVarintFieldData(dAtA, i, uint64(len(m.StringValue)))
	i--
	dAtA[i] = 0x4a
	return len(dAtA) - i, nil
}
func (m *FieldData_MessageValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldData_MessageValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MessageValue != nil {
		{
			size, err := m.MessageValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFieldData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func encodeVarintFieldData(dAtA []byte, offset int, v uint64) int {
	offset -= sovFieldData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessageData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TypeUrl)
	if l > 0 {
		n += 1 + l + sovFieldData(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovFieldData(uint64(l))
	}
	return n
}

func (m *FieldData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *FieldData_Int32Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sozFieldData(uint64(m.Int32Value))
	return n
}
func (m *FieldData_Int64Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sozFieldData(uint64(m.Int64Value))
	return n
}
func (m *FieldData_Uint32Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFieldData(uint64(m.Uint32Value))
	return n
}
func (m *FieldData_Uint64Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFieldData(uint64(m.Uint64Value))
	return n
}
func (m *FieldData_DoubleValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *FieldData_FloatValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}
func (m *FieldData_BoolValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *FieldData_EnumValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sozFieldData(uint64(m.EnumValue))
	return n
}
func (m *FieldData_StringValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StringValue)
	n += 1 + l + sovFieldData(uint64(l))
	return n
}
func (m *FieldData_MessageValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageValue != nil {
		l = m.MessageValue.Size()
		n += 1 + l + sovFieldData(uint64(l))
	}
	return n
}

func sovFieldData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFieldData(x uint64) (n int) {
	return sovFieldData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MessageData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageData{`,
		`TypeUrl:` + fmt.Sprintf("%v", this.TypeUrl) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldData{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldData_Int32Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldData_Int32Value{`,
		`Int32Value:` + fmt.Sprintf("%v", this.Int32Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldData_Int64Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldData_Int64Value{`,
		`Int64Value:` + fmt.Sprintf("%v", this.Int64Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldData_Uint32Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldData_Uint32Value{`,
		`Uint32Value:` + fmt.Sprintf("%v", this.Uint32Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldData_Uint64Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldData_Uint64Value{`,
		`Uint64Value:` + fmt.Sprintf("%v", this.Uint64Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldData_DoubleValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldData_DoubleValue{`,
		`DoubleValue:` + fmt.Sprintf("%v", this.DoubleValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldData_FloatValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldData_FloatValue{`,
		`FloatValue:` + fmt.Sprintf("%v", this.FloatValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldData_BoolValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldData_BoolValue{`,
		`BoolValue:` + fmt.Sprintf("%v", this.BoolValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldData_EnumValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldData_EnumValue{`,
		`EnumValue:` + fmt.Sprintf("%v", this.EnumValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldData_StringValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldData_StringValue{`,
		`StringValue:` + fmt.Sprintf("%v", this.StringValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldData_MessageValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldData_MessageValue{`,
		`MessageValue:` + strings.Replace(fmt.Sprintf("%v", this.MessageValue), "MessageData", "MessageData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFieldData(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MessageData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFieldData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFieldData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFieldData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFieldData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFieldData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFieldData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFieldData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFieldData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32Value", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Value = &FieldData_Int32Value{v}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Value", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Value = &FieldData_Int64Value{int64(v)}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32Value", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &FieldData_Uint32Value{v}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64Value", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &FieldData_Uint64Value{v}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = &FieldData_DoubleValue{float64(math.Float64frombits(v))}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = &FieldData_FloatValue{float32(math.Float32frombits(v))}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &FieldData_BoolValue{b}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnumValue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Value = &FieldData_EnumValue{v}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFieldData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFieldData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &FieldData_StringValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFieldData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFieldData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MessageData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FieldData_MessageValue{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFieldData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFieldData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFieldData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFieldData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFieldData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFieldData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFieldData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFieldData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFieldData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFieldData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFieldData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFieldData = fmt.Errorf("proto: unexpected end of group")
)
