// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/tool/node_chain_subgraph.proto

package tool

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NodeChainSubgraphOptions struct {
	NodeType    string `protobuf:"bytes,1,opt,name=node_type,json=nodeType" json:"node_type"`
	ChainLength int32  `protobuf:"varint,2,opt,name=chain_length,json=chainLength" json:"chain_length"`
}

func (m *NodeChainSubgraphOptions) Reset()      { *m = NodeChainSubgraphOptions{} }
func (*NodeChainSubgraphOptions) ProtoMessage() {}
func (*NodeChainSubgraphOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc27120ce7cc75c6, []int{0}
}
func (m *NodeChainSubgraphOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeChainSubgraphOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeChainSubgraphOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeChainSubgraphOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeChainSubgraphOptions.Merge(m, src)
}
func (m *NodeChainSubgraphOptions) XXX_Size() int {
	return m.Size()
}
func (m *NodeChainSubgraphOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeChainSubgraphOptions.DiscardUnknown(m)
}

var xxx_messageInfo_NodeChainSubgraphOptions proto.InternalMessageInfo

func (m *NodeChainSubgraphOptions) GetNodeType() string {
	if m != nil {
		return m.NodeType
	}
	return ""
}

func (m *NodeChainSubgraphOptions) GetChainLength() int32 {
	if m != nil {
		return m.ChainLength
	}
	return 0
}

var E_NodeChainSubgraphOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*NodeChainSubgraphOptions)(nil),
	Field:         167210579,
	Name:          "mediapipe.NodeChainSubgraphOptions.ext",
	Tag:           "bytes,167210579,opt,name=ext",
	Filename:      "mediapipe/framework/tool/node_chain_subgraph.proto",
}

func init() {
	proto.RegisterExtension(E_NodeChainSubgraphOptions_Ext)
	proto.RegisterType((*NodeChainSubgraphOptions)(nil), "mediapipe.NodeChainSubgraphOptions")
}

func init() {
	proto.RegisterFile("mediapipe/framework/tool/node_chain_subgraph.proto", fileDescriptor_dc27120ce7cc75c6)
}

var fileDescriptor_dc27120ce7cc75c6 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0xca, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x2b, 0x4a, 0xcc, 0x4d, 0x2d, 0xcf, 0x2f, 0xca, 0xd6,
	0x2f, 0xc9, 0xcf, 0xcf, 0xd1, 0xcf, 0xcb, 0x4f, 0x49, 0x8d, 0x4f, 0xce, 0x48, 0xcc, 0xcc, 0x8b,
	0x2f, 0x2e, 0x4d, 0x4a, 0x2f, 0x4a, 0x2c, 0xc8, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x84, 0xeb, 0x91, 0x52, 0xc1, 0xa6, 0x3d, 0x39, 0x31, 0x27, 0xb9, 0x34, 0x27, 0xb1, 0x24, 0xbf,
	0x08, 0xa2, 0x41, 0x69, 0x1f, 0x23, 0x97, 0x84, 0x5f, 0x7e, 0x4a, 0xaa, 0x33, 0xc8, 0xb4, 0x60,
	0xa8, 0x61, 0xfe, 0x05, 0x25, 0x99, 0xf9, 0x79, 0xc5, 0x42, 0x8a, 0x5c, 0x9c, 0x60, 0xab, 0x4a,
	0x2a, 0x0b, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x9d, 0x58, 0x4e, 0xdc, 0x93, 0x67, 0x08,
	0xe2, 0x00, 0x09, 0x87, 0x54, 0x16, 0xa4, 0x0a, 0xa9, 0x73, 0xf1, 0x40, 0x1c, 0x92, 0x93, 0x9a,
	0x97, 0x5e, 0x92, 0x21, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x0a, 0x55, 0xc5, 0x0d, 0x96, 0xf1, 0x01,
	0x4b, 0x18, 0x85, 0x71, 0x31, 0xa7, 0x56, 0x94, 0x08, 0xc9, 0xe8, 0xc1, 0x9d, 0xa5, 0xe7, 0x0c,
	0x77, 0x0c, 0xd4, 0x42, 0x89, 0xcb, 0x77, 0xee, 0xfa, 0x2b, 0x30, 0x6a, 0x70, 0x1b, 0x29, 0x23,
	0x29, 0xc3, 0xe5, 0xbc, 0x20, 0x90, 0x81, 0x4e, 0x59, 0x17, 0x1e, 0xca, 0x31, 0xdc, 0x78, 0x28,
	0xc7, 0xf0, 0xe1, 0xa1, 0x1c, 0x63, 0xc3, 0x23, 0x39, 0xc6, 0x15, 0x8f, 0xe4, 0x18, 0x4f, 0x3c,
	0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x17, 0x8f, 0xe4, 0x18, 0x3e,
	0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18,
	0xa2, 0x4c, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xf3,
	0xd3, 0x73, 0x52, 0xf5, 0x11, 0xc1, 0x85, 0x2b, 0xdc, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x16,
	0x9c, 0xbb, 0x2a, 0x92, 0x01, 0x00, 0x00,
}

func (this *NodeChainSubgraphOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeChainSubgraphOptions)
	if !ok {
		that2, ok := that.(NodeChainSubgraphOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeType != that1.NodeType {
		return false
	}
	if this.ChainLength != that1.ChainLength {
		return false
	}
	return true
}
func (this *NodeChainSubgraphOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tool.NodeChainSubgraphOptions{")
	s = append(s, "NodeType: "+fmt.Sprintf("%#v", this.NodeType)+",\n")
	s = append(s, "ChainLength: "+fmt.Sprintf("%#v", this.ChainLength)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNodeChainSubgraph(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *NodeChainSubgraphOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeChainSubgraphOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeChainSubgraphOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintNodeChainSubgraph(dAtA, i, uint64(m.ChainLength))
	i--
	dAtA[i] = 0x10
	i -= len(m.NodeType)
	copy(dAtA[i:], m.NodeType)
	i = encodeVarintNodeChainSubgraph(dAtA, i, uint64(len(m.NodeType)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintNodeChainSubgraph(dAtA []byte, offset int, v uint64) int {
	offset -= sovNodeChainSubgraph(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NodeChainSubgraphOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeType)
	n += 1 + l + sovNodeChainSubgraph(uint64(l))
	n += 1 + sovNodeChainSubgraph(uint64(m.ChainLength))
	return n
}

func sovNodeChainSubgraph(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNodeChainSubgraph(x uint64) (n int) {
	return sovNodeChainSubgraph(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NodeChainSubgraphOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeChainSubgraphOptions{`,
		`NodeType:` + fmt.Sprintf("%v", this.NodeType) + `,`,
		`ChainLength:` + fmt.Sprintf("%v", this.ChainLength) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNodeChainSubgraph(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NodeChainSubgraphOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeChainSubgraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeChainSubgraphOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeChainSubgraphOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeChainSubgraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeChainSubgraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeChainSubgraph
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainLength", wireType)
			}
			m.ChainLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeChainSubgraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainLength |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNodeChainSubgraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodeChainSubgraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNodeChainSubgraph(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNodeChainSubgraph
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeChainSubgraph
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeChainSubgraph
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNodeChainSubgraph
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNodeChainSubgraph
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNodeChainSubgraph
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNodeChainSubgraph        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNodeChainSubgraph          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNodeChainSubgraph = fmt.Errorf("proto: unexpected end of group")
)
