// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/framework/tool/source.proto

package tool

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SidePacketsToStreamsCalculatorOptions_SetTimestampMode int32

const (
	TIMESTAMP_MODE_VECTOR_INDEX SidePacketsToStreamsCalculatorOptions_SetTimestampMode = 0
	TIMESTAMP_MODE_PRE_STREAM   SidePacketsToStreamsCalculatorOptions_SetTimestampMode = 1
	TIMESTAMP_MODE_WHOLE_STREAM SidePacketsToStreamsCalculatorOptions_SetTimestampMode = 2
	TIMESTAMP_MODE_NONE         SidePacketsToStreamsCalculatorOptions_SetTimestampMode = 3
)

var SidePacketsToStreamsCalculatorOptions_SetTimestampMode_name = map[int32]string{
	0: "TIMESTAMP_MODE_VECTOR_INDEX",
	1: "TIMESTAMP_MODE_PRE_STREAM",
	2: "TIMESTAMP_MODE_WHOLE_STREAM",
	3: "TIMESTAMP_MODE_NONE",
}

var SidePacketsToStreamsCalculatorOptions_SetTimestampMode_value = map[string]int32{
	"TIMESTAMP_MODE_VECTOR_INDEX": 0,
	"TIMESTAMP_MODE_PRE_STREAM":   1,
	"TIMESTAMP_MODE_WHOLE_STREAM": 2,
	"TIMESTAMP_MODE_NONE":         3,
}

func (x SidePacketsToStreamsCalculatorOptions_SetTimestampMode) Enum() *SidePacketsToStreamsCalculatorOptions_SetTimestampMode {
	p := new(SidePacketsToStreamsCalculatorOptions_SetTimestampMode)
	*p = x
	return p
}

func (x SidePacketsToStreamsCalculatorOptions_SetTimestampMode) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(SidePacketsToStreamsCalculatorOptions_SetTimestampMode_name, int32(x))
}

func (x *SidePacketsToStreamsCalculatorOptions_SetTimestampMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SidePacketsToStreamsCalculatorOptions_SetTimestampMode_value, data, "SidePacketsToStreamsCalculatorOptions_SetTimestampMode")
	if err != nil {
		return err
	}
	*x = SidePacketsToStreamsCalculatorOptions_SetTimestampMode(value)
	return nil
}

func (SidePacketsToStreamsCalculatorOptions_SetTimestampMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2ff50dc7eb76da8a, []int{0, 0}
}

type SidePacketsToStreamsCalculatorOptions struct {
	NumInputs        *int32                                                  `protobuf:"varint,1,opt,name=num_inputs,json=numInputs,def=1" json:"num_inputs,omitempty"`
	SetTimestamp     *SidePacketsToStreamsCalculatorOptions_SetTimestampMode `protobuf:"varint,2,opt,name=set_timestamp,json=setTimestamp,enum=mediapipe.SidePacketsToStreamsCalculatorOptions_SetTimestampMode,def=0" json:"set_timestamp,omitempty"`
	VectorsOfPackets *bool                                                   `protobuf:"varint,3,opt,name=vectors_of_packets,json=vectorsOfPackets,def=1" json:"vectors_of_packets,omitempty"`
}

func (m *SidePacketsToStreamsCalculatorOptions) Reset()      { *m = SidePacketsToStreamsCalculatorOptions{} }
func (*SidePacketsToStreamsCalculatorOptions) ProtoMessage() {}
func (*SidePacketsToStreamsCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ff50dc7eb76da8a, []int{0}
}
func (m *SidePacketsToStreamsCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SidePacketsToStreamsCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SidePacketsToStreamsCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SidePacketsToStreamsCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SidePacketsToStreamsCalculatorOptions.Merge(m, src)
}
func (m *SidePacketsToStreamsCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *SidePacketsToStreamsCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SidePacketsToStreamsCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SidePacketsToStreamsCalculatorOptions proto.InternalMessageInfo

const Default_SidePacketsToStreamsCalculatorOptions_NumInputs int32 = 1
const Default_SidePacketsToStreamsCalculatorOptions_SetTimestamp SidePacketsToStreamsCalculatorOptions_SetTimestampMode = TIMESTAMP_MODE_VECTOR_INDEX
const Default_SidePacketsToStreamsCalculatorOptions_VectorsOfPackets bool = true

func (m *SidePacketsToStreamsCalculatorOptions) GetNumInputs() int32 {
	if m != nil && m.NumInputs != nil {
		return *m.NumInputs
	}
	return Default_SidePacketsToStreamsCalculatorOptions_NumInputs
}

func (m *SidePacketsToStreamsCalculatorOptions) GetSetTimestamp() SidePacketsToStreamsCalculatorOptions_SetTimestampMode {
	if m != nil && m.SetTimestamp != nil {
		return *m.SetTimestamp
	}
	return Default_SidePacketsToStreamsCalculatorOptions_SetTimestamp
}

func (m *SidePacketsToStreamsCalculatorOptions) GetVectorsOfPackets() bool {
	if m != nil && m.VectorsOfPackets != nil {
		return *m.VectorsOfPackets
	}
	return Default_SidePacketsToStreamsCalculatorOptions_VectorsOfPackets
}

var E_SidePacketsToStreamsCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*SidePacketsToStreamsCalculatorOptions)(nil),
	Field:         60982839,
	Name:          "mediapipe.SidePacketsToStreamsCalculatorOptions.ext",
	Tag:           "bytes,60982839,opt,name=ext",
	Filename:      "mediapipe/framework/tool/source.proto",
}

func init() {
	proto.RegisterEnum("mediapipe.SidePacketsToStreamsCalculatorOptions_SetTimestampMode", SidePacketsToStreamsCalculatorOptions_SetTimestampMode_name, SidePacketsToStreamsCalculatorOptions_SetTimestampMode_value)
	proto.RegisterExtension(E_SidePacketsToStreamsCalculatorOptions_Ext)
	proto.RegisterType((*SidePacketsToStreamsCalculatorOptions)(nil), "mediapipe.SidePacketsToStreamsCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/framework/tool/source.proto", fileDescriptor_2ff50dc7eb76da8a)
}

var fileDescriptor_2ff50dc7eb76da8a = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x3d, 0x6f, 0xd3, 0x40,
	0x18, 0xc7, 0xfd, 0x34, 0x20, 0xd1, 0xe3, 0x45, 0xd6, 0x31, 0x60, 0x5e, 0x7a, 0x58, 0x15, 0x95,
	0x3c, 0xd9, 0x60, 0x31, 0x65, 0x0b, 0xad, 0x25, 0x22, 0xe1, 0x38, 0xb2, 0x2d, 0x40, 0x2c, 0x27,
	0xe3, 0x5c, 0x82, 0xa9, 0xcf, 0x67, 0xdd, 0x9d, 0x81, 0x11, 0x89, 0x0d, 0x75, 0xe0, 0x63, 0xf0,
	0x0d, 0xf8, 0x0a, 0x8c, 0x19, 0x3b, 0x12, 0x67, 0x61, 0xec, 0xc6, 0x8a, 0xa0, 0xc5, 0x54, 0x21,
	0x20, 0xba, 0xde, 0xfd, 0xfe, 0xcf, 0xef, 0xd1, 0x5f, 0x0f, 0xda, 0xe1, 0x6c, 0x52, 0x64, 0x75,
	0x51, 0x33, 0x6f, 0x2a, 0x33, 0xce, 0x5e, 0x0b, 0xb9, 0xef, 0x69, 0x21, 0x4a, 0x4f, 0x89, 0x46,
	0xe6, 0xcc, 0xad, 0xa5, 0xd0, 0x02, 0x6f, 0x76, 0xd8, 0x8d, 0x3b, 0xeb, 0x12, 0x79, 0x56, 0xe6,
	0x4d, 0x99, 0x69, 0x21, 0x8f, 0x03, 0xdb, 0xdf, 0x7a, 0x68, 0x27, 0x29, 0x26, 0x6c, 0x9c, 0xe5,
	0xfb, 0x4c, 0xab, 0x54, 0x24, 0x5a, 0xb2, 0x8c, 0xab, 0xdd, 0x0e, 0x8c, 0x6a, 0x5d, 0x88, 0x4a,
	0x61, 0x1b, 0xa1, 0xaa, 0xe1, 0xb4, 0xa8, 0xea, 0x46, 0x2b, 0x0b, 0x6c, 0x70, 0xce, 0xf7, 0xe1,
	0x5e, 0xbc, 0x59, 0x35, 0x7c, 0xf8, 0xf3, 0x0d, 0xbf, 0x03, 0x74, 0x59, 0x31, 0x4d, 0x75, 0xc1,
	0x99, 0xd2, 0x19, 0xaf, 0xad, 0x0d, 0x1b, 0x9c, 0x2b, 0xfe, 0xc0, 0xed, 0x56, 0x71, 0xff, 0xcb,
	0xe5, 0x26, 0x4c, 0xa7, 0xbf, 0x86, 0x84, 0x62, 0xc2, 0xfa, 0x37, 0xd3, 0x61, 0x18, 0x24, 0xe9,
	0x20, 0x1c, 0xd3, 0x30, 0xda, 0x0b, 0xe8, 0xe3, 0x60, 0x37, 0x8d, 0x62, 0x3a, 0x1c, 0xed, 0x05,
	0x4f, 0xe3, 0x4b, 0xea, 0x14, 0x8e, 0x7d, 0x84, 0x5f, 0xb1, 0x5c, 0x0b, 0xa9, 0xa8, 0x98, 0xd2,
	0xfa, 0xd8, 0x65, 0xf5, 0x6c, 0x70, 0x2e, 0xf4, 0xcf, 0x69, 0xd9, 0xb0, 0xd8, 0x3c, 0xf9, 0x8f,
	0xa6, 0x27, 0x9b, 0x6c, 0x1f, 0x00, 0x32, 0x57, 0x9d, 0xf8, 0x36, 0xfa, 0x97, 0xd5, 0x34, 0xf0,
	0x16, 0xba, 0xbe, 0x02, 0x8c, 0xe3, 0x80, 0x26, 0x69, 0x1c, 0x0c, 0x42, 0x13, 0xd6, 0xe4, 0x9f,
	0x3c, 0x8c, 0x1e, 0x75, 0xc0, 0x06, 0xbe, 0x86, 0xae, 0xae, 0x00, 0xa3, 0x68, 0x14, 0x98, 0x3d,
	0x3f, 0x47, 0x3d, 0xf6, 0x46, 0xe3, 0x5b, 0xa7, 0x7a, 0xfb, 0xa3, 0x23, 0xeb, 0xd3, 0xc1, 0xfb,
	0x2d, 0x1b, 0x9c, 0x8b, 0xfe, 0xdd, 0xb3, 0xd6, 0x1b, 0xff, 0x98, 0xfe, 0xe0, 0xe5, 0x7c, 0x41,
	0x8c, 0xc3, 0x05, 0x31, 0x8e, 0x16, 0x04, 0xde, 0xb6, 0x04, 0x3e, 0xb6, 0x04, 0x3e, 0xb7, 0x04,
	0xe6, 0x2d, 0x81, 0x2f, 0x2d, 0x81, 0xaf, 0x2d, 0x31, 0x8e, 0x5a, 0x02, 0x1f, 0x96, 0xc4, 0x98,
	0x2f, 0x89, 0x71, 0xb8, 0x24, 0xc6, 0xb3, 0xfb, 0xb3, 0x42, 0xbf, 0x68, 0x9e, 0xbb, 0xb9, 0xe0,
	0xde, 0x4c, 0x88, 0x59, 0xc9, 0xbc, 0xdf, 0x77, 0xf6, 0xb7, 0x1b, 0xfd, 0x1e, 0x00, 0x00, 0xff,
	0xff, 0x17, 0xed, 0xbc, 0x3e, 0xbe, 0x02, 0x00, 0x00,
}

func (x SidePacketsToStreamsCalculatorOptions_SetTimestampMode) String() string {
	s, ok := SidePacketsToStreamsCalculatorOptions_SetTimestampMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SidePacketsToStreamsCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SidePacketsToStreamsCalculatorOptions)
	if !ok {
		that2, ok := that.(SidePacketsToStreamsCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NumInputs != nil && that1.NumInputs != nil {
		if *this.NumInputs != *that1.NumInputs {
			return false
		}
	} else if this.NumInputs != nil {
		return false
	} else if that1.NumInputs != nil {
		return false
	}
	if this.SetTimestamp != nil && that1.SetTimestamp != nil {
		if *this.SetTimestamp != *that1.SetTimestamp {
			return false
		}
	} else if this.SetTimestamp != nil {
		return false
	} else if that1.SetTimestamp != nil {
		return false
	}
	if this.VectorsOfPackets != nil && that1.VectorsOfPackets != nil {
		if *this.VectorsOfPackets != *that1.VectorsOfPackets {
			return false
		}
	} else if this.VectorsOfPackets != nil {
		return false
	} else if that1.VectorsOfPackets != nil {
		return false
	}
	return true
}
func (this *SidePacketsToStreamsCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tool.SidePacketsToStreamsCalculatorOptions{")
	if this.NumInputs != nil {
		s = append(s, "NumInputs: "+valueToGoStringSource(this.NumInputs, "int32")+",\n")
	}
	if this.SetTimestamp != nil {
		s = append(s, "SetTimestamp: "+valueToGoStringSource(this.SetTimestamp, "SidePacketsToStreamsCalculatorOptions_SetTimestampMode")+",\n")
	}
	if this.VectorsOfPackets != nil {
		s = append(s, "VectorsOfPackets: "+valueToGoStringSource(this.VectorsOfPackets, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSource(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SidePacketsToStreamsCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SidePacketsToStreamsCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SidePacketsToStreamsCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VectorsOfPackets != nil {
		i--
		if *m.VectorsOfPackets {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.SetTimestamp != nil {
		i = encodeVarintSource(dAtA, i, uint64(*m.SetTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.NumInputs != nil {
		i = encodeVarintSource(dAtA, i, uint64(*m.NumInputs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSource(dAtA []byte, offset int, v uint64) int {
	offset -= sovSource(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SidePacketsToStreamsCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumInputs != nil {
		n += 1 + sovSource(uint64(*m.NumInputs))
	}
	if m.SetTimestamp != nil {
		n += 1 + sovSource(uint64(*m.SetTimestamp))
	}
	if m.VectorsOfPackets != nil {
		n += 2
	}
	return n
}

func sovSource(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSource(x uint64) (n int) {
	return sovSource(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SidePacketsToStreamsCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SidePacketsToStreamsCalculatorOptions{`,
		`NumInputs:` + valueToStringSource(this.NumInputs) + `,`,
		`SetTimestamp:` + valueToStringSource(this.SetTimestamp) + `,`,
		`VectorsOfPackets:` + valueToStringSource(this.VectorsOfPackets) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSource(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SidePacketsToStreamsCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SidePacketsToStreamsCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SidePacketsToStreamsCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInputs", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumInputs = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetTimestamp", wireType)
			}
			var v SidePacketsToStreamsCalculatorOptions_SetTimestampMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SidePacketsToStreamsCalculatorOptions_SetTimestampMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SetTimestamp = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VectorsOfPackets", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.VectorsOfPackets = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSource(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSource
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSource
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSource
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSource
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSource        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSource          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSource = fmt.Errorf("proto: unexpected end of group")
)
