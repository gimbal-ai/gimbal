// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/gpu/copy_calculator.proto

package gpu

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CopyCalculatorOptions_Rotation int32

const (
	ROTATION_NONE     CopyCalculatorOptions_Rotation = 0
	ROTATION_CCW      CopyCalculatorOptions_Rotation = 1
	ROTATION_CCW_FLIP CopyCalculatorOptions_Rotation = 2
)

var CopyCalculatorOptions_Rotation_name = map[int32]string{
	0: "ROTATION_NONE",
	1: "ROTATION_CCW",
	2: "ROTATION_CCW_FLIP",
}

var CopyCalculatorOptions_Rotation_value = map[string]int32{
	"ROTATION_NONE":     0,
	"ROTATION_CCW":      1,
	"ROTATION_CCW_FLIP": 2,
}

func (x CopyCalculatorOptions_Rotation) Enum() *CopyCalculatorOptions_Rotation {
	p := new(CopyCalculatorOptions_Rotation)
	*p = x
	return p
}

func (x CopyCalculatorOptions_Rotation) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(CopyCalculatorOptions_Rotation_name, int32(x))
}

func (x *CopyCalculatorOptions_Rotation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CopyCalculatorOptions_Rotation_value, data, "CopyCalculatorOptions_Rotation")
	if err != nil {
		return err
	}
	*x = CopyCalculatorOptions_Rotation(value)
	return nil
}

func (CopyCalculatorOptions_Rotation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b6ce2c9f9cf8c069, []int{0, 0}
}

type CopyCalculatorOptions struct {
	Rotation *CopyCalculatorOptions_Rotation `protobuf:"varint,1,opt,name=rotation,enum=mediapipe.CopyCalculatorOptions_Rotation,def=0" json:"rotation,omitempty"`
}

func (m *CopyCalculatorOptions) Reset()      { *m = CopyCalculatorOptions{} }
func (*CopyCalculatorOptions) ProtoMessage() {}
func (*CopyCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6ce2c9f9cf8c069, []int{0}
}
func (m *CopyCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyCalculatorOptions.Merge(m, src)
}
func (m *CopyCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *CopyCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CopyCalculatorOptions proto.InternalMessageInfo

const Default_CopyCalculatorOptions_Rotation CopyCalculatorOptions_Rotation = ROTATION_NONE

func (m *CopyCalculatorOptions) GetRotation() CopyCalculatorOptions_Rotation {
	if m != nil && m.Rotation != nil {
		return *m.Rotation
	}
	return Default_CopyCalculatorOptions_Rotation
}

var E_CopyCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*CopyCalculatorOptions)(nil),
	Field:         161773876,
	Name:          "mediapipe.CopyCalculatorOptions.ext",
	Tag:           "bytes,161773876,opt,name=ext",
	Filename:      "mediapipe/gpu/copy_calculator.proto",
}

func init() {
	proto.RegisterEnum("mediapipe.CopyCalculatorOptions_Rotation", CopyCalculatorOptions_Rotation_name, CopyCalculatorOptions_Rotation_value)
	proto.RegisterExtension(E_CopyCalculatorOptions_Ext)
	proto.RegisterType((*CopyCalculatorOptions)(nil), "mediapipe.CopyCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/gpu/copy_calculator.proto", fileDescriptor_b6ce2c9f9cf8c069)
}

var fileDescriptor_b6ce2c9f9cf8c069 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xce, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x2f, 0x28, 0xd5, 0x4f, 0xce, 0x2f, 0xa8, 0x8c, 0x4f,
	0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x84, 0x2b, 0x92, 0x52, 0x41, 0xa8, 0x4f, 0x2b, 0x4a, 0xcc, 0x4d, 0x2d, 0xcf, 0x2f, 0xca,
	0xd6, 0x47, 0xd7, 0xa0, 0xd4, 0xc5, 0xc4, 0x25, 0xea, 0x9c, 0x5f, 0x50, 0xe9, 0x0c, 0x97, 0xf0,
	0x2f, 0x28, 0xc9, 0xcc, 0xcf, 0x2b, 0x16, 0x0a, 0xe1, 0xe2, 0x28, 0xca, 0x2f, 0x49, 0x04, 0x71,
	0x24, 0x18, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0x34, 0xf5, 0xe0, 0x46, 0xea, 0x61, 0xd5, 0xa3, 0x17,
	0x04, 0xd5, 0x60, 0xc5, 0x1b, 0xe4, 0x1f, 0xe2, 0x18, 0xe2, 0xe9, 0xef, 0x17, 0xef, 0xe7, 0xef,
	0xe7, 0x1a, 0x04, 0x37, 0x49, 0xc9, 0x8d, 0x8b, 0x03, 0xa6, 0x48, 0x48, 0x90, 0x0b, 0x55, 0x99,
	0x00, 0x83, 0x90, 0x00, 0x17, 0x0f, 0x5c, 0xc8, 0xd9, 0x39, 0x5c, 0x80, 0x51, 0x48, 0x94, 0x4b,
	0x10, 0x59, 0x24, 0xde, 0xcd, 0xc7, 0x33, 0x40, 0x80, 0xc9, 0x28, 0x98, 0x8b, 0x39, 0xb5, 0xa2,
	0x44, 0x48, 0x06, 0xd9, 0x49, 0xe8, 0xce, 0x91, 0xd8, 0xf2, 0x69, 0xa2, 0xaf, 0x02, 0xa3, 0x06,
	0xb7, 0x91, 0x02, 0x21, 0x97, 0x07, 0x81, 0x4c, 0x73, 0x8a, 0xbf, 0xf0, 0x50, 0x8e, 0xe1, 0xc6,
	0x43, 0x39, 0x86, 0x0f, 0x0f, 0xe5, 0x18, 0x1b, 0x1e, 0xc9, 0x31, 0xae, 0x78, 0x24, 0xc7, 0x78,
	0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xbe, 0x78, 0x24, 0xc7,
	0xf0, 0xe1, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c,
	0xc7, 0x10, 0xa5, 0x99, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x9f, 0x9e,
	0x9f, 0x9f, 0x9e, 0x93, 0xaa, 0x8f, 0x08, 0x7a, 0x94, 0x48, 0x03, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x1e, 0x86, 0x15, 0xc3, 0xc4, 0x01, 0x00, 0x00,
}

func (x CopyCalculatorOptions_Rotation) String() string {
	s, ok := CopyCalculatorOptions_Rotation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *CopyCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CopyCalculatorOptions)
	if !ok {
		that2, ok := that.(CopyCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rotation != nil && that1.Rotation != nil {
		if *this.Rotation != *that1.Rotation {
			return false
		}
	} else if this.Rotation != nil {
		return false
	} else if that1.Rotation != nil {
		return false
	}
	return true
}
func (this *CopyCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gpu.CopyCalculatorOptions{")
	if this.Rotation != nil {
		s = append(s, "Rotation: "+valueToGoStringCopyCalculator(this.Rotation, "CopyCalculatorOptions_Rotation")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCopyCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CopyCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rotation != nil {
		i = encodeVarintCopyCalculator(dAtA, i, uint64(*m.Rotation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCopyCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovCopyCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CopyCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rotation != nil {
		n += 1 + sovCopyCalculator(uint64(*m.Rotation))
	}
	return n
}

func sovCopyCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCopyCalculator(x uint64) (n int) {
	return sovCopyCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CopyCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CopyCalculatorOptions{`,
		`Rotation:` + valueToStringCopyCalculator(this.Rotation) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCopyCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CopyCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotation", wireType)
			}
			var v CopyCalculatorOptions_Rotation
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CopyCalculatorOptions_Rotation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rotation = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCopyCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCopyCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCopyCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCopyCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCopyCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCopyCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCopyCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCopyCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCopyCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCopyCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCopyCalculator = fmt.Errorf("proto: unexpected end of group")
)
