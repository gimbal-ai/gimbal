// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/gpu/gl_scaler_calculator.proto

package gpu

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GlScalerCalculatorOptions struct {
	OutputWidth                     int32          `protobuf:"varint,1,opt,name=output_width,json=outputWidth" json:"output_width"`
	OutputHeight                    int32          `protobuf:"varint,2,opt,name=output_height,json=outputHeight" json:"output_height"`
	OutputScale                     *float32       `protobuf:"fixed32,7,opt,name=output_scale,json=outputScale,def=1" json:"output_scale,omitempty"`
	Rotation                        int32          `protobuf:"varint,3,opt,name=rotation" json:"rotation"`
	FlipVertical                    bool           `protobuf:"varint,4,opt,name=flip_vertical,json=flipVertical" json:"flip_vertical"`
	FlipHorizontal                  bool           `protobuf:"varint,5,opt,name=flip_horizontal,json=flipHorizontal" json:"flip_horizontal"`
	ScaleMode                       ScaleMode_Mode `protobuf:"varint,6,opt,name=scale_mode,json=scaleMode,enum=mediapipe.ScaleMode_Mode" json:"scale_mode"`
	UseNearestNeighborInterpolation *bool          `protobuf:"varint,8,opt,name=use_nearest_neighbor_interpolation,json=useNearestNeighborInterpolation,def=0" json:"use_nearest_neighbor_interpolation,omitempty"`
}

func (m *GlScalerCalculatorOptions) Reset()      { *m = GlScalerCalculatorOptions{} }
func (*GlScalerCalculatorOptions) ProtoMessage() {}
func (*GlScalerCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7eda050af1d8a25, []int{0}
}
func (m *GlScalerCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlScalerCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlScalerCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlScalerCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlScalerCalculatorOptions.Merge(m, src)
}
func (m *GlScalerCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *GlScalerCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GlScalerCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GlScalerCalculatorOptions proto.InternalMessageInfo

const Default_GlScalerCalculatorOptions_OutputScale float32 = 1
const Default_GlScalerCalculatorOptions_UseNearestNeighborInterpolation bool = false

func (m *GlScalerCalculatorOptions) GetOutputWidth() int32 {
	if m != nil {
		return m.OutputWidth
	}
	return 0
}

func (m *GlScalerCalculatorOptions) GetOutputHeight() int32 {
	if m != nil {
		return m.OutputHeight
	}
	return 0
}

func (m *GlScalerCalculatorOptions) GetOutputScale() float32 {
	if m != nil && m.OutputScale != nil {
		return *m.OutputScale
	}
	return Default_GlScalerCalculatorOptions_OutputScale
}

func (m *GlScalerCalculatorOptions) GetRotation() int32 {
	if m != nil {
		return m.Rotation
	}
	return 0
}

func (m *GlScalerCalculatorOptions) GetFlipVertical() bool {
	if m != nil {
		return m.FlipVertical
	}
	return false
}

func (m *GlScalerCalculatorOptions) GetFlipHorizontal() bool {
	if m != nil {
		return m.FlipHorizontal
	}
	return false
}

func (m *GlScalerCalculatorOptions) GetScaleMode() ScaleMode_Mode {
	if m != nil {
		return m.ScaleMode
	}
	return SCALE_MODE_DEFAULT
}

func (m *GlScalerCalculatorOptions) GetUseNearestNeighborInterpolation() bool {
	if m != nil && m.UseNearestNeighborInterpolation != nil {
		return *m.UseNearestNeighborInterpolation
	}
	return Default_GlScalerCalculatorOptions_UseNearestNeighborInterpolation
}

var E_GlScalerCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*GlScalerCalculatorOptions)(nil),
	Field:         166373014,
	Name:          "mediapipe.GlScalerCalculatorOptions.ext",
	Tag:           "bytes,166373014,opt,name=ext",
	Filename:      "mediapipe/gpu/gl_scaler_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_GlScalerCalculatorOptions_Ext)
	proto.RegisterType((*GlScalerCalculatorOptions)(nil), "mediapipe.GlScalerCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/gpu/gl_scaler_calculator.proto", fileDescriptor_d7eda050af1d8a25)
}

var fileDescriptor_d7eda050af1d8a25 = []byte{
	// 455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xb1, 0x6e, 0xd4, 0x30,
	0x18, 0xc7, 0xe3, 0x5e, 0x0f, 0xae, 0x2e, 0x14, 0xc9, 0x93, 0x5b, 0x21, 0x37, 0xaa, 0x4e, 0x22,
	0x1d, 0xb8, 0x88, 0x1b, 0x3b, 0x30, 0x94, 0x81, 0x32, 0xd0, 0x4a, 0x87, 0x44, 0x25, 0x16, 0xcb,
	0xcd, 0xf9, 0x12, 0x0b, 0x27, 0xb6, 0x1c, 0x87, 0x22, 0x26, 0x1e, 0x81, 0x89, 0x67, 0x40, 0x3c,
	0x49, 0x17, 0xa4, 0x1b, 0x3b, 0x21, 0x2e, 0xb7, 0x30, 0xf6, 0x09, 0x10, 0x72, 0x92, 0xcb, 0xa5,
	0xa0, 0x2e, 0x1e, 0xfc, 0xff, 0x7d, 0xff, 0xef, 0xef, 0xcf, 0x1f, 0x0c, 0x52, 0x3e, 0x15, 0x4c,
	0x0b, 0xcd, 0xc3, 0x58, 0x17, 0x61, 0x2c, 0x69, 0x1e, 0x31, 0xc9, 0x0d, 0x8d, 0x98, 0x8c, 0x0a,
	0xc9, 0xac, 0x32, 0x23, 0x6d, 0x94, 0x55, 0x68, 0xab, 0x25, 0xf7, 0x86, 0xeb, 0xa2, 0x99, 0x61,
	0x29, 0xbf, 0x54, 0xe6, 0x7d, 0xf8, 0x6f, 0xc1, 0x1e, 0xb9, 0x6d, 0x5d, 0xf9, 0xd2, 0x54, 0x4d,
	0x79, 0xad, 0x1f, 0xfc, 0xe9, 0xc1, 0xdd, 0x97, 0xf2, 0x4d, 0xd5, 0xee, 0x45, 0x5b, 0x7c, 0xa6,
	0xad, 0x50, 0x59, 0x8e, 0x9e, 0xc0, 0x07, 0xaa, 0xb0, 0xba, 0xb0, 0xf4, 0x52, 0x4c, 0x6d, 0x82,
	0x81, 0x0f, 0x82, 0xfe, 0xf1, 0xe6, 0xd5, 0xcf, 0x7d, 0x6f, 0xb2, 0x5d, 0x2b, 0xe7, 0x4e, 0x40,
	0x87, 0xf0, 0x61, 0x03, 0x26, 0x5c, 0xc4, 0x89, 0xc5, 0x1b, 0x1d, 0xb2, 0xf1, 0x38, 0xa9, 0x14,
	0x34, 0x6c, 0x3d, 0xab, 0x30, 0xf8, 0xbe, 0x0f, 0x82, 0x8d, 0x23, 0xf0, 0x6c, 0x65, 0x58, 0x65,
	0x41, 0x3e, 0x1c, 0x18, 0x65, 0x99, 0x8b, 0x81, 0x7b, 0x1d, 0xaf, 0xf6, 0xd6, 0xb5, 0x9c, 0x49,
	0xa1, 0xe9, 0x07, 0x6e, 0xac, 0x88, 0x98, 0xc4, 0x9b, 0x3e, 0x08, 0x06, 0xab, 0x96, 0x4e, 0x7a,
	0xdb, 0x28, 0xe8, 0x29, 0x7c, 0x54, 0xa1, 0x89, 0x32, 0xe2, 0x93, 0xca, 0x2c, 0x93, 0xb8, 0xdf,
	0x81, 0x77, 0x9c, 0x78, 0xd2, 0x6a, 0xe8, 0x39, 0x84, 0xeb, 0x39, 0xe1, 0x7b, 0x3e, 0x08, 0x76,
	0xc6, 0xbb, 0xa3, 0x76, 0x90, 0xa3, 0x2a, 0xe1, 0x6b, 0x37, 0x43, 0x77, 0x34, 0x26, 0x5b, 0xf9,
	0xea, 0x16, 0x4d, 0xe0, 0x41, 0x91, 0x73, 0x9a, 0x71, 0x66, 0x78, 0x6e, 0x69, 0xe6, 0xde, 0x7d,
	0xa1, 0x0c, 0x15, 0x99, 0xe5, 0x46, 0x2b, 0x59, 0xbf, 0x6a, 0xe0, 0x12, 0x1c, 0xf5, 0x67, 0x4c,
	0xe6, 0x7c, 0xb2, 0x5f, 0xe4, 0xfc, 0xb4, 0xe6, 0x4f, 0x1b, 0xfc, 0x55, 0x97, 0x1e, 0x9f, 0xc3,
	0x1e, 0xff, 0x68, 0xd1, 0xe3, 0x4e, 0x8c, 0xff, 0xbe, 0x0b, 0x7f, 0xfd, 0xf1, 0xfd, 0xcc, 0x07,
	0xc1, 0xf6, 0x78, 0xd8, 0xc1, 0xee, 0xfc, 0xdd, 0x89, 0x73, 0x3c, 0xa6, 0xf3, 0x05, 0xf1, 0xae,
	0x17, 0xc4, 0xbb, 0x59, 0x10, 0xf0, 0xb9, 0x24, 0xe0, 0x5b, 0x49, 0xc0, 0x55, 0x49, 0xc0, 0xbc,
	0x24, 0xe0, 0x57, 0x49, 0xc0, 0xef, 0x92, 0x78, 0x37, 0x25, 0x01, 0x5f, 0x96, 0xc4, 0x9b, 0x2f,
	0x89, 0x77, 0xbd, 0x24, 0xde, 0xbb, 0xc3, 0x58, 0xd8, 0xa4, 0xb8, 0x18, 0x45, 0x2a, 0x0d, 0x63,
	0xa5, 0x62, 0xc9, 0xc3, 0xf5, 0xa2, 0xdd, 0x5a, 0xb9, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x08,
	0x52, 0x1b, 0x14, 0xdd, 0x02, 0x00, 0x00,
}

func (this *GlScalerCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlScalerCalculatorOptions)
	if !ok {
		that2, ok := that.(GlScalerCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OutputWidth != that1.OutputWidth {
		return false
	}
	if this.OutputHeight != that1.OutputHeight {
		return false
	}
	if this.OutputScale != nil && that1.OutputScale != nil {
		if *this.OutputScale != *that1.OutputScale {
			return false
		}
	} else if this.OutputScale != nil {
		return false
	} else if that1.OutputScale != nil {
		return false
	}
	if this.Rotation != that1.Rotation {
		return false
	}
	if this.FlipVertical != that1.FlipVertical {
		return false
	}
	if this.FlipHorizontal != that1.FlipHorizontal {
		return false
	}
	if this.ScaleMode != that1.ScaleMode {
		return false
	}
	if this.UseNearestNeighborInterpolation != nil && that1.UseNearestNeighborInterpolation != nil {
		if *this.UseNearestNeighborInterpolation != *that1.UseNearestNeighborInterpolation {
			return false
		}
	} else if this.UseNearestNeighborInterpolation != nil {
		return false
	} else if that1.UseNearestNeighborInterpolation != nil {
		return false
	}
	return true
}
func (this *GlScalerCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&gpu.GlScalerCalculatorOptions{")
	s = append(s, "OutputWidth: "+fmt.Sprintf("%#v", this.OutputWidth)+",\n")
	s = append(s, "OutputHeight: "+fmt.Sprintf("%#v", this.OutputHeight)+",\n")
	if this.OutputScale != nil {
		s = append(s, "OutputScale: "+valueToGoStringGlScalerCalculator(this.OutputScale, "float32")+",\n")
	}
	s = append(s, "Rotation: "+fmt.Sprintf("%#v", this.Rotation)+",\n")
	s = append(s, "FlipVertical: "+fmt.Sprintf("%#v", this.FlipVertical)+",\n")
	s = append(s, "FlipHorizontal: "+fmt.Sprintf("%#v", this.FlipHorizontal)+",\n")
	s = append(s, "ScaleMode: "+fmt.Sprintf("%#v", this.ScaleMode)+",\n")
	if this.UseNearestNeighborInterpolation != nil {
		s = append(s, "UseNearestNeighborInterpolation: "+valueToGoStringGlScalerCalculator(this.UseNearestNeighborInterpolation, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGlScalerCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlScalerCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlScalerCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlScalerCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UseNearestNeighborInterpolation != nil {
		i--
		if *m.UseNearestNeighborInterpolation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.OutputScale != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.OutputScale))))
		i--
		dAtA[i] = 0x3d
	}
	i = encodeVarintGlScalerCalculator(dAtA, i, uint64(m.ScaleMode))
	i--
	dAtA[i] = 0x30
	i--
	if m.FlipHorizontal {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i--
	if m.FlipVertical {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i = encodeVarintGlScalerCalculator(dAtA, i, uint64(m.Rotation))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGlScalerCalculator(dAtA, i, uint64(m.OutputHeight))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGlScalerCalculator(dAtA, i, uint64(m.OutputWidth))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintGlScalerCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovGlScalerCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlScalerCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGlScalerCalculator(uint64(m.OutputWidth))
	n += 1 + sovGlScalerCalculator(uint64(m.OutputHeight))
	n += 1 + sovGlScalerCalculator(uint64(m.Rotation))
	n += 2
	n += 2
	n += 1 + sovGlScalerCalculator(uint64(m.ScaleMode))
	if m.OutputScale != nil {
		n += 5
	}
	if m.UseNearestNeighborInterpolation != nil {
		n += 2
	}
	return n
}

func sovGlScalerCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGlScalerCalculator(x uint64) (n int) {
	return sovGlScalerCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlScalerCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlScalerCalculatorOptions{`,
		`OutputWidth:` + fmt.Sprintf("%v", this.OutputWidth) + `,`,
		`OutputHeight:` + fmt.Sprintf("%v", this.OutputHeight) + `,`,
		`Rotation:` + fmt.Sprintf("%v", this.Rotation) + `,`,
		`FlipVertical:` + fmt.Sprintf("%v", this.FlipVertical) + `,`,
		`FlipHorizontal:` + fmt.Sprintf("%v", this.FlipHorizontal) + `,`,
		`ScaleMode:` + fmt.Sprintf("%v", this.ScaleMode) + `,`,
		`OutputScale:` + valueToStringGlScalerCalculator(this.OutputScale) + `,`,
		`UseNearestNeighborInterpolation:` + valueToStringGlScalerCalculator(this.UseNearestNeighborInterpolation) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGlScalerCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlScalerCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGlScalerCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlScalerCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlScalerCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputWidth", wireType)
			}
			m.OutputWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGlScalerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputWidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputHeight", wireType)
			}
			m.OutputHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGlScalerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotation", wireType)
			}
			m.Rotation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGlScalerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rotation |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlipVertical", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGlScalerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlipVertical = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlipHorizontal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGlScalerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlipHorizontal = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleMode", wireType)
			}
			m.ScaleMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGlScalerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScaleMode |= ScaleMode_Mode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputScale", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.OutputScale = &v2
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseNearestNeighborInterpolation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGlScalerCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UseNearestNeighborInterpolation = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGlScalerCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGlScalerCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGlScalerCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGlScalerCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGlScalerCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGlScalerCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGlScalerCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGlScalerCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGlScalerCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGlScalerCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGlScalerCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGlScalerCalculator = fmt.Errorf("proto: unexpected end of group")
)
