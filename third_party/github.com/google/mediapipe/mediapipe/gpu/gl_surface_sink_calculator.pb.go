// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/gpu/gl_surface_sink_calculator.proto

package gpu

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	framework "github.com/google/mediapipe/mediapipe/framework"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GlSurfaceSinkCalculatorOptions struct {
	FrameScaleMode ScaleMode_Mode `protobuf:"varint,1,opt,name=frame_scale_mode,json=frameScaleMode,enum=mediapipe.ScaleMode_Mode" json:"frame_scale_mode"`
}

func (m *GlSurfaceSinkCalculatorOptions) Reset()      { *m = GlSurfaceSinkCalculatorOptions{} }
func (*GlSurfaceSinkCalculatorOptions) ProtoMessage() {}
func (*GlSurfaceSinkCalculatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_e23caab2b1ba50b9, []int{0}
}
func (m *GlSurfaceSinkCalculatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlSurfaceSinkCalculatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlSurfaceSinkCalculatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlSurfaceSinkCalculatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlSurfaceSinkCalculatorOptions.Merge(m, src)
}
func (m *GlSurfaceSinkCalculatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *GlSurfaceSinkCalculatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GlSurfaceSinkCalculatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GlSurfaceSinkCalculatorOptions proto.InternalMessageInfo

func (m *GlSurfaceSinkCalculatorOptions) GetFrameScaleMode() ScaleMode_Mode {
	if m != nil {
		return m.FrameScaleMode
	}
	return SCALE_MODE_DEFAULT
}

var E_GlSurfaceSinkCalculatorOptions_Ext = &proto.ExtensionDesc{
	ExtendedType:  (*framework.CalculatorOptions)(nil),
	ExtensionType: (*GlSurfaceSinkCalculatorOptions)(nil),
	Field:         243334538,
	Name:          "mediapipe.GlSurfaceSinkCalculatorOptions.ext",
	Tag:           "bytes,243334538,opt,name=ext",
	Filename:      "mediapipe/gpu/gl_surface_sink_calculator.proto",
}

func init() {
	proto.RegisterExtension(E_GlSurfaceSinkCalculatorOptions_Ext)
	proto.RegisterType((*GlSurfaceSinkCalculatorOptions)(nil), "mediapipe.GlSurfaceSinkCalculatorOptions")
}

func init() {
	proto.RegisterFile("mediapipe/gpu/gl_surface_sink_calculator.proto", fileDescriptor_e23caab2b1ba50b9)
}

var fileDescriptor_e23caab2b1ba50b9 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xcb, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x2f, 0x28, 0xd5, 0x4f, 0xcf, 0x89, 0x2f, 0x2e, 0x2d,
	0x4a, 0x4b, 0x4c, 0x4e, 0x8d, 0x2f, 0xce, 0xcc, 0xcb, 0x8e, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd,
	0x49, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0xab, 0x97, 0x52,
	0x41, 0x68, 0x4d, 0x2b, 0x4a, 0xcc, 0x4d, 0x2d, 0xcf, 0x2f, 0xca, 0xd6, 0x47, 0xd7, 0x20, 0x25,
	0x87, 0x6a, 0x41, 0x71, 0x72, 0x62, 0x4e, 0x6a, 0x7c, 0x6e, 0x7e, 0x4a, 0x2a, 0x44, 0x5e, 0xe9,
	0x24, 0x23, 0x97, 0x9c, 0x7b, 0x4e, 0x30, 0xc4, 0xd2, 0xe0, 0xcc, 0xbc, 0x6c, 0x67, 0xb8, 0x09,
	0xfe, 0x05, 0x25, 0x99, 0xf9, 0x79, 0xc5, 0x42, 0x9e, 0x5c, 0x02, 0x60, 0x0b, 0xe2, 0x11, 0x9a,
	0x25, 0x18, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0x24, 0x11, 0xce, 0xd7, 0x0b, 0x06, 0x49, 0xfa, 0x82,
	0x0c, 0x06, 0x11, 0x4e, 0x2c, 0x27, 0xee, 0xc9, 0x33, 0x04, 0xf1, 0x81, 0x35, 0xc2, 0xa5, 0x8c,
	0x62, 0xb8, 0x98, 0x53, 0x2b, 0x4a, 0x84, 0x64, 0x90, 0xf4, 0x61, 0xd8, 0x27, 0xd1, 0xf5, 0xbb,
	0xb9, 0x44, 0x81, 0x51, 0x83, 0xdb, 0x48, 0x13, 0x49, 0x19, 0x7e, 0x37, 0x06, 0x81, 0x8c, 0x75,
	0x8a, 0xbf, 0xf0, 0x50, 0x8e, 0xe1, 0xc6, 0x43, 0x39, 0x86, 0x0f, 0x0f, 0xe5, 0x18, 0x1b, 0x1e,
	0xc9, 0x31, 0xae, 0x78, 0x24, 0xc7, 0x78, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f,
	0x1e, 0xc9, 0x31, 0xbe, 0x78, 0x24, 0xc7, 0xf0, 0xe1, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c,
	0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xa5, 0x99, 0x9e, 0x59, 0x92, 0x51, 0x9a,
	0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x9f, 0x9e, 0x9f, 0x9f, 0x9e, 0x93, 0xaa, 0x8f, 0x08, 0x33, 0x94,
	0xd0, 0x03, 0x04, 0x00, 0x00, 0xff, 0xff, 0x24, 0x86, 0x8c, 0x01, 0xae, 0x01, 0x00, 0x00,
}

func (this *GlSurfaceSinkCalculatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlSurfaceSinkCalculatorOptions)
	if !ok {
		that2, ok := that.(GlSurfaceSinkCalculatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FrameScaleMode != that1.FrameScaleMode {
		return false
	}
	return true
}
func (this *GlSurfaceSinkCalculatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gpu.GlSurfaceSinkCalculatorOptions{")
	s = append(s, "FrameScaleMode: "+fmt.Sprintf("%#v", this.FrameScaleMode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGlSurfaceSinkCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlSurfaceSinkCalculatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlSurfaceSinkCalculatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlSurfaceSinkCalculatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGlSurfaceSinkCalculator(dAtA, i, uint64(m.FrameScaleMode))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintGlSurfaceSinkCalculator(dAtA []byte, offset int, v uint64) int {
	offset -= sovGlSurfaceSinkCalculator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlSurfaceSinkCalculatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGlSurfaceSinkCalculator(uint64(m.FrameScaleMode))
	return n
}

func sovGlSurfaceSinkCalculator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGlSurfaceSinkCalculator(x uint64) (n int) {
	return sovGlSurfaceSinkCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlSurfaceSinkCalculatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlSurfaceSinkCalculatorOptions{`,
		`FrameScaleMode:` + fmt.Sprintf("%v", this.FrameScaleMode) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGlSurfaceSinkCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlSurfaceSinkCalculatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGlSurfaceSinkCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlSurfaceSinkCalculatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlSurfaceSinkCalculatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameScaleMode", wireType)
			}
			m.FrameScaleMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGlSurfaceSinkCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameScaleMode |= ScaleMode_Mode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGlSurfaceSinkCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGlSurfaceSinkCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGlSurfaceSinkCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGlSurfaceSinkCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGlSurfaceSinkCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGlSurfaceSinkCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGlSurfaceSinkCalculator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGlSurfaceSinkCalculator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGlSurfaceSinkCalculator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGlSurfaceSinkCalculator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGlSurfaceSinkCalculator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGlSurfaceSinkCalculator = fmt.Errorf("proto: unexpected end of group")
)
