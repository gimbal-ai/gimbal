// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/gpu/gpu_origin.proto

package gpu

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GpuOrigin_Mode int32

const (
	ORIGIN_MODE_DEFAULT      GpuOrigin_Mode = 0
	ORIGIN_MODE_CONVENTIONAL GpuOrigin_Mode = 1
	ORIGIN_MODE_TOP_LEFT     GpuOrigin_Mode = 2
)

var GpuOrigin_Mode_name = map[int32]string{
	0: "ORIGIN_MODE_DEFAULT",
	1: "ORIGIN_MODE_CONVENTIONAL",
	2: "ORIGIN_MODE_TOP_LEFT",
}

var GpuOrigin_Mode_value = map[string]int32{
	"ORIGIN_MODE_DEFAULT":      0,
	"ORIGIN_MODE_CONVENTIONAL": 1,
	"ORIGIN_MODE_TOP_LEFT":     2,
}

func (GpuOrigin_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_80ccbfe966459e8e, []int{0, 0}
}

type GpuOrigin struct {
}

func (m *GpuOrigin) Reset()      { *m = GpuOrigin{} }
func (*GpuOrigin) ProtoMessage() {}
func (*GpuOrigin) Descriptor() ([]byte, []int) {
	return fileDescriptor_80ccbfe966459e8e, []int{0}
}
func (m *GpuOrigin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GpuOrigin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GpuOrigin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GpuOrigin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GpuOrigin.Merge(m, src)
}
func (m *GpuOrigin) XXX_Size() int {
	return m.Size()
}
func (m *GpuOrigin) XXX_DiscardUnknown() {
	xxx_messageInfo_GpuOrigin.DiscardUnknown(m)
}

var xxx_messageInfo_GpuOrigin proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("mediapipe.GpuOrigin_Mode", GpuOrigin_Mode_name, GpuOrigin_Mode_value)
	proto.RegisterType((*GpuOrigin)(nil), "mediapipe.GpuOrigin")
}

func init() { proto.RegisterFile("mediapipe/gpu/gpu_origin.proto", fileDescriptor_80ccbfe966459e8e) }

var fileDescriptor_80ccbfe966459e8e = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcb, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x2f, 0x28, 0x05, 0xe1, 0xf8, 0xfc, 0xa2, 0xcc, 0xf4,
	0xcc, 0x3c, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0x4e, 0xb8, 0xbc, 0x52, 0x0a, 0x17, 0xa7,
	0x7b, 0x41, 0xa9, 0x3f, 0x58, 0x56, 0x29, 0x9c, 0x8b, 0xc5, 0x37, 0x3f, 0x25, 0x55, 0x48, 0x9c,
	0x4b, 0xd8, 0x3f, 0xc8, 0xd3, 0xdd, 0xd3, 0x2f, 0xde, 0xd7, 0xdf, 0xc5, 0x35, 0xde, 0xc5, 0xd5,
	0xcd, 0x31, 0xd4, 0x27, 0x44, 0x80, 0x41, 0x48, 0x86, 0x4b, 0x02, 0x59, 0xc2, 0xd9, 0xdf, 0x2f,
	0xcc, 0xd5, 0x2f, 0xc4, 0xd3, 0xdf, 0xcf, 0xd1, 0x47, 0x80, 0x51, 0x48, 0x82, 0x4b, 0x04, 0x59,
	0x36, 0xc4, 0x3f, 0x20, 0xde, 0xc7, 0xd5, 0x2d, 0x44, 0x80, 0xc9, 0x29, 0xfe, 0xc2, 0x43, 0x39,
	0x86, 0x1b, 0x0f, 0xe5, 0x18, 0x3e, 0x3c, 0x94, 0x63, 0x6c, 0x78, 0x24, 0xc7, 0xb8, 0xe2, 0x91,
	0x1c, 0xe3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0xf8, 0xe2,
	0x91, 0x1c, 0xc3, 0x87, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70,
	0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x66, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae,
	0x7e, 0x7a, 0x7e, 0x7e, 0x7a, 0x4e, 0xaa, 0x3e, 0xc2, 0x63, 0x28, 0x5e, 0x4c, 0x62, 0x03, 0x7b,
	0xcc, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x0d, 0xfc, 0x0d, 0x89, 0xfa, 0x00, 0x00, 0x00,
}

func (x GpuOrigin_Mode) String() string {
	s, ok := GpuOrigin_Mode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GpuOrigin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GpuOrigin)
	if !ok {
		that2, ok := that.(GpuOrigin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GpuOrigin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&gpu.GpuOrigin{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGpuOrigin(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GpuOrigin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GpuOrigin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GpuOrigin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintGpuOrigin(dAtA []byte, offset int, v uint64) int {
	offset -= sovGpuOrigin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GpuOrigin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovGpuOrigin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGpuOrigin(x uint64) (n int) {
	return sovGpuOrigin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GpuOrigin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GpuOrigin{`,
		`}`,
	}, "")
	return s
}
func valueToStringGpuOrigin(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GpuOrigin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpuOrigin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GpuOrigin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GpuOrigin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGpuOrigin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpuOrigin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGpuOrigin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGpuOrigin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGpuOrigin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGpuOrigin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGpuOrigin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGpuOrigin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGpuOrigin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGpuOrigin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGpuOrigin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGpuOrigin = fmt.Errorf("proto: unexpected end of group")
)
