// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/gpu/scale_mode.proto

package gpu

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ScaleMode_Mode int32

const (
	SCALE_MODE_DEFAULT       ScaleMode_Mode = 0
	SCALE_MODE_STRETCH       ScaleMode_Mode = 1
	SCALE_MODE_FIT           ScaleMode_Mode = 2
	SCALE_MODE_FILL_AND_CROP ScaleMode_Mode = 3
)

var ScaleMode_Mode_name = map[int32]string{
	0: "SCALE_MODE_DEFAULT",
	1: "SCALE_MODE_STRETCH",
	2: "SCALE_MODE_FIT",
	3: "SCALE_MODE_FILL_AND_CROP",
}

var ScaleMode_Mode_value = map[string]int32{
	"SCALE_MODE_DEFAULT":       0,
	"SCALE_MODE_STRETCH":       1,
	"SCALE_MODE_FIT":           2,
	"SCALE_MODE_FILL_AND_CROP": 3,
}

func (x ScaleMode_Mode) Enum() *ScaleMode_Mode {
	p := new(ScaleMode_Mode)
	*p = x
	return p
}

func (x ScaleMode_Mode) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(ScaleMode_Mode_name, int32(x))
}

func (x *ScaleMode_Mode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ScaleMode_Mode_value, data, "ScaleMode_Mode")
	if err != nil {
		return err
	}
	*x = ScaleMode_Mode(value)
	return nil
}

func (ScaleMode_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3b049e684c88740, []int{0, 0}
}

type ScaleMode struct {
}

func (m *ScaleMode) Reset()      { *m = ScaleMode{} }
func (*ScaleMode) ProtoMessage() {}
func (*ScaleMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3b049e684c88740, []int{0}
}
func (m *ScaleMode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScaleMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScaleMode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScaleMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScaleMode.Merge(m, src)
}
func (m *ScaleMode) XXX_Size() int {
	return m.Size()
}
func (m *ScaleMode) XXX_DiscardUnknown() {
	xxx_messageInfo_ScaleMode.DiscardUnknown(m)
}

var xxx_messageInfo_ScaleMode proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("mediapipe.ScaleMode_Mode", ScaleMode_Mode_name, ScaleMode_Mode_value)
	proto.RegisterType((*ScaleMode)(nil), "mediapipe.ScaleMode")
}

func init() { proto.RegisterFile("mediapipe/gpu/scale_mode.proto", fileDescriptor_d3b049e684c88740) }

var fileDescriptor_d3b049e684c88740 = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcb, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x4f, 0x2f, 0x28, 0xd5, 0x2f, 0x4e, 0x4e, 0xcc, 0x49, 0x8d,
	0xcf, 0xcd, 0x4f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0xcb, 0x2b, 0x95,
	0x72, 0x71, 0x06, 0x83, 0xa4, 0x7d, 0xf3, 0x53, 0x52, 0x95, 0x32, 0xb8, 0x58, 0x40, 0xb4, 0x90,
	0x18, 0x97, 0x50, 0xb0, 0xb3, 0xa3, 0x8f, 0x6b, 0xbc, 0xaf, 0xbf, 0x8b, 0x6b, 0xbc, 0x8b, 0xab,
	0x9b, 0x63, 0xa8, 0x4f, 0x88, 0x00, 0x03, 0x9a, 0x78, 0x70, 0x48, 0x90, 0x6b, 0x88, 0xb3, 0x87,
	0x00, 0xa3, 0x90, 0x10, 0x17, 0x1f, 0x92, 0xb8, 0x9b, 0x67, 0x88, 0x00, 0x93, 0x90, 0x0c, 0x97,
	0x04, 0x8a, 0x98, 0x8f, 0x4f, 0xbc, 0xa3, 0x9f, 0x4b, 0xbc, 0x73, 0x90, 0x7f, 0x80, 0x00, 0xb3,
	0x53, 0xfc, 0x85, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca, 0x31, 0x7c, 0x78, 0x28, 0xc7, 0xd8, 0xf0,
	0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c,
	0xf0, 0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39, 0x86, 0x0f, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63,
	0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xcd, 0xf4, 0xcc, 0x92, 0x8c, 0xd2,
	0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0x7d, 0x84, 0x4f, 0x51,
	0xfc, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x67, 0x99, 0x53, 0xf2, 0x03, 0x01, 0x00, 0x00,
}

func (x ScaleMode_Mode) String() string {
	s, ok := ScaleMode_Mode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ScaleMode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScaleMode)
	if !ok {
		that2, ok := that.(ScaleMode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ScaleMode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&gpu.ScaleMode{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringScaleMode(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ScaleMode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScaleMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScaleMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintScaleMode(dAtA []byte, offset int, v uint64) int {
	offset -= sovScaleMode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ScaleMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovScaleMode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozScaleMode(x uint64) (n int) {
	return sovScaleMode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ScaleMode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScaleMode{`,
		`}`,
	}, "")
	return s
}
func valueToStringScaleMode(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ScaleMode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScaleMode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScaleMode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScaleMode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipScaleMode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScaleMode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScaleMode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScaleMode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScaleMode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScaleMode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthScaleMode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupScaleMode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthScaleMode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthScaleMode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScaleMode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupScaleMode = fmt.Errorf("proto: unexpected end of group")
)
