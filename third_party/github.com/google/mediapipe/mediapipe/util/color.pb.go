// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/util/color.proto

package util

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Color struct {
	R int32 `protobuf:"varint,1,opt,name=r" json:"r"`
	G int32 `protobuf:"varint,2,opt,name=g" json:"g"`
	B int32 `protobuf:"varint,3,opt,name=b" json:"b"`
}

func (m *Color) Reset()      { *m = Color{} }
func (*Color) ProtoMessage() {}
func (*Color) Descriptor() ([]byte, []int) {
	return fileDescriptor_194b78377c321de0, []int{0}
}
func (m *Color) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Color) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Color.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Color) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Color.Merge(m, src)
}
func (m *Color) XXX_Size() int {
	return m.Size()
}
func (m *Color) XXX_DiscardUnknown() {
	xxx_messageInfo_Color.DiscardUnknown(m)
}

var xxx_messageInfo_Color proto.InternalMessageInfo

func (m *Color) GetR() int32 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *Color) GetG() int32 {
	if m != nil {
		return m.G
	}
	return 0
}

func (m *Color) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type ColorMap struct {
	LabelToColor map[string]*Color `protobuf:"bytes,1,rep,name=label_to_color,json=labelToColor" json:"label_to_color,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ColorMap) Reset()      { *m = ColorMap{} }
func (*ColorMap) ProtoMessage() {}
func (*ColorMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_194b78377c321de0, []int{1}
}
func (m *ColorMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColorMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColorMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ColorMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColorMap.Merge(m, src)
}
func (m *ColorMap) XXX_Size() int {
	return m.Size()
}
func (m *ColorMap) XXX_DiscardUnknown() {
	xxx_messageInfo_ColorMap.DiscardUnknown(m)
}

var xxx_messageInfo_ColorMap proto.InternalMessageInfo

func (m *ColorMap) GetLabelToColor() map[string]*Color {
	if m != nil {
		return m.LabelToColor
	}
	return nil
}

func init() {
	proto.RegisterType((*Color)(nil), "mediapipe.Color")
	proto.RegisterType((*ColorMap)(nil), "mediapipe.ColorMap")
	proto.RegisterMapType((map[string]*Color)(nil), "mediapipe.ColorMap.LabelToColorEntry")
}

func init() { proto.RegisterFile("mediapipe/util/color.proto", fileDescriptor_194b78377c321de0) }

var fileDescriptor_194b78377c321de0 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xca, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x2f, 0x2d, 0xc9, 0xcc, 0xd1, 0x4f, 0xce, 0xcf, 0xc9, 0x2f,
	0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0xcb, 0x29, 0x39, 0x73, 0xb1, 0x3a, 0x83,
	0x64, 0x84, 0x84, 0xb8, 0x18, 0x8b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x9d, 0x58, 0x4e, 0xdc,
	0x93, 0x67, 0x08, 0x62, 0x04, 0x8b, 0xa5, 0x4b, 0x30, 0x21, 0x8b, 0xa5, 0x83, 0xc4, 0x92, 0x24,
	0x98, 0x91, 0xc5, 0x92, 0x94, 0x36, 0x30, 0x72, 0x71, 0x80, 0x4d, 0xf1, 0x4d, 0x2c, 0x10, 0xf2,
	0xe6, 0xe2, 0xcb, 0x49, 0x4c, 0x4a, 0xcd, 0x89, 0x2f, 0xc9, 0x8f, 0x07, 0x5b, 0x2a, 0xc1, 0xa8,
	0xc0, 0xac, 0xc1, 0x6d, 0xa4, 0xaa, 0x07, 0xb7, 0x55, 0x0f, 0xa6, 0x58, 0xcf, 0x07, 0xa4, 0x32,
	0x24, 0x1f, 0xcc, 0x77, 0xcd, 0x2b, 0x29, 0xaa, 0x0c, 0xe2, 0xc9, 0x41, 0x12, 0x92, 0x0a, 0xe7,
	0x12, 0xc4, 0x50, 0x22, 0x24, 0xc6, 0xc5, 0x9c, 0x9d, 0x5a, 0x09, 0x76, 0x2c, 0x27, 0xd4, 0x11,
	0x20, 0x01, 0x21, 0x35, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0xb0, 0x93, 0xb9, 0x8d, 0x04,
	0xd0, 0x2d, 0x0c, 0x82, 0x48, 0x5b, 0x31, 0x59, 0x30, 0x3a, 0xf5, 0x32, 0x5e, 0x78, 0x28, 0xc7,
	0x70, 0xe3, 0xa1, 0x1c, 0xc3, 0x87, 0x87, 0x72, 0x8c, 0x0d, 0x8f, 0xe4, 0x18, 0x57, 0x3c, 0x92,
	0x63, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x5f, 0x3c,
	0x92, 0x63, 0xf8, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e,
	0x3c, 0x96, 0x63, 0xe0, 0x92, 0x4f, 0xce, 0xcf, 0xd5, 0x4b, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0x45,
	0x32, 0x1d, 0x14, 0xc0, 0x90, 0xa0, 0x75, 0xe2, 0x02, 0xdb, 0x14, 0x00, 0x62, 0x47, 0x69, 0xa5,
	0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x43, 0xf4, 0xe8, 0x23, 0x22, 0x05,
	0x35, 0x7a, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x1a, 0xa7, 0xe2, 0xaf, 0x01, 0x00, 0x00,
}

func (this *Color) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Color)
	if !ok {
		that2, ok := that.(Color)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.R != that1.R {
		return false
	}
	if this.G != that1.G {
		return false
	}
	if this.B != that1.B {
		return false
	}
	return true
}
func (this *ColorMap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ColorMap)
	if !ok {
		that2, ok := that.(ColorMap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LabelToColor) != len(that1.LabelToColor) {
		return false
	}
	for i := range this.LabelToColor {
		if !this.LabelToColor[i].Equal(that1.LabelToColor[i]) {
			return false
		}
	}
	return true
}
func (this *Color) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&util.Color{")
	s = append(s, "R: "+fmt.Sprintf("%#v", this.R)+",\n")
	s = append(s, "G: "+fmt.Sprintf("%#v", this.G)+",\n")
	s = append(s, "B: "+fmt.Sprintf("%#v", this.B)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ColorMap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&util.ColorMap{")
	keysForLabelToColor := make([]string, 0, len(this.LabelToColor))
	for k, _ := range this.LabelToColor {
		keysForLabelToColor = append(keysForLabelToColor, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabelToColor)
	mapStringForLabelToColor := "map[string]*Color{"
	for _, k := range keysForLabelToColor {
		mapStringForLabelToColor += fmt.Sprintf("%#v: %#v,", k, this.LabelToColor[k])
	}
	mapStringForLabelToColor += "}"
	if this.LabelToColor != nil {
		s = append(s, "LabelToColor: "+mapStringForLabelToColor+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringColor(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Color) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Color) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Color) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintColor(dAtA, i, uint64(m.B))
	i--
	dAtA[i] = 0x18
	i = encodeVarintColor(dAtA, i, uint64(m.G))
	i--
	dAtA[i] = 0x10
	i = encodeVarintColor(dAtA, i, uint64(m.R))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ColorMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColorMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ColorMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LabelToColor) > 0 {
		for k := range m.LabelToColor {
			v := m.LabelToColor[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintColor(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintColor(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintColor(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintColor(dAtA []byte, offset int, v uint64) int {
	offset -= sovColor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Color) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovColor(uint64(m.R))
	n += 1 + sovColor(uint64(m.G))
	n += 1 + sovColor(uint64(m.B))
	return n
}

func (m *ColorMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LabelToColor) > 0 {
		for k, v := range m.LabelToColor {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovColor(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovColor(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovColor(uint64(mapEntrySize))
		}
	}
	return n
}

func sovColor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozColor(x uint64) (n int) {
	return sovColor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Color) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Color{`,
		`R:` + fmt.Sprintf("%v", this.R) + `,`,
		`G:` + fmt.Sprintf("%v", this.G) + `,`,
		`B:` + fmt.Sprintf("%v", this.B) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ColorMap) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabelToColor := make([]string, 0, len(this.LabelToColor))
	for k, _ := range this.LabelToColor {
		keysForLabelToColor = append(keysForLabelToColor, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabelToColor)
	mapStringForLabelToColor := "map[string]*Color{"
	for _, k := range keysForLabelToColor {
		mapStringForLabelToColor += fmt.Sprintf("%v: %v,", k, this.LabelToColor[k])
	}
	mapStringForLabelToColor += "}"
	s := strings.Join([]string{`&ColorMap{`,
		`LabelToColor:` + mapStringForLabelToColor + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringColor(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Color) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowColor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Color: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Color: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			m.R = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowColor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.R |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field G", wireType)
			}
			m.G = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowColor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.G |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			m.B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowColor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.B |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipColor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthColor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColorMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowColor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColorMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColorMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelToColor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowColor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthColor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthColor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelToColor == nil {
				m.LabelToColor = make(map[string]*Color)
			}
			var mapkey string
			var mapvalue *Color
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowColor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowColor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthColor
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthColor
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowColor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthColor
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthColor
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Color{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipColor(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthColor
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LabelToColor[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipColor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthColor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipColor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowColor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowColor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowColor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthColor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupColor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthColor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthColor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowColor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupColor = fmt.Errorf("proto: unexpected end of group")
)
