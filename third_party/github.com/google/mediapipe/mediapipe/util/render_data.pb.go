// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/util/render_data.proto

package util

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RenderAnnotation_Line_LineType int32

const (
	UNKNOWN RenderAnnotation_Line_LineType = 0
	SOLID   RenderAnnotation_Line_LineType = 1
	DASHED  RenderAnnotation_Line_LineType = 2
)

var RenderAnnotation_Line_LineType_name = map[int32]string{
	0: "UNKNOWN",
	1: "SOLID",
	2: "DASHED",
}

var RenderAnnotation_Line_LineType_value = map[string]int32{
	"UNKNOWN": 0,
	"SOLID":   1,
	"DASHED":  2,
}

func (x RenderAnnotation_Line_LineType) Enum() *RenderAnnotation_Line_LineType {
	p := new(RenderAnnotation_Line_LineType)
	*p = x
	return p
}

func (x RenderAnnotation_Line_LineType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(RenderAnnotation_Line_LineType_name, int32(x))
}

func (x *RenderAnnotation_Line_LineType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RenderAnnotation_Line_LineType_value, data, "RenderAnnotation_Line_LineType")
	if err != nil {
		return err
	}
	*x = RenderAnnotation_Line_LineType(value)
	return nil
}

func (RenderAnnotation_Line_LineType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7f970cad00e1868f, []int{1, 7, 0}
}

type RenderData struct {
	RenderAnnotations []*RenderAnnotation `protobuf:"bytes,1,rep,name=render_annotations,json=renderAnnotations" json:"render_annotations,omitempty"`
	SceneClass        string              `protobuf:"bytes,2,opt,name=scene_class,json=sceneClass" json:"scene_class"`
	SceneViewport     *RenderViewport     `protobuf:"bytes,3,opt,name=scene_viewport,json=sceneViewport" json:"scene_viewport,omitempty"`
}

func (m *RenderData) Reset()      { *m = RenderData{} }
func (*RenderData) ProtoMessage() {}
func (*RenderData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f970cad00e1868f, []int{0}
}
func (m *RenderData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenderData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenderData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenderData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderData.Merge(m, src)
}
func (m *RenderData) XXX_Size() int {
	return m.Size()
}
func (m *RenderData) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderData.DiscardUnknown(m)
}

var xxx_messageInfo_RenderData proto.InternalMessageInfo

func (m *RenderData) GetRenderAnnotations() []*RenderAnnotation {
	if m != nil {
		return m.RenderAnnotations
	}
	return nil
}

func (m *RenderData) GetSceneClass() string {
	if m != nil {
		return m.SceneClass
	}
	return ""
}

func (m *RenderData) GetSceneViewport() *RenderViewport {
	if m != nil {
		return m.SceneViewport
	}
	return nil
}

type RenderAnnotation struct {
	// Types that are valid to be assigned to Data:
	//	*RenderAnnotation_Rectangle_
	//	*RenderAnnotation_FilledRectangle_
	//	*RenderAnnotation_Oval_
	//	*RenderAnnotation_FilledOval_
	//	*RenderAnnotation_Point_
	//	*RenderAnnotation_Line_
	//	*RenderAnnotation_Arrow_
	//	*RenderAnnotation_Text_
	//	*RenderAnnotation_RoundedRectangle_
	//	*RenderAnnotation_FilledRoundedRectangle_
	//	*RenderAnnotation_GradientLine_
	//	*RenderAnnotation_Scribble_
	Data      isRenderAnnotation_Data `protobuf_oneof:"data"`
	Thickness *float64                `protobuf:"fixed64,11,opt,name=thickness,def=1" json:"thickness,omitempty"`
	Color     *Color                  `protobuf:"bytes,12,opt,name=color" json:"color,omitempty"`
	SceneTag  string                  `protobuf:"bytes,13,opt,name=scene_tag,json=sceneTag" json:"scene_tag"`
}

func (m *RenderAnnotation) Reset()      { *m = RenderAnnotation{} }
func (*RenderAnnotation) ProtoMessage() {}
func (*RenderAnnotation) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f970cad00e1868f, []int{1}
}
func (m *RenderAnnotation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenderAnnotation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenderAnnotation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenderAnnotation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderAnnotation.Merge(m, src)
}
func (m *RenderAnnotation) XXX_Size() int {
	return m.Size()
}
func (m *RenderAnnotation) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderAnnotation.DiscardUnknown(m)
}

var xxx_messageInfo_RenderAnnotation proto.InternalMessageInfo

const Default_RenderAnnotation_Thickness float64 = 1

type isRenderAnnotation_Data interface {
	isRenderAnnotation_Data()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RenderAnnotation_Rectangle_ struct {
	Rectangle *RenderAnnotation_Rectangle `protobuf:"bytes,1,opt,name=rectangle,oneof" json:"rectangle,omitempty"`
}
type RenderAnnotation_FilledRectangle_ struct {
	FilledRectangle *RenderAnnotation_FilledRectangle `protobuf:"bytes,2,opt,name=filled_rectangle,json=filledRectangle,oneof" json:"filled_rectangle,omitempty"`
}
type RenderAnnotation_Oval_ struct {
	Oval *RenderAnnotation_Oval `protobuf:"bytes,3,opt,name=oval,oneof" json:"oval,omitempty"`
}
type RenderAnnotation_FilledOval_ struct {
	FilledOval *RenderAnnotation_FilledOval `protobuf:"bytes,4,opt,name=filled_oval,json=filledOval,oneof" json:"filled_oval,omitempty"`
}
type RenderAnnotation_Point_ struct {
	Point *RenderAnnotation_Point `protobuf:"bytes,5,opt,name=point,oneof" json:"point,omitempty"`
}
type RenderAnnotation_Line_ struct {
	Line *RenderAnnotation_Line `protobuf:"bytes,6,opt,name=line,oneof" json:"line,omitempty"`
}
type RenderAnnotation_Arrow_ struct {
	Arrow *RenderAnnotation_Arrow `protobuf:"bytes,7,opt,name=arrow,oneof" json:"arrow,omitempty"`
}
type RenderAnnotation_Text_ struct {
	Text *RenderAnnotation_Text `protobuf:"bytes,8,opt,name=text,oneof" json:"text,omitempty"`
}
type RenderAnnotation_RoundedRectangle_ struct {
	RoundedRectangle *RenderAnnotation_RoundedRectangle `protobuf:"bytes,9,opt,name=rounded_rectangle,json=roundedRectangle,oneof" json:"rounded_rectangle,omitempty"`
}
type RenderAnnotation_FilledRoundedRectangle_ struct {
	FilledRoundedRectangle *RenderAnnotation_FilledRoundedRectangle `protobuf:"bytes,10,opt,name=filled_rounded_rectangle,json=filledRoundedRectangle,oneof" json:"filled_rounded_rectangle,omitempty"`
}
type RenderAnnotation_GradientLine_ struct {
	GradientLine *RenderAnnotation_GradientLine `protobuf:"bytes,14,opt,name=gradient_line,json=gradientLine,oneof" json:"gradient_line,omitempty"`
}
type RenderAnnotation_Scribble_ struct {
	Scribble *RenderAnnotation_Scribble `protobuf:"bytes,15,opt,name=scribble,oneof" json:"scribble,omitempty"`
}

func (*RenderAnnotation_Rectangle_) isRenderAnnotation_Data()              {}
func (*RenderAnnotation_FilledRectangle_) isRenderAnnotation_Data()        {}
func (*RenderAnnotation_Oval_) isRenderAnnotation_Data()                   {}
func (*RenderAnnotation_FilledOval_) isRenderAnnotation_Data()             {}
func (*RenderAnnotation_Point_) isRenderAnnotation_Data()                  {}
func (*RenderAnnotation_Line_) isRenderAnnotation_Data()                   {}
func (*RenderAnnotation_Arrow_) isRenderAnnotation_Data()                  {}
func (*RenderAnnotation_Text_) isRenderAnnotation_Data()                   {}
func (*RenderAnnotation_RoundedRectangle_) isRenderAnnotation_Data()       {}
func (*RenderAnnotation_FilledRoundedRectangle_) isRenderAnnotation_Data() {}
func (*RenderAnnotation_GradientLine_) isRenderAnnotation_Data()           {}
func (*RenderAnnotation_Scribble_) isRenderAnnotation_Data()               {}

func (m *RenderAnnotation) GetData() isRenderAnnotation_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RenderAnnotation) GetRectangle() *RenderAnnotation_Rectangle {
	if x, ok := m.GetData().(*RenderAnnotation_Rectangle_); ok {
		return x.Rectangle
	}
	return nil
}

func (m *RenderAnnotation) GetFilledRectangle() *RenderAnnotation_FilledRectangle {
	if x, ok := m.GetData().(*RenderAnnotation_FilledRectangle_); ok {
		return x.FilledRectangle
	}
	return nil
}

func (m *RenderAnnotation) GetOval() *RenderAnnotation_Oval {
	if x, ok := m.GetData().(*RenderAnnotation_Oval_); ok {
		return x.Oval
	}
	return nil
}

func (m *RenderAnnotation) GetFilledOval() *RenderAnnotation_FilledOval {
	if x, ok := m.GetData().(*RenderAnnotation_FilledOval_); ok {
		return x.FilledOval
	}
	return nil
}

func (m *RenderAnnotation) GetPoint() *RenderAnnotation_Point {
	if x, ok := m.GetData().(*RenderAnnotation_Point_); ok {
		return x.Point
	}
	return nil
}

func (m *RenderAnnotation) GetLine() *RenderAnnotation_Line {
	if x, ok := m.GetData().(*RenderAnnotation_Line_); ok {
		return x.Line
	}
	return nil
}

func (m *RenderAnnotation) GetArrow() *RenderAnnotation_Arrow {
	if x, ok := m.GetData().(*RenderAnnotation_Arrow_); ok {
		return x.Arrow
	}
	return nil
}

func (m *RenderAnnotation) GetText() *RenderAnnotation_Text {
	if x, ok := m.GetData().(*RenderAnnotation_Text_); ok {
		return x.Text
	}
	return nil
}

func (m *RenderAnnotation) GetRoundedRectangle() *RenderAnnotation_RoundedRectangle {
	if x, ok := m.GetData().(*RenderAnnotation_RoundedRectangle_); ok {
		return x.RoundedRectangle
	}
	return nil
}

func (m *RenderAnnotation) GetFilledRoundedRectangle() *RenderAnnotation_FilledRoundedRectangle {
	if x, ok := m.GetData().(*RenderAnnotation_FilledRoundedRectangle_); ok {
		return x.FilledRoundedRectangle
	}
	return nil
}

func (m *RenderAnnotation) GetGradientLine() *RenderAnnotation_GradientLine {
	if x, ok := m.GetData().(*RenderAnnotation_GradientLine_); ok {
		return x.GradientLine
	}
	return nil
}

func (m *RenderAnnotation) GetScribble() *RenderAnnotation_Scribble {
	if x, ok := m.GetData().(*RenderAnnotation_Scribble_); ok {
		return x.Scribble
	}
	return nil
}

func (m *RenderAnnotation) GetThickness() float64 {
	if m != nil && m.Thickness != nil {
		return *m.Thickness
	}
	return Default_RenderAnnotation_Thickness
}

func (m *RenderAnnotation) GetColor() *Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *RenderAnnotation) GetSceneTag() string {
	if m != nil {
		return m.SceneTag
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RenderAnnotation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RenderAnnotation_Rectangle_)(nil),
		(*RenderAnnotation_FilledRectangle_)(nil),
		(*RenderAnnotation_Oval_)(nil),
		(*RenderAnnotation_FilledOval_)(nil),
		(*RenderAnnotation_Point_)(nil),
		(*RenderAnnotation_Line_)(nil),
		(*RenderAnnotation_Arrow_)(nil),
		(*RenderAnnotation_Text_)(nil),
		(*RenderAnnotation_RoundedRectangle_)(nil),
		(*RenderAnnotation_FilledRoundedRectangle_)(nil),
		(*RenderAnnotation_GradientLine_)(nil),
		(*RenderAnnotation_Scribble_)(nil),
	}
}

type RenderAnnotation_Rectangle struct {
	Left             float64 `protobuf:"fixed64,1,opt,name=left" json:"left"`
	Top              float64 `protobuf:"fixed64,2,opt,name=top" json:"top"`
	Right            float64 `protobuf:"fixed64,3,opt,name=right" json:"right"`
	Bottom           float64 `protobuf:"fixed64,4,opt,name=bottom" json:"bottom"`
	Normalized       *bool   `protobuf:"varint,5,opt,name=normalized,def=0" json:"normalized,omitempty"`
	Rotation         float64 `protobuf:"fixed64,6,opt,name=rotation" json:"rotation"`
	TopLeftThickness float64 `protobuf:"fixed64,7,opt,name=top_left_thickness,json=topLeftThickness" json:"top_left_thickness"`
}

func (m *RenderAnnotation_Rectangle) Reset()      { *m = RenderAnnotation_Rectangle{} }
func (*RenderAnnotation_Rectangle) ProtoMessage() {}
func (*RenderAnnotation_Rectangle) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f970cad00e1868f, []int{1, 0}
}
func (m *RenderAnnotation_Rectangle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenderAnnotation_Rectangle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenderAnnotation_Rectangle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenderAnnotation_Rectangle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderAnnotation_Rectangle.Merge(m, src)
}
func (m *RenderAnnotation_Rectangle) XXX_Size() int {
	return m.Size()
}
func (m *RenderAnnotation_Rectangle) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderAnnotation_Rectangle.DiscardUnknown(m)
}

var xxx_messageInfo_RenderAnnotation_Rectangle proto.InternalMessageInfo

const Default_RenderAnnotation_Rectangle_Normalized bool = false

func (m *RenderAnnotation_Rectangle) GetLeft() float64 {
	if m != nil {
		return m.Left
	}
	return 0
}

func (m *RenderAnnotation_Rectangle) GetTop() float64 {
	if m != nil {
		return m.Top
	}
	return 0
}

func (m *RenderAnnotation_Rectangle) GetRight() float64 {
	if m != nil {
		return m.Right
	}
	return 0
}

func (m *RenderAnnotation_Rectangle) GetBottom() float64 {
	if m != nil {
		return m.Bottom
	}
	return 0
}

func (m *RenderAnnotation_Rectangle) GetNormalized() bool {
	if m != nil && m.Normalized != nil {
		return *m.Normalized
	}
	return Default_RenderAnnotation_Rectangle_Normalized
}

func (m *RenderAnnotation_Rectangle) GetRotation() float64 {
	if m != nil {
		return m.Rotation
	}
	return 0
}

func (m *RenderAnnotation_Rectangle) GetTopLeftThickness() float64 {
	if m != nil {
		return m.TopLeftThickness
	}
	return 0
}

type RenderAnnotation_FilledRectangle struct {
	Rectangle *RenderAnnotation_Rectangle `protobuf:"bytes,1,opt,name=rectangle" json:"rectangle,omitempty"`
	FillColor *Color                      `protobuf:"bytes,2,opt,name=fill_color,json=fillColor" json:"fill_color,omitempty"`
}

func (m *RenderAnnotation_FilledRectangle) Reset()      { *m = RenderAnnotation_FilledRectangle{} }
func (*RenderAnnotation_FilledRectangle) ProtoMessage() {}
func (*RenderAnnotation_FilledRectangle) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f970cad00e1868f, []int{1, 1}
}
func (m *RenderAnnotation_FilledRectangle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenderAnnotation_FilledRectangle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenderAnnotation_FilledRectangle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenderAnnotation_FilledRectangle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderAnnotation_FilledRectangle.Merge(m, src)
}
func (m *RenderAnnotation_FilledRectangle) XXX_Size() int {
	return m.Size()
}
func (m *RenderAnnotation_FilledRectangle) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderAnnotation_FilledRectangle.DiscardUnknown(m)
}

var xxx_messageInfo_RenderAnnotation_FilledRectangle proto.InternalMessageInfo

func (m *RenderAnnotation_FilledRectangle) GetRectangle() *RenderAnnotation_Rectangle {
	if m != nil {
		return m.Rectangle
	}
	return nil
}

func (m *RenderAnnotation_FilledRectangle) GetFillColor() *Color {
	if m != nil {
		return m.FillColor
	}
	return nil
}

type RenderAnnotation_RoundedRectangle struct {
	Rectangle    *RenderAnnotation_Rectangle `protobuf:"bytes,1,opt,name=rectangle" json:"rectangle,omitempty"`
	CornerRadius *int32                      `protobuf:"varint,2,opt,name=corner_radius,json=cornerRadius,def=0" json:"corner_radius,omitempty"`
	LineType     *int32                      `protobuf:"varint,3,opt,name=line_type,json=lineType,def=4" json:"line_type,omitempty"`
}

func (m *RenderAnnotation_RoundedRectangle) Reset()      { *m = RenderAnnotation_RoundedRectangle{} }
func (*RenderAnnotation_RoundedRectangle) ProtoMessage() {}
func (*RenderAnnotation_RoundedRectangle) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f970cad00e1868f, []int{1, 2}
}
func (m *RenderAnnotation_RoundedRectangle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenderAnnotation_RoundedRectangle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenderAnnotation_RoundedRectangle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenderAnnotation_RoundedRectangle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderAnnotation_RoundedRectangle.Merge(m, src)
}
func (m *RenderAnnotation_RoundedRectangle) XXX_Size() int {
	return m.Size()
}
func (m *RenderAnnotation_RoundedRectangle) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderAnnotation_RoundedRectangle.DiscardUnknown(m)
}

var xxx_messageInfo_RenderAnnotation_RoundedRectangle proto.InternalMessageInfo

const Default_RenderAnnotation_RoundedRectangle_CornerRadius int32 = 0
const Default_RenderAnnotation_RoundedRectangle_LineType int32 = 4

func (m *RenderAnnotation_RoundedRectangle) GetRectangle() *RenderAnnotation_Rectangle {
	if m != nil {
		return m.Rectangle
	}
	return nil
}

func (m *RenderAnnotation_RoundedRectangle) GetCornerRadius() int32 {
	if m != nil && m.CornerRadius != nil {
		return *m.CornerRadius
	}
	return Default_RenderAnnotation_RoundedRectangle_CornerRadius
}

func (m *RenderAnnotation_RoundedRectangle) GetLineType() int32 {
	if m != nil && m.LineType != nil {
		return *m.LineType
	}
	return Default_RenderAnnotation_RoundedRectangle_LineType
}

type RenderAnnotation_FilledRoundedRectangle struct {
	RoundedRectangle *RenderAnnotation_RoundedRectangle `protobuf:"bytes,1,opt,name=rounded_rectangle,json=roundedRectangle" json:"rounded_rectangle,omitempty"`
	FillColor        *Color                             `protobuf:"bytes,2,opt,name=fill_color,json=fillColor" json:"fill_color,omitempty"`
}

func (m *RenderAnnotation_FilledRoundedRectangle) Reset() {
	*m = RenderAnnotation_FilledRoundedRectangle{}
}
func (*RenderAnnotation_FilledRoundedRectangle) ProtoMessage() {}
func (*RenderAnnotation_FilledRoundedRectangle) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f970cad00e1868f, []int{1, 3}
}
func (m *RenderAnnotation_FilledRoundedRectangle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenderAnnotation_FilledRoundedRectangle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenderAnnotation_FilledRoundedRectangle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenderAnnotation_FilledRoundedRectangle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderAnnotation_FilledRoundedRectangle.Merge(m, src)
}
func (m *RenderAnnotation_FilledRoundedRectangle) XXX_Size() int {
	return m.Size()
}
func (m *RenderAnnotation_FilledRoundedRectangle) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderAnnotation_FilledRoundedRectangle.DiscardUnknown(m)
}

var xxx_messageInfo_RenderAnnotation_FilledRoundedRectangle proto.InternalMessageInfo

func (m *RenderAnnotation_FilledRoundedRectangle) GetRoundedRectangle() *RenderAnnotation_RoundedRectangle {
	if m != nil {
		return m.RoundedRectangle
	}
	return nil
}

func (m *RenderAnnotation_FilledRoundedRectangle) GetFillColor() *Color {
	if m != nil {
		return m.FillColor
	}
	return nil
}

type RenderAnnotation_Oval struct {
	Rectangle *RenderAnnotation_Rectangle `protobuf:"bytes,1,opt,name=rectangle" json:"rectangle,omitempty"`
}

func (m *RenderAnnotation_Oval) Reset()      { *m = RenderAnnotation_Oval{} }
func (*RenderAnnotation_Oval) ProtoMessage() {}
func (*RenderAnnotation_Oval) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f970cad00e1868f, []int{1, 4}
}
func (m *RenderAnnotation_Oval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenderAnnotation_Oval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenderAnnotation_Oval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenderAnnotation_Oval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderAnnotation_Oval.Merge(m, src)
}
func (m *RenderAnnotation_Oval) XXX_Size() int {
	return m.Size()
}
func (m *RenderAnnotation_Oval) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderAnnotation_Oval.DiscardUnknown(m)
}

var xxx_messageInfo_RenderAnnotation_Oval proto.InternalMessageInfo

func (m *RenderAnnotation_Oval) GetRectangle() *RenderAnnotation_Rectangle {
	if m != nil {
		return m.Rectangle
	}
	return nil
}

type RenderAnnotation_FilledOval struct {
	Oval      *RenderAnnotation_Oval `protobuf:"bytes,1,opt,name=oval" json:"oval,omitempty"`
	FillColor *Color                 `protobuf:"bytes,2,opt,name=fill_color,json=fillColor" json:"fill_color,omitempty"`
}

func (m *RenderAnnotation_FilledOval) Reset()      { *m = RenderAnnotation_FilledOval{} }
func (*RenderAnnotation_FilledOval) ProtoMessage() {}
func (*RenderAnnotation_FilledOval) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f970cad00e1868f, []int{1, 5}
}
func (m *RenderAnnotation_FilledOval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenderAnnotation_FilledOval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenderAnnotation_FilledOval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenderAnnotation_FilledOval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderAnnotation_FilledOval.Merge(m, src)
}
func (m *RenderAnnotation_FilledOval) XXX_Size() int {
	return m.Size()
}
func (m *RenderAnnotation_FilledOval) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderAnnotation_FilledOval.DiscardUnknown(m)
}

var xxx_messageInfo_RenderAnnotation_FilledOval proto.InternalMessageInfo

func (m *RenderAnnotation_FilledOval) GetOval() *RenderAnnotation_Oval {
	if m != nil {
		return m.Oval
	}
	return nil
}

func (m *RenderAnnotation_FilledOval) GetFillColor() *Color {
	if m != nil {
		return m.FillColor
	}
	return nil
}

type RenderAnnotation_Point struct {
	X          float64 `protobuf:"fixed64,1,opt,name=x" json:"x"`
	Y          float64 `protobuf:"fixed64,2,opt,name=y" json:"y"`
	Normalized *bool   `protobuf:"varint,3,opt,name=normalized,def=0" json:"normalized,omitempty"`
}

func (m *RenderAnnotation_Point) Reset()      { *m = RenderAnnotation_Point{} }
func (*RenderAnnotation_Point) ProtoMessage() {}
func (*RenderAnnotation_Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f970cad00e1868f, []int{1, 6}
}
func (m *RenderAnnotation_Point) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenderAnnotation_Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenderAnnotation_Point.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenderAnnotation_Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderAnnotation_Point.Merge(m, src)
}
func (m *RenderAnnotation_Point) XXX_Size() int {
	return m.Size()
}
func (m *RenderAnnotation_Point) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderAnnotation_Point.DiscardUnknown(m)
}

var xxx_messageInfo_RenderAnnotation_Point proto.InternalMessageInfo

const Default_RenderAnnotation_Point_Normalized bool = false

func (m *RenderAnnotation_Point) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *RenderAnnotation_Point) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *RenderAnnotation_Point) GetNormalized() bool {
	if m != nil && m.Normalized != nil {
		return *m.Normalized
	}
	return Default_RenderAnnotation_Point_Normalized
}

type RenderAnnotation_Line struct {
	XStart     float64                         `protobuf:"fixed64,1,opt,name=x_start,json=xStart" json:"x_start"`
	YStart     float64                         `protobuf:"fixed64,2,opt,name=y_start,json=yStart" json:"y_start"`
	XEnd       float64                         `protobuf:"fixed64,3,opt,name=x_end,json=xEnd" json:"x_end"`
	YEnd       float64                         `protobuf:"fixed64,4,opt,name=y_end,json=yEnd" json:"y_end"`
	Normalized *bool                           `protobuf:"varint,5,opt,name=normalized,def=0" json:"normalized,omitempty"`
	LineType   *RenderAnnotation_Line_LineType `protobuf:"varint,6,opt,name=line_type,json=lineType,enum=mediapipe.RenderAnnotation_Line_LineType,def=1" json:"line_type,omitempty"`
}

func (m *RenderAnnotation_Line) Reset()      { *m = RenderAnnotation_Line{} }
func (*RenderAnnotation_Line) ProtoMessage() {}
func (*RenderAnnotation_Line) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f970cad00e1868f, []int{1, 7}
}
func (m *RenderAnnotation_Line) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenderAnnotation_Line) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenderAnnotation_Line.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenderAnnotation_Line) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderAnnotation_Line.Merge(m, src)
}
func (m *RenderAnnotation_Line) XXX_Size() int {
	return m.Size()
}
func (m *RenderAnnotation_Line) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderAnnotation_Line.DiscardUnknown(m)
}

var xxx_messageInfo_RenderAnnotation_Line proto.InternalMessageInfo

const Default_RenderAnnotation_Line_Normalized bool = false
const Default_RenderAnnotation_Line_LineType RenderAnnotation_Line_LineType = SOLID

func (m *RenderAnnotation_Line) GetXStart() float64 {
	if m != nil {
		return m.XStart
	}
	return 0
}

func (m *RenderAnnotation_Line) GetYStart() float64 {
	if m != nil {
		return m.YStart
	}
	return 0
}

func (m *RenderAnnotation_Line) GetXEnd() float64 {
	if m != nil {
		return m.XEnd
	}
	return 0
}

func (m *RenderAnnotation_Line) GetYEnd() float64 {
	if m != nil {
		return m.YEnd
	}
	return 0
}

func (m *RenderAnnotation_Line) GetNormalized() bool {
	if m != nil && m.Normalized != nil {
		return *m.Normalized
	}
	return Default_RenderAnnotation_Line_Normalized
}

func (m *RenderAnnotation_Line) GetLineType() RenderAnnotation_Line_LineType {
	if m != nil && m.LineType != nil {
		return *m.LineType
	}
	return Default_RenderAnnotation_Line_LineType
}

type RenderAnnotation_GradientLine struct {
	XStart     float64 `protobuf:"fixed64,1,opt,name=x_start,json=xStart" json:"x_start"`
	YStart     float64 `protobuf:"fixed64,2,opt,name=y_start,json=yStart" json:"y_start"`
	XEnd       float64 `protobuf:"fixed64,3,opt,name=x_end,json=xEnd" json:"x_end"`
	YEnd       float64 `protobuf:"fixed64,4,opt,name=y_end,json=yEnd" json:"y_end"`
	Normalized *bool   `protobuf:"varint,5,opt,name=normalized,def=0" json:"normalized,omitempty"`
	Color1     *Color  `protobuf:"bytes,6,opt,name=color1" json:"color1,omitempty"`
	Color2     *Color  `protobuf:"bytes,7,opt,name=color2" json:"color2,omitempty"`
}

func (m *RenderAnnotation_GradientLine) Reset()      { *m = RenderAnnotation_GradientLine{} }
func (*RenderAnnotation_GradientLine) ProtoMessage() {}
func (*RenderAnnotation_GradientLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f970cad00e1868f, []int{1, 8}
}
func (m *RenderAnnotation_GradientLine) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenderAnnotation_GradientLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenderAnnotation_GradientLine.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenderAnnotation_GradientLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderAnnotation_GradientLine.Merge(m, src)
}
func (m *RenderAnnotation_GradientLine) XXX_Size() int {
	return m.Size()
}
func (m *RenderAnnotation_GradientLine) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderAnnotation_GradientLine.DiscardUnknown(m)
}

var xxx_messageInfo_RenderAnnotation_GradientLine proto.InternalMessageInfo

const Default_RenderAnnotation_GradientLine_Normalized bool = false

func (m *RenderAnnotation_GradientLine) GetXStart() float64 {
	if m != nil {
		return m.XStart
	}
	return 0
}

func (m *RenderAnnotation_GradientLine) GetYStart() float64 {
	if m != nil {
		return m.YStart
	}
	return 0
}

func (m *RenderAnnotation_GradientLine) GetXEnd() float64 {
	if m != nil {
		return m.XEnd
	}
	return 0
}

func (m *RenderAnnotation_GradientLine) GetYEnd() float64 {
	if m != nil {
		return m.YEnd
	}
	return 0
}

func (m *RenderAnnotation_GradientLine) GetNormalized() bool {
	if m != nil && m.Normalized != nil {
		return *m.Normalized
	}
	return Default_RenderAnnotation_GradientLine_Normalized
}

func (m *RenderAnnotation_GradientLine) GetColor1() *Color {
	if m != nil {
		return m.Color1
	}
	return nil
}

func (m *RenderAnnotation_GradientLine) GetColor2() *Color {
	if m != nil {
		return m.Color2
	}
	return nil
}

type RenderAnnotation_Scribble struct {
	Point []*RenderAnnotation_Point `protobuf:"bytes,1,rep,name=point" json:"point,omitempty"`
}

func (m *RenderAnnotation_Scribble) Reset()      { *m = RenderAnnotation_Scribble{} }
func (*RenderAnnotation_Scribble) ProtoMessage() {}
func (*RenderAnnotation_Scribble) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f970cad00e1868f, []int{1, 9}
}
func (m *RenderAnnotation_Scribble) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenderAnnotation_Scribble) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenderAnnotation_Scribble.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenderAnnotation_Scribble) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderAnnotation_Scribble.Merge(m, src)
}
func (m *RenderAnnotation_Scribble) XXX_Size() int {
	return m.Size()
}
func (m *RenderAnnotation_Scribble) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderAnnotation_Scribble.DiscardUnknown(m)
}

var xxx_messageInfo_RenderAnnotation_Scribble proto.InternalMessageInfo

func (m *RenderAnnotation_Scribble) GetPoint() []*RenderAnnotation_Point {
	if m != nil {
		return m.Point
	}
	return nil
}

type RenderAnnotation_Arrow struct {
	XStart     float64 `protobuf:"fixed64,1,opt,name=x_start,json=xStart" json:"x_start"`
	YStart     float64 `protobuf:"fixed64,2,opt,name=y_start,json=yStart" json:"y_start"`
	XEnd       float64 `protobuf:"fixed64,3,opt,name=x_end,json=xEnd" json:"x_end"`
	YEnd       float64 `protobuf:"fixed64,4,opt,name=y_end,json=yEnd" json:"y_end"`
	Normalized *bool   `protobuf:"varint,5,opt,name=normalized,def=0" json:"normalized,omitempty"`
}

func (m *RenderAnnotation_Arrow) Reset()      { *m = RenderAnnotation_Arrow{} }
func (*RenderAnnotation_Arrow) ProtoMessage() {}
func (*RenderAnnotation_Arrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f970cad00e1868f, []int{1, 10}
}
func (m *RenderAnnotation_Arrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenderAnnotation_Arrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenderAnnotation_Arrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenderAnnotation_Arrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderAnnotation_Arrow.Merge(m, src)
}
func (m *RenderAnnotation_Arrow) XXX_Size() int {
	return m.Size()
}
func (m *RenderAnnotation_Arrow) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderAnnotation_Arrow.DiscardUnknown(m)
}

var xxx_messageInfo_RenderAnnotation_Arrow proto.InternalMessageInfo

const Default_RenderAnnotation_Arrow_Normalized bool = false

func (m *RenderAnnotation_Arrow) GetXStart() float64 {
	if m != nil {
		return m.XStart
	}
	return 0
}

func (m *RenderAnnotation_Arrow) GetYStart() float64 {
	if m != nil {
		return m.YStart
	}
	return 0
}

func (m *RenderAnnotation_Arrow) GetXEnd() float64 {
	if m != nil {
		return m.XEnd
	}
	return 0
}

func (m *RenderAnnotation_Arrow) GetYEnd() float64 {
	if m != nil {
		return m.YEnd
	}
	return 0
}

func (m *RenderAnnotation_Arrow) GetNormalized() bool {
	if m != nil && m.Normalized != nil {
		return *m.Normalized
	}
	return Default_RenderAnnotation_Arrow_Normalized
}

type RenderAnnotation_Text struct {
	DisplayText        string   `protobuf:"bytes,1,opt,name=display_text,json=displayText" json:"display_text"`
	Left               float64  `protobuf:"fixed64,2,opt,name=left" json:"left"`
	Baseline           float64  `protobuf:"fixed64,3,opt,name=baseline" json:"baseline"`
	FontHeight         *float64 `protobuf:"fixed64,4,opt,name=font_height,json=fontHeight,def=8" json:"font_height,omitempty"`
	Normalized         *bool    `protobuf:"varint,5,opt,name=normalized,def=0" json:"normalized,omitempty"`
	FontFace           *int32   `protobuf:"varint,6,opt,name=font_face,json=fontFace,def=0" json:"font_face,omitempty"`
	CenterHorizontally *bool    `protobuf:"varint,7,opt,name=center_horizontally,json=centerHorizontally,def=0" json:"center_horizontally,omitempty"`
	CenterVertically   *bool    `protobuf:"varint,8,opt,name=center_vertically,json=centerVertically,def=0" json:"center_vertically,omitempty"`
	OutlineThickness   *float64 `protobuf:"fixed64,11,opt,name=outline_thickness,json=outlineThickness,def=0" json:"outline_thickness,omitempty"`
	OutlineColor       *Color   `protobuf:"bytes,12,opt,name=outline_color,json=outlineColor" json:"outline_color,omitempty"`
}

func (m *RenderAnnotation_Text) Reset()      { *m = RenderAnnotation_Text{} }
func (*RenderAnnotation_Text) ProtoMessage() {}
func (*RenderAnnotation_Text) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f970cad00e1868f, []int{1, 11}
}
func (m *RenderAnnotation_Text) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenderAnnotation_Text) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenderAnnotation_Text.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenderAnnotation_Text) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderAnnotation_Text.Merge(m, src)
}
func (m *RenderAnnotation_Text) XXX_Size() int {
	return m.Size()
}
func (m *RenderAnnotation_Text) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderAnnotation_Text.DiscardUnknown(m)
}

var xxx_messageInfo_RenderAnnotation_Text proto.InternalMessageInfo

const Default_RenderAnnotation_Text_FontHeight float64 = 8
const Default_RenderAnnotation_Text_Normalized bool = false
const Default_RenderAnnotation_Text_FontFace int32 = 0
const Default_RenderAnnotation_Text_CenterHorizontally bool = false
const Default_RenderAnnotation_Text_CenterVertically bool = false
const Default_RenderAnnotation_Text_OutlineThickness float64 = 0

func (m *RenderAnnotation_Text) GetDisplayText() string {
	if m != nil {
		return m.DisplayText
	}
	return ""
}

func (m *RenderAnnotation_Text) GetLeft() float64 {
	if m != nil {
		return m.Left
	}
	return 0
}

func (m *RenderAnnotation_Text) GetBaseline() float64 {
	if m != nil {
		return m.Baseline
	}
	return 0
}

func (m *RenderAnnotation_Text) GetFontHeight() float64 {
	if m != nil && m.FontHeight != nil {
		return *m.FontHeight
	}
	return Default_RenderAnnotation_Text_FontHeight
}

func (m *RenderAnnotation_Text) GetNormalized() bool {
	if m != nil && m.Normalized != nil {
		return *m.Normalized
	}
	return Default_RenderAnnotation_Text_Normalized
}

func (m *RenderAnnotation_Text) GetFontFace() int32 {
	if m != nil && m.FontFace != nil {
		return *m.FontFace
	}
	return Default_RenderAnnotation_Text_FontFace
}

func (m *RenderAnnotation_Text) GetCenterHorizontally() bool {
	if m != nil && m.CenterHorizontally != nil {
		return *m.CenterHorizontally
	}
	return Default_RenderAnnotation_Text_CenterHorizontally
}

func (m *RenderAnnotation_Text) GetCenterVertically() bool {
	if m != nil && m.CenterVertically != nil {
		return *m.CenterVertically
	}
	return Default_RenderAnnotation_Text_CenterVertically
}

func (m *RenderAnnotation_Text) GetOutlineThickness() float64 {
	if m != nil && m.OutlineThickness != nil {
		return *m.OutlineThickness
	}
	return Default_RenderAnnotation_Text_OutlineThickness
}

func (m *RenderAnnotation_Text) GetOutlineColor() *Color {
	if m != nil {
		return m.OutlineColor
	}
	return nil
}

type RenderViewport struct {
	Id             string `protobuf:"bytes,1,opt,name=id" json:"id"`
	WidthPx        int32  `protobuf:"varint,2,opt,name=width_px,json=widthPx" json:"width_px"`
	HeightPx       int32  `protobuf:"varint,3,opt,name=height_px,json=heightPx" json:"height_px"`
	ComposeOnVideo bool   `protobuf:"varint,4,opt,name=compose_on_video,json=composeOnVideo" json:"compose_on_video"`
}

func (m *RenderViewport) Reset()      { *m = RenderViewport{} }
func (*RenderViewport) ProtoMessage() {}
func (*RenderViewport) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f970cad00e1868f, []int{2}
}
func (m *RenderViewport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenderViewport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenderViewport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenderViewport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderViewport.Merge(m, src)
}
func (m *RenderViewport) XXX_Size() int {
	return m.Size()
}
func (m *RenderViewport) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderViewport.DiscardUnknown(m)
}

var xxx_messageInfo_RenderViewport proto.InternalMessageInfo

func (m *RenderViewport) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RenderViewport) GetWidthPx() int32 {
	if m != nil {
		return m.WidthPx
	}
	return 0
}

func (m *RenderViewport) GetHeightPx() int32 {
	if m != nil {
		return m.HeightPx
	}
	return 0
}

func (m *RenderViewport) GetComposeOnVideo() bool {
	if m != nil {
		return m.ComposeOnVideo
	}
	return false
}

func init() {
	proto.RegisterEnum("mediapipe.RenderAnnotation_Line_LineType", RenderAnnotation_Line_LineType_name, RenderAnnotation_Line_LineType_value)
	proto.RegisterType((*RenderData)(nil), "mediapipe.RenderData")
	proto.RegisterType((*RenderAnnotation)(nil), "mediapipe.RenderAnnotation")
	proto.RegisterType((*RenderAnnotation_Rectangle)(nil), "mediapipe.RenderAnnotation.Rectangle")
	proto.RegisterType((*RenderAnnotation_FilledRectangle)(nil), "mediapipe.RenderAnnotation.FilledRectangle")
	proto.RegisterType((*RenderAnnotation_RoundedRectangle)(nil), "mediapipe.RenderAnnotation.RoundedRectangle")
	proto.RegisterType((*RenderAnnotation_FilledRoundedRectangle)(nil), "mediapipe.RenderAnnotation.FilledRoundedRectangle")
	proto.RegisterType((*RenderAnnotation_Oval)(nil), "mediapipe.RenderAnnotation.Oval")
	proto.RegisterType((*RenderAnnotation_FilledOval)(nil), "mediapipe.RenderAnnotation.FilledOval")
	proto.RegisterType((*RenderAnnotation_Point)(nil), "mediapipe.RenderAnnotation.Point")
	proto.RegisterType((*RenderAnnotation_Line)(nil), "mediapipe.RenderAnnotation.Line")
	proto.RegisterType((*RenderAnnotation_GradientLine)(nil), "mediapipe.RenderAnnotation.GradientLine")
	proto.RegisterType((*RenderAnnotation_Scribble)(nil), "mediapipe.RenderAnnotation.Scribble")
	proto.RegisterType((*RenderAnnotation_Arrow)(nil), "mediapipe.RenderAnnotation.Arrow")
	proto.RegisterType((*RenderAnnotation_Text)(nil), "mediapipe.RenderAnnotation.Text")
	proto.RegisterType((*RenderViewport)(nil), "mediapipe.RenderViewport")
}

func init() { proto.RegisterFile("mediapipe/util/render_data.proto", fileDescriptor_7f970cad00e1868f) }

var fileDescriptor_7f970cad00e1868f = []byte{
	// 1317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xbd, 0x6f, 0xdb, 0xc6,
	0x1b, 0xd6, 0xc9, 0x92, 0x4c, 0xbd, 0xf2, 0x87, 0x7c, 0xbf, 0x1f, 0x02, 0x46, 0x6d, 0x69, 0xc5,
	0x68, 0x52, 0xf7, 0x03, 0x72, 0x22, 0xa4, 0x5f, 0x9e, 0x1a, 0xdb, 0x49, 0x95, 0x26, 0x8d, 0x0d,
	0xda, 0x75, 0xbf, 0x06, 0x82, 0x26, 0x4f, 0x32, 0x51, 0x9a, 0x47, 0x90, 0x67, 0x47, 0xca, 0xd4,
	0xad, 0x63, 0x8b, 0x8e, 0x5d, 0x5a, 0x14, 0x1d, 0xda, 0x3f, 0xa3, 0x5b, 0xc6, 0x8c, 0x99, 0x8a,
	0x46, 0x59, 0x3a, 0x66, 0xe8, 0x5a, 0xa0, 0xb8, 0x97, 0x47, 0x89, 0x92, 0x1d, 0xd9, 0x29, 0x32,
	0x64, 0x31, 0xcc, 0xe7, 0x79, 0xde, 0xf7, 0x3d, 0xdd, 0xdd, 0xfb, 0x71, 0x50, 0x3f, 0x60, 0xae,
	0x67, 0x87, 0x5e, 0xc8, 0x56, 0x0e, 0x85, 0xe7, 0xaf, 0x44, 0x2c, 0x70, 0x59, 0x64, 0xb9, 0xb6,
	0xb0, 0x1b, 0x61, 0xc4, 0x05, 0xa7, 0xe5, 0x81, 0xa2, 0x56, 0x1b, 0x13, 0x3b, 0xdc, 0xe7, 0x51,
	0x22, 0x5b, 0xfa, 0x9d, 0x00, 0x98, 0x68, 0xbc, 0x61, 0x0b, 0x9b, 0x7e, 0x04, 0x54, 0xb9, 0xb2,
	0x83, 0x80, 0x0b, 0x5b, 0x78, 0x3c, 0x88, 0x75, 0x52, 0x9f, 0x5a, 0xae, 0x34, 0x5f, 0x6a, 0x0c,
	0xfc, 0x34, 0x12, 0x93, 0x6b, 0x03, 0x8d, 0xb9, 0x10, 0x8d, 0x21, 0x31, 0xbd, 0x08, 0x95, 0xd8,
	0x61, 0x01, 0xb3, 0x1c, 0xdf, 0x8e, 0x63, 0x3d, 0x5f, 0x27, 0xcb, 0xe5, 0xb5, 0xc2, 0xfd, 0x3f,
	0x16, 0x73, 0x26, 0x20, 0xb1, 0x2e, 0x71, 0xfa, 0x01, 0xcc, 0x25, 0xb2, 0x23, 0x8f, 0xdd, 0x0d,
	0x79, 0x24, 0xf4, 0xa9, 0x3a, 0x59, 0xae, 0x34, 0xcf, 0x1f, 0x0b, 0xb7, 0xab, 0x04, 0xe6, 0x2c,
	0x1a, 0xa4, 0x9f, 0x4b, 0xdf, 0x9e, 0x87, 0xea, 0xf8, 0x82, 0xe8, 0x75, 0x28, 0x47, 0xcc, 0x11,
	0x76, 0xd0, 0xf1, 0x99, 0x4e, 0xd0, 0xe3, 0xc5, 0x09, 0x3f, 0xa0, 0x61, 0xa6, 0xe2, 0x56, 0xce,
	0x1c, 0x5a, 0xd2, 0xcf, 0xa0, 0xda, 0xf6, 0x7c, 0x9f, 0xb9, 0xd6, 0xd0, 0x5b, 0x1e, 0xbd, 0xbd,
	0x39, 0xc9, 0xdb, 0x0d, 0xb4, 0xc9, 0xfa, 0x9c, 0x6f, 0x8f, 0x42, 0xf4, 0x1d, 0x28, 0xf0, 0x23,
	0xdb, 0x57, 0xbf, 0xb6, 0x3e, 0xc9, 0xdb, 0xe6, 0x91, 0xed, 0xb7, 0x72, 0x26, 0xea, 0xe9, 0x4d,
	0xa8, 0xa8, 0x15, 0xa1, 0x79, 0x01, 0xcd, 0x2f, 0x9d, 0xbe, 0x18, 0xe5, 0x04, 0xda, 0x83, 0x2f,
	0xfa, 0x3e, 0x14, 0x43, 0xee, 0x05, 0x42, 0x2f, 0xa2, 0x93, 0x0b, 0x93, 0x9c, 0x6c, 0x49, 0x61,
	0x2b, 0x67, 0x26, 0x16, 0x72, 0xf5, 0xbe, 0x17, 0x30, 0xbd, 0x74, 0xfa, 0xea, 0x6f, 0x7b, 0x81,
	0xdc, 0x00, 0xd4, 0xcb, 0x90, 0x76, 0x14, 0xf1, 0xbb, 0xfa, 0xf4, 0xe9, 0x21, 0xaf, 0x49, 0xa1,
	0x0c, 0x89, 0x16, 0x32, 0xa4, 0x60, 0x5d, 0xa1, 0x6b, 0xa7, 0x87, 0xdc, 0x61, 0x5d, 0xb9, 0x56,
	0xd4, 0xd3, 0x2f, 0x61, 0x21, 0xe2, 0x87, 0x81, 0x3b, 0x72, 0x86, 0x65, 0x74, 0xf2, 0xd6, 0xc4,
	0x1b, 0x91, 0x18, 0x65, 0x0f, 0xb1, 0x1a, 0x8d, 0x61, 0x34, 0x00, 0x3d, 0xbd, 0x1f, 0xc7, 0x62,
	0x00, 0xc6, 0x68, 0x9e, 0xe1, 0x9e, 0x1c, 0x8f, 0x74, 0xae, 0x7d, 0x22, 0x43, 0x37, 0x61, 0xb6,
	0x13, 0xd9, 0xae, 0xc7, 0x02, 0x61, 0xe1, 0x01, 0xcc, 0x61, 0x90, 0xe5, 0x49, 0x41, 0x3e, 0x54,
	0x06, 0xea, 0x20, 0x66, 0x3a, 0x99, 0x6f, 0xba, 0x06, 0x5a, 0xec, 0x44, 0xde, 0xde, 0x9e, 0xcf,
	0xf4, 0x79, 0xf4, 0xf5, 0xea, 0x24, 0x5f, 0xdb, 0x4a, 0xdb, 0xca, 0x99, 0x03, 0x3b, 0xba, 0x08,
	0x65, 0xb1, 0xef, 0x39, 0x5f, 0x05, 0x2c, 0x8e, 0xf5, 0x4a, 0x9d, 0x2c, 0x93, 0x55, 0x72, 0xc5,
	0x1c, 0x62, 0xf4, 0x12, 0x14, 0xb1, 0xe8, 0xe8, 0x33, 0x18, 0xa1, 0x9a, 0x89, 0xb0, 0x2e, 0x71,
	0x33, 0xa1, 0xe9, 0x05, 0x28, 0x27, 0xb5, 0x40, 0xd8, 0x1d, 0x7d, 0x36, 0x53, 0x30, 0x34, 0x84,
	0x77, 0xec, 0x4e, 0xed, 0x6f, 0x02, 0xe5, 0xe1, 0x76, 0xe8, 0x50, 0xf0, 0x59, 0x5b, 0x60, 0x82,
	0x13, 0xa5, 0x45, 0x84, 0x9e, 0x83, 0x29, 0xc1, 0x43, 0xcc, 0xd5, 0x94, 0x90, 0x00, 0xad, 0x41,
	0x31, 0xf2, 0x3a, 0xfb, 0x49, 0x95, 0x49, 0x99, 0x04, 0xa2, 0x2f, 0x43, 0x69, 0x8f, 0x0b, 0xc1,
	0x0f, 0x30, 0xab, 0x52, 0x52, 0x61, 0xf4, 0x22, 0x40, 0xc0, 0xa3, 0x03, 0xdb, 0xf7, 0xee, 0x31,
	0x17, 0x53, 0x46, 0x5b, 0x2d, 0xb6, 0x6d, 0x3f, 0x66, 0x66, 0x86, 0xa0, 0x75, 0xd0, 0x22, 0xb5,
	0x5b, 0x98, 0x1d, 0xa9, 0x9b, 0x01, 0x4a, 0x9b, 0x40, 0x05, 0x0f, 0x2d, 0xb9, 0x4c, 0x6b, 0xb8,
	0x6f, 0xd3, 0x19, 0x6d, 0x55, 0xf0, 0xf0, 0x36, 0x6b, 0x8b, 0x9d, 0x94, 0xad, 0x7d, 0x43, 0x60,
	0x7e, 0xac, 0xa8, 0xd0, 0xf5, 0xff, 0x5a, 0xe2, 0xb2, 0x05, 0x6e, 0x05, 0xb0, 0x22, 0x58, 0xc9,
	0xf9, 0xe4, 0x9f, 0x72, 0x3e, 0x65, 0xa9, 0xc1, 0x7f, 0x6b, 0x3f, 0x12, 0xa8, 0x1e, 0xbb, 0x96,
	0xcf, 0x65, 0x29, 0x97, 0x60, 0xd6, 0xe1, 0x51, 0xc0, 0x22, 0x4b, 0x5e, 0xd0, 0xc3, 0xa4, 0x65,
	0x14, 0x57, 0xc9, 0x65, 0x73, 0x26, 0xc1, 0x4d, 0x84, 0xa9, 0x01, 0x65, 0x79, 0xf5, 0x2d, 0xd1,
	0x0b, 0x19, 0x1e, 0x63, 0x71, 0x95, 0x5c, 0x35, 0x35, 0x89, 0xed, 0xf4, 0x42, 0x56, 0xfb, 0x85,
	0xc0, 0xb9, 0x93, 0x13, 0x8b, 0x7e, 0x7e, 0x52, 0x2d, 0x20, 0xcf, 0x5e, 0x0b, 0x4e, 0xa8, 0x04,
	0xcf, 0xbc, 0x91, 0xb7, 0xa0, 0x80, 0x55, 0xf8, 0x79, 0xec, 0x5d, 0x2d, 0x06, 0x18, 0x96, 0x79,
	0x7a, 0x55, 0xf5, 0x16, 0x72, 0xb6, 0xde, 0xa2, 0x3a, 0xcb, 0x33, 0xff, 0x82, 0x5d, 0x28, 0x62,
	0x5b, 0xa0, 0x14, 0x48, 0x77, 0x24, 0x07, 0x49, 0x57, 0x62, 0xbd, 0x91, 0xf4, 0x23, 0xbd, 0xb1,
	0x14, 0x9a, 0x7a, 0x4a, 0x0a, 0xd5, 0x7e, 0xca, 0x43, 0x01, 0x8b, 0xd3, 0x2b, 0x30, 0xdd, 0xb5,
	0x62, 0x61, 0x47, 0xa3, 0x19, 0x5e, 0xea, 0x6e, 0x4b, 0x4c, 0xd2, 0x3d, 0x45, 0x67, 0x03, 0x95,
	0x7a, 0x09, 0x7d, 0x1e, 0x8a, 0x5d, 0x8b, 0x05, 0xee, 0x48, 0xaa, 0x17, 0xba, 0xd7, 0x03, 0x57,
	0x52, 0x3d, 0xa4, 0xb2, 0x89, 0x5e, 0xe8, 0x49, 0xea, 0x8c, 0x69, 0xfe, 0x71, 0xf6, 0x12, 0xca,
	0x3c, 0x9f, 0x6b, 0xbe, 0x7e, 0x5a, 0x17, 0xc4, 0x3f, 0xf2, 0x8a, 0xae, 0x16, 0xb7, 0x37, 0x6f,
	0xdf, 0xdc, 0x18, 0xde, 0xd9, 0xa5, 0x06, 0x68, 0x29, 0x49, 0x2b, 0x30, 0xfd, 0xc9, 0x9d, 0x5b,
	0x77, 0x36, 0x3f, 0xbd, 0x53, 0xcd, 0xd1, 0x32, 0x24, 0xda, 0x2a, 0xa1, 0x00, 0xa5, 0x8d, 0x6b,
	0xdb, 0xad, 0xeb, 0x1b, 0xd5, 0x7c, 0xed, 0x1f, 0x02, 0x33, 0xd9, 0xba, 0xfe, 0x22, 0x6f, 0xd5,
	0x32, 0x94, 0xf0, 0x4a, 0x5d, 0x51, 0xd3, 0xc2, 0xf1, 0x3b, 0xa5, 0xf8, 0x81, 0xb2, 0xa9, 0xc6,
	0x83, 0xa7, 0x29, 0x9b, 0xb5, 0x75, 0xd0, 0xd2, 0x56, 0x44, 0xdf, 0x4d, 0xc7, 0x98, 0x64, 0x4e,
	0x3d, 0x7d, 0x8c, 0x51, 0x43, 0x4c, 0xed, 0x67, 0x02, 0x45, 0x1c, 0x32, 0x5e, 0xe0, 0xdd, 0xab,
	0xfd, 0x36, 0x05, 0x05, 0x39, 0xcf, 0xd0, 0xd7, 0x60, 0xc6, 0xf5, 0xe2, 0xd0, 0xb7, 0x7b, 0x16,
	0xce, 0x41, 0x24, 0xd3, 0x1f, 0x2b, 0x8a, 0x41, 0x61, 0xda, 0x14, 0xf3, 0xc7, 0x9a, 0x62, 0x1d,
	0xb4, 0x3d, 0x3b, 0x66, 0x38, 0x38, 0x64, 0xd7, 0x3a, 0x40, 0xe9, 0x12, 0x54, 0xda, 0x3c, 0x10,
	0xd6, 0x3e, 0xc3, 0x26, 0x59, 0x48, 0x9a, 0xf9, 0x7b, 0x26, 0x48, 0xb4, 0x85, 0xe0, 0x59, 0x8f,
	0xdd, 0x80, 0x32, 0xba, 0x6a, 0xdb, 0x4e, 0x92, 0x21, 0x58, 0xca, 0x35, 0x89, 0xdd, 0xb0, 0x1d,
	0x39, 0x00, 0xff, 0xcf, 0x61, 0x81, 0x60, 0x91, 0xb5, 0xcf, 0x23, 0xef, 0x1e, 0x0f, 0x84, 0xed,
	0xfb, 0x3d, 0x3c, 0xf9, 0x81, 0x3f, 0x9a, 0x28, 0x5a, 0x19, 0x01, 0x6d, 0xc2, 0x82, 0xb2, 0x3b,
	0x62, 0x91, 0xf0, 0x1c, 0xb4, 0xd2, 0xb2, 0x56, 0xd5, 0x84, 0xdf, 0x1d, 0xd0, 0xb4, 0x01, 0x0b,
	0xfc, 0x50, 0x24, 0x09, 0x3b, 0x3e, 0xa9, 0x5c, 0x36, 0xab, 0x8a, 0x1b, 0xb4, 0x5b, 0xfa, 0x36,
	0xcc, 0xa6, 0xfa, 0xc9, 0x83, 0xcb, 0x8c, 0x92, 0xe1, 0xd7, 0x5a, 0x09, 0x0a, 0xf2, 0x09, 0xb6,
	0xf4, 0x03, 0x81, 0xb9, 0xd1, 0x37, 0x0b, 0xfd, 0x3f, 0xe4, 0x3d, 0x77, 0xe4, 0xcc, 0xf2, 0x9e,
	0x4b, 0x17, 0x41, 0xbb, 0xeb, 0xb9, 0x62, 0xdf, 0x0a, 0xbb, 0x49, 0xb7, 0x53, 0xdc, 0x34, 0xa2,
	0x5b, 0x5d, 0x39, 0x11, 0x25, 0x47, 0x21, 0x15, 0x53, 0x19, 0x85, 0x96, 0xc0, 0x5b, 0x5d, 0xda,
	0x80, 0xaa, 0xc3, 0x0f, 0x42, 0x1e, 0x33, 0x8b, 0x07, 0xd6, 0x91, 0xe7, 0x32, 0x8e, 0xe7, 0xa6,
	0x29, 0xe5, 0x9c, 0x62, 0x37, 0x83, 0x5d, 0xc9, 0xad, 0x7d, 0x4f, 0x1e, 0x3c, 0x32, 0x72, 0x0f,
	0x1f, 0x19, 0xb9, 0x27, 0x8f, 0x0c, 0xf2, 0x75, 0xdf, 0x20, 0xbf, 0xf6, 0x0d, 0x72, 0xbf, 0x6f,
	0x90, 0x07, 0x7d, 0x83, 0xfc, 0xd9, 0x37, 0xc8, 0x5f, 0x7d, 0x23, 0xf7, 0xa4, 0x6f, 0x90, 0xef,
	0x1e, 0x1b, 0xb9, 0x07, 0x8f, 0x8d, 0xdc, 0xc3, 0xc7, 0x46, 0x0e, 0x16, 0x1d, 0x7e, 0xd0, 0xe8,
	0x70, 0xde, 0xf1, 0x59, 0x66, 0x17, 0xe4, 0x83, 0x32, 0x79, 0x4a, 0xae, 0xcd, 0x0f, 0xdf, 0x91,
	0x5b, 0x12, 0xf8, 0xe2, 0x8d, 0x8e, 0x27, 0xf6, 0x0f, 0xf7, 0x1a, 0x0e, 0x3f, 0x58, 0x49, 0x0c,
	0x57, 0x86, 0x2f, 0xd1, 0xd1, 0x37, 0xe9, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xfc, 0xb8,
	0x26, 0xd1, 0x0e, 0x00, 0x00,
}

func (x RenderAnnotation_Line_LineType) String() string {
	s, ok := RenderAnnotation_Line_LineType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RenderData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderData)
	if !ok {
		that2, ok := that.(RenderData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RenderAnnotations) != len(that1.RenderAnnotations) {
		return false
	}
	for i := range this.RenderAnnotations {
		if !this.RenderAnnotations[i].Equal(that1.RenderAnnotations[i]) {
			return false
		}
	}
	if this.SceneClass != that1.SceneClass {
		return false
	}
	if !this.SceneViewport.Equal(that1.SceneViewport) {
		return false
	}
	return true
}
func (this *RenderAnnotation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation)
	if !ok {
		that2, ok := that.(RenderAnnotation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Data == nil {
		if this.Data != nil {
			return false
		}
	} else if this.Data == nil {
		return false
	} else if !this.Data.Equal(that1.Data) {
		return false
	}
	if this.Thickness != nil && that1.Thickness != nil {
		if *this.Thickness != *that1.Thickness {
			return false
		}
	} else if this.Thickness != nil {
		return false
	} else if that1.Thickness != nil {
		return false
	}
	if !this.Color.Equal(that1.Color) {
		return false
	}
	if this.SceneTag != that1.SceneTag {
		return false
	}
	return true
}
func (this *RenderAnnotation_Rectangle_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_Rectangle_)
	if !ok {
		that2, ok := that.(RenderAnnotation_Rectangle_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rectangle.Equal(that1.Rectangle) {
		return false
	}
	return true
}
func (this *RenderAnnotation_FilledRectangle_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_FilledRectangle_)
	if !ok {
		that2, ok := that.(RenderAnnotation_FilledRectangle_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FilledRectangle.Equal(that1.FilledRectangle) {
		return false
	}
	return true
}
func (this *RenderAnnotation_Oval_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_Oval_)
	if !ok {
		that2, ok := that.(RenderAnnotation_Oval_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Oval.Equal(that1.Oval) {
		return false
	}
	return true
}
func (this *RenderAnnotation_FilledOval_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_FilledOval_)
	if !ok {
		that2, ok := that.(RenderAnnotation_FilledOval_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FilledOval.Equal(that1.FilledOval) {
		return false
	}
	return true
}
func (this *RenderAnnotation_Point_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_Point_)
	if !ok {
		that2, ok := that.(RenderAnnotation_Point_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Point.Equal(that1.Point) {
		return false
	}
	return true
}
func (this *RenderAnnotation_Line_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_Line_)
	if !ok {
		that2, ok := that.(RenderAnnotation_Line_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Line.Equal(that1.Line) {
		return false
	}
	return true
}
func (this *RenderAnnotation_Arrow_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_Arrow_)
	if !ok {
		that2, ok := that.(RenderAnnotation_Arrow_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Arrow.Equal(that1.Arrow) {
		return false
	}
	return true
}
func (this *RenderAnnotation_Text_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_Text_)
	if !ok {
		that2, ok := that.(RenderAnnotation_Text_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Text.Equal(that1.Text) {
		return false
	}
	return true
}
func (this *RenderAnnotation_RoundedRectangle_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_RoundedRectangle_)
	if !ok {
		that2, ok := that.(RenderAnnotation_RoundedRectangle_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoundedRectangle.Equal(that1.RoundedRectangle) {
		return false
	}
	return true
}
func (this *RenderAnnotation_FilledRoundedRectangle_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_FilledRoundedRectangle_)
	if !ok {
		that2, ok := that.(RenderAnnotation_FilledRoundedRectangle_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FilledRoundedRectangle.Equal(that1.FilledRoundedRectangle) {
		return false
	}
	return true
}
func (this *RenderAnnotation_GradientLine_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_GradientLine_)
	if !ok {
		that2, ok := that.(RenderAnnotation_GradientLine_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GradientLine.Equal(that1.GradientLine) {
		return false
	}
	return true
}
func (this *RenderAnnotation_Scribble_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_Scribble_)
	if !ok {
		that2, ok := that.(RenderAnnotation_Scribble_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Scribble.Equal(that1.Scribble) {
		return false
	}
	return true
}
func (this *RenderAnnotation_Rectangle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_Rectangle)
	if !ok {
		that2, ok := that.(RenderAnnotation_Rectangle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Left != that1.Left {
		return false
	}
	if this.Top != that1.Top {
		return false
	}
	if this.Right != that1.Right {
		return false
	}
	if this.Bottom != that1.Bottom {
		return false
	}
	if this.Normalized != nil && that1.Normalized != nil {
		if *this.Normalized != *that1.Normalized {
			return false
		}
	} else if this.Normalized != nil {
		return false
	} else if that1.Normalized != nil {
		return false
	}
	if this.Rotation != that1.Rotation {
		return false
	}
	if this.TopLeftThickness != that1.TopLeftThickness {
		return false
	}
	return true
}
func (this *RenderAnnotation_FilledRectangle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_FilledRectangle)
	if !ok {
		that2, ok := that.(RenderAnnotation_FilledRectangle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rectangle.Equal(that1.Rectangle) {
		return false
	}
	if !this.FillColor.Equal(that1.FillColor) {
		return false
	}
	return true
}
func (this *RenderAnnotation_RoundedRectangle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_RoundedRectangle)
	if !ok {
		that2, ok := that.(RenderAnnotation_RoundedRectangle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rectangle.Equal(that1.Rectangle) {
		return false
	}
	if this.CornerRadius != nil && that1.CornerRadius != nil {
		if *this.CornerRadius != *that1.CornerRadius {
			return false
		}
	} else if this.CornerRadius != nil {
		return false
	} else if that1.CornerRadius != nil {
		return false
	}
	if this.LineType != nil && that1.LineType != nil {
		if *this.LineType != *that1.LineType {
			return false
		}
	} else if this.LineType != nil {
		return false
	} else if that1.LineType != nil {
		return false
	}
	return true
}
func (this *RenderAnnotation_FilledRoundedRectangle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_FilledRoundedRectangle)
	if !ok {
		that2, ok := that.(RenderAnnotation_FilledRoundedRectangle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoundedRectangle.Equal(that1.RoundedRectangle) {
		return false
	}
	if !this.FillColor.Equal(that1.FillColor) {
		return false
	}
	return true
}
func (this *RenderAnnotation_Oval) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_Oval)
	if !ok {
		that2, ok := that.(RenderAnnotation_Oval)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rectangle.Equal(that1.Rectangle) {
		return false
	}
	return true
}
func (this *RenderAnnotation_FilledOval) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_FilledOval)
	if !ok {
		that2, ok := that.(RenderAnnotation_FilledOval)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Oval.Equal(that1.Oval) {
		return false
	}
	if !this.FillColor.Equal(that1.FillColor) {
		return false
	}
	return true
}
func (this *RenderAnnotation_Point) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_Point)
	if !ok {
		that2, ok := that.(RenderAnnotation_Point)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	if this.Normalized != nil && that1.Normalized != nil {
		if *this.Normalized != *that1.Normalized {
			return false
		}
	} else if this.Normalized != nil {
		return false
	} else if that1.Normalized != nil {
		return false
	}
	return true
}
func (this *RenderAnnotation_Line) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_Line)
	if !ok {
		that2, ok := that.(RenderAnnotation_Line)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.XStart != that1.XStart {
		return false
	}
	if this.YStart != that1.YStart {
		return false
	}
	if this.XEnd != that1.XEnd {
		return false
	}
	if this.YEnd != that1.YEnd {
		return false
	}
	if this.Normalized != nil && that1.Normalized != nil {
		if *this.Normalized != *that1.Normalized {
			return false
		}
	} else if this.Normalized != nil {
		return false
	} else if that1.Normalized != nil {
		return false
	}
	if this.LineType != nil && that1.LineType != nil {
		if *this.LineType != *that1.LineType {
			return false
		}
	} else if this.LineType != nil {
		return false
	} else if that1.LineType != nil {
		return false
	}
	return true
}
func (this *RenderAnnotation_GradientLine) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_GradientLine)
	if !ok {
		that2, ok := that.(RenderAnnotation_GradientLine)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.XStart != that1.XStart {
		return false
	}
	if this.YStart != that1.YStart {
		return false
	}
	if this.XEnd != that1.XEnd {
		return false
	}
	if this.YEnd != that1.YEnd {
		return false
	}
	if this.Normalized != nil && that1.Normalized != nil {
		if *this.Normalized != *that1.Normalized {
			return false
		}
	} else if this.Normalized != nil {
		return false
	} else if that1.Normalized != nil {
		return false
	}
	if !this.Color1.Equal(that1.Color1) {
		return false
	}
	if !this.Color2.Equal(that1.Color2) {
		return false
	}
	return true
}
func (this *RenderAnnotation_Scribble) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_Scribble)
	if !ok {
		that2, ok := that.(RenderAnnotation_Scribble)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Point) != len(that1.Point) {
		return false
	}
	for i := range this.Point {
		if !this.Point[i].Equal(that1.Point[i]) {
			return false
		}
	}
	return true
}
func (this *RenderAnnotation_Arrow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_Arrow)
	if !ok {
		that2, ok := that.(RenderAnnotation_Arrow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.XStart != that1.XStart {
		return false
	}
	if this.YStart != that1.YStart {
		return false
	}
	if this.XEnd != that1.XEnd {
		return false
	}
	if this.YEnd != that1.YEnd {
		return false
	}
	if this.Normalized != nil && that1.Normalized != nil {
		if *this.Normalized != *that1.Normalized {
			return false
		}
	} else if this.Normalized != nil {
		return false
	} else if that1.Normalized != nil {
		return false
	}
	return true
}
func (this *RenderAnnotation_Text) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderAnnotation_Text)
	if !ok {
		that2, ok := that.(RenderAnnotation_Text)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DisplayText != that1.DisplayText {
		return false
	}
	if this.Left != that1.Left {
		return false
	}
	if this.Baseline != that1.Baseline {
		return false
	}
	if this.FontHeight != nil && that1.FontHeight != nil {
		if *this.FontHeight != *that1.FontHeight {
			return false
		}
	} else if this.FontHeight != nil {
		return false
	} else if that1.FontHeight != nil {
		return false
	}
	if this.Normalized != nil && that1.Normalized != nil {
		if *this.Normalized != *that1.Normalized {
			return false
		}
	} else if this.Normalized != nil {
		return false
	} else if that1.Normalized != nil {
		return false
	}
	if this.FontFace != nil && that1.FontFace != nil {
		if *this.FontFace != *that1.FontFace {
			return false
		}
	} else if this.FontFace != nil {
		return false
	} else if that1.FontFace != nil {
		return false
	}
	if this.CenterHorizontally != nil && that1.CenterHorizontally != nil {
		if *this.CenterHorizontally != *that1.CenterHorizontally {
			return false
		}
	} else if this.CenterHorizontally != nil {
		return false
	} else if that1.CenterHorizontally != nil {
		return false
	}
	if this.CenterVertically != nil && that1.CenterVertically != nil {
		if *this.CenterVertically != *that1.CenterVertically {
			return false
		}
	} else if this.CenterVertically != nil {
		return false
	} else if that1.CenterVertically != nil {
		return false
	}
	if this.OutlineThickness != nil && that1.OutlineThickness != nil {
		if *this.OutlineThickness != *that1.OutlineThickness {
			return false
		}
	} else if this.OutlineThickness != nil {
		return false
	} else if that1.OutlineThickness != nil {
		return false
	}
	if !this.OutlineColor.Equal(that1.OutlineColor) {
		return false
	}
	return true
}
func (this *RenderViewport) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenderViewport)
	if !ok {
		that2, ok := that.(RenderViewport)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.WidthPx != that1.WidthPx {
		return false
	}
	if this.HeightPx != that1.HeightPx {
		return false
	}
	if this.ComposeOnVideo != that1.ComposeOnVideo {
		return false
	}
	return true
}
func (this *RenderData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&util.RenderData{")
	if this.RenderAnnotations != nil {
		s = append(s, "RenderAnnotations: "+fmt.Sprintf("%#v", this.RenderAnnotations)+",\n")
	}
	s = append(s, "SceneClass: "+fmt.Sprintf("%#v", this.SceneClass)+",\n")
	if this.SceneViewport != nil {
		s = append(s, "SceneViewport: "+fmt.Sprintf("%#v", this.SceneViewport)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenderAnnotation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&util.RenderAnnotation{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Thickness != nil {
		s = append(s, "Thickness: "+valueToGoStringRenderData(this.Thickness, "float64")+",\n")
	}
	if this.Color != nil {
		s = append(s, "Color: "+fmt.Sprintf("%#v", this.Color)+",\n")
	}
	s = append(s, "SceneTag: "+fmt.Sprintf("%#v", this.SceneTag)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenderAnnotation_Rectangle_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.RenderAnnotation_Rectangle_{` +
		`Rectangle:` + fmt.Sprintf("%#v", this.Rectangle) + `}`}, ", ")
	return s
}
func (this *RenderAnnotation_FilledRectangle_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.RenderAnnotation_FilledRectangle_{` +
		`FilledRectangle:` + fmt.Sprintf("%#v", this.FilledRectangle) + `}`}, ", ")
	return s
}
func (this *RenderAnnotation_Oval_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.RenderAnnotation_Oval_{` +
		`Oval:` + fmt.Sprintf("%#v", this.Oval) + `}`}, ", ")
	return s
}
func (this *RenderAnnotation_FilledOval_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.RenderAnnotation_FilledOval_{` +
		`FilledOval:` + fmt.Sprintf("%#v", this.FilledOval) + `}`}, ", ")
	return s
}
func (this *RenderAnnotation_Point_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.RenderAnnotation_Point_{` +
		`Point:` + fmt.Sprintf("%#v", this.Point) + `}`}, ", ")
	return s
}
func (this *RenderAnnotation_Line_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.RenderAnnotation_Line_{` +
		`Line:` + fmt.Sprintf("%#v", this.Line) + `}`}, ", ")
	return s
}
func (this *RenderAnnotation_Arrow_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.RenderAnnotation_Arrow_{` +
		`Arrow:` + fmt.Sprintf("%#v", this.Arrow) + `}`}, ", ")
	return s
}
func (this *RenderAnnotation_Text_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.RenderAnnotation_Text_{` +
		`Text:` + fmt.Sprintf("%#v", this.Text) + `}`}, ", ")
	return s
}
func (this *RenderAnnotation_RoundedRectangle_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.RenderAnnotation_RoundedRectangle_{` +
		`RoundedRectangle:` + fmt.Sprintf("%#v", this.RoundedRectangle) + `}`}, ", ")
	return s
}
func (this *RenderAnnotation_FilledRoundedRectangle_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.RenderAnnotation_FilledRoundedRectangle_{` +
		`FilledRoundedRectangle:` + fmt.Sprintf("%#v", this.FilledRoundedRectangle) + `}`}, ", ")
	return s
}
func (this *RenderAnnotation_GradientLine_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.RenderAnnotation_GradientLine_{` +
		`GradientLine:` + fmt.Sprintf("%#v", this.GradientLine) + `}`}, ", ")
	return s
}
func (this *RenderAnnotation_Scribble_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&util.RenderAnnotation_Scribble_{` +
		`Scribble:` + fmt.Sprintf("%#v", this.Scribble) + `}`}, ", ")
	return s
}
func (this *RenderAnnotation_Rectangle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&util.RenderAnnotation_Rectangle{")
	s = append(s, "Left: "+fmt.Sprintf("%#v", this.Left)+",\n")
	s = append(s, "Top: "+fmt.Sprintf("%#v", this.Top)+",\n")
	s = append(s, "Right: "+fmt.Sprintf("%#v", this.Right)+",\n")
	s = append(s, "Bottom: "+fmt.Sprintf("%#v", this.Bottom)+",\n")
	if this.Normalized != nil {
		s = append(s, "Normalized: "+valueToGoStringRenderData(this.Normalized, "bool")+",\n")
	}
	s = append(s, "Rotation: "+fmt.Sprintf("%#v", this.Rotation)+",\n")
	s = append(s, "TopLeftThickness: "+fmt.Sprintf("%#v", this.TopLeftThickness)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenderAnnotation_FilledRectangle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&util.RenderAnnotation_FilledRectangle{")
	if this.Rectangle != nil {
		s = append(s, "Rectangle: "+fmt.Sprintf("%#v", this.Rectangle)+",\n")
	}
	if this.FillColor != nil {
		s = append(s, "FillColor: "+fmt.Sprintf("%#v", this.FillColor)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenderAnnotation_RoundedRectangle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&util.RenderAnnotation_RoundedRectangle{")
	if this.Rectangle != nil {
		s = append(s, "Rectangle: "+fmt.Sprintf("%#v", this.Rectangle)+",\n")
	}
	if this.CornerRadius != nil {
		s = append(s, "CornerRadius: "+valueToGoStringRenderData(this.CornerRadius, "int32")+",\n")
	}
	if this.LineType != nil {
		s = append(s, "LineType: "+valueToGoStringRenderData(this.LineType, "int32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenderAnnotation_FilledRoundedRectangle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&util.RenderAnnotation_FilledRoundedRectangle{")
	if this.RoundedRectangle != nil {
		s = append(s, "RoundedRectangle: "+fmt.Sprintf("%#v", this.RoundedRectangle)+",\n")
	}
	if this.FillColor != nil {
		s = append(s, "FillColor: "+fmt.Sprintf("%#v", this.FillColor)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenderAnnotation_Oval) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&util.RenderAnnotation_Oval{")
	if this.Rectangle != nil {
		s = append(s, "Rectangle: "+fmt.Sprintf("%#v", this.Rectangle)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenderAnnotation_FilledOval) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&util.RenderAnnotation_FilledOval{")
	if this.Oval != nil {
		s = append(s, "Oval: "+fmt.Sprintf("%#v", this.Oval)+",\n")
	}
	if this.FillColor != nil {
		s = append(s, "FillColor: "+fmt.Sprintf("%#v", this.FillColor)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenderAnnotation_Point) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&util.RenderAnnotation_Point{")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	if this.Normalized != nil {
		s = append(s, "Normalized: "+valueToGoStringRenderData(this.Normalized, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenderAnnotation_Line) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&util.RenderAnnotation_Line{")
	s = append(s, "XStart: "+fmt.Sprintf("%#v", this.XStart)+",\n")
	s = append(s, "YStart: "+fmt.Sprintf("%#v", this.YStart)+",\n")
	s = append(s, "XEnd: "+fmt.Sprintf("%#v", this.XEnd)+",\n")
	s = append(s, "YEnd: "+fmt.Sprintf("%#v", this.YEnd)+",\n")
	if this.Normalized != nil {
		s = append(s, "Normalized: "+valueToGoStringRenderData(this.Normalized, "bool")+",\n")
	}
	if this.LineType != nil {
		s = append(s, "LineType: "+valueToGoStringRenderData(this.LineType, "RenderAnnotation_Line_LineType")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenderAnnotation_GradientLine) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&util.RenderAnnotation_GradientLine{")
	s = append(s, "XStart: "+fmt.Sprintf("%#v", this.XStart)+",\n")
	s = append(s, "YStart: "+fmt.Sprintf("%#v", this.YStart)+",\n")
	s = append(s, "XEnd: "+fmt.Sprintf("%#v", this.XEnd)+",\n")
	s = append(s, "YEnd: "+fmt.Sprintf("%#v", this.YEnd)+",\n")
	if this.Normalized != nil {
		s = append(s, "Normalized: "+valueToGoStringRenderData(this.Normalized, "bool")+",\n")
	}
	if this.Color1 != nil {
		s = append(s, "Color1: "+fmt.Sprintf("%#v", this.Color1)+",\n")
	}
	if this.Color2 != nil {
		s = append(s, "Color2: "+fmt.Sprintf("%#v", this.Color2)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenderAnnotation_Scribble) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&util.RenderAnnotation_Scribble{")
	if this.Point != nil {
		s = append(s, "Point: "+fmt.Sprintf("%#v", this.Point)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenderAnnotation_Arrow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&util.RenderAnnotation_Arrow{")
	s = append(s, "XStart: "+fmt.Sprintf("%#v", this.XStart)+",\n")
	s = append(s, "YStart: "+fmt.Sprintf("%#v", this.YStart)+",\n")
	s = append(s, "XEnd: "+fmt.Sprintf("%#v", this.XEnd)+",\n")
	s = append(s, "YEnd: "+fmt.Sprintf("%#v", this.YEnd)+",\n")
	if this.Normalized != nil {
		s = append(s, "Normalized: "+valueToGoStringRenderData(this.Normalized, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenderAnnotation_Text) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&util.RenderAnnotation_Text{")
	s = append(s, "DisplayText: "+fmt.Sprintf("%#v", this.DisplayText)+",\n")
	s = append(s, "Left: "+fmt.Sprintf("%#v", this.Left)+",\n")
	s = append(s, "Baseline: "+fmt.Sprintf("%#v", this.Baseline)+",\n")
	if this.FontHeight != nil {
		s = append(s, "FontHeight: "+valueToGoStringRenderData(this.FontHeight, "float64")+",\n")
	}
	if this.Normalized != nil {
		s = append(s, "Normalized: "+valueToGoStringRenderData(this.Normalized, "bool")+",\n")
	}
	if this.FontFace != nil {
		s = append(s, "FontFace: "+valueToGoStringRenderData(this.FontFace, "int32")+",\n")
	}
	if this.CenterHorizontally != nil {
		s = append(s, "CenterHorizontally: "+valueToGoStringRenderData(this.CenterHorizontally, "bool")+",\n")
	}
	if this.CenterVertically != nil {
		s = append(s, "CenterVertically: "+valueToGoStringRenderData(this.CenterVertically, "bool")+",\n")
	}
	if this.OutlineThickness != nil {
		s = append(s, "OutlineThickness: "+valueToGoStringRenderData(this.OutlineThickness, "float64")+",\n")
	}
	if this.OutlineColor != nil {
		s = append(s, "OutlineColor: "+fmt.Sprintf("%#v", this.OutlineColor)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenderViewport) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&util.RenderViewport{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "WidthPx: "+fmt.Sprintf("%#v", this.WidthPx)+",\n")
	s = append(s, "HeightPx: "+fmt.Sprintf("%#v", this.HeightPx)+",\n")
	s = append(s, "ComposeOnVideo: "+fmt.Sprintf("%#v", this.ComposeOnVideo)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRenderData(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RenderData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenderData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SceneViewport != nil {
		{
			size, err := m.SceneViewport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i -= len(m.SceneClass)
	copy(dAtA[i:], m.SceneClass)
	i = encodeVarintRenderData(dAtA, i, uint64(len(m.SceneClass)))
	i--
	dAtA[i] = 0x12
	if len(m.RenderAnnotations) > 0 {
		for iNdEx := len(m.RenderAnnotations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RenderAnnotations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRenderData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RenderAnnotation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenderAnnotation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	i -= len(m.SceneTag)
	copy(dAtA[i:], m.SceneTag)
	i = encodeVarintRenderData(dAtA, i, uint64(len(m.SceneTag)))
	i--
	dAtA[i] = 0x6a
	if m.Color != nil {
		{
			size, err := m.Color.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Thickness != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Thickness))))
		i--
		dAtA[i] = 0x59
	}
	return len(dAtA) - i, nil
}

func (m *RenderAnnotation_Rectangle_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_Rectangle_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Rectangle != nil {
		{
			size, err := m.Rectangle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *RenderAnnotation_FilledRectangle_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_FilledRectangle_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FilledRectangle != nil {
		{
			size, err := m.FilledRectangle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RenderAnnotation_Oval_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_Oval_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Oval != nil {
		{
			size, err := m.Oval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RenderAnnotation_FilledOval_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_FilledOval_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FilledOval != nil {
		{
			size, err := m.FilledOval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RenderAnnotation_Point_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_Point_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Point != nil {
		{
			size, err := m.Point.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *RenderAnnotation_Line_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_Line_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Line != nil {
		{
			size, err := m.Line.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *RenderAnnotation_Arrow_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_Arrow_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Arrow != nil {
		{
			size, err := m.Arrow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *RenderAnnotation_Text_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_Text_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *RenderAnnotation_RoundedRectangle_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_RoundedRectangle_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RoundedRectangle != nil {
		{
			size, err := m.RoundedRectangle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *RenderAnnotation_FilledRoundedRectangle_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_FilledRoundedRectangle_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FilledRoundedRectangle != nil {
		{
			size, err := m.FilledRoundedRectangle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *RenderAnnotation_GradientLine_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_GradientLine_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GradientLine != nil {
		{
			size, err := m.GradientLine.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *RenderAnnotation_Scribble_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_Scribble_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Scribble != nil {
		{
			size, err := m.Scribble.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *RenderAnnotation_Rectangle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenderAnnotation_Rectangle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_Rectangle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TopLeftThickness))))
	i--
	dAtA[i] = 0x39
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Rotation))))
	i--
	dAtA[i] = 0x31
	if m.Normalized != nil {
		i--
		if *m.Normalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Bottom))))
	i--
	dAtA[i] = 0x21
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Right))))
	i--
	dAtA[i] = 0x19
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Top))))
	i--
	dAtA[i] = 0x11
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Left))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *RenderAnnotation_FilledRectangle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenderAnnotation_FilledRectangle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_FilledRectangle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FillColor != nil {
		{
			size, err := m.FillColor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Rectangle != nil {
		{
			size, err := m.Rectangle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RenderAnnotation_RoundedRectangle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenderAnnotation_RoundedRectangle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_RoundedRectangle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LineType != nil {
		i = encodeVarintRenderData(dAtA, i, uint64(*m.LineType))
		i--
		dAtA[i] = 0x18
	}
	if m.CornerRadius != nil {
		i = encodeVarintRenderData(dAtA, i, uint64(*m.CornerRadius))
		i--
		dAtA[i] = 0x10
	}
	if m.Rectangle != nil {
		{
			size, err := m.Rectangle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RenderAnnotation_FilledRoundedRectangle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenderAnnotation_FilledRoundedRectangle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_FilledRoundedRectangle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FillColor != nil {
		{
			size, err := m.FillColor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RoundedRectangle != nil {
		{
			size, err := m.RoundedRectangle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RenderAnnotation_Oval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenderAnnotation_Oval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_Oval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rectangle != nil {
		{
			size, err := m.Rectangle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RenderAnnotation_FilledOval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenderAnnotation_FilledOval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_FilledOval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FillColor != nil {
		{
			size, err := m.FillColor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Oval != nil {
		{
			size, err := m.Oval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RenderAnnotation_Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenderAnnotation_Point) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_Point) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Normalized != nil {
		i--
		if *m.Normalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Y))))
	i--
	dAtA[i] = 0x11
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.X))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *RenderAnnotation_Line) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenderAnnotation_Line) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_Line) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LineType != nil {
		i = encodeVarintRenderData(dAtA, i, uint64(*m.LineType))
		i--
		dAtA[i] = 0x30
	}
	if m.Normalized != nil {
		i--
		if *m.Normalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.YEnd))))
	i--
	dAtA[i] = 0x21
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.XEnd))))
	i--
	dAtA[i] = 0x19
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.YStart))))
	i--
	dAtA[i] = 0x11
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.XStart))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *RenderAnnotation_GradientLine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenderAnnotation_GradientLine) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_GradientLine) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Color2 != nil {
		{
			size, err := m.Color2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Color1 != nil {
		{
			size, err := m.Color1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Normalized != nil {
		i--
		if *m.Normalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.YEnd))))
	i--
	dAtA[i] = 0x21
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.XEnd))))
	i--
	dAtA[i] = 0x19
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.YStart))))
	i--
	dAtA[i] = 0x11
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.XStart))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *RenderAnnotation_Scribble) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenderAnnotation_Scribble) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_Scribble) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Point) > 0 {
		for iNdEx := len(m.Point) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Point[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRenderData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RenderAnnotation_Arrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenderAnnotation_Arrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_Arrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Normalized != nil {
		i--
		if *m.Normalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.YEnd))))
	i--
	dAtA[i] = 0x21
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.XEnd))))
	i--
	dAtA[i] = 0x19
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.YStart))))
	i--
	dAtA[i] = 0x11
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.XStart))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *RenderAnnotation_Text) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenderAnnotation_Text) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderAnnotation_Text) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutlineColor != nil {
		{
			size, err := m.OutlineColor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRenderData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.OutlineThickness != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.OutlineThickness))))
		i--
		dAtA[i] = 0x59
	}
	if m.CenterVertically != nil {
		i--
		if *m.CenterVertically {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.CenterHorizontally != nil {
		i--
		if *m.CenterHorizontally {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.FontFace != nil {
		i = encodeVarintRenderData(dAtA, i, uint64(*m.FontFace))
		i--
		dAtA[i] = 0x30
	}
	if m.Normalized != nil {
		i--
		if *m.Normalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.FontHeight != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.FontHeight))))
		i--
		dAtA[i] = 0x21
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Baseline))))
	i--
	dAtA[i] = 0x19
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Left))))
	i--
	dAtA[i] = 0x11
	i -= len(m.DisplayText)
	copy(dAtA[i:], m.DisplayText)
	i = encodeVarintRenderData(dAtA, i, uint64(len(m.DisplayText)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RenderViewport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenderViewport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderViewport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.ComposeOnVideo {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i = encodeVarintRenderData(dAtA, i, uint64(m.HeightPx))
	i--
	dAtA[i] = 0x18
	i = encodeVarintRenderData(dAtA, i, uint64(m.WidthPx))
	i--
	dAtA[i] = 0x10
	i -= len(m.Id)
	copy(dAtA[i:], m.Id)
	i = encodeVarintRenderData(dAtA, i, uint64(len(m.Id)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintRenderData(dAtA []byte, offset int, v uint64) int {
	offset -= sovRenderData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RenderData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RenderAnnotations) > 0 {
		for _, e := range m.RenderAnnotations {
			l = e.Size()
			n += 1 + l + sovRenderData(uint64(l))
		}
	}
	l = len(m.SceneClass)
	n += 1 + l + sovRenderData(uint64(l))
	if m.SceneViewport != nil {
		l = m.SceneViewport.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}

func (m *RenderAnnotation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	if m.Thickness != nil {
		n += 9
	}
	if m.Color != nil {
		l = m.Color.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	l = len(m.SceneTag)
	n += 1 + l + sovRenderData(uint64(l))
	return n
}

func (m *RenderAnnotation_Rectangle_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rectangle != nil {
		l = m.Rectangle.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}
func (m *RenderAnnotation_FilledRectangle_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FilledRectangle != nil {
		l = m.FilledRectangle.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}
func (m *RenderAnnotation_Oval_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oval != nil {
		l = m.Oval.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}
func (m *RenderAnnotation_FilledOval_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FilledOval != nil {
		l = m.FilledOval.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}
func (m *RenderAnnotation_Point_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Point != nil {
		l = m.Point.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}
func (m *RenderAnnotation_Line_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Line != nil {
		l = m.Line.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}
func (m *RenderAnnotation_Arrow_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Arrow != nil {
		l = m.Arrow.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}
func (m *RenderAnnotation_Text_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}
func (m *RenderAnnotation_RoundedRectangle_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundedRectangle != nil {
		l = m.RoundedRectangle.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}
func (m *RenderAnnotation_FilledRoundedRectangle_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FilledRoundedRectangle != nil {
		l = m.FilledRoundedRectangle.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}
func (m *RenderAnnotation_GradientLine_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GradientLine != nil {
		l = m.GradientLine.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}
func (m *RenderAnnotation_Scribble_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scribble != nil {
		l = m.Scribble.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}
func (m *RenderAnnotation_Rectangle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	n += 9
	n += 9
	if m.Normalized != nil {
		n += 2
	}
	n += 9
	n += 9
	return n
}

func (m *RenderAnnotation_FilledRectangle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rectangle != nil {
		l = m.Rectangle.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	if m.FillColor != nil {
		l = m.FillColor.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}

func (m *RenderAnnotation_RoundedRectangle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rectangle != nil {
		l = m.Rectangle.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	if m.CornerRadius != nil {
		n += 1 + sovRenderData(uint64(*m.CornerRadius))
	}
	if m.LineType != nil {
		n += 1 + sovRenderData(uint64(*m.LineType))
	}
	return n
}

func (m *RenderAnnotation_FilledRoundedRectangle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundedRectangle != nil {
		l = m.RoundedRectangle.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	if m.FillColor != nil {
		l = m.FillColor.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}

func (m *RenderAnnotation_Oval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rectangle != nil {
		l = m.Rectangle.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}

func (m *RenderAnnotation_FilledOval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oval != nil {
		l = m.Oval.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	if m.FillColor != nil {
		l = m.FillColor.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}

func (m *RenderAnnotation_Point) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	if m.Normalized != nil {
		n += 2
	}
	return n
}

func (m *RenderAnnotation_Line) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	n += 9
	n += 9
	if m.Normalized != nil {
		n += 2
	}
	if m.LineType != nil {
		n += 1 + sovRenderData(uint64(*m.LineType))
	}
	return n
}

func (m *RenderAnnotation_GradientLine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	n += 9
	n += 9
	if m.Normalized != nil {
		n += 2
	}
	if m.Color1 != nil {
		l = m.Color1.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	if m.Color2 != nil {
		l = m.Color2.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}

func (m *RenderAnnotation_Scribble) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Point) > 0 {
		for _, e := range m.Point {
			l = e.Size()
			n += 1 + l + sovRenderData(uint64(l))
		}
	}
	return n
}

func (m *RenderAnnotation_Arrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	n += 9
	n += 9
	if m.Normalized != nil {
		n += 2
	}
	return n
}

func (m *RenderAnnotation_Text) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayText)
	n += 1 + l + sovRenderData(uint64(l))
	n += 9
	n += 9
	if m.FontHeight != nil {
		n += 9
	}
	if m.Normalized != nil {
		n += 2
	}
	if m.FontFace != nil {
		n += 1 + sovRenderData(uint64(*m.FontFace))
	}
	if m.CenterHorizontally != nil {
		n += 2
	}
	if m.CenterVertically != nil {
		n += 2
	}
	if m.OutlineThickness != nil {
		n += 9
	}
	if m.OutlineColor != nil {
		l = m.OutlineColor.Size()
		n += 1 + l + sovRenderData(uint64(l))
	}
	return n
}

func (m *RenderViewport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	n += 1 + l + sovRenderData(uint64(l))
	n += 1 + sovRenderData(uint64(m.WidthPx))
	n += 1 + sovRenderData(uint64(m.HeightPx))
	n += 2
	return n
}

func sovRenderData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRenderData(x uint64) (n int) {
	return sovRenderData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RenderData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRenderAnnotations := "[]*RenderAnnotation{"
	for _, f := range this.RenderAnnotations {
		repeatedStringForRenderAnnotations += strings.Replace(f.String(), "RenderAnnotation", "RenderAnnotation", 1) + ","
	}
	repeatedStringForRenderAnnotations += "}"
	s := strings.Join([]string{`&RenderData{`,
		`RenderAnnotations:` + repeatedStringForRenderAnnotations + `,`,
		`SceneClass:` + fmt.Sprintf("%v", this.SceneClass) + `,`,
		`SceneViewport:` + strings.Replace(this.SceneViewport.String(), "RenderViewport", "RenderViewport", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Thickness:` + valueToStringRenderData(this.Thickness) + `,`,
		`Color:` + strings.Replace(fmt.Sprintf("%v", this.Color), "Color", "Color", 1) + `,`,
		`SceneTag:` + fmt.Sprintf("%v", this.SceneTag) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_Rectangle_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_Rectangle_{`,
		`Rectangle:` + strings.Replace(fmt.Sprintf("%v", this.Rectangle), "RenderAnnotation_Rectangle", "RenderAnnotation_Rectangle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_FilledRectangle_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_FilledRectangle_{`,
		`FilledRectangle:` + strings.Replace(fmt.Sprintf("%v", this.FilledRectangle), "RenderAnnotation_FilledRectangle", "RenderAnnotation_FilledRectangle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_Oval_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_Oval_{`,
		`Oval:` + strings.Replace(fmt.Sprintf("%v", this.Oval), "RenderAnnotation_Oval", "RenderAnnotation_Oval", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_FilledOval_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_FilledOval_{`,
		`FilledOval:` + strings.Replace(fmt.Sprintf("%v", this.FilledOval), "RenderAnnotation_FilledOval", "RenderAnnotation_FilledOval", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_Point_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_Point_{`,
		`Point:` + strings.Replace(fmt.Sprintf("%v", this.Point), "RenderAnnotation_Point", "RenderAnnotation_Point", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_Line_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_Line_{`,
		`Line:` + strings.Replace(fmt.Sprintf("%v", this.Line), "RenderAnnotation_Line", "RenderAnnotation_Line", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_Arrow_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_Arrow_{`,
		`Arrow:` + strings.Replace(fmt.Sprintf("%v", this.Arrow), "RenderAnnotation_Arrow", "RenderAnnotation_Arrow", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_Text_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_Text_{`,
		`Text:` + strings.Replace(fmt.Sprintf("%v", this.Text), "RenderAnnotation_Text", "RenderAnnotation_Text", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_RoundedRectangle_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_RoundedRectangle_{`,
		`RoundedRectangle:` + strings.Replace(fmt.Sprintf("%v", this.RoundedRectangle), "RenderAnnotation_RoundedRectangle", "RenderAnnotation_RoundedRectangle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_FilledRoundedRectangle_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_FilledRoundedRectangle_{`,
		`FilledRoundedRectangle:` + strings.Replace(fmt.Sprintf("%v", this.FilledRoundedRectangle), "RenderAnnotation_FilledRoundedRectangle", "RenderAnnotation_FilledRoundedRectangle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_GradientLine_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_GradientLine_{`,
		`GradientLine:` + strings.Replace(fmt.Sprintf("%v", this.GradientLine), "RenderAnnotation_GradientLine", "RenderAnnotation_GradientLine", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_Scribble_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_Scribble_{`,
		`Scribble:` + strings.Replace(fmt.Sprintf("%v", this.Scribble), "RenderAnnotation_Scribble", "RenderAnnotation_Scribble", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_Rectangle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_Rectangle{`,
		`Left:` + fmt.Sprintf("%v", this.Left) + `,`,
		`Top:` + fmt.Sprintf("%v", this.Top) + `,`,
		`Right:` + fmt.Sprintf("%v", this.Right) + `,`,
		`Bottom:` + fmt.Sprintf("%v", this.Bottom) + `,`,
		`Normalized:` + valueToStringRenderData(this.Normalized) + `,`,
		`Rotation:` + fmt.Sprintf("%v", this.Rotation) + `,`,
		`TopLeftThickness:` + fmt.Sprintf("%v", this.TopLeftThickness) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_FilledRectangle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_FilledRectangle{`,
		`Rectangle:` + strings.Replace(fmt.Sprintf("%v", this.Rectangle), "RenderAnnotation_Rectangle", "RenderAnnotation_Rectangle", 1) + `,`,
		`FillColor:` + strings.Replace(fmt.Sprintf("%v", this.FillColor), "Color", "Color", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_RoundedRectangle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_RoundedRectangle{`,
		`Rectangle:` + strings.Replace(fmt.Sprintf("%v", this.Rectangle), "RenderAnnotation_Rectangle", "RenderAnnotation_Rectangle", 1) + `,`,
		`CornerRadius:` + valueToStringRenderData(this.CornerRadius) + `,`,
		`LineType:` + valueToStringRenderData(this.LineType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_FilledRoundedRectangle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_FilledRoundedRectangle{`,
		`RoundedRectangle:` + strings.Replace(fmt.Sprintf("%v", this.RoundedRectangle), "RenderAnnotation_RoundedRectangle", "RenderAnnotation_RoundedRectangle", 1) + `,`,
		`FillColor:` + strings.Replace(fmt.Sprintf("%v", this.FillColor), "Color", "Color", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_Oval) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_Oval{`,
		`Rectangle:` + strings.Replace(fmt.Sprintf("%v", this.Rectangle), "RenderAnnotation_Rectangle", "RenderAnnotation_Rectangle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_FilledOval) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_FilledOval{`,
		`Oval:` + strings.Replace(fmt.Sprintf("%v", this.Oval), "RenderAnnotation_Oval", "RenderAnnotation_Oval", 1) + `,`,
		`FillColor:` + strings.Replace(fmt.Sprintf("%v", this.FillColor), "Color", "Color", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_Point) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_Point{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`Normalized:` + valueToStringRenderData(this.Normalized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_Line) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_Line{`,
		`XStart:` + fmt.Sprintf("%v", this.XStart) + `,`,
		`YStart:` + fmt.Sprintf("%v", this.YStart) + `,`,
		`XEnd:` + fmt.Sprintf("%v", this.XEnd) + `,`,
		`YEnd:` + fmt.Sprintf("%v", this.YEnd) + `,`,
		`Normalized:` + valueToStringRenderData(this.Normalized) + `,`,
		`LineType:` + valueToStringRenderData(this.LineType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_GradientLine) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_GradientLine{`,
		`XStart:` + fmt.Sprintf("%v", this.XStart) + `,`,
		`YStart:` + fmt.Sprintf("%v", this.YStart) + `,`,
		`XEnd:` + fmt.Sprintf("%v", this.XEnd) + `,`,
		`YEnd:` + fmt.Sprintf("%v", this.YEnd) + `,`,
		`Normalized:` + valueToStringRenderData(this.Normalized) + `,`,
		`Color1:` + strings.Replace(fmt.Sprintf("%v", this.Color1), "Color", "Color", 1) + `,`,
		`Color2:` + strings.Replace(fmt.Sprintf("%v", this.Color2), "Color", "Color", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_Scribble) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPoint := "[]*RenderAnnotation_Point{"
	for _, f := range this.Point {
		repeatedStringForPoint += strings.Replace(fmt.Sprintf("%v", f), "RenderAnnotation_Point", "RenderAnnotation_Point", 1) + ","
	}
	repeatedStringForPoint += "}"
	s := strings.Join([]string{`&RenderAnnotation_Scribble{`,
		`Point:` + repeatedStringForPoint + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_Arrow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_Arrow{`,
		`XStart:` + fmt.Sprintf("%v", this.XStart) + `,`,
		`YStart:` + fmt.Sprintf("%v", this.YStart) + `,`,
		`XEnd:` + fmt.Sprintf("%v", this.XEnd) + `,`,
		`YEnd:` + fmt.Sprintf("%v", this.YEnd) + `,`,
		`Normalized:` + valueToStringRenderData(this.Normalized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderAnnotation_Text) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderAnnotation_Text{`,
		`DisplayText:` + fmt.Sprintf("%v", this.DisplayText) + `,`,
		`Left:` + fmt.Sprintf("%v", this.Left) + `,`,
		`Baseline:` + fmt.Sprintf("%v", this.Baseline) + `,`,
		`FontHeight:` + valueToStringRenderData(this.FontHeight) + `,`,
		`Normalized:` + valueToStringRenderData(this.Normalized) + `,`,
		`FontFace:` + valueToStringRenderData(this.FontFace) + `,`,
		`CenterHorizontally:` + valueToStringRenderData(this.CenterHorizontally) + `,`,
		`CenterVertically:` + valueToStringRenderData(this.CenterVertically) + `,`,
		`OutlineThickness:` + valueToStringRenderData(this.OutlineThickness) + `,`,
		`OutlineColor:` + strings.Replace(fmt.Sprintf("%v", this.OutlineColor), "Color", "Color", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenderViewport) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenderViewport{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`WidthPx:` + fmt.Sprintf("%v", this.WidthPx) + `,`,
		`HeightPx:` + fmt.Sprintf("%v", this.HeightPx) + `,`,
		`ComposeOnVideo:` + fmt.Sprintf("%v", this.ComposeOnVideo) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRenderData(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RenderData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRenderData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenderData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenderData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RenderAnnotations = append(m.RenderAnnotations, &RenderAnnotation{})
			if err := m.RenderAnnotations[len(m.RenderAnnotations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SceneClass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneViewport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SceneViewport == nil {
				m.SceneViewport = &RenderViewport{}
			}
			if err := m.SceneViewport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRenderData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRenderData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderAnnotation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRenderData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenderAnnotation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenderAnnotation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rectangle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RenderAnnotation_Rectangle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &RenderAnnotation_Rectangle_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilledRectangle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RenderAnnotation_FilledRectangle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &RenderAnnotation_FilledRectangle_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RenderAnnotation_Oval{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &RenderAnnotation_Oval_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilledOval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RenderAnnotation_FilledOval{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &RenderAnnotation_FilledOval_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RenderAnnotation_Point{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &RenderAnnotation_Point_{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RenderAnnotation_Line{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &RenderAnnotation_Line_{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RenderAnnotation_Arrow{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &RenderAnnotation_Arrow_{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RenderAnnotation_Text{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &RenderAnnotation_Text_{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundedRectangle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RenderAnnotation_RoundedRectangle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &RenderAnnotation_RoundedRectangle_{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilledRoundedRectangle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RenderAnnotation_FilledRoundedRectangle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &RenderAnnotation_FilledRoundedRectangle_{v}
			iNdEx = postIndex
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thickness", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Thickness = &v2
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Color == nil {
				m.Color = &Color{}
			}
			if err := m.Color.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SceneTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GradientLine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RenderAnnotation_GradientLine{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &RenderAnnotation_GradientLine_{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scribble", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RenderAnnotation_Scribble{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &RenderAnnotation_Scribble_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRenderData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRenderData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderAnnotation_Rectangle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRenderData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rectangle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rectangle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Left = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Top = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Right = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bottom", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Bottom = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Normalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Normalized = &b
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotation", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Rotation = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopLeftThickness", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TopLeftThickness = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRenderData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRenderData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderAnnotation_FilledRectangle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRenderData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilledRectangle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilledRectangle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rectangle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rectangle == nil {
				m.Rectangle = &RenderAnnotation_Rectangle{}
			}
			if err := m.Rectangle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillColor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FillColor == nil {
				m.FillColor = &Color{}
			}
			if err := m.FillColor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRenderData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRenderData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderAnnotation_RoundedRectangle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRenderData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoundedRectangle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoundedRectangle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rectangle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rectangle == nil {
				m.Rectangle = &RenderAnnotation_Rectangle{}
			}
			if err := m.Rectangle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CornerRadius", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CornerRadius = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LineType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRenderData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRenderData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderAnnotation_FilledRoundedRectangle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRenderData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilledRoundedRectangle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilledRoundedRectangle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundedRectangle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoundedRectangle == nil {
				m.RoundedRectangle = &RenderAnnotation_RoundedRectangle{}
			}
			if err := m.RoundedRectangle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillColor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FillColor == nil {
				m.FillColor = &Color{}
			}
			if err := m.FillColor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRenderData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRenderData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderAnnotation_Oval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRenderData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Oval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Oval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rectangle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rectangle == nil {
				m.Rectangle = &RenderAnnotation_Rectangle{}
			}
			if err := m.Rectangle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRenderData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRenderData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderAnnotation_FilledOval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRenderData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilledOval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilledOval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Oval == nil {
				m.Oval = &RenderAnnotation_Oval{}
			}
			if err := m.Oval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillColor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FillColor == nil {
				m.FillColor = &Color{}
			}
			if err := m.FillColor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRenderData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRenderData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderAnnotation_Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRenderData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.X = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Y = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Normalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Normalized = &b
		default:
			iNdEx = preIndex
			skippy, err := skipRenderData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRenderData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderAnnotation_Line) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRenderData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Line: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Line: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field XStart", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.XStart = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field YStart", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.YStart = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field XEnd", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.XEnd = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field YEnd", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.YEnd = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Normalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Normalized = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineType", wireType)
			}
			var v RenderAnnotation_Line_LineType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= RenderAnnotation_Line_LineType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LineType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRenderData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRenderData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderAnnotation_GradientLine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRenderData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GradientLine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GradientLine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field XStart", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.XStart = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field YStart", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.YStart = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field XEnd", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.XEnd = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field YEnd", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.YEnd = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Normalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Normalized = &b
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Color1 == nil {
				m.Color1 = &Color{}
			}
			if err := m.Color1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Color2 == nil {
				m.Color2 = &Color{}
			}
			if err := m.Color2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRenderData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRenderData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderAnnotation_Scribble) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRenderData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Scribble: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Scribble: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Point = append(m.Point, &RenderAnnotation_Point{})
			if err := m.Point[len(m.Point)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRenderData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRenderData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderAnnotation_Arrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRenderData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Arrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Arrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field XStart", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.XStart = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field YStart", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.YStart = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field XEnd", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.XEnd = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field YEnd", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.YEnd = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Normalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Normalized = &b
		default:
			iNdEx = preIndex
			skippy, err := skipRenderData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRenderData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderAnnotation_Text) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRenderData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Text: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Text: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Left = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baseline", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Baseline = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontHeight", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.FontHeight = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Normalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Normalized = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontFace", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FontFace = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CenterHorizontally", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CenterHorizontally = &b
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CenterVertically", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CenterVertically = &b
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutlineThickness", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.OutlineThickness = &v2
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutlineColor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutlineColor == nil {
				m.OutlineColor = &Color{}
			}
			if err := m.OutlineColor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRenderData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRenderData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderViewport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRenderData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenderViewport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenderViewport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRenderData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRenderData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WidthPx", wireType)
			}
			m.WidthPx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WidthPx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightPx", wireType)
			}
			m.HeightPx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeightPx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComposeOnVideo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ComposeOnVideo = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRenderData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRenderData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRenderData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRenderData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRenderData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRenderData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRenderData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRenderData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRenderData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRenderData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRenderData = fmt.Errorf("proto: unexpected end of group")
)
