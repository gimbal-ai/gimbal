// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/util/tracking/box_detector.proto

package tracking

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BoxDetectorOptions_IndexType int32

const (
	INDEX_UNSPECIFIED BoxDetectorOptions_IndexType = 0
	OPENCV_BF         BoxDetectorOptions_IndexType = 1
)

var BoxDetectorOptions_IndexType_name = map[int32]string{
	0: "INDEX_UNSPECIFIED",
	1: "OPENCV_BF",
}

var BoxDetectorOptions_IndexType_value = map[string]int32{
	"INDEX_UNSPECIFIED": 0,
	"OPENCV_BF":         1,
}

func (x BoxDetectorOptions_IndexType) Enum() *BoxDetectorOptions_IndexType {
	p := new(BoxDetectorOptions_IndexType)
	*p = x
	return p
}

func (x BoxDetectorOptions_IndexType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(BoxDetectorOptions_IndexType_name, int32(x))
}

func (x *BoxDetectorOptions_IndexType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BoxDetectorOptions_IndexType_value, data, "BoxDetectorOptions_IndexType")
	if err != nil {
		return err
	}
	*x = BoxDetectorOptions_IndexType(value)
	return nil
}

func (BoxDetectorOptions_IndexType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4a6f7bf18ac70b8d, []int{0, 0}
}

type BoxDetectorOptions struct {
	IndexType                   *BoxDetectorOptions_IndexType          `protobuf:"varint,1,opt,name=index_type,json=indexType,enum=mediapipe.BoxDetectorOptions_IndexType,def=1" json:"index_type,omitempty"`
	DetectEveryNFrame           *int32                                 `protobuf:"varint,2,opt,name=detect_every_n_frame,json=detectEveryNFrame,def=0" json:"detect_every_n_frame,omitempty"`
	DetectOutOfFov              *bool                                  `protobuf:"varint,4,opt,name=detect_out_of_fov,json=detectOutOfFov,def=0" json:"detect_out_of_fov,omitempty"`
	ImageQuerySettings          *BoxDetectorOptions_ImageQuerySettings `protobuf:"bytes,3,opt,name=image_query_settings,json=imageQuerySettings" json:"image_query_settings,omitempty"`
	DescriptorDims              *int32                                 `protobuf:"varint,5,opt,name=descriptor_dims,json=descriptorDims,def=40" json:"descriptor_dims,omitempty"`
	MinNumCorrespondence        *int32                                 `protobuf:"varint,6,opt,name=min_num_correspondence,json=minNumCorrespondence,def=5" json:"min_num_correspondence,omitempty"`
	RansacReprojectionThreshold *float32                               `protobuf:"fixed32,7,opt,name=ransac_reprojection_threshold,json=ransacReprojectionThreshold,def=0.005" json:"ransac_reprojection_threshold,omitempty"`
	MaxMatchDistance            *float32                               `protobuf:"fixed32,8,opt,name=max_match_distance,json=maxMatchDistance,def=0.9" json:"max_match_distance,omitempty"`
	MaxPerspectiveFactor        *float32                               `protobuf:"fixed32,9,opt,name=max_perspective_factor,json=maxPerspectiveFactor,def=0.1" json:"max_perspective_factor,omitempty"`
}

func (m *BoxDetectorOptions) Reset()      { *m = BoxDetectorOptions{} }
func (*BoxDetectorOptions) ProtoMessage() {}
func (*BoxDetectorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a6f7bf18ac70b8d, []int{0}
}
func (m *BoxDetectorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoxDetectorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoxDetectorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoxDetectorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoxDetectorOptions.Merge(m, src)
}
func (m *BoxDetectorOptions) XXX_Size() int {
	return m.Size()
}
func (m *BoxDetectorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BoxDetectorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BoxDetectorOptions proto.InternalMessageInfo

const Default_BoxDetectorOptions_IndexType BoxDetectorOptions_IndexType = OPENCV_BF
const Default_BoxDetectorOptions_DetectEveryNFrame int32 = 0
const Default_BoxDetectorOptions_DetectOutOfFov bool = false
const Default_BoxDetectorOptions_DescriptorDims int32 = 40
const Default_BoxDetectorOptions_MinNumCorrespondence int32 = 5
const Default_BoxDetectorOptions_RansacReprojectionThreshold float32 = 0.005
const Default_BoxDetectorOptions_MaxMatchDistance float32 = 0.9
const Default_BoxDetectorOptions_MaxPerspectiveFactor float32 = 0.1

func (m *BoxDetectorOptions) GetIndexType() BoxDetectorOptions_IndexType {
	if m != nil && m.IndexType != nil {
		return *m.IndexType
	}
	return Default_BoxDetectorOptions_IndexType
}

func (m *BoxDetectorOptions) GetDetectEveryNFrame() int32 {
	if m != nil && m.DetectEveryNFrame != nil {
		return *m.DetectEveryNFrame
	}
	return Default_BoxDetectorOptions_DetectEveryNFrame
}

func (m *BoxDetectorOptions) GetDetectOutOfFov() bool {
	if m != nil && m.DetectOutOfFov != nil {
		return *m.DetectOutOfFov
	}
	return Default_BoxDetectorOptions_DetectOutOfFov
}

func (m *BoxDetectorOptions) GetImageQuerySettings() *BoxDetectorOptions_ImageQuerySettings {
	if m != nil {
		return m.ImageQuerySettings
	}
	return nil
}

func (m *BoxDetectorOptions) GetDescriptorDims() int32 {
	if m != nil && m.DescriptorDims != nil {
		return *m.DescriptorDims
	}
	return Default_BoxDetectorOptions_DescriptorDims
}

func (m *BoxDetectorOptions) GetMinNumCorrespondence() int32 {
	if m != nil && m.MinNumCorrespondence != nil {
		return *m.MinNumCorrespondence
	}
	return Default_BoxDetectorOptions_MinNumCorrespondence
}

func (m *BoxDetectorOptions) GetRansacReprojectionThreshold() float32 {
	if m != nil && m.RansacReprojectionThreshold != nil {
		return *m.RansacReprojectionThreshold
	}
	return Default_BoxDetectorOptions_RansacReprojectionThreshold
}

func (m *BoxDetectorOptions) GetMaxMatchDistance() float32 {
	if m != nil && m.MaxMatchDistance != nil {
		return *m.MaxMatchDistance
	}
	return Default_BoxDetectorOptions_MaxMatchDistance
}

func (m *BoxDetectorOptions) GetMaxPerspectiveFactor() float32 {
	if m != nil && m.MaxPerspectiveFactor != nil {
		return *m.MaxPerspectiveFactor
	}
	return Default_BoxDetectorOptions_MaxPerspectiveFactor
}

type BoxDetectorOptions_ImageQuerySettings struct {
	PyramidBottomSize  *int32   `protobuf:"varint,1,opt,name=pyramid_bottom_size,json=pyramidBottomSize,def=640" json:"pyramid_bottom_size,omitempty"`
	PyramidScaleFactor *float32 `protobuf:"fixed32,2,opt,name=pyramid_scale_factor,json=pyramidScaleFactor,def=1.2" json:"pyramid_scale_factor,omitempty"`
	MaxPyramidLevels   *int32   `protobuf:"varint,3,opt,name=max_pyramid_levels,json=maxPyramidLevels,def=4" json:"max_pyramid_levels,omitempty"`
	MaxFeatures        *int32   `protobuf:"varint,4,opt,name=max_features,json=maxFeatures,def=500" json:"max_features,omitempty"`
}

func (m *BoxDetectorOptions_ImageQuerySettings) Reset()      { *m = BoxDetectorOptions_ImageQuerySettings{} }
func (*BoxDetectorOptions_ImageQuerySettings) ProtoMessage() {}
func (*BoxDetectorOptions_ImageQuerySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a6f7bf18ac70b8d, []int{0, 0}
}
func (m *BoxDetectorOptions_ImageQuerySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoxDetectorOptions_ImageQuerySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoxDetectorOptions_ImageQuerySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoxDetectorOptions_ImageQuerySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoxDetectorOptions_ImageQuerySettings.Merge(m, src)
}
func (m *BoxDetectorOptions_ImageQuerySettings) XXX_Size() int {
	return m.Size()
}
func (m *BoxDetectorOptions_ImageQuerySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_BoxDetectorOptions_ImageQuerySettings.DiscardUnknown(m)
}

var xxx_messageInfo_BoxDetectorOptions_ImageQuerySettings proto.InternalMessageInfo

const Default_BoxDetectorOptions_ImageQuerySettings_PyramidBottomSize int32 = 640
const Default_BoxDetectorOptions_ImageQuerySettings_PyramidScaleFactor float32 = 1.2
const Default_BoxDetectorOptions_ImageQuerySettings_MaxPyramidLevels int32 = 4
const Default_BoxDetectorOptions_ImageQuerySettings_MaxFeatures int32 = 500

func (m *BoxDetectorOptions_ImageQuerySettings) GetPyramidBottomSize() int32 {
	if m != nil && m.PyramidBottomSize != nil {
		return *m.PyramidBottomSize
	}
	return Default_BoxDetectorOptions_ImageQuerySettings_PyramidBottomSize
}

func (m *BoxDetectorOptions_ImageQuerySettings) GetPyramidScaleFactor() float32 {
	if m != nil && m.PyramidScaleFactor != nil {
		return *m.PyramidScaleFactor
	}
	return Default_BoxDetectorOptions_ImageQuerySettings_PyramidScaleFactor
}

func (m *BoxDetectorOptions_ImageQuerySettings) GetMaxPyramidLevels() int32 {
	if m != nil && m.MaxPyramidLevels != nil {
		return *m.MaxPyramidLevels
	}
	return Default_BoxDetectorOptions_ImageQuerySettings_MaxPyramidLevels
}

func (m *BoxDetectorOptions_ImageQuerySettings) GetMaxFeatures() int32 {
	if m != nil && m.MaxFeatures != nil {
		return *m.MaxFeatures
	}
	return Default_BoxDetectorOptions_ImageQuerySettings_MaxFeatures
}

type BoxDetectorIndex struct {
	BoxEntry []*BoxDetectorIndex_BoxEntry `protobuf:"bytes,1,rep,name=box_entry,json=boxEntry" json:"box_entry,omitempty"`
}

func (m *BoxDetectorIndex) Reset()      { *m = BoxDetectorIndex{} }
func (*BoxDetectorIndex) ProtoMessage() {}
func (*BoxDetectorIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a6f7bf18ac70b8d, []int{1}
}
func (m *BoxDetectorIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoxDetectorIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoxDetectorIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoxDetectorIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoxDetectorIndex.Merge(m, src)
}
func (m *BoxDetectorIndex) XXX_Size() int {
	return m.Size()
}
func (m *BoxDetectorIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_BoxDetectorIndex.DiscardUnknown(m)
}

var xxx_messageInfo_BoxDetectorIndex proto.InternalMessageInfo

func (m *BoxDetectorIndex) GetBoxEntry() []*BoxDetectorIndex_BoxEntry {
	if m != nil {
		return m.BoxEntry
	}
	return nil
}

type BoxDetectorIndex_BoxEntry struct {
	FrameEntry []*BoxDetectorIndex_BoxEntry_FrameEntry `protobuf:"bytes,1,rep,name=frame_entry,json=frameEntry" json:"frame_entry,omitempty"`
}

func (m *BoxDetectorIndex_BoxEntry) Reset()      { *m = BoxDetectorIndex_BoxEntry{} }
func (*BoxDetectorIndex_BoxEntry) ProtoMessage() {}
func (*BoxDetectorIndex_BoxEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a6f7bf18ac70b8d, []int{1, 0}
}
func (m *BoxDetectorIndex_BoxEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoxDetectorIndex_BoxEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoxDetectorIndex_BoxEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoxDetectorIndex_BoxEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoxDetectorIndex_BoxEntry.Merge(m, src)
}
func (m *BoxDetectorIndex_BoxEntry) XXX_Size() int {
	return m.Size()
}
func (m *BoxDetectorIndex_BoxEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_BoxDetectorIndex_BoxEntry.DiscardUnknown(m)
}

var xxx_messageInfo_BoxDetectorIndex_BoxEntry proto.InternalMessageInfo

func (m *BoxDetectorIndex_BoxEntry) GetFrameEntry() []*BoxDetectorIndex_BoxEntry_FrameEntry {
	if m != nil {
		return m.FrameEntry
	}
	return nil
}

type BoxDetectorIndex_BoxEntry_FrameEntry struct {
	Box         *TimedBoxProto             `protobuf:"bytes,1,opt,name=box" json:"box,omitempty"`
	Keypoints   []float32                  `protobuf:"fixed32,2,rep,name=keypoints" json:"keypoints,omitempty"`
	Descriptors []*BinaryFeatureDescriptor `protobuf:"bytes,3,rep,name=descriptors" json:"descriptors,omitempty"`
}

func (m *BoxDetectorIndex_BoxEntry_FrameEntry) Reset()      { *m = BoxDetectorIndex_BoxEntry_FrameEntry{} }
func (*BoxDetectorIndex_BoxEntry_FrameEntry) ProtoMessage() {}
func (*BoxDetectorIndex_BoxEntry_FrameEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a6f7bf18ac70b8d, []int{1, 0, 0}
}
func (m *BoxDetectorIndex_BoxEntry_FrameEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoxDetectorIndex_BoxEntry_FrameEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoxDetectorIndex_BoxEntry_FrameEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoxDetectorIndex_BoxEntry_FrameEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoxDetectorIndex_BoxEntry_FrameEntry.Merge(m, src)
}
func (m *BoxDetectorIndex_BoxEntry_FrameEntry) XXX_Size() int {
	return m.Size()
}
func (m *BoxDetectorIndex_BoxEntry_FrameEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_BoxDetectorIndex_BoxEntry_FrameEntry.DiscardUnknown(m)
}

var xxx_messageInfo_BoxDetectorIndex_BoxEntry_FrameEntry proto.InternalMessageInfo

func (m *BoxDetectorIndex_BoxEntry_FrameEntry) GetBox() *TimedBoxProto {
	if m != nil {
		return m.Box
	}
	return nil
}

func (m *BoxDetectorIndex_BoxEntry_FrameEntry) GetKeypoints() []float32 {
	if m != nil {
		return m.Keypoints
	}
	return nil
}

func (m *BoxDetectorIndex_BoxEntry_FrameEntry) GetDescriptors() []*BinaryFeatureDescriptor {
	if m != nil {
		return m.Descriptors
	}
	return nil
}

func init() {
	proto.RegisterEnum("mediapipe.BoxDetectorOptions_IndexType", BoxDetectorOptions_IndexType_name, BoxDetectorOptions_IndexType_value)
	proto.RegisterType((*BoxDetectorOptions)(nil), "mediapipe.BoxDetectorOptions")
	proto.RegisterType((*BoxDetectorOptions_ImageQuerySettings)(nil), "mediapipe.BoxDetectorOptions.ImageQuerySettings")
	proto.RegisterType((*BoxDetectorIndex)(nil), "mediapipe.BoxDetectorIndex")
	proto.RegisterType((*BoxDetectorIndex_BoxEntry)(nil), "mediapipe.BoxDetectorIndex.BoxEntry")
	proto.RegisterType((*BoxDetectorIndex_BoxEntry_FrameEntry)(nil), "mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry")
}

func init() {
	proto.RegisterFile("mediapipe/util/tracking/box_detector.proto", fileDescriptor_4a6f7bf18ac70b8d)
}

var fileDescriptor_4a6f7bf18ac70b8d = []byte{
	// 845 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xce, 0x24, 0x64, 0x69, 0x26, 0xb0, 0xb4, 0x43, 0x58, 0x59, 0x85, 0xb5, 0xa2, 0x0a, 0x41,
	0x58, 0x24, 0xc7, 0xcd, 0xb6, 0xa0, 0xcd, 0x8d, 0x34, 0x89, 0x14, 0x09, 0xd2, 0xac, 0x5b, 0x10,
	0xe2, 0x32, 0x9a, 0xd8, 0xe3, 0x64, 0xd8, 0x8c, 0xc7, 0xcc, 0x4c, 0x82, 0xb3, 0x27, 0xfe, 0x04,
	0xce, 0x88, 0x3f, 0x80, 0x3f, 0x85, 0x63, 0x25, 0x2e, 0xcb, 0x09, 0x9a, 0x5e, 0x38, 0xee, 0x9d,
	0x0b, 0x1a, 0xdb, 0xf9, 0xb1, 0x2a, 0x0b, 0x7b, 0xb3, 0xdf, 0xf7, 0x7d, 0x6f, 0xde, 0x37, 0xf3,
	0xde, 0x83, 0x0f, 0x38, 0x0d, 0x18, 0x89, 0x59, 0x4c, 0x9b, 0x73, 0xcd, 0x66, 0x4d, 0x2d, 0x89,
	0xff, 0x84, 0x45, 0x93, 0xe6, 0x58, 0x24, 0x38, 0xa0, 0x9a, 0xfa, 0x5a, 0x48, 0x27, 0x96, 0x42,
	0x0b, 0x54, 0xd9, 0x70, 0x0f, 0x3f, 0xfa, 0x2f, 0x59, 0xfa, 0x43, 0x73, 0xd5, 0xcb, 0xa9, 0x92,
	0x4e, 0x98, 0x88, 0x70, 0x38, 0x13, 0xdf, 0x67, 0xd4, 0xa3, 0x3f, 0xee, 0x40, 0xd4, 0x11, 0x49,
	0x37, 0x3f, 0xf6, 0x3c, 0xd6, 0x4c, 0x44, 0x0a, 0x3d, 0x86, 0x90, 0x45, 0x01, 0x4d, 0xb0, 0x5e,
	0xc6, 0xd4, 0x02, 0x75, 0xd0, 0xb8, 0xdb, 0xfa, 0xd0, 0xd9, 0xa4, 0x75, 0x6e, 0x4b, 0x9c, 0x81,
	0xe1, 0x5f, 0x2e, 0x63, 0xda, 0xae, 0x9c, 0x8f, 0x7a, 0xc3, 0xb3, 0xaf, 0x70, 0xa7, 0xef, 0x55,
	0xd8, 0x3a, 0x8a, 0x5a, 0xb0, 0x96, 0x99, 0xc3, 0x74, 0x41, 0xe5, 0x12, 0x47, 0x38, 0x94, 0x84,
	0x53, 0xab, 0x58, 0x07, 0x8d, 0x72, 0x1b, 0xb8, 0xde, 0x41, 0x06, 0xf7, 0x0c, 0x3a, 0xec, 0x1b,
	0x0c, 0xb9, 0x30, 0x0f, 0x62, 0x31, 0xd7, 0x58, 0x84, 0x38, 0x14, 0x0b, 0xeb, 0xb5, 0x3a, 0x68,
	0xec, 0xb5, 0xcb, 0x21, 0x99, 0x29, 0xea, 0xdd, 0xcd, 0xf0, 0xf3, 0xb9, 0x3e, 0x0f, 0xfb, 0x62,
	0x81, 0xc6, 0xb0, 0xc6, 0x38, 0x99, 0x50, 0xfc, 0xdd, 0xdc, 0x1c, 0xa2, 0xa8, 0xd6, 0x2c, 0x9a,
	0x28, 0xab, 0x54, 0x07, 0x8d, 0x6a, 0xcb, 0xfd, 0x1f, 0x0b, 0x46, 0xf9, 0xd8, 0x08, 0x2f, 0x72,
	0x9d, 0x87, 0xd8, 0xad, 0x18, 0xfa, 0x18, 0xbe, 0x15, 0x50, 0xe5, 0x4b, 0x16, 0x6b, 0x21, 0x71,
	0xc0, 0xb8, 0xb2, 0xca, 0xa9, 0x89, 0xe2, 0x89, 0x6b, 0x0a, 0x5a, 0x43, 0x5d, 0xc6, 0x15, 0xfa,
	0x14, 0xde, 0xe3, 0x2c, 0xc2, 0xd1, 0x9c, 0x63, 0x5f, 0x48, 0x49, 0x55, 0x2c, 0xa2, 0x80, 0x46,
	0x3e, 0xb5, 0xee, 0x64, 0xc6, 0x4f, 0xbd, 0x1a, 0x67, 0xd1, 0x70, 0xce, 0xcf, 0x5e, 0x80, 0xd1,
	0x00, 0xde, 0x97, 0x24, 0x52, 0xc4, 0xc7, 0x92, 0xc6, 0x52, 0x7c, 0x4b, 0x7d, 0x53, 0x24, 0xd6,
	0x53, 0x49, 0xd5, 0x54, 0xcc, 0x02, 0xeb, 0xf5, 0x3a, 0x68, 0x14, 0xdb, 0x65, 0xd7, 0x71, 0xdd,
	0x53, 0xef, 0xdd, 0x8c, 0xeb, 0xed, 0x50, 0x2f, 0xd7, 0x4c, 0x74, 0x0c, 0x11, 0x27, 0x09, 0xe6,
	0x44, 0xfb, 0x53, 0x1c, 0x30, 0xa5, 0x89, 0x39, 0x7f, 0x2f, 0xd5, 0x97, 0x5c, 0xe7, 0x91, 0xb7,
	0xcf, 0x49, 0xf2, 0x85, 0x41, 0xbb, 0x39, 0x88, 0x1e, 0xc1, 0x7b, 0x46, 0x12, 0x53, 0xa9, 0x62,
	0x93, 0x6e, 0x41, 0x71, 0x48, 0xcc, 0x5d, 0x59, 0x95, 0xb5, 0xec, 0xd8, 0xab, 0x71, 0x92, 0x8c,
	0xb6, 0x8c, 0x7e, 0x4a, 0x38, 0xfc, 0x1d, 0x40, 0x74, 0xfb, 0x26, 0xd1, 0x43, 0xf8, 0x76, 0xbc,
	0x94, 0x84, 0xb3, 0x00, 0x8f, 0x85, 0xd6, 0x82, 0x63, 0xc5, 0x9e, 0x66, 0xbd, 0x55, 0x6e, 0x97,
	0x3e, 0x39, 0x71, 0xbd, 0x83, 0x1c, 0xef, 0xa4, 0xf0, 0x05, 0x7b, 0x4a, 0xd1, 0x29, 0xac, 0xad,
	0x45, 0xca, 0x27, 0xb3, 0x4d, 0x11, 0xc5, 0xac, 0x88, 0x63, 0xa7, 0xe5, 0xa1, 0x9c, 0x70, 0x61,
	0xf0, 0xac, 0x04, 0xd4, 0xcc, 0x0c, 0xaf, 0xa5, 0x33, 0xba, 0xa0, 0xb3, 0xac, 0x07, 0xca, 0x6d,
	0x70, 0x92, 0xda, 0x1d, 0x65, 0xd8, 0xe7, 0x29, 0x84, 0x3e, 0x80, 0x6f, 0x18, 0x41, 0x48, 0x89,
	0x9e, 0x4b, 0xaa, 0xd2, 0x1e, 0x2b, 0xb7, 0x4b, 0xa7, 0xae, 0xeb, 0x55, 0x39, 0x49, 0xfa, 0x79,
	0xfc, 0xe8, 0x18, 0x56, 0x36, 0x7d, 0x8e, 0xde, 0x81, 0x07, 0x83, 0x61, 0xb7, 0xf7, 0x35, 0xfe,
	0x72, 0x78, 0x31, 0xea, 0x9d, 0x0d, 0xfa, 0x83, 0x5e, 0x77, 0xbf, 0x80, 0xde, 0x84, 0xdb, 0x01,
	0xd8, 0x07, 0x47, 0xbf, 0x15, 0xe1, 0xfe, 0x4e, 0xaf, 0xa5, 0x72, 0xf4, 0x19, 0xac, 0x98, 0xb1,
	0xa5, 0x91, 0x96, 0x4b, 0x0b, 0xd4, 0x4b, 0x8d, 0x6a, 0xeb, 0xfd, 0x7f, 0xef, 0xcd, 0x94, 0x6f,
	0x02, 0x3d, 0xc3, 0xf5, 0xf6, 0xc6, 0xf9, 0xd7, 0xe1, 0xdf, 0x00, 0xee, 0xad, 0xc3, 0x68, 0x04,
	0xab, 0xe9, 0x34, 0xbd, 0x90, 0xb1, 0xf9, 0x2a, 0x19, 0x9d, 0x74, 0xd2, 0xb2, 0xe4, 0x30, 0xdc,
	0x7c, 0x1f, 0xfe, 0x0c, 0x20, 0xdc, 0x42, 0xe8, 0x01, 0x2c, 0x8d, 0x45, 0x92, 0xbe, 0x56, 0xb5,
	0x65, 0xed, 0x24, 0xbe, 0x64, 0x9c, 0x06, 0x1d, 0x91, 0x8c, 0xcc, 0x3a, 0xf1, 0x0c, 0x09, 0xbd,
	0x07, 0x2b, 0x4f, 0xe8, 0x32, 0x16, 0x2c, 0xd2, 0xca, 0x2a, 0xd6, 0x4b, 0x8d, 0xa2, 0xb7, 0x0d,
	0xa0, 0x2e, 0xac, 0x6e, 0x47, 0xc4, 0x3c, 0x8a, 0x29, 0xf5, 0x68, 0xb7, 0x54, 0x16, 0x11, 0xb9,
	0xcc, 0xaf, 0xbc, 0xbb, 0xa1, 0x7a, 0xbb, 0xb2, 0xce, 0x4f, 0xe0, 0xea, 0xda, 0x2e, 0x3c, 0xbb,
	0xb6, 0x0b, 0xcf, 0xaf, 0x6d, 0xf0, 0xc3, 0xca, 0x06, 0xbf, 0xac, 0x6c, 0xf0, 0xeb, 0xca, 0x06,
	0x57, 0x2b, 0x1b, 0xfc, 0xb9, 0xb2, 0xc1, 0x5f, 0x2b, 0xbb, 0xf0, 0x7c, 0x65, 0x83, 0x1f, 0x6f,
	0xec, 0xc2, 0xd5, 0x8d, 0x5d, 0x78, 0x76, 0x63, 0x17, 0xe0, 0x7d, 0x5f, 0x70, 0x67, 0x22, 0xc4,
	0x64, 0x46, 0x77, 0x4e, 0x5c, 0xef, 0xc7, 0xce, 0xee, 0x43, 0xa5, 0x86, 0xbe, 0x79, 0x38, 0x61,
	0x7a, 0x3a, 0x1f, 0x3b, 0xbe, 0xe0, 0xcd, 0x4c, 0xd7, 0xdc, 0x2e, 0xd7, 0x97, 0xac, 0xd9, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xea, 0x19, 0x6f, 0x22, 0xe2, 0x05, 0x00, 0x00,
}

func (x BoxDetectorOptions_IndexType) String() string {
	s, ok := BoxDetectorOptions_IndexType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *BoxDetectorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BoxDetectorOptions)
	if !ok {
		that2, ok := that.(BoxDetectorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IndexType != nil && that1.IndexType != nil {
		if *this.IndexType != *that1.IndexType {
			return false
		}
	} else if this.IndexType != nil {
		return false
	} else if that1.IndexType != nil {
		return false
	}
	if this.DetectEveryNFrame != nil && that1.DetectEveryNFrame != nil {
		if *this.DetectEveryNFrame != *that1.DetectEveryNFrame {
			return false
		}
	} else if this.DetectEveryNFrame != nil {
		return false
	} else if that1.DetectEveryNFrame != nil {
		return false
	}
	if this.DetectOutOfFov != nil && that1.DetectOutOfFov != nil {
		if *this.DetectOutOfFov != *that1.DetectOutOfFov {
			return false
		}
	} else if this.DetectOutOfFov != nil {
		return false
	} else if that1.DetectOutOfFov != nil {
		return false
	}
	if !this.ImageQuerySettings.Equal(that1.ImageQuerySettings) {
		return false
	}
	if this.DescriptorDims != nil && that1.DescriptorDims != nil {
		if *this.DescriptorDims != *that1.DescriptorDims {
			return false
		}
	} else if this.DescriptorDims != nil {
		return false
	} else if that1.DescriptorDims != nil {
		return false
	}
	if this.MinNumCorrespondence != nil && that1.MinNumCorrespondence != nil {
		if *this.MinNumCorrespondence != *that1.MinNumCorrespondence {
			return false
		}
	} else if this.MinNumCorrespondence != nil {
		return false
	} else if that1.MinNumCorrespondence != nil {
		return false
	}
	if this.RansacReprojectionThreshold != nil && that1.RansacReprojectionThreshold != nil {
		if *this.RansacReprojectionThreshold != *that1.RansacReprojectionThreshold {
			return false
		}
	} else if this.RansacReprojectionThreshold != nil {
		return false
	} else if that1.RansacReprojectionThreshold != nil {
		return false
	}
	if this.MaxMatchDistance != nil && that1.MaxMatchDistance != nil {
		if *this.MaxMatchDistance != *that1.MaxMatchDistance {
			return false
		}
	} else if this.MaxMatchDistance != nil {
		return false
	} else if that1.MaxMatchDistance != nil {
		return false
	}
	if this.MaxPerspectiveFactor != nil && that1.MaxPerspectiveFactor != nil {
		if *this.MaxPerspectiveFactor != *that1.MaxPerspectiveFactor {
			return false
		}
	} else if this.MaxPerspectiveFactor != nil {
		return false
	} else if that1.MaxPerspectiveFactor != nil {
		return false
	}
	return true
}
func (this *BoxDetectorOptions_ImageQuerySettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BoxDetectorOptions_ImageQuerySettings)
	if !ok {
		that2, ok := that.(BoxDetectorOptions_ImageQuerySettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PyramidBottomSize != nil && that1.PyramidBottomSize != nil {
		if *this.PyramidBottomSize != *that1.PyramidBottomSize {
			return false
		}
	} else if this.PyramidBottomSize != nil {
		return false
	} else if that1.PyramidBottomSize != nil {
		return false
	}
	if this.PyramidScaleFactor != nil && that1.PyramidScaleFactor != nil {
		if *this.PyramidScaleFactor != *that1.PyramidScaleFactor {
			return false
		}
	} else if this.PyramidScaleFactor != nil {
		return false
	} else if that1.PyramidScaleFactor != nil {
		return false
	}
	if this.MaxPyramidLevels != nil && that1.MaxPyramidLevels != nil {
		if *this.MaxPyramidLevels != *that1.MaxPyramidLevels {
			return false
		}
	} else if this.MaxPyramidLevels != nil {
		return false
	} else if that1.MaxPyramidLevels != nil {
		return false
	}
	if this.MaxFeatures != nil && that1.MaxFeatures != nil {
		if *this.MaxFeatures != *that1.MaxFeatures {
			return false
		}
	} else if this.MaxFeatures != nil {
		return false
	} else if that1.MaxFeatures != nil {
		return false
	}
	return true
}
func (this *BoxDetectorIndex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BoxDetectorIndex)
	if !ok {
		that2, ok := that.(BoxDetectorIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.BoxEntry) != len(that1.BoxEntry) {
		return false
	}
	for i := range this.BoxEntry {
		if !this.BoxEntry[i].Equal(that1.BoxEntry[i]) {
			return false
		}
	}
	return true
}
func (this *BoxDetectorIndex_BoxEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BoxDetectorIndex_BoxEntry)
	if !ok {
		that2, ok := that.(BoxDetectorIndex_BoxEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FrameEntry) != len(that1.FrameEntry) {
		return false
	}
	for i := range this.FrameEntry {
		if !this.FrameEntry[i].Equal(that1.FrameEntry[i]) {
			return false
		}
	}
	return true
}
func (this *BoxDetectorIndex_BoxEntry_FrameEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BoxDetectorIndex_BoxEntry_FrameEntry)
	if !ok {
		that2, ok := that.(BoxDetectorIndex_BoxEntry_FrameEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Box.Equal(that1.Box) {
		return false
	}
	if len(this.Keypoints) != len(that1.Keypoints) {
		return false
	}
	for i := range this.Keypoints {
		if this.Keypoints[i] != that1.Keypoints[i] {
			return false
		}
	}
	if len(this.Descriptors) != len(that1.Descriptors) {
		return false
	}
	for i := range this.Descriptors {
		if !this.Descriptors[i].Equal(that1.Descriptors[i]) {
			return false
		}
	}
	return true
}
func (this *BoxDetectorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&tracking.BoxDetectorOptions{")
	if this.IndexType != nil {
		s = append(s, "IndexType: "+valueToGoStringBoxDetector(this.IndexType, "BoxDetectorOptions_IndexType")+",\n")
	}
	if this.DetectEveryNFrame != nil {
		s = append(s, "DetectEveryNFrame: "+valueToGoStringBoxDetector(this.DetectEveryNFrame, "int32")+",\n")
	}
	if this.DetectOutOfFov != nil {
		s = append(s, "DetectOutOfFov: "+valueToGoStringBoxDetector(this.DetectOutOfFov, "bool")+",\n")
	}
	if this.ImageQuerySettings != nil {
		s = append(s, "ImageQuerySettings: "+fmt.Sprintf("%#v", this.ImageQuerySettings)+",\n")
	}
	if this.DescriptorDims != nil {
		s = append(s, "DescriptorDims: "+valueToGoStringBoxDetector(this.DescriptorDims, "int32")+",\n")
	}
	if this.MinNumCorrespondence != nil {
		s = append(s, "MinNumCorrespondence: "+valueToGoStringBoxDetector(this.MinNumCorrespondence, "int32")+",\n")
	}
	if this.RansacReprojectionThreshold != nil {
		s = append(s, "RansacReprojectionThreshold: "+valueToGoStringBoxDetector(this.RansacReprojectionThreshold, "float32")+",\n")
	}
	if this.MaxMatchDistance != nil {
		s = append(s, "MaxMatchDistance: "+valueToGoStringBoxDetector(this.MaxMatchDistance, "float32")+",\n")
	}
	if this.MaxPerspectiveFactor != nil {
		s = append(s, "MaxPerspectiveFactor: "+valueToGoStringBoxDetector(this.MaxPerspectiveFactor, "float32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BoxDetectorOptions_ImageQuerySettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tracking.BoxDetectorOptions_ImageQuerySettings{")
	if this.PyramidBottomSize != nil {
		s = append(s, "PyramidBottomSize: "+valueToGoStringBoxDetector(this.PyramidBottomSize, "int32")+",\n")
	}
	if this.PyramidScaleFactor != nil {
		s = append(s, "PyramidScaleFactor: "+valueToGoStringBoxDetector(this.PyramidScaleFactor, "float32")+",\n")
	}
	if this.MaxPyramidLevels != nil {
		s = append(s, "MaxPyramidLevels: "+valueToGoStringBoxDetector(this.MaxPyramidLevels, "int32")+",\n")
	}
	if this.MaxFeatures != nil {
		s = append(s, "MaxFeatures: "+valueToGoStringBoxDetector(this.MaxFeatures, "int32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BoxDetectorIndex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tracking.BoxDetectorIndex{")
	if this.BoxEntry != nil {
		s = append(s, "BoxEntry: "+fmt.Sprintf("%#v", this.BoxEntry)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BoxDetectorIndex_BoxEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tracking.BoxDetectorIndex_BoxEntry{")
	if this.FrameEntry != nil {
		s = append(s, "FrameEntry: "+fmt.Sprintf("%#v", this.FrameEntry)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BoxDetectorIndex_BoxEntry_FrameEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tracking.BoxDetectorIndex_BoxEntry_FrameEntry{")
	if this.Box != nil {
		s = append(s, "Box: "+fmt.Sprintf("%#v", this.Box)+",\n")
	}
	if this.Keypoints != nil {
		s = append(s, "Keypoints: "+fmt.Sprintf("%#v", this.Keypoints)+",\n")
	}
	if this.Descriptors != nil {
		s = append(s, "Descriptors: "+fmt.Sprintf("%#v", this.Descriptors)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBoxDetector(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BoxDetectorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoxDetectorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BoxDetectorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxPerspectiveFactor != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.MaxPerspectiveFactor))))
		i--
		dAtA[i] = 0x4d
	}
	if m.MaxMatchDistance != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.MaxMatchDistance))))
		i--
		dAtA[i] = 0x45
	}
	if m.RansacReprojectionThreshold != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.RansacReprojectionThreshold))))
		i--
		dAtA[i] = 0x3d
	}
	if m.MinNumCorrespondence != nil {
		i = encodeVarintBoxDetector(dAtA, i, uint64(*m.MinNumCorrespondence))
		i--
		dAtA[i] = 0x30
	}
	if m.DescriptorDims != nil {
		i = encodeVarintBoxDetector(dAtA, i, uint64(*m.DescriptorDims))
		i--
		dAtA[i] = 0x28
	}
	if m.DetectOutOfFov != nil {
		i--
		if *m.DetectOutOfFov {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ImageQuerySettings != nil {
		{
			size, err := m.ImageQuerySettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBoxDetector(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DetectEveryNFrame != nil {
		i = encodeVarintBoxDetector(dAtA, i, uint64(*m.DetectEveryNFrame))
		i--
		dAtA[i] = 0x10
	}
	if m.IndexType != nil {
		i = encodeVarintBoxDetector(dAtA, i, uint64(*m.IndexType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BoxDetectorOptions_ImageQuerySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoxDetectorOptions_ImageQuerySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BoxDetectorOptions_ImageQuerySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxFeatures != nil {
		i = encodeVarintBoxDetector(dAtA, i, uint64(*m.MaxFeatures))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxPyramidLevels != nil {
		i = encodeVarintBoxDetector(dAtA, i, uint64(*m.MaxPyramidLevels))
		i--
		dAtA[i] = 0x18
	}
	if m.PyramidScaleFactor != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.PyramidScaleFactor))))
		i--
		dAtA[i] = 0x15
	}
	if m.PyramidBottomSize != nil {
		i = encodeVarintBoxDetector(dAtA, i, uint64(*m.PyramidBottomSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BoxDetectorIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoxDetectorIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BoxDetectorIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BoxEntry) > 0 {
		for iNdEx := len(m.BoxEntry) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BoxEntry[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBoxDetector(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BoxDetectorIndex_BoxEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoxDetectorIndex_BoxEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BoxDetectorIndex_BoxEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FrameEntry) > 0 {
		for iNdEx := len(m.FrameEntry) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FrameEntry[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBoxDetector(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BoxDetectorIndex_BoxEntry_FrameEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoxDetectorIndex_BoxEntry_FrameEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BoxDetectorIndex_BoxEntry_FrameEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Descriptors) > 0 {
		for iNdEx := len(m.Descriptors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Descriptors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBoxDetector(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Keypoints) > 0 {
		for iNdEx := len(m.Keypoints) - 1; iNdEx >= 0; iNdEx-- {
			f2 := math.Float32bits(float32(m.Keypoints[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f2))
			i--
			dAtA[i] = 0x15
		}
	}
	if m.Box != nil {
		{
			size, err := m.Box.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBoxDetector(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBoxDetector(dAtA []byte, offset int, v uint64) int {
	offset -= sovBoxDetector(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BoxDetectorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IndexType != nil {
		n += 1 + sovBoxDetector(uint64(*m.IndexType))
	}
	if m.DetectEveryNFrame != nil {
		n += 1 + sovBoxDetector(uint64(*m.DetectEveryNFrame))
	}
	if m.ImageQuerySettings != nil {
		l = m.ImageQuerySettings.Size()
		n += 1 + l + sovBoxDetector(uint64(l))
	}
	if m.DetectOutOfFov != nil {
		n += 2
	}
	if m.DescriptorDims != nil {
		n += 1 + sovBoxDetector(uint64(*m.DescriptorDims))
	}
	if m.MinNumCorrespondence != nil {
		n += 1 + sovBoxDetector(uint64(*m.MinNumCorrespondence))
	}
	if m.RansacReprojectionThreshold != nil {
		n += 5
	}
	if m.MaxMatchDistance != nil {
		n += 5
	}
	if m.MaxPerspectiveFactor != nil {
		n += 5
	}
	return n
}

func (m *BoxDetectorOptions_ImageQuerySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PyramidBottomSize != nil {
		n += 1 + sovBoxDetector(uint64(*m.PyramidBottomSize))
	}
	if m.PyramidScaleFactor != nil {
		n += 5
	}
	if m.MaxPyramidLevels != nil {
		n += 1 + sovBoxDetector(uint64(*m.MaxPyramidLevels))
	}
	if m.MaxFeatures != nil {
		n += 1 + sovBoxDetector(uint64(*m.MaxFeatures))
	}
	return n
}

func (m *BoxDetectorIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BoxEntry) > 0 {
		for _, e := range m.BoxEntry {
			l = e.Size()
			n += 1 + l + sovBoxDetector(uint64(l))
		}
	}
	return n
}

func (m *BoxDetectorIndex_BoxEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FrameEntry) > 0 {
		for _, e := range m.FrameEntry {
			l = e.Size()
			n += 1 + l + sovBoxDetector(uint64(l))
		}
	}
	return n
}

func (m *BoxDetectorIndex_BoxEntry_FrameEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Box != nil {
		l = m.Box.Size()
		n += 1 + l + sovBoxDetector(uint64(l))
	}
	if len(m.Keypoints) > 0 {
		n += 5 * len(m.Keypoints)
	}
	if len(m.Descriptors) > 0 {
		for _, e := range m.Descriptors {
			l = e.Size()
			n += 1 + l + sovBoxDetector(uint64(l))
		}
	}
	return n
}

func sovBoxDetector(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBoxDetector(x uint64) (n int) {
	return sovBoxDetector(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BoxDetectorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BoxDetectorOptions{`,
		`IndexType:` + valueToStringBoxDetector(this.IndexType) + `,`,
		`DetectEveryNFrame:` + valueToStringBoxDetector(this.DetectEveryNFrame) + `,`,
		`ImageQuerySettings:` + strings.Replace(fmt.Sprintf("%v", this.ImageQuerySettings), "BoxDetectorOptions_ImageQuerySettings", "BoxDetectorOptions_ImageQuerySettings", 1) + `,`,
		`DetectOutOfFov:` + valueToStringBoxDetector(this.DetectOutOfFov) + `,`,
		`DescriptorDims:` + valueToStringBoxDetector(this.DescriptorDims) + `,`,
		`MinNumCorrespondence:` + valueToStringBoxDetector(this.MinNumCorrespondence) + `,`,
		`RansacReprojectionThreshold:` + valueToStringBoxDetector(this.RansacReprojectionThreshold) + `,`,
		`MaxMatchDistance:` + valueToStringBoxDetector(this.MaxMatchDistance) + `,`,
		`MaxPerspectiveFactor:` + valueToStringBoxDetector(this.MaxPerspectiveFactor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BoxDetectorOptions_ImageQuerySettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BoxDetectorOptions_ImageQuerySettings{`,
		`PyramidBottomSize:` + valueToStringBoxDetector(this.PyramidBottomSize) + `,`,
		`PyramidScaleFactor:` + valueToStringBoxDetector(this.PyramidScaleFactor) + `,`,
		`MaxPyramidLevels:` + valueToStringBoxDetector(this.MaxPyramidLevels) + `,`,
		`MaxFeatures:` + valueToStringBoxDetector(this.MaxFeatures) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BoxDetectorIndex) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBoxEntry := "[]*BoxDetectorIndex_BoxEntry{"
	for _, f := range this.BoxEntry {
		repeatedStringForBoxEntry += strings.Replace(fmt.Sprintf("%v", f), "BoxDetectorIndex_BoxEntry", "BoxDetectorIndex_BoxEntry", 1) + ","
	}
	repeatedStringForBoxEntry += "}"
	s := strings.Join([]string{`&BoxDetectorIndex{`,
		`BoxEntry:` + repeatedStringForBoxEntry + `,`,
		`}`,
	}, "")
	return s
}
func (this *BoxDetectorIndex_BoxEntry) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFrameEntry := "[]*BoxDetectorIndex_BoxEntry_FrameEntry{"
	for _, f := range this.FrameEntry {
		repeatedStringForFrameEntry += strings.Replace(fmt.Sprintf("%v", f), "BoxDetectorIndex_BoxEntry_FrameEntry", "BoxDetectorIndex_BoxEntry_FrameEntry", 1) + ","
	}
	repeatedStringForFrameEntry += "}"
	s := strings.Join([]string{`&BoxDetectorIndex_BoxEntry{`,
		`FrameEntry:` + repeatedStringForFrameEntry + `,`,
		`}`,
	}, "")
	return s
}
func (this *BoxDetectorIndex_BoxEntry_FrameEntry) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDescriptors := "[]*BinaryFeatureDescriptor{"
	for _, f := range this.Descriptors {
		repeatedStringForDescriptors += strings.Replace(fmt.Sprintf("%v", f), "BinaryFeatureDescriptor", "BinaryFeatureDescriptor", 1) + ","
	}
	repeatedStringForDescriptors += "}"
	s := strings.Join([]string{`&BoxDetectorIndex_BoxEntry_FrameEntry{`,
		`Box:` + strings.Replace(fmt.Sprintf("%v", this.Box), "TimedBoxProto", "TimedBoxProto", 1) + `,`,
		`Keypoints:` + fmt.Sprintf("%v", this.Keypoints) + `,`,
		`Descriptors:` + repeatedStringForDescriptors + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBoxDetector(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BoxDetectorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBoxDetector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoxDetectorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoxDetectorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexType", wireType)
			}
			var v BoxDetectorOptions_IndexType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoxDetector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= BoxDetectorOptions_IndexType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IndexType = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectEveryNFrame", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoxDetector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DetectEveryNFrame = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageQuerySettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoxDetector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBoxDetector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBoxDetector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImageQuerySettings == nil {
				m.ImageQuerySettings = &BoxDetectorOptions_ImageQuerySettings{}
			}
			if err := m.ImageQuerySettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectOutOfFov", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoxDetector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.DetectOutOfFov = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorDims", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoxDetector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DescriptorDims = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinNumCorrespondence", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoxDetector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinNumCorrespondence = &v
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RansacReprojectionThreshold", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.RansacReprojectionThreshold = &v2
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMatchDistance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.MaxMatchDistance = &v2
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPerspectiveFactor", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.MaxPerspectiveFactor = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipBoxDetector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBoxDetector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoxDetectorOptions_ImageQuerySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBoxDetector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageQuerySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageQuerySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PyramidBottomSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoxDetector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PyramidBottomSize = &v
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PyramidScaleFactor", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.PyramidScaleFactor = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPyramidLevels", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoxDetector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxPyramidLevels = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeatures", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoxDetector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxFeatures = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBoxDetector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBoxDetector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoxDetectorIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBoxDetector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoxDetectorIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoxDetectorIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoxDetector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBoxDetector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBoxDetector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoxEntry = append(m.BoxEntry, &BoxDetectorIndex_BoxEntry{})
			if err := m.BoxEntry[len(m.BoxEntry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBoxDetector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBoxDetector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoxDetectorIndex_BoxEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBoxDetector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoxEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoxEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoxDetector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBoxDetector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBoxDetector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameEntry = append(m.FrameEntry, &BoxDetectorIndex_BoxEntry_FrameEntry{})
			if err := m.FrameEntry[len(m.FrameEntry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBoxDetector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBoxDetector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoxDetectorIndex_BoxEntry_FrameEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBoxDetector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Box", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoxDetector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBoxDetector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBoxDetector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Box == nil {
				m.Box = &TimedBoxProto{}
			}
			if err := m.Box.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Keypoints = append(m.Keypoints, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBoxDetector
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBoxDetector
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBoxDetector
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Keypoints) == 0 {
					m.Keypoints = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Keypoints = append(m.Keypoints, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Keypoints", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Descriptors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoxDetector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBoxDetector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBoxDetector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Descriptors = append(m.Descriptors, &BinaryFeatureDescriptor{})
			if err := m.Descriptors[len(m.Descriptors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBoxDetector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBoxDetector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBoxDetector(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBoxDetector
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBoxDetector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBoxDetector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBoxDetector
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBoxDetector
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBoxDetector
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBoxDetector        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBoxDetector          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBoxDetector = fmt.Errorf("proto: unexpected end of group")
)
