// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/util/tracking/camera_motion.proto

package tracking

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	sort "sort"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CameraMotion_Type int32

const (
	CAMERA_MOTION_TYPE_VALID          CameraMotion_Type = 0
	CAMERA_MOTION_TYPE_UNSTABLE_HOMOG CameraMotion_Type = 1
	CAMERA_MOTION_TYPE_UNSTABLE_SIM   CameraMotion_Type = 2
	CAMERA_MOTION_TYPE_UNSTABLE       CameraMotion_Type = 3
	CAMERA_MOTION_TYPE_INVALID        CameraMotion_Type = 4
)

var CameraMotion_Type_name = map[int32]string{
	0: "CAMERA_MOTION_TYPE_VALID",
	1: "CAMERA_MOTION_TYPE_UNSTABLE_HOMOG",
	2: "CAMERA_MOTION_TYPE_UNSTABLE_SIM",
	3: "CAMERA_MOTION_TYPE_UNSTABLE",
	4: "CAMERA_MOTION_TYPE_INVALID",
}

var CameraMotion_Type_value = map[string]int32{
	"CAMERA_MOTION_TYPE_VALID":          0,
	"CAMERA_MOTION_TYPE_UNSTABLE_HOMOG": 1,
	"CAMERA_MOTION_TYPE_UNSTABLE_SIM":   2,
	"CAMERA_MOTION_TYPE_UNSTABLE":       3,
	"CAMERA_MOTION_TYPE_INVALID":        4,
}

func (x CameraMotion_Type) Enum() *CameraMotion_Type {
	p := new(CameraMotion_Type)
	*p = x
	return p
}

func (x CameraMotion_Type) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(CameraMotion_Type_name, int32(x))
}

func (x *CameraMotion_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CameraMotion_Type_value, data, "CameraMotion_Type")
	if err != nil {
		return err
	}
	*x = CameraMotion_Type(value)
	return nil
}

func (CameraMotion_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c1a66751fae6d794, []int{0, 0}
}

type CameraMotion_Flags int32

const (
	CAMERA_MOTION_FLAG_UNKNOWN             CameraMotion_Flags = 0
	CAMERA_MOTION_FLAG_SHOT_BOUNDARY       CameraMotion_Flags = 1
	CAMERA_MOTION_FLAG_BLURRY_FRAME        CameraMotion_Flags = 2
	CAMERA_MOTION_FLAG_MAJOR_OVERLAY       CameraMotion_Flags = 4
	CAMERA_MOTION_FLAG_SHARP_FRAME         CameraMotion_Flags = 8
	CAMERA_MOTION_FLAG_SINGULAR_ESTIMATION CameraMotion_Flags = 16
	CAMERA_MOTION_FLAG_SHOT_FADE           CameraMotion_Flags = 32
	CAMERA_MOTION_FLAG_DUPLICATED          CameraMotion_Flags = 64
	CAMERA_MOTION_FLAG_CENTER_FRAME        CameraMotion_Flags = 128
)

var CameraMotion_Flags_name = map[int32]string{
	0:   "CAMERA_MOTION_FLAG_UNKNOWN",
	1:   "CAMERA_MOTION_FLAG_SHOT_BOUNDARY",
	2:   "CAMERA_MOTION_FLAG_BLURRY_FRAME",
	4:   "CAMERA_MOTION_FLAG_MAJOR_OVERLAY",
	8:   "CAMERA_MOTION_FLAG_SHARP_FRAME",
	16:  "CAMERA_MOTION_FLAG_SINGULAR_ESTIMATION",
	32:  "CAMERA_MOTION_FLAG_SHOT_FADE",
	64:  "CAMERA_MOTION_FLAG_DUPLICATED",
	128: "CAMERA_MOTION_FLAG_CENTER_FRAME",
}

var CameraMotion_Flags_value = map[string]int32{
	"CAMERA_MOTION_FLAG_UNKNOWN":             0,
	"CAMERA_MOTION_FLAG_SHOT_BOUNDARY":       1,
	"CAMERA_MOTION_FLAG_BLURRY_FRAME":        2,
	"CAMERA_MOTION_FLAG_MAJOR_OVERLAY":       4,
	"CAMERA_MOTION_FLAG_SHARP_FRAME":         8,
	"CAMERA_MOTION_FLAG_SINGULAR_ESTIMATION": 16,
	"CAMERA_MOTION_FLAG_SHOT_FADE":           32,
	"CAMERA_MOTION_FLAG_DUPLICATED":          64,
	"CAMERA_MOTION_FLAG_CENTER_FRAME":        128,
}

func (x CameraMotion_Flags) Enum() *CameraMotion_Flags {
	p := new(CameraMotion_Flags)
	*p = x
	return p
}

func (x CameraMotion_Flags) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(CameraMotion_Flags_name, int32(x))
}

func (x *CameraMotion_Flags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CameraMotion_Flags_value, data, "CameraMotion_Flags")
	if err != nil {
		return err
	}
	*x = CameraMotion_Flags(value)
	return nil
}

func (CameraMotion_Flags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c1a66751fae6d794, []int{0, 1}
}

type CameraMotion struct {
	Translation                    *TranslationModel      `protobuf:"bytes,1,opt,name=translation" json:"translation,omitempty"`
	Similarity                     *SimilarityModel       `protobuf:"bytes,2,opt,name=similarity" json:"similarity,omitempty"`
	LinearSimilarity               *LinearSimilarityModel `protobuf:"bytes,3,opt,name=linear_similarity,json=linearSimilarity" json:"linear_similarity,omitempty"`
	Affine                         *AffineModel           `protobuf:"bytes,4,opt,name=affine" json:"affine,omitempty"`
	Homography                     *Homography            `protobuf:"bytes,5,opt,name=homography" json:"homography,omitempty"`
	MixtureHomography              *MixtureHomography     `protobuf:"bytes,8,opt,name=mixture_homography,json=mixtureHomography" json:"mixture_homography,omitempty"`
	FrameWidth                     float32                `protobuf:"fixed32,31,opt,name=frame_width,json=frameWidth" json:"frame_width"`
	FrameHeight                    float32                `protobuf:"fixed32,32,opt,name=frame_height,json=frameHeight" json:"frame_height"`
	MixtureHomographySpectrum      []*MixtureHomography   `protobuf:"bytes,23,rep,name=mixture_homography_spectrum,json=mixtureHomographySpectrum" json:"mixture_homography_spectrum,omitempty"`
	MixtureRowSigma                float32                `protobuf:"fixed32,10,opt,name=mixture_row_sigma,json=mixtureRowSigma" json:"mixture_row_sigma"`
	AverageMagnitude               *float32               `protobuf:"fixed32,24,opt,name=average_magnitude,json=averageMagnitude,def=0" json:"average_magnitude,omitempty"`
	TranslationVariance            *float32               `protobuf:"fixed32,25,opt,name=translation_variance,json=translationVariance,def=0" json:"translation_variance,omitempty"`
	SimilarityInlierRatio          *float32               `protobuf:"fixed32,29,opt,name=similarity_inlier_ratio,json=similarityInlierRatio,def=0" json:"similarity_inlier_ratio,omitempty"`
	SimilarityStrictInlierRatio    *float32               `protobuf:"fixed32,30,opt,name=similarity_strict_inlier_ratio,json=similarityStrictInlierRatio,def=0" json:"similarity_strict_inlier_ratio,omitempty"`
	AverageHomographyError         float32                `protobuf:"fixed32,11,opt,name=average_homography_error,json=averageHomographyError" json:"average_homography_error"`
	HomographyInlierCoverage       float32                `protobuf:"fixed32,12,opt,name=homography_inlier_coverage,json=homographyInlierCoverage" json:"homography_inlier_coverage"`
	HomographyStrictInlierCoverage float32                `protobuf:"fixed32,22,opt,name=homography_strict_inlier_coverage,json=homographyStrictInlierCoverage" json:"homography_strict_inlier_coverage"`
	MixtureInlierCoverage          []float32              `protobuf:"fixed32,13,rep,name=mixture_inlier_coverage,json=mixtureInlierCoverage" json:"mixture_inlier_coverage,omitempty"`
	RollingShutterGuess            float32                `protobuf:"fixed32,14,opt,name=rolling_shutter_guess,json=rollingShutterGuess" json:"rolling_shutter_guess"`
	RollingShutterMotionIndex      *int32                 `protobuf:"varint,16,opt,name=rolling_shutter_motion_index,json=rollingShutterMotionIndex,def=-1" json:"rolling_shutter_motion_index,omitempty"`
	OverlayIndices                 []int32                `protobuf:"varint,17,rep,name=overlay_indices,json=overlayIndices" json:"overlay_indices,omitempty"`
	OverlayDomain                  *int32                 `protobuf:"varint,18,opt,name=overlay_domain,json=overlayDomain,def=10" json:"overlay_domain,omitempty"`
	Type                           *CameraMotion_Type     `protobuf:"varint,6,opt,name=type,enum=mediapipe.CameraMotion_Type,def=0" json:"type,omitempty"`
	OverriddenType                 *CameraMotion_Type     `protobuf:"varint,15,opt,name=overridden_type,json=overriddenType,enum=mediapipe.CameraMotion_Type,def=0" json:"overridden_type,omitempty"`
	Flags                          *int32                 `protobuf:"varint,19,opt,name=flags,def=0" json:"flags,omitempty"`
	BlurScore                      float32                `protobuf:"fixed32,20,opt,name=blur_score,json=blurScore" json:"blur_score"`
	Bluriness                      *float32               `protobuf:"fixed32,21,opt,name=bluriness,def=0" json:"bluriness,omitempty"`
	FracLongFeaturesRejected       float32                `protobuf:"fixed32,26,opt,name=frac_long_features_rejected,json=fracLongFeaturesRejected" json:"frac_long_features_rejected"`
	TimestampUsec                  *int64                 `protobuf:"varint,27,opt,name=timestamp_usec,json=timestampUsec,def=0" json:"timestamp_usec,omitempty"`
	MatchFrame                     *int32                 `protobuf:"varint,28,opt,name=match_frame,json=matchFrame,def=0" json:"match_frame,omitempty"`
	proto.XXX_InternalExtensions   `json:"-"`
}

func (m *CameraMotion) Reset()      { *m = CameraMotion{} }
func (*CameraMotion) ProtoMessage() {}
func (*CameraMotion) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1a66751fae6d794, []int{0}
}

var extRange_CameraMotion = []proto.ExtensionRange{
	{Start: 9, End: 9},
}

func (*CameraMotion) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_CameraMotion
}

func (m *CameraMotion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CameraMotion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CameraMotion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CameraMotion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CameraMotion.Merge(m, src)
}
func (m *CameraMotion) XXX_Size() int {
	return m.Size()
}
func (m *CameraMotion) XXX_DiscardUnknown() {
	xxx_messageInfo_CameraMotion.DiscardUnknown(m)
}

var xxx_messageInfo_CameraMotion proto.InternalMessageInfo

const Default_CameraMotion_AverageMagnitude float32 = 0
const Default_CameraMotion_TranslationVariance float32 = 0
const Default_CameraMotion_SimilarityInlierRatio float32 = 0
const Default_CameraMotion_SimilarityStrictInlierRatio float32 = 0
const Default_CameraMotion_RollingShutterMotionIndex int32 = -1
const Default_CameraMotion_OverlayDomain int32 = 10
const Default_CameraMotion_Type CameraMotion_Type = CAMERA_MOTION_TYPE_VALID
const Default_CameraMotion_OverriddenType CameraMotion_Type = CAMERA_MOTION_TYPE_VALID
const Default_CameraMotion_Flags int32 = 0
const Default_CameraMotion_Bluriness float32 = 0
const Default_CameraMotion_TimestampUsec int64 = 0
const Default_CameraMotion_MatchFrame int32 = 0

func (m *CameraMotion) GetTranslation() *TranslationModel {
	if m != nil {
		return m.Translation
	}
	return nil
}

func (m *CameraMotion) GetSimilarity() *SimilarityModel {
	if m != nil {
		return m.Similarity
	}
	return nil
}

func (m *CameraMotion) GetLinearSimilarity() *LinearSimilarityModel {
	if m != nil {
		return m.LinearSimilarity
	}
	return nil
}

func (m *CameraMotion) GetAffine() *AffineModel {
	if m != nil {
		return m.Affine
	}
	return nil
}

func (m *CameraMotion) GetHomography() *Homography {
	if m != nil {
		return m.Homography
	}
	return nil
}

func (m *CameraMotion) GetMixtureHomography() *MixtureHomography {
	if m != nil {
		return m.MixtureHomography
	}
	return nil
}

func (m *CameraMotion) GetFrameWidth() float32 {
	if m != nil {
		return m.FrameWidth
	}
	return 0
}

func (m *CameraMotion) GetFrameHeight() float32 {
	if m != nil {
		return m.FrameHeight
	}
	return 0
}

func (m *CameraMotion) GetMixtureHomographySpectrum() []*MixtureHomography {
	if m != nil {
		return m.MixtureHomographySpectrum
	}
	return nil
}

func (m *CameraMotion) GetMixtureRowSigma() float32 {
	if m != nil {
		return m.MixtureRowSigma
	}
	return 0
}

func (m *CameraMotion) GetAverageMagnitude() float32 {
	if m != nil && m.AverageMagnitude != nil {
		return *m.AverageMagnitude
	}
	return Default_CameraMotion_AverageMagnitude
}

func (m *CameraMotion) GetTranslationVariance() float32 {
	if m != nil && m.TranslationVariance != nil {
		return *m.TranslationVariance
	}
	return Default_CameraMotion_TranslationVariance
}

func (m *CameraMotion) GetSimilarityInlierRatio() float32 {
	if m != nil && m.SimilarityInlierRatio != nil {
		return *m.SimilarityInlierRatio
	}
	return Default_CameraMotion_SimilarityInlierRatio
}

func (m *CameraMotion) GetSimilarityStrictInlierRatio() float32 {
	if m != nil && m.SimilarityStrictInlierRatio != nil {
		return *m.SimilarityStrictInlierRatio
	}
	return Default_CameraMotion_SimilarityStrictInlierRatio
}

func (m *CameraMotion) GetAverageHomographyError() float32 {
	if m != nil {
		return m.AverageHomographyError
	}
	return 0
}

func (m *CameraMotion) GetHomographyInlierCoverage() float32 {
	if m != nil {
		return m.HomographyInlierCoverage
	}
	return 0
}

func (m *CameraMotion) GetHomographyStrictInlierCoverage() float32 {
	if m != nil {
		return m.HomographyStrictInlierCoverage
	}
	return 0
}

func (m *CameraMotion) GetMixtureInlierCoverage() []float32 {
	if m != nil {
		return m.MixtureInlierCoverage
	}
	return nil
}

func (m *CameraMotion) GetRollingShutterGuess() float32 {
	if m != nil {
		return m.RollingShutterGuess
	}
	return 0
}

func (m *CameraMotion) GetRollingShutterMotionIndex() int32 {
	if m != nil && m.RollingShutterMotionIndex != nil {
		return *m.RollingShutterMotionIndex
	}
	return Default_CameraMotion_RollingShutterMotionIndex
}

func (m *CameraMotion) GetOverlayIndices() []int32 {
	if m != nil {
		return m.OverlayIndices
	}
	return nil
}

func (m *CameraMotion) GetOverlayDomain() int32 {
	if m != nil && m.OverlayDomain != nil {
		return *m.OverlayDomain
	}
	return Default_CameraMotion_OverlayDomain
}

func (m *CameraMotion) GetType() CameraMotion_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_CameraMotion_Type
}

func (m *CameraMotion) GetOverriddenType() CameraMotion_Type {
	if m != nil && m.OverriddenType != nil {
		return *m.OverriddenType
	}
	return Default_CameraMotion_OverriddenType
}

func (m *CameraMotion) GetFlags() int32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return Default_CameraMotion_Flags
}

func (m *CameraMotion) GetBlurScore() float32 {
	if m != nil {
		return m.BlurScore
	}
	return 0
}

func (m *CameraMotion) GetBluriness() float32 {
	if m != nil && m.Bluriness != nil {
		return *m.Bluriness
	}
	return Default_CameraMotion_Bluriness
}

func (m *CameraMotion) GetFracLongFeaturesRejected() float32 {
	if m != nil {
		return m.FracLongFeaturesRejected
	}
	return 0
}

func (m *CameraMotion) GetTimestampUsec() int64 {
	if m != nil && m.TimestampUsec != nil {
		return *m.TimestampUsec
	}
	return Default_CameraMotion_TimestampUsec
}

func (m *CameraMotion) GetMatchFrame() int32 {
	if m != nil && m.MatchFrame != nil {
		return *m.MatchFrame
	}
	return Default_CameraMotion_MatchFrame
}

func init() {
	proto.RegisterEnum("mediapipe.CameraMotion_Type", CameraMotion_Type_name, CameraMotion_Type_value)
	proto.RegisterEnum("mediapipe.CameraMotion_Flags", CameraMotion_Flags_name, CameraMotion_Flags_value)
	proto.RegisterType((*CameraMotion)(nil), "mediapipe.CameraMotion")
}

func init() {
	proto.RegisterFile("mediapipe/util/tracking/camera_motion.proto", fileDescriptor_c1a66751fae6d794)
}

var fileDescriptor_c1a66751fae6d794 = []byte{
	// 1137 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0xdd, 0x6e, 0x13, 0xc7,
	0x1b, 0xc6, 0xbd, 0x8e, 0x83, 0xe0, 0x0d, 0x84, 0xcd, 0x40, 0xc8, 0x90, 0x84, 0xcd, 0x12, 0xe0,
	0x8f, 0xff, 0x54, 0x75, 0x42, 0xbf, 0xd4, 0x46, 0x6a, 0xd5, 0x8d, 0x63, 0x27, 0x06, 0xaf, 0x8d,
	0xd6, 0x36, 0x28, 0x55, 0xa5, 0xd1, 0xb0, 0x1e, 0xaf, 0xa7, 0xdd, 0x0f, 0x6b, 0x76, 0x0d, 0xe4,
	0x8c, 0x4b, 0xe8, 0x65, 0xf4, 0xb4, 0x77, 0xc1, 0x21, 0x52, 0x4f, 0x38, 0xaa, 0x8a, 0xe9, 0x41,
	0x0f, 0xb9, 0x84, 0x6a, 0x3f, 0x6c, 0x4f, 0x8c, 0x43, 0x0f, 0x7a, 0xb8, 0xef, 0xf3, 0x7b, 0x9e,
	0x79, 0xdf, 0x99, 0xf1, 0xc8, 0xf0, 0x89, 0xc7, 0xba, 0x9c, 0x0e, 0xf8, 0x80, 0xed, 0x0c, 0x23,
	0xee, 0xee, 0x44, 0x82, 0xda, 0x3f, 0x73, 0xdf, 0xd9, 0xb1, 0xa9, 0xc7, 0x04, 0x25, 0x5e, 0x10,
	0xf1, 0xc0, 0x2f, 0x0d, 0x44, 0x10, 0x05, 0xe8, 0xc2, 0x04, 0x5e, 0x3f, 0xd3, 0x97, 0x1a, 0x88,
	0x17, 0x74, 0x99, 0x1b, 0xa6, 0xbe, 0xed, 0xbf, 0x56, 0xe0, 0x62, 0x39, 0xc9, 0x33, 0x13, 0x15,
	0x7d, 0x0b, 0x4b, 0x91, 0xa0, 0x7e, 0xe8, 0xd2, 0xf8, 0x13, 0x2b, 0xba, 0x52, 0x5c, 0xfa, 0x6c,
	0xa3, 0x34, 0xc9, 0x2c, 0xb5, 0xa7, 0xaa, 0x19, 0x27, 0x59, 0x32, 0x8f, 0xf6, 0x00, 0x42, 0xee,
	0x71, 0x97, 0x0a, 0x1e, 0x9d, 0xe0, 0x7c, 0xe2, 0x5e, 0x97, 0xdc, 0xad, 0x89, 0x98, 0x9a, 0x25,
	0x1a, 0x99, 0xb0, 0xe2, 0x72, 0x9f, 0x51, 0x41, 0xa4, 0x88, 0x85, 0x24, 0x42, 0x97, 0x22, 0xea,
	0x09, 0x33, 0x1b, 0xa4, 0xba, 0x33, 0x65, 0x54, 0x82, 0x73, 0xb4, 0xd7, 0xe3, 0x3e, 0xc3, 0x85,
	0x24, 0xe3, 0x9a, 0x94, 0x61, 0x24, 0x42, 0xea, 0xcc, 0x28, 0xf4, 0x25, 0x40, 0x3f, 0xf0, 0x02,
	0x47, 0xd0, 0x41, 0xff, 0x04, 0x2f, 0x26, 0x9e, 0x55, 0xc9, 0x73, 0x34, 0x11, 0x2d, 0x09, 0x44,
	0x0f, 0x01, 0x79, 0xfc, 0x45, 0x34, 0x14, 0x8c, 0x48, 0xf6, 0xf3, 0x89, 0x7d, 0x53, 0xb2, 0x9b,
	0x29, 0x24, 0xa5, 0xac, 0x78, 0xb3, 0x25, 0x74, 0x07, 0x96, 0x7a, 0x82, 0x7a, 0x8c, 0x3c, 0xe7,
	0xdd, 0xa8, 0x8f, 0xb7, 0x74, 0xa5, 0x98, 0xdf, 0x2f, 0xbc, 0xfa, 0x63, 0x2b, 0x67, 0x41, 0x22,
	0x3c, 0x89, 0xeb, 0xe8, 0x2e, 0x5c, 0x4c, 0xb1, 0x3e, 0xe3, 0x4e, 0x3f, 0xc2, 0xba, 0xc4, 0xa5,
	0x01, 0x47, 0x89, 0x80, 0x7e, 0x84, 0x8d, 0x0f, 0x9b, 0x23, 0xe1, 0x80, 0xd9, 0x91, 0x18, 0x7a,
	0x78, 0x4d, 0x5f, 0xf8, 0xd7, 0x2e, 0xaf, 0x7f, 0xd0, 0x65, 0x2b, 0xb3, 0xa3, 0x5d, 0x18, 0x8f,
	0x40, 0x44, 0xf0, 0x9c, 0x84, 0xdc, 0xf1, 0x28, 0x06, 0xa9, 0x97, 0xcb, 0x99, 0x6c, 0x05, 0xcf,
	0x5b, 0xb1, 0x88, 0x4a, 0xb0, 0x42, 0x9f, 0x31, 0x41, 0x1d, 0x46, 0x3c, 0xea, 0xf8, 0x3c, 0x1a,
	0x76, 0x19, 0xc6, 0xb1, 0x63, 0x4f, 0xd9, 0xb5, 0xd4, 0x4c, 0x33, 0xc7, 0x12, 0xfa, 0x02, 0xae,
	0x4a, 0xb7, 0x8b, 0x3c, 0xa3, 0x82, 0x53, 0xdf, 0x66, 0xf8, 0xfa, 0xd8, 0x72, 0x45, 0x92, 0x1f,
	0x67, 0x2a, 0xfa, 0x06, 0xd6, 0xa6, 0x37, 0x88, 0x70, 0xdf, 0xe5, 0x4c, 0x10, 0x11, 0x33, 0xf8,
	0xc6, 0xd8, 0xb8, 0x3a, 0x25, 0x6a, 0x09, 0x60, 0xc5, 0x3a, 0xaa, 0x82, 0x26, 0x59, 0xc3, 0x48,
	0x70, 0x3b, 0x3a, 0x9d, 0xa0, 0x8d, 0x13, 0x36, 0xa6, 0x60, 0x2b, 0xe1, 0xe4, 0x9c, 0xef, 0x00,
	0x8f, 0x07, 0x95, 0x36, 0x9e, 0x09, 0x11, 0x08, 0xbc, 0x24, 0xed, 0xd0, 0xb5, 0x8c, 0x9a, 0xee,
	0x6e, 0x25, 0x66, 0xd0, 0x3e, 0xac, 0x4b, 0xbe, 0xac, 0x01, 0x3b, 0x48, 0x61, 0x7c, 0x51, 0x4a,
	0xc0, 0x53, 0x2e, 0x6d, 0xa0, 0x9c, 0x51, 0xa8, 0x09, 0x37, 0xe5, 0x43, 0x3f, 0x35, 0xcb, 0x24,
	0xea, 0x9a, 0x14, 0xa5, 0x4d, 0x71, 0x79, 0xa2, 0x49, 0xe0, 0x57, 0xb0, 0x36, 0x3e, 0xef, 0xd9,
	0x98, 0x4b, 0xfa, 0x42, 0x31, 0x6f, 0xad, 0x66, 0xf2, 0x8c, 0xef, 0x6b, 0x58, 0x15, 0x81, 0xeb,
	0x72, 0xdf, 0x21, 0x61, 0x7f, 0x18, 0x45, 0x4c, 0x10, 0x67, 0xc8, 0xc2, 0x10, 0x2f, 0x4b, 0x8b,
	0x5f, 0xc9, 0x90, 0x56, 0x4a, 0x1c, 0xc6, 0x00, 0x2a, 0xc3, 0xe6, 0xac, 0x33, 0x7b, 0xc5, 0xb8,
	0xdf, 0x65, 0x2f, 0xb0, 0xaa, 0x2b, 0xc5, 0xc5, 0xbd, 0xfc, 0xa7, 0xf7, 0xad, 0xeb, 0xa7, 0xed,
	0xe9, 0x6b, 0x56, 0x8b, 0x21, 0x74, 0x17, 0x2e, 0xc7, 0x9d, 0xb8, 0x34, 0xde, 0xc8, 0x2e, 0xb7,
	0x59, 0x88, 0x57, 0xf4, 0x85, 0xe2, 0xa2, 0xb5, 0x9c, 0x95, 0x6b, 0x69, 0x15, 0xfd, 0x1f, 0xc6,
	0x15, 0xd2, 0x0d, 0x3c, 0xca, 0x7d, 0x8c, 0xd2, 0xfc, 0xfb, 0xbb, 0xd6, 0xa5, 0x4c, 0x39, 0x48,
	0x04, 0xf4, 0x00, 0x0a, 0xd1, 0xc9, 0x80, 0xe1, 0x73, 0xba, 0x52, 0x5c, 0x3e, 0xf5, 0x0b, 0x92,
	0x5f, 0xd3, 0x52, 0xfb, 0x64, 0xc0, 0xf6, 0x70, 0xd9, 0x30, 0x2b, 0x96, 0x41, 0xcc, 0x66, 0xbb,
	0xd6, 0x6c, 0x90, 0xf6, 0xf1, 0xa3, 0x0a, 0x79, 0x6c, 0xd4, 0x6b, 0x07, 0x56, 0x92, 0x81, 0x48,
	0xda, 0x9f, 0xe0, 0xdd, 0x2e, 0xf3, 0x49, 0x12, 0x7b, 0xf9, 0x3f, 0xc5, 0x2e, 0x4f, 0xe3, 0x62,
	0x12, 0xad, 0xc1, 0x62, 0xcf, 0xa5, 0x4e, 0x88, 0xaf, 0x24, 0xe3, 0x28, 0xbb, 0x56, 0xfa, 0x8d,
	0x6e, 0x01, 0x3c, 0x75, 0x87, 0x82, 0x84, 0x76, 0x20, 0x18, 0xbe, 0x2a, 0x9d, 0xc6, 0x85, 0xb8,
	0xde, 0x8a, 0xcb, 0x68, 0x0b, 0x92, 0x0f, 0xee, 0xc7, 0x27, 0xb6, 0x3a, 0xbe, 0xfd, 0xd3, 0x1a,
	0x2a, 0xc3, 0x46, 0x4f, 0x50, 0x9b, 0xb8, 0x81, 0xef, 0x90, 0x1e, 0xa3, 0xf1, 0x0d, 0x08, 0x89,
	0x60, 0x3f, 0x31, 0x3b, 0x62, 0x5d, 0xbc, 0x2e, 0x5f, 0xd6, 0x18, 0xac, 0x07, 0xbe, 0x53, 0xcd,
	0x30, 0x2b, 0xa3, 0x50, 0x11, 0x96, 0x23, 0xee, 0xb1, 0x30, 0xa2, 0xde, 0x80, 0x0c, 0x43, 0x66,
	0xe3, 0x0d, 0x5d, 0x29, 0x2e, 0xc4, 0x4b, 0x5d, 0x9a, 0x08, 0x9d, 0x90, 0xd9, 0x68, 0x1b, 0x96,
	0x3c, 0x1a, 0xd9, 0x7d, 0x92, 0x3c, 0x74, 0x78, 0x73, 0x3c, 0x13, 0x24, 0xd5, 0x6a, 0x5c, 0xdc,
	0xfe, 0x4d, 0x81, 0x42, 0x32, 0xfa, 0x26, 0x9c, 0xb9, 0x4d, 0x6a, 0x0e, 0xdd, 0x81, 0x9b, 0x73,
	0xd4, 0x4e, 0xa3, 0xd5, 0x36, 0xf6, 0xeb, 0x15, 0x72, 0xd4, 0x34, 0x9b, 0x87, 0xaa, 0x82, 0x6e,
	0xc1, 0xd6, 0xc7, 0xb0, 0x56, 0xcd, 0x54, 0xf3, 0x68, 0x0b, 0x36, 0x3e, 0x02, 0xa9, 0x0b, 0x48,
	0x83, 0xf5, 0x39, 0x40, 0xad, 0x91, 0x36, 0x53, 0xd8, 0xfe, 0x3d, 0x0f, 0x8b, 0xd5, 0xe4, 0x58,
	0x3e, 0x20, 0xab, 0x75, 0xe3, 0x90, 0x74, 0x1a, 0x0f, 0x1b, 0xcd, 0x27, 0x0d, 0x35, 0x87, 0x6e,
	0x83, 0x3e, 0x47, 0x6f, 0x1d, 0x35, 0xdb, 0x64, 0xbf, 0xd9, 0x69, 0x1c, 0x18, 0xd6, 0xf1, 0xbc,
	0xae, 0x13, 0x6a, 0xbf, 0xde, 0xb1, 0xac, 0x63, 0x52, 0xb5, 0x0c, 0xb3, 0xa2, 0xe6, 0xcf, 0x88,
	0x32, 0x8d, 0x07, 0x4d, 0x8b, 0x34, 0x1f, 0x57, 0xac, 0xba, 0x71, 0xac, 0x16, 0xd0, 0x36, 0x68,
	0x73, 0x17, 0x34, 0xac, 0x47, 0x59, 0xd2, 0x79, 0x74, 0x0f, 0xfe, 0x37, 0x8f, 0xa9, 0x35, 0x0e,
	0x3b, 0x75, 0xc3, 0x22, 0x95, 0x56, 0xbb, 0x66, 0x1a, 0xb1, 0xa0, 0xaa, 0x48, 0x87, 0xcd, 0xb3,
	0x06, 0xa8, 0x1a, 0x07, 0x15, 0x55, 0x47, 0x37, 0xe1, 0xc6, 0x1c, 0xe2, 0xa0, 0xf3, 0xa8, 0x5e,
	0x2b, 0x1b, 0xed, 0xca, 0x81, 0xfa, 0x3d, 0xba, 0x3d, 0x77, 0xbe, 0x72, 0xa5, 0xd1, 0xae, 0x58,
	0x59, 0x57, 0x2f, 0x95, 0x7b, 0x85, 0xf3, 0x17, 0x54, 0xd8, 0xe7, 0xaf, 0xdf, 0x6a, 0xb9, 0x37,
	0x6f, 0xb5, 0xdc, 0xfb, 0xb7, 0x9a, 0xf2, 0x72, 0xa4, 0x29, 0xbf, 0x8e, 0x34, 0xe5, 0xd5, 0x48,
	0x53, 0x5e, 0x8f, 0x34, 0xe5, 0xcf, 0x91, 0xa6, 0xfc, 0x3d, 0xd2, 0x72, 0xef, 0x47, 0x9a, 0xf2,
	0xcb, 0x3b, 0x2d, 0xf7, 0xfa, 0x9d, 0x96, 0x7b, 0xf3, 0x4e, 0xcb, 0xfd, 0xf0, 0xb9, 0xc3, 0xa3,
	0xfe, 0xf0, 0x69, 0xc9, 0x0e, 0xbc, 0x1d, 0x27, 0x08, 0x1c, 0x97, 0xed, 0x4c, 0xff, 0x5b, 0x9d,
	0xf1, 0x2f, 0xeb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x49, 0x18, 0x48, 0x5d, 0xb7, 0x09, 0x00,
	0x00,
}

func (x CameraMotion_Type) String() string {
	s, ok := CameraMotion_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CameraMotion_Flags) String() string {
	s, ok := CameraMotion_Flags_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *CameraMotion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CameraMotion)
	if !ok {
		that2, ok := that.(CameraMotion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Translation.Equal(that1.Translation) {
		return false
	}
	if !this.Similarity.Equal(that1.Similarity) {
		return false
	}
	if !this.LinearSimilarity.Equal(that1.LinearSimilarity) {
		return false
	}
	if !this.Affine.Equal(that1.Affine) {
		return false
	}
	if !this.Homography.Equal(that1.Homography) {
		return false
	}
	if !this.MixtureHomography.Equal(that1.MixtureHomography) {
		return false
	}
	if this.FrameWidth != that1.FrameWidth {
		return false
	}
	if this.FrameHeight != that1.FrameHeight {
		return false
	}
	if len(this.MixtureHomographySpectrum) != len(that1.MixtureHomographySpectrum) {
		return false
	}
	for i := range this.MixtureHomographySpectrum {
		if !this.MixtureHomographySpectrum[i].Equal(that1.MixtureHomographySpectrum[i]) {
			return false
		}
	}
	if this.MixtureRowSigma != that1.MixtureRowSigma {
		return false
	}
	if this.AverageMagnitude != nil && that1.AverageMagnitude != nil {
		if *this.AverageMagnitude != *that1.AverageMagnitude {
			return false
		}
	} else if this.AverageMagnitude != nil {
		return false
	} else if that1.AverageMagnitude != nil {
		return false
	}
	if this.TranslationVariance != nil && that1.TranslationVariance != nil {
		if *this.TranslationVariance != *that1.TranslationVariance {
			return false
		}
	} else if this.TranslationVariance != nil {
		return false
	} else if that1.TranslationVariance != nil {
		return false
	}
	if this.SimilarityInlierRatio != nil && that1.SimilarityInlierRatio != nil {
		if *this.SimilarityInlierRatio != *that1.SimilarityInlierRatio {
			return false
		}
	} else if this.SimilarityInlierRatio != nil {
		return false
	} else if that1.SimilarityInlierRatio != nil {
		return false
	}
	if this.SimilarityStrictInlierRatio != nil && that1.SimilarityStrictInlierRatio != nil {
		if *this.SimilarityStrictInlierRatio != *that1.SimilarityStrictInlierRatio {
			return false
		}
	} else if this.SimilarityStrictInlierRatio != nil {
		return false
	} else if that1.SimilarityStrictInlierRatio != nil {
		return false
	}
	if this.AverageHomographyError != that1.AverageHomographyError {
		return false
	}
	if this.HomographyInlierCoverage != that1.HomographyInlierCoverage {
		return false
	}
	if this.HomographyStrictInlierCoverage != that1.HomographyStrictInlierCoverage {
		return false
	}
	if len(this.MixtureInlierCoverage) != len(that1.MixtureInlierCoverage) {
		return false
	}
	for i := range this.MixtureInlierCoverage {
		if this.MixtureInlierCoverage[i] != that1.MixtureInlierCoverage[i] {
			return false
		}
	}
	if this.RollingShutterGuess != that1.RollingShutterGuess {
		return false
	}
	if this.RollingShutterMotionIndex != nil && that1.RollingShutterMotionIndex != nil {
		if *this.RollingShutterMotionIndex != *that1.RollingShutterMotionIndex {
			return false
		}
	} else if this.RollingShutterMotionIndex != nil {
		return false
	} else if that1.RollingShutterMotionIndex != nil {
		return false
	}
	if len(this.OverlayIndices) != len(that1.OverlayIndices) {
		return false
	}
	for i := range this.OverlayIndices {
		if this.OverlayIndices[i] != that1.OverlayIndices[i] {
			return false
		}
	}
	if this.OverlayDomain != nil && that1.OverlayDomain != nil {
		if *this.OverlayDomain != *that1.OverlayDomain {
			return false
		}
	} else if this.OverlayDomain != nil {
		return false
	} else if that1.OverlayDomain != nil {
		return false
	}
	if this.Type != nil && that1.Type != nil {
		if *this.Type != *that1.Type {
			return false
		}
	} else if this.Type != nil {
		return false
	} else if that1.Type != nil {
		return false
	}
	if this.OverriddenType != nil && that1.OverriddenType != nil {
		if *this.OverriddenType != *that1.OverriddenType {
			return false
		}
	} else if this.OverriddenType != nil {
		return false
	} else if that1.OverriddenType != nil {
		return false
	}
	if this.Flags != nil && that1.Flags != nil {
		if *this.Flags != *that1.Flags {
			return false
		}
	} else if this.Flags != nil {
		return false
	} else if that1.Flags != nil {
		return false
	}
	if this.BlurScore != that1.BlurScore {
		return false
	}
	if this.Bluriness != nil && that1.Bluriness != nil {
		if *this.Bluriness != *that1.Bluriness {
			return false
		}
	} else if this.Bluriness != nil {
		return false
	} else if that1.Bluriness != nil {
		return false
	}
	if this.FracLongFeaturesRejected != that1.FracLongFeaturesRejected {
		return false
	}
	if this.TimestampUsec != nil && that1.TimestampUsec != nil {
		if *this.TimestampUsec != *that1.TimestampUsec {
			return false
		}
	} else if this.TimestampUsec != nil {
		return false
	} else if that1.TimestampUsec != nil {
		return false
	}
	if this.MatchFrame != nil && that1.MatchFrame != nil {
		if *this.MatchFrame != *that1.MatchFrame {
			return false
		}
	} else if this.MatchFrame != nil {
		return false
	} else if that1.MatchFrame != nil {
		return false
	}
	thismap := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(this)
	thatmap := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(that1)
	for k, v := range thismap {
		if v2, ok := thatmap[k]; ok {
			if !v.Equal(&v2) {
				return false
			}
		} else {
			return false
		}
	}
	for k, _ := range thatmap {
		if _, ok := thismap[k]; !ok {
			return false
		}
	}
	return true
}
func (this *CameraMotion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 34)
	s = append(s, "&tracking.CameraMotion{")
	if this.Translation != nil {
		s = append(s, "Translation: "+fmt.Sprintf("%#v", this.Translation)+",\n")
	}
	if this.Similarity != nil {
		s = append(s, "Similarity: "+fmt.Sprintf("%#v", this.Similarity)+",\n")
	}
	if this.LinearSimilarity != nil {
		s = append(s, "LinearSimilarity: "+fmt.Sprintf("%#v", this.LinearSimilarity)+",\n")
	}
	if this.Affine != nil {
		s = append(s, "Affine: "+fmt.Sprintf("%#v", this.Affine)+",\n")
	}
	if this.Homography != nil {
		s = append(s, "Homography: "+fmt.Sprintf("%#v", this.Homography)+",\n")
	}
	if this.MixtureHomography != nil {
		s = append(s, "MixtureHomography: "+fmt.Sprintf("%#v", this.MixtureHomography)+",\n")
	}
	s = append(s, "FrameWidth: "+fmt.Sprintf("%#v", this.FrameWidth)+",\n")
	s = append(s, "FrameHeight: "+fmt.Sprintf("%#v", this.FrameHeight)+",\n")
	if this.MixtureHomographySpectrum != nil {
		s = append(s, "MixtureHomographySpectrum: "+fmt.Sprintf("%#v", this.MixtureHomographySpectrum)+",\n")
	}
	s = append(s, "MixtureRowSigma: "+fmt.Sprintf("%#v", this.MixtureRowSigma)+",\n")
	if this.AverageMagnitude != nil {
		s = append(s, "AverageMagnitude: "+valueToGoStringCameraMotion(this.AverageMagnitude, "float32")+",\n")
	}
	if this.TranslationVariance != nil {
		s = append(s, "TranslationVariance: "+valueToGoStringCameraMotion(this.TranslationVariance, "float32")+",\n")
	}
	if this.SimilarityInlierRatio != nil {
		s = append(s, "SimilarityInlierRatio: "+valueToGoStringCameraMotion(this.SimilarityInlierRatio, "float32")+",\n")
	}
	if this.SimilarityStrictInlierRatio != nil {
		s = append(s, "SimilarityStrictInlierRatio: "+valueToGoStringCameraMotion(this.SimilarityStrictInlierRatio, "float32")+",\n")
	}
	s = append(s, "AverageHomographyError: "+fmt.Sprintf("%#v", this.AverageHomographyError)+",\n")
	s = append(s, "HomographyInlierCoverage: "+fmt.Sprintf("%#v", this.HomographyInlierCoverage)+",\n")
	s = append(s, "HomographyStrictInlierCoverage: "+fmt.Sprintf("%#v", this.HomographyStrictInlierCoverage)+",\n")
	if this.MixtureInlierCoverage != nil {
		s = append(s, "MixtureInlierCoverage: "+fmt.Sprintf("%#v", this.MixtureInlierCoverage)+",\n")
	}
	s = append(s, "RollingShutterGuess: "+fmt.Sprintf("%#v", this.RollingShutterGuess)+",\n")
	if this.RollingShutterMotionIndex != nil {
		s = append(s, "RollingShutterMotionIndex: "+valueToGoStringCameraMotion(this.RollingShutterMotionIndex, "int32")+",\n")
	}
	if this.OverlayIndices != nil {
		s = append(s, "OverlayIndices: "+fmt.Sprintf("%#v", this.OverlayIndices)+",\n")
	}
	if this.OverlayDomain != nil {
		s = append(s, "OverlayDomain: "+valueToGoStringCameraMotion(this.OverlayDomain, "int32")+",\n")
	}
	if this.Type != nil {
		s = append(s, "Type: "+valueToGoStringCameraMotion(this.Type, "CameraMotion_Type")+",\n")
	}
	if this.OverriddenType != nil {
		s = append(s, "OverriddenType: "+valueToGoStringCameraMotion(this.OverriddenType, "CameraMotion_Type")+",\n")
	}
	if this.Flags != nil {
		s = append(s, "Flags: "+valueToGoStringCameraMotion(this.Flags, "int32")+",\n")
	}
	s = append(s, "BlurScore: "+fmt.Sprintf("%#v", this.BlurScore)+",\n")
	if this.Bluriness != nil {
		s = append(s, "Bluriness: "+valueToGoStringCameraMotion(this.Bluriness, "float32")+",\n")
	}
	s = append(s, "FracLongFeaturesRejected: "+fmt.Sprintf("%#v", this.FracLongFeaturesRejected)+",\n")
	if this.TimestampUsec != nil {
		s = append(s, "TimestampUsec: "+valueToGoStringCameraMotion(this.TimestampUsec, "int64")+",\n")
	}
	if this.MatchFrame != nil {
		s = append(s, "MatchFrame: "+valueToGoStringCameraMotion(this.MatchFrame, "int32")+",\n")
	}
	s = append(s, "XXX_InternalExtensions: "+extensionToGoStringCameraMotion(this)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCameraMotion(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringCameraMotion(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *CameraMotion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CameraMotion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CameraMotion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if n, err := github_com_gogo_protobuf_proto.EncodeInternalExtensionBackwards(m, dAtA[:i]); err != nil {
		return 0, err
	} else {
		i -= n
	}
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FrameHeight))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x85
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FrameWidth))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xfd
	if m.SimilarityStrictInlierRatio != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.SimilarityStrictInlierRatio))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf5
	}
	if m.SimilarityInlierRatio != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.SimilarityInlierRatio))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xed
	}
	if m.MatchFrame != nil {
		i = encodeVarintCameraMotion(dAtA, i, uint64(*m.MatchFrame))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.TimestampUsec != nil {
		i = encodeVarintCameraMotion(dAtA, i, uint64(*m.TimestampUsec))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FracLongFeaturesRejected))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd5
	if m.TranslationVariance != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.TranslationVariance))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xcd
	}
	if m.AverageMagnitude != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.AverageMagnitude))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc5
	}
	if len(m.MixtureHomographySpectrum) > 0 {
		for iNdEx := len(m.MixtureHomographySpectrum) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MixtureHomographySpectrum[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCameraMotion(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HomographyStrictInlierCoverage))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb5
	if m.Bluriness != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Bluriness))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xad
	}
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BlurScore))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa5
	if m.Flags != nil {
		i = encodeVarintCameraMotion(dAtA, i, uint64(*m.Flags))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.OverlayDomain != nil {
		i = encodeVarintCameraMotion(dAtA, i, uint64(*m.OverlayDomain))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.OverlayIndices) > 0 {
		for iNdEx := len(m.OverlayIndices) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCameraMotion(dAtA, i, uint64(m.OverlayIndices[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x88
		}
	}
	if m.RollingShutterMotionIndex != nil {
		i = encodeVarintCameraMotion(dAtA, i, uint64(*m.RollingShutterMotionIndex))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.OverriddenType != nil {
		i = encodeVarintCameraMotion(dAtA, i, uint64(*m.OverriddenType))
		i--
		dAtA[i] = 0x78
	}
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RollingShutterGuess))))
	i--
	dAtA[i] = 0x75
	if len(m.MixtureInlierCoverage) > 0 {
		for iNdEx := len(m.MixtureInlierCoverage) - 1; iNdEx >= 0; iNdEx-- {
			f1 := math.Float32bits(float32(m.MixtureInlierCoverage[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f1))
			i--
			dAtA[i] = 0x6d
		}
	}
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HomographyInlierCoverage))))
	i--
	dAtA[i] = 0x65
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AverageHomographyError))))
	i--
	dAtA[i] = 0x5d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MixtureRowSigma))))
	i--
	dAtA[i] = 0x55
	if m.MixtureHomography != nil {
		{
			size, err := m.MixtureHomography.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCameraMotion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Type != nil {
		i = encodeVarintCameraMotion(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x30
	}
	if m.Homography != nil {
		{
			size, err := m.Homography.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCameraMotion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Affine != nil {
		{
			size, err := m.Affine.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCameraMotion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LinearSimilarity != nil {
		{
			size, err := m.LinearSimilarity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCameraMotion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Similarity != nil {
		{
			size, err := m.Similarity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCameraMotion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Translation != nil {
		{
			size, err := m.Translation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCameraMotion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCameraMotion(dAtA []byte, offset int, v uint64) int {
	offset -= sovCameraMotion(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CameraMotion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Translation != nil {
		l = m.Translation.Size()
		n += 1 + l + sovCameraMotion(uint64(l))
	}
	if m.Similarity != nil {
		l = m.Similarity.Size()
		n += 1 + l + sovCameraMotion(uint64(l))
	}
	if m.LinearSimilarity != nil {
		l = m.LinearSimilarity.Size()
		n += 1 + l + sovCameraMotion(uint64(l))
	}
	if m.Affine != nil {
		l = m.Affine.Size()
		n += 1 + l + sovCameraMotion(uint64(l))
	}
	if m.Homography != nil {
		l = m.Homography.Size()
		n += 1 + l + sovCameraMotion(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovCameraMotion(uint64(*m.Type))
	}
	if m.MixtureHomography != nil {
		l = m.MixtureHomography.Size()
		n += 1 + l + sovCameraMotion(uint64(l))
	}
	n += 5
	n += 5
	n += 5
	if len(m.MixtureInlierCoverage) > 0 {
		n += 5 * len(m.MixtureInlierCoverage)
	}
	n += 5
	if m.OverriddenType != nil {
		n += 1 + sovCameraMotion(uint64(*m.OverriddenType))
	}
	if m.RollingShutterMotionIndex != nil {
		n += 2 + sovCameraMotion(uint64(*m.RollingShutterMotionIndex))
	}
	if len(m.OverlayIndices) > 0 {
		for _, e := range m.OverlayIndices {
			n += 2 + sovCameraMotion(uint64(e))
		}
	}
	if m.OverlayDomain != nil {
		n += 2 + sovCameraMotion(uint64(*m.OverlayDomain))
	}
	if m.Flags != nil {
		n += 2 + sovCameraMotion(uint64(*m.Flags))
	}
	n += 6
	if m.Bluriness != nil {
		n += 6
	}
	n += 6
	if len(m.MixtureHomographySpectrum) > 0 {
		for _, e := range m.MixtureHomographySpectrum {
			l = e.Size()
			n += 2 + l + sovCameraMotion(uint64(l))
		}
	}
	if m.AverageMagnitude != nil {
		n += 6
	}
	if m.TranslationVariance != nil {
		n += 6
	}
	n += 6
	if m.TimestampUsec != nil {
		n += 2 + sovCameraMotion(uint64(*m.TimestampUsec))
	}
	if m.MatchFrame != nil {
		n += 2 + sovCameraMotion(uint64(*m.MatchFrame))
	}
	if m.SimilarityInlierRatio != nil {
		n += 6
	}
	if m.SimilarityStrictInlierRatio != nil {
		n += 6
	}
	n += 6
	n += 6
	n += github_com_gogo_protobuf_proto.SizeOfInternalExtension(m)
	return n
}

func sovCameraMotion(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCameraMotion(x uint64) (n int) {
	return sovCameraMotion(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CameraMotion) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMixtureHomographySpectrum := "[]*MixtureHomography{"
	for _, f := range this.MixtureHomographySpectrum {
		repeatedStringForMixtureHomographySpectrum += strings.Replace(fmt.Sprintf("%v", f), "MixtureHomography", "MixtureHomography", 1) + ","
	}
	repeatedStringForMixtureHomographySpectrum += "}"
	s := strings.Join([]string{`&CameraMotion{`,
		`Translation:` + strings.Replace(fmt.Sprintf("%v", this.Translation), "TranslationModel", "TranslationModel", 1) + `,`,
		`Similarity:` + strings.Replace(fmt.Sprintf("%v", this.Similarity), "SimilarityModel", "SimilarityModel", 1) + `,`,
		`LinearSimilarity:` + strings.Replace(fmt.Sprintf("%v", this.LinearSimilarity), "LinearSimilarityModel", "LinearSimilarityModel", 1) + `,`,
		`Affine:` + strings.Replace(fmt.Sprintf("%v", this.Affine), "AffineModel", "AffineModel", 1) + `,`,
		`Homography:` + strings.Replace(fmt.Sprintf("%v", this.Homography), "Homography", "Homography", 1) + `,`,
		`Type:` + valueToStringCameraMotion(this.Type) + `,`,
		`MixtureHomography:` + strings.Replace(fmt.Sprintf("%v", this.MixtureHomography), "MixtureHomography", "MixtureHomography", 1) + `,`,
		`MixtureRowSigma:` + fmt.Sprintf("%v", this.MixtureRowSigma) + `,`,
		`AverageHomographyError:` + fmt.Sprintf("%v", this.AverageHomographyError) + `,`,
		`HomographyInlierCoverage:` + fmt.Sprintf("%v", this.HomographyInlierCoverage) + `,`,
		`MixtureInlierCoverage:` + fmt.Sprintf("%v", this.MixtureInlierCoverage) + `,`,
		`RollingShutterGuess:` + fmt.Sprintf("%v", this.RollingShutterGuess) + `,`,
		`OverriddenType:` + valueToStringCameraMotion(this.OverriddenType) + `,`,
		`RollingShutterMotionIndex:` + valueToStringCameraMotion(this.RollingShutterMotionIndex) + `,`,
		`OverlayIndices:` + fmt.Sprintf("%v", this.OverlayIndices) + `,`,
		`OverlayDomain:` + valueToStringCameraMotion(this.OverlayDomain) + `,`,
		`Flags:` + valueToStringCameraMotion(this.Flags) + `,`,
		`BlurScore:` + fmt.Sprintf("%v", this.BlurScore) + `,`,
		`Bluriness:` + valueToStringCameraMotion(this.Bluriness) + `,`,
		`HomographyStrictInlierCoverage:` + fmt.Sprintf("%v", this.HomographyStrictInlierCoverage) + `,`,
		`MixtureHomographySpectrum:` + repeatedStringForMixtureHomographySpectrum + `,`,
		`AverageMagnitude:` + valueToStringCameraMotion(this.AverageMagnitude) + `,`,
		`TranslationVariance:` + valueToStringCameraMotion(this.TranslationVariance) + `,`,
		`FracLongFeaturesRejected:` + fmt.Sprintf("%v", this.FracLongFeaturesRejected) + `,`,
		`TimestampUsec:` + valueToStringCameraMotion(this.TimestampUsec) + `,`,
		`MatchFrame:` + valueToStringCameraMotion(this.MatchFrame) + `,`,
		`SimilarityInlierRatio:` + valueToStringCameraMotion(this.SimilarityInlierRatio) + `,`,
		`SimilarityStrictInlierRatio:` + valueToStringCameraMotion(this.SimilarityStrictInlierRatio) + `,`,
		`FrameWidth:` + fmt.Sprintf("%v", this.FrameWidth) + `,`,
		`FrameHeight:` + fmt.Sprintf("%v", this.FrameHeight) + `,`,
		`XXX_InternalExtensions:` + github_com_gogo_protobuf_proto.StringFromInternalExtension(this) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCameraMotion(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CameraMotion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCameraMotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CameraMotion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CameraMotion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Translation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraMotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCameraMotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCameraMotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Translation == nil {
				m.Translation = &TranslationModel{}
			}
			if err := m.Translation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Similarity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraMotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCameraMotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCameraMotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Similarity == nil {
				m.Similarity = &SimilarityModel{}
			}
			if err := m.Similarity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinearSimilarity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraMotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCameraMotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCameraMotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LinearSimilarity == nil {
				m.LinearSimilarity = &LinearSimilarityModel{}
			}
			if err := m.LinearSimilarity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Affine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraMotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCameraMotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCameraMotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Affine == nil {
				m.Affine = &AffineModel{}
			}
			if err := m.Affine.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Homography", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraMotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCameraMotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCameraMotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Homography == nil {
				m.Homography = &Homography{}
			}
			if err := m.Homography.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v CameraMotion_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraMotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CameraMotion_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MixtureHomography", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraMotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCameraMotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCameraMotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MixtureHomography == nil {
				m.MixtureHomography = &MixtureHomography{}
			}
			if err := m.MixtureHomography.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MixtureRowSigma", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MixtureRowSigma = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageHomographyError", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AverageHomographyError = float32(math.Float32frombits(v))
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomographyInlierCoverage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HomographyInlierCoverage = float32(math.Float32frombits(v))
		case 13:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.MixtureInlierCoverage = append(m.MixtureInlierCoverage, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCameraMotion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCameraMotion
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCameraMotion
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.MixtureInlierCoverage) == 0 {
					m.MixtureInlierCoverage = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.MixtureInlierCoverage = append(m.MixtureInlierCoverage, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MixtureInlierCoverage", wireType)
			}
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollingShutterGuess", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RollingShutterGuess = float32(math.Float32frombits(v))
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverriddenType", wireType)
			}
			var v CameraMotion_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraMotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CameraMotion_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OverriddenType = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollingShutterMotionIndex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraMotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RollingShutterMotionIndex = &v
		case 17:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCameraMotion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OverlayIndices = append(m.OverlayIndices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCameraMotion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCameraMotion
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCameraMotion
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OverlayIndices) == 0 {
					m.OverlayIndices = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCameraMotion
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OverlayIndices = append(m.OverlayIndices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OverlayIndices", wireType)
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverlayDomain", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraMotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OverlayDomain = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraMotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Flags = &v
		case 20:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlurScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BlurScore = float32(math.Float32frombits(v))
		case 21:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bluriness", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Bluriness = &v2
		case 22:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomographyStrictInlierCoverage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HomographyStrictInlierCoverage = float32(math.Float32frombits(v))
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MixtureHomographySpectrum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraMotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCameraMotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCameraMotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MixtureHomographySpectrum = append(m.MixtureHomographySpectrum, &MixtureHomography{})
			if err := m.MixtureHomographySpectrum[len(m.MixtureHomographySpectrum)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageMagnitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.AverageMagnitude = &v2
		case 25:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranslationVariance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.TranslationVariance = &v2
		case 26:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FracLongFeaturesRejected", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FracLongFeaturesRejected = float32(math.Float32frombits(v))
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampUsec", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraMotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimestampUsec = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchFrame", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraMotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MatchFrame = &v
		case 29:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimilarityInlierRatio", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.SimilarityInlierRatio = &v2
		case 30:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimilarityStrictInlierRatio", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.SimilarityStrictInlierRatio = &v2
		case 31:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameWidth", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FrameWidth = float32(math.Float32frombits(v))
		case 32:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameHeight", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FrameHeight = float32(math.Float32frombits(v))
		default:
			if (fieldNum >= 9) && (fieldNum < 10) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipCameraMotion(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthCameraMotion
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				github_com_gogo_protobuf_proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipCameraMotion(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthCameraMotion
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCameraMotion(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCameraMotion
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCameraMotion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCameraMotion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCameraMotion
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCameraMotion
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCameraMotion
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCameraMotion        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCameraMotion          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCameraMotion = fmt.Errorf("proto: unexpected end of group")
)
