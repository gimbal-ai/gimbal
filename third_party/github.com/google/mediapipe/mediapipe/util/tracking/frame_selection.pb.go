// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/util/tracking/frame_selection.proto

package tracking

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FrameSelectionTimestamp struct {
	Timestamp              int64  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp"`
	FrameIdx               int32  `protobuf:"varint,2,opt,name=frame_idx,json=frameIdx" json:"frame_idx"`
	ProcessedFromTimestamp *int64 `protobuf:"varint,3,opt,name=processed_from_timestamp,json=processedFromTimestamp,def=-1" json:"processed_from_timestamp,omitempty"`
}

func (m *FrameSelectionTimestamp) Reset()      { *m = FrameSelectionTimestamp{} }
func (*FrameSelectionTimestamp) ProtoMessage() {}
func (*FrameSelectionTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8161d2c294f1ab12, []int{0}
}
func (m *FrameSelectionTimestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrameSelectionTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrameSelectionTimestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrameSelectionTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrameSelectionTimestamp.Merge(m, src)
}
func (m *FrameSelectionTimestamp) XXX_Size() int {
	return m.Size()
}
func (m *FrameSelectionTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_FrameSelectionTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_FrameSelectionTimestamp proto.InternalMessageInfo

const Default_FrameSelectionTimestamp_ProcessedFromTimestamp int64 = -1

func (m *FrameSelectionTimestamp) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *FrameSelectionTimestamp) GetFrameIdx() int32 {
	if m != nil {
		return m.FrameIdx
	}
	return 0
}

func (m *FrameSelectionTimestamp) GetProcessedFromTimestamp() int64 {
	if m != nil && m.ProcessedFromTimestamp != nil {
		return *m.ProcessedFromTimestamp
	}
	return Default_FrameSelectionTimestamp_ProcessedFromTimestamp
}

type FrameSelectionResult struct {
	Timestamp              int64                  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp"`
	FrameIdx               int32                  `protobuf:"varint,2,opt,name=frame_idx,json=frameIdx" json:"frame_idx"`
	CameraMotion           *CameraMotion          `protobuf:"bytes,3,opt,name=camera_motion,json=cameraMotion" json:"camera_motion,omitempty"`
	Features               *RegionFlowFeatureList `protobuf:"bytes,4,opt,name=features" json:"features,omitempty"`
	ProcessedFromTimestamp *int64                 `protobuf:"varint,5,opt,name=processed_from_timestamp,json=processedFromTimestamp,def=-1" json:"processed_from_timestamp,omitempty"`
}

func (m *FrameSelectionResult) Reset()      { *m = FrameSelectionResult{} }
func (*FrameSelectionResult) ProtoMessage() {}
func (*FrameSelectionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8161d2c294f1ab12, []int{1}
}
func (m *FrameSelectionResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrameSelectionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrameSelectionResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrameSelectionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrameSelectionResult.Merge(m, src)
}
func (m *FrameSelectionResult) XXX_Size() int {
	return m.Size()
}
func (m *FrameSelectionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_FrameSelectionResult.DiscardUnknown(m)
}

var xxx_messageInfo_FrameSelectionResult proto.InternalMessageInfo

const Default_FrameSelectionResult_ProcessedFromTimestamp int64 = -1

func (m *FrameSelectionResult) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *FrameSelectionResult) GetFrameIdx() int32 {
	if m != nil {
		return m.FrameIdx
	}
	return 0
}

func (m *FrameSelectionResult) GetCameraMotion() *CameraMotion {
	if m != nil {
		return m.CameraMotion
	}
	return nil
}

func (m *FrameSelectionResult) GetFeatures() *RegionFlowFeatureList {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *FrameSelectionResult) GetProcessedFromTimestamp() int64 {
	if m != nil && m.ProcessedFromTimestamp != nil {
		return *m.ProcessedFromTimestamp
	}
	return Default_FrameSelectionResult_ProcessedFromTimestamp
}

type FrameSelectionCriterion struct {
	SamplingRate       *int32                               `protobuf:"varint,1,opt,name=sampling_rate,json=samplingRate,def=0" json:"sampling_rate,omitempty"`
	BandwidthFrames    *float32                             `protobuf:"fixed32,2,opt,name=bandwidth_frames,json=bandwidthFrames,def=50" json:"bandwidth_frames,omitempty"`
	SearchRadiusFrames *int32                               `protobuf:"varint,3,opt,name=search_radius_frames,json=searchRadiusFrames,def=1" json:"search_radius_frames,omitempty"`
	SolutionEvaluator  *FrameSelectionSolutionEvaluatorType `protobuf:"bytes,4,opt,name=solution_evaluator,json=solutionEvaluator" json:"solution_evaluator,omitempty"`
	MaxOutputFrames    *int32                               `protobuf:"varint,5,opt,name=max_output_frames,json=maxOutputFrames,def=0" json:"max_output_frames,omitempty"`
}

func (m *FrameSelectionCriterion) Reset()      { *m = FrameSelectionCriterion{} }
func (*FrameSelectionCriterion) ProtoMessage() {}
func (*FrameSelectionCriterion) Descriptor() ([]byte, []int) {
	return fileDescriptor_8161d2c294f1ab12, []int{2}
}
func (m *FrameSelectionCriterion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrameSelectionCriterion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrameSelectionCriterion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrameSelectionCriterion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrameSelectionCriterion.Merge(m, src)
}
func (m *FrameSelectionCriterion) XXX_Size() int {
	return m.Size()
}
func (m *FrameSelectionCriterion) XXX_DiscardUnknown() {
	xxx_messageInfo_FrameSelectionCriterion.DiscardUnknown(m)
}

var xxx_messageInfo_FrameSelectionCriterion proto.InternalMessageInfo

const Default_FrameSelectionCriterion_SamplingRate int32 = 0
const Default_FrameSelectionCriterion_BandwidthFrames float32 = 50
const Default_FrameSelectionCriterion_SearchRadiusFrames int32 = 1
const Default_FrameSelectionCriterion_MaxOutputFrames int32 = 0

func (m *FrameSelectionCriterion) GetSamplingRate() int32 {
	if m != nil && m.SamplingRate != nil {
		return *m.SamplingRate
	}
	return Default_FrameSelectionCriterion_SamplingRate
}

func (m *FrameSelectionCriterion) GetBandwidthFrames() float32 {
	if m != nil && m.BandwidthFrames != nil {
		return *m.BandwidthFrames
	}
	return Default_FrameSelectionCriterion_BandwidthFrames
}

func (m *FrameSelectionCriterion) GetSearchRadiusFrames() int32 {
	if m != nil && m.SearchRadiusFrames != nil {
		return *m.SearchRadiusFrames
	}
	return Default_FrameSelectionCriterion_SearchRadiusFrames
}

func (m *FrameSelectionCriterion) GetSolutionEvaluator() *FrameSelectionSolutionEvaluatorType {
	if m != nil {
		return m.SolutionEvaluator
	}
	return nil
}

func (m *FrameSelectionCriterion) GetMaxOutputFrames() int32 {
	if m != nil && m.MaxOutputFrames != nil {
		return *m.MaxOutputFrames
	}
	return Default_FrameSelectionCriterion_MaxOutputFrames
}

type FrameSelectionOptions struct {
	Criterion []*FrameSelectionCriterion `protobuf:"bytes,1,rep,name=criterion" json:"criterion,omitempty"`
	ChunkSize *int32                     `protobuf:"varint,2,opt,name=chunk_size,json=chunkSize,def=100" json:"chunk_size,omitempty"`
}

func (m *FrameSelectionOptions) Reset()      { *m = FrameSelectionOptions{} }
func (*FrameSelectionOptions) ProtoMessage() {}
func (*FrameSelectionOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_8161d2c294f1ab12, []int{3}
}
func (m *FrameSelectionOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrameSelectionOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrameSelectionOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrameSelectionOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrameSelectionOptions.Merge(m, src)
}
func (m *FrameSelectionOptions) XXX_Size() int {
	return m.Size()
}
func (m *FrameSelectionOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FrameSelectionOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FrameSelectionOptions proto.InternalMessageInfo

const Default_FrameSelectionOptions_ChunkSize int32 = 100

func (m *FrameSelectionOptions) GetCriterion() []*FrameSelectionCriterion {
	if m != nil {
		return m.Criterion
	}
	return nil
}

func (m *FrameSelectionOptions) GetChunkSize() int32 {
	if m != nil && m.ChunkSize != nil {
		return *m.ChunkSize
	}
	return Default_FrameSelectionOptions_ChunkSize
}

func init() {
	proto.RegisterType((*FrameSelectionTimestamp)(nil), "mediapipe.FrameSelectionTimestamp")
	proto.RegisterType((*FrameSelectionResult)(nil), "mediapipe.FrameSelectionResult")
	proto.RegisterType((*FrameSelectionCriterion)(nil), "mediapipe.FrameSelectionCriterion")
	proto.RegisterType((*FrameSelectionOptions)(nil), "mediapipe.FrameSelectionOptions")
}

func init() {
	proto.RegisterFile("mediapipe/util/tracking/frame_selection.proto", fileDescriptor_8161d2c294f1ab12)
}

var fileDescriptor_8161d2c294f1ab12 = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x3f, 0x6b, 0x1b, 0x3f,
	0x18, 0x3e, 0xd9, 0x31, 0xc4, 0x4a, 0x42, 0x7e, 0x11, 0xf9, 0x35, 0x26, 0x83, 0xea, 0xde, 0x50,
	0x52, 0x8a, 0xff, 0x24, 0xa1, 0x8b, 0xc9, 0x10, 0x12, 0x6a, 0x28, 0xb4, 0x04, 0x94, 0x4c, 0x85,
	0x72, 0x28, 0x77, 0xf2, 0x59, 0xe4, 0x64, 0x1d, 0x92, 0xae, 0x71, 0x03, 0x85, 0x7e, 0x84, 0x6e,
	0xdd, 0x3a, 0x77, 0xef, 0x97, 0xc8, 0x98, 0x31, 0x53, 0x69, 0x2e, 0x4b, 0xc7, 0x7c, 0x84, 0x62,
	0x9d, 0xef, 0x6c, 0xa7, 0xb8, 0xed, 0xd0, 0xe5, 0x38, 0xbd, 0xef, 0xf3, 0x3c, 0xef, 0xa3, 0x47,
	0x12, 0x6c, 0x08, 0x16, 0x70, 0x1a, 0xf3, 0x98, 0xb5, 0x12, 0xc3, 0xa3, 0x96, 0x51, 0xd4, 0x3f,
	0xe3, 0x83, 0xb0, 0xd5, 0x53, 0x54, 0x30, 0x4f, 0xb3, 0x88, 0xf9, 0x86, 0xcb, 0x41, 0x33, 0x56,
	0xd2, 0x48, 0x54, 0x2d, 0xe0, 0x9b, 0x4f, 0xe7, 0x31, 0x7d, 0x2a, 0x98, 0xa2, 0x9e, 0x90, 0x13,
	0xde, 0xe6, 0xfe, 0x5f, 0x8e, 0xf1, 0xb4, 0x8c, 0x12, 0xfb, 0xc3, 0xde, 0xd2, 0x28, 0xa1, 0x46,
	0xaa, 0xb1, 0xc2, 0x93, 0x79, 0x0a, 0x8a, 0x85, 0x23, 0x7c, 0x2f, 0x92, 0xe7, 0x19, 0xd4, 0xfd,
	0x0c, 0xe0, 0x46, 0x77, 0xa4, 0x7b, 0x9c, 0xcb, 0x9e, 0x70, 0xc1, 0xb4, 0xa1, 0x22, 0x46, 0x2e,
	0xac, 0x9a, 0x7c, 0x51, 0x03, 0x75, 0xb0, 0x55, 0x3e, 0x58, 0xb8, 0xfc, 0xf6, 0xd0, 0x21, 0x93,
	0x32, 0x7a, 0x04, 0xab, 0x99, 0x2d, 0x1e, 0x0c, 0x6b, 0xa5, 0x3a, 0xd8, 0xaa, 0x8c, 0x31, 0x8b,
	0xb6, 0xfc, 0x22, 0x18, 0xa2, 0x3d, 0x58, 0x8b, 0x95, 0xf4, 0x99, 0xd6, 0x2c, 0xf0, 0x7a, 0x4a,
	0x0a, 0x6f, 0xa2, 0x5a, 0x1e, 0xa9, 0x76, 0x4a, 0x8d, 0x6d, 0xf2, 0xa0, 0xc0, 0x74, 0x95, 0x14,
	0x85, 0x09, 0xf7, 0x53, 0x09, 0xae, 0xcf, 0x1a, 0x24, 0x4c, 0x27, 0x91, 0xf9, 0x77, 0xee, 0x56,
	0x66, 0x0e, 0xc1, 0x5a, 0x5a, 0xda, 0xd9, 0x68, 0x16, 0x19, 0x36, 0x0f, 0x6d, 0xff, 0x95, 0x6d,
	0x93, 0x65, 0x7f, 0x6a, 0x85, 0xf6, 0xe0, 0x62, 0x8f, 0x51, 0x93, 0x28, 0xa6, 0x6b, 0x0b, 0x96,
	0x58, 0x9f, 0x22, 0x12, 0x1b, 0x77, 0x37, 0x92, 0xe7, 0xdd, 0x0c, 0xf4, 0x92, 0x6b, 0x43, 0x0a,
	0xc6, 0x6f, 0x93, 0xa9, 0xfc, 0x31, 0x99, 0xaf, 0xa5, 0xfb, 0x47, 0x77, 0xa8, 0xb8, 0x61, 0x6a,
	0xe4, 0xeb, 0x31, 0x5c, 0xd1, 0x54, 0xc4, 0x11, 0x1f, 0x84, 0x9e, 0xa2, 0x86, 0xd9, 0x80, 0x2a,
	0x1d, 0xd0, 0x26, 0xcb, 0x79, 0x9d, 0x50, 0xc3, 0x50, 0x03, 0xfe, 0x77, 0x4a, 0x07, 0xc1, 0x39,
	0x0f, 0x4c, 0xdf, 0xb3, 0x99, 0x68, 0x9b, 0x53, 0xa9, 0x53, 0x7a, 0xd6, 0x26, 0xab, 0x45, 0xcf,
	0xce, 0xd1, 0x68, 0x17, 0xae, 0x6b, 0x46, 0x95, 0xdf, 0xf7, 0x14, 0x0d, 0x78, 0xa2, 0x73, 0x4a,
	0x39, 0x53, 0xdf, 0x26, 0x28, 0x6b, 0x13, 0xdb, 0x1d, 0x93, 0xde, 0x40, 0xf4, 0xeb, 0x4d, 0x1d,
	0xa7, 0xd5, 0x9c, 0x4a, 0x6b, 0x76, 0x2f, 0xc7, 0x63, 0xca, 0xf3, 0x9c, 0x71, 0xf2, 0x2e, 0x66,
	0x64, 0x4d, 0xdf, 0x2f, 0xa3, 0x06, 0x5c, 0x13, 0x74, 0xe8, 0xc9, 0xc4, 0xc4, 0x89, 0xc9, 0x0d,
	0x55, 0xf2, 0xed, 0xae, 0x0a, 0x3a, 0x3c, 0xb2, 0xad, 0xcc, 0x8d, 0xfb, 0x1e, 0xfe, 0x3f, 0x3b,
	0xe8, 0x28, 0x1e, 0x7d, 0x35, 0xda, 0x87, 0x55, 0x3f, 0xcf, 0xaf, 0x06, 0xea, 0xe5, 0xad, 0xa5,
	0x1d, 0x77, 0xae, 0xbb, 0x22, 0x69, 0x32, 0x21, 0x21, 0x17, 0x42, 0xbf, 0x9f, 0x0c, 0xce, 0x3c,
	0xcd, 0x2f, 0x58, 0x76, 0xdd, 0x3a, 0xe5, 0xed, 0x76, 0x9b, 0x54, 0x6d, 0xf9, 0x98, 0x5f, 0xb0,
	0x03, 0x7e, 0x75, 0x83, 0x9d, 0xeb, 0x1b, 0xec, 0xdc, 0xdd, 0x60, 0xf0, 0x21, 0xc5, 0xe0, 0x4b,
	0x8a, 0xc1, 0x65, 0x8a, 0xc1, 0x55, 0x8a, 0xc1, 0xf7, 0x14, 0x83, 0x1f, 0x29, 0x76, 0xee, 0x52,
	0x0c, 0x3e, 0xde, 0x62, 0xe7, 0xea, 0x16, 0x3b, 0xd7, 0xb7, 0xd8, 0x79, 0xbd, 0x1b, 0x72, 0xd3,
	0x4f, 0x4e, 0x9b, 0xbe, 0x14, 0xad, 0x50, 0xca, 0x30, 0x62, 0xad, 0xc9, 0x13, 0x9f, 0xf3, 0xd8,
	0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0xca, 0x6e, 0x86, 0x1d, 0xaf, 0x04, 0x00, 0x00,
}

func (this *FrameSelectionTimestamp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FrameSelectionTimestamp)
	if !ok {
		that2, ok := that.(FrameSelectionTimestamp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.FrameIdx != that1.FrameIdx {
		return false
	}
	if this.ProcessedFromTimestamp != nil && that1.ProcessedFromTimestamp != nil {
		if *this.ProcessedFromTimestamp != *that1.ProcessedFromTimestamp {
			return false
		}
	} else if this.ProcessedFromTimestamp != nil {
		return false
	} else if that1.ProcessedFromTimestamp != nil {
		return false
	}
	return true
}
func (this *FrameSelectionResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FrameSelectionResult)
	if !ok {
		that2, ok := that.(FrameSelectionResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.FrameIdx != that1.FrameIdx {
		return false
	}
	if !this.CameraMotion.Equal(that1.CameraMotion) {
		return false
	}
	if !this.Features.Equal(that1.Features) {
		return false
	}
	if this.ProcessedFromTimestamp != nil && that1.ProcessedFromTimestamp != nil {
		if *this.ProcessedFromTimestamp != *that1.ProcessedFromTimestamp {
			return false
		}
	} else if this.ProcessedFromTimestamp != nil {
		return false
	} else if that1.ProcessedFromTimestamp != nil {
		return false
	}
	return true
}
func (this *FrameSelectionCriterion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FrameSelectionCriterion)
	if !ok {
		that2, ok := that.(FrameSelectionCriterion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SamplingRate != nil && that1.SamplingRate != nil {
		if *this.SamplingRate != *that1.SamplingRate {
			return false
		}
	} else if this.SamplingRate != nil {
		return false
	} else if that1.SamplingRate != nil {
		return false
	}
	if this.BandwidthFrames != nil && that1.BandwidthFrames != nil {
		if *this.BandwidthFrames != *that1.BandwidthFrames {
			return false
		}
	} else if this.BandwidthFrames != nil {
		return false
	} else if that1.BandwidthFrames != nil {
		return false
	}
	if this.SearchRadiusFrames != nil && that1.SearchRadiusFrames != nil {
		if *this.SearchRadiusFrames != *that1.SearchRadiusFrames {
			return false
		}
	} else if this.SearchRadiusFrames != nil {
		return false
	} else if that1.SearchRadiusFrames != nil {
		return false
	}
	if !this.SolutionEvaluator.Equal(that1.SolutionEvaluator) {
		return false
	}
	if this.MaxOutputFrames != nil && that1.MaxOutputFrames != nil {
		if *this.MaxOutputFrames != *that1.MaxOutputFrames {
			return false
		}
	} else if this.MaxOutputFrames != nil {
		return false
	} else if that1.MaxOutputFrames != nil {
		return false
	}
	return true
}
func (this *FrameSelectionOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FrameSelectionOptions)
	if !ok {
		that2, ok := that.(FrameSelectionOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Criterion) != len(that1.Criterion) {
		return false
	}
	for i := range this.Criterion {
		if !this.Criterion[i].Equal(that1.Criterion[i]) {
			return false
		}
	}
	if this.ChunkSize != nil && that1.ChunkSize != nil {
		if *this.ChunkSize != *that1.ChunkSize {
			return false
		}
	} else if this.ChunkSize != nil {
		return false
	} else if that1.ChunkSize != nil {
		return false
	}
	return true
}
func (this *FrameSelectionTimestamp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tracking.FrameSelectionTimestamp{")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "FrameIdx: "+fmt.Sprintf("%#v", this.FrameIdx)+",\n")
	if this.ProcessedFromTimestamp != nil {
		s = append(s, "ProcessedFromTimestamp: "+valueToGoStringFrameSelection(this.ProcessedFromTimestamp, "int64")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FrameSelectionResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&tracking.FrameSelectionResult{")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "FrameIdx: "+fmt.Sprintf("%#v", this.FrameIdx)+",\n")
	if this.CameraMotion != nil {
		s = append(s, "CameraMotion: "+fmt.Sprintf("%#v", this.CameraMotion)+",\n")
	}
	if this.Features != nil {
		s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	}
	if this.ProcessedFromTimestamp != nil {
		s = append(s, "ProcessedFromTimestamp: "+valueToGoStringFrameSelection(this.ProcessedFromTimestamp, "int64")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FrameSelectionCriterion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&tracking.FrameSelectionCriterion{")
	if this.SamplingRate != nil {
		s = append(s, "SamplingRate: "+valueToGoStringFrameSelection(this.SamplingRate, "int32")+",\n")
	}
	if this.BandwidthFrames != nil {
		s = append(s, "BandwidthFrames: "+valueToGoStringFrameSelection(this.BandwidthFrames, "float32")+",\n")
	}
	if this.SearchRadiusFrames != nil {
		s = append(s, "SearchRadiusFrames: "+valueToGoStringFrameSelection(this.SearchRadiusFrames, "int32")+",\n")
	}
	if this.SolutionEvaluator != nil {
		s = append(s, "SolutionEvaluator: "+fmt.Sprintf("%#v", this.SolutionEvaluator)+",\n")
	}
	if this.MaxOutputFrames != nil {
		s = append(s, "MaxOutputFrames: "+valueToGoStringFrameSelection(this.MaxOutputFrames, "int32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FrameSelectionOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tracking.FrameSelectionOptions{")
	if this.Criterion != nil {
		s = append(s, "Criterion: "+fmt.Sprintf("%#v", this.Criterion)+",\n")
	}
	if this.ChunkSize != nil {
		s = append(s, "ChunkSize: "+valueToGoStringFrameSelection(this.ChunkSize, "int32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFrameSelection(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FrameSelectionTimestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameSelectionTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrameSelectionTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProcessedFromTimestamp != nil {
		i = encodeVarintFrameSelection(dAtA, i, uint64(*m.ProcessedFromTimestamp))
		i--
		dAtA[i] = 0x18
	}
	i = encodeVarintFrameSelection(dAtA, i, uint64(m.FrameIdx))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFrameSelection(dAtA, i, uint64(m.Timestamp))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *FrameSelectionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameSelectionResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrameSelectionResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProcessedFromTimestamp != nil {
		i = encodeVarintFrameSelection(dAtA, i, uint64(*m.ProcessedFromTimestamp))
		i--
		dAtA[i] = 0x28
	}
	if m.Features != nil {
		{
			size, err := m.Features.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFrameSelection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CameraMotion != nil {
		{
			size, err := m.CameraMotion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFrameSelection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintFrameSelection(dAtA, i, uint64(m.FrameIdx))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFrameSelection(dAtA, i, uint64(m.Timestamp))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *FrameSelectionCriterion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameSelectionCriterion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrameSelectionCriterion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxOutputFrames != nil {
		i = encodeVarintFrameSelection(dAtA, i, uint64(*m.MaxOutputFrames))
		i--
		dAtA[i] = 0x28
	}
	if m.SolutionEvaluator != nil {
		{
			size, err := m.SolutionEvaluator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFrameSelection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SearchRadiusFrames != nil {
		i = encodeVarintFrameSelection(dAtA, i, uint64(*m.SearchRadiusFrames))
		i--
		dAtA[i] = 0x18
	}
	if m.BandwidthFrames != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.BandwidthFrames))))
		i--
		dAtA[i] = 0x15
	}
	if m.SamplingRate != nil {
		i = encodeVarintFrameSelection(dAtA, i, uint64(*m.SamplingRate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FrameSelectionOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameSelectionOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrameSelectionOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChunkSize != nil {
		i = encodeVarintFrameSelection(dAtA, i, uint64(*m.ChunkSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Criterion) > 0 {
		for iNdEx := len(m.Criterion) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Criterion[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFrameSelection(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintFrameSelection(dAtA []byte, offset int, v uint64) int {
	offset -= sovFrameSelection(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FrameSelectionTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFrameSelection(uint64(m.Timestamp))
	n += 1 + sovFrameSelection(uint64(m.FrameIdx))
	if m.ProcessedFromTimestamp != nil {
		n += 1 + sovFrameSelection(uint64(*m.ProcessedFromTimestamp))
	}
	return n
}

func (m *FrameSelectionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFrameSelection(uint64(m.Timestamp))
	n += 1 + sovFrameSelection(uint64(m.FrameIdx))
	if m.CameraMotion != nil {
		l = m.CameraMotion.Size()
		n += 1 + l + sovFrameSelection(uint64(l))
	}
	if m.Features != nil {
		l = m.Features.Size()
		n += 1 + l + sovFrameSelection(uint64(l))
	}
	if m.ProcessedFromTimestamp != nil {
		n += 1 + sovFrameSelection(uint64(*m.ProcessedFromTimestamp))
	}
	return n
}

func (m *FrameSelectionCriterion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SamplingRate != nil {
		n += 1 + sovFrameSelection(uint64(*m.SamplingRate))
	}
	if m.BandwidthFrames != nil {
		n += 5
	}
	if m.SearchRadiusFrames != nil {
		n += 1 + sovFrameSelection(uint64(*m.SearchRadiusFrames))
	}
	if m.SolutionEvaluator != nil {
		l = m.SolutionEvaluator.Size()
		n += 1 + l + sovFrameSelection(uint64(l))
	}
	if m.MaxOutputFrames != nil {
		n += 1 + sovFrameSelection(uint64(*m.MaxOutputFrames))
	}
	return n
}

func (m *FrameSelectionOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Criterion) > 0 {
		for _, e := range m.Criterion {
			l = e.Size()
			n += 1 + l + sovFrameSelection(uint64(l))
		}
	}
	if m.ChunkSize != nil {
		n += 1 + sovFrameSelection(uint64(*m.ChunkSize))
	}
	return n
}

func sovFrameSelection(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFrameSelection(x uint64) (n int) {
	return sovFrameSelection(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FrameSelectionTimestamp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrameSelectionTimestamp{`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`FrameIdx:` + fmt.Sprintf("%v", this.FrameIdx) + `,`,
		`ProcessedFromTimestamp:` + valueToStringFrameSelection(this.ProcessedFromTimestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrameSelectionResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrameSelectionResult{`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`FrameIdx:` + fmt.Sprintf("%v", this.FrameIdx) + `,`,
		`CameraMotion:` + strings.Replace(fmt.Sprintf("%v", this.CameraMotion), "CameraMotion", "CameraMotion", 1) + `,`,
		`Features:` + strings.Replace(fmt.Sprintf("%v", this.Features), "RegionFlowFeatureList", "RegionFlowFeatureList", 1) + `,`,
		`ProcessedFromTimestamp:` + valueToStringFrameSelection(this.ProcessedFromTimestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrameSelectionCriterion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrameSelectionCriterion{`,
		`SamplingRate:` + valueToStringFrameSelection(this.SamplingRate) + `,`,
		`BandwidthFrames:` + valueToStringFrameSelection(this.BandwidthFrames) + `,`,
		`SearchRadiusFrames:` + valueToStringFrameSelection(this.SearchRadiusFrames) + `,`,
		`SolutionEvaluator:` + strings.Replace(fmt.Sprintf("%v", this.SolutionEvaluator), "FrameSelectionSolutionEvaluatorType", "FrameSelectionSolutionEvaluatorType", 1) + `,`,
		`MaxOutputFrames:` + valueToStringFrameSelection(this.MaxOutputFrames) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrameSelectionOptions) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCriterion := "[]*FrameSelectionCriterion{"
	for _, f := range this.Criterion {
		repeatedStringForCriterion += strings.Replace(f.String(), "FrameSelectionCriterion", "FrameSelectionCriterion", 1) + ","
	}
	repeatedStringForCriterion += "}"
	s := strings.Join([]string{`&FrameSelectionOptions{`,
		`Criterion:` + repeatedStringForCriterion + `,`,
		`ChunkSize:` + valueToStringFrameSelection(this.ChunkSize) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFrameSelection(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FrameSelectionTimestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrameSelection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameSelectionTimestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameSelectionTimestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrameSelection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameIdx", wireType)
			}
			m.FrameIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrameSelection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessedFromTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrameSelection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProcessedFromTimestamp = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFrameSelection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrameSelection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameSelectionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrameSelection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameSelectionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameSelectionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrameSelection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameIdx", wireType)
			}
			m.FrameIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrameSelection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CameraMotion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrameSelection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFrameSelection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFrameSelection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CameraMotion == nil {
				m.CameraMotion = &CameraMotion{}
			}
			if err := m.CameraMotion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrameSelection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFrameSelection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFrameSelection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Features == nil {
				m.Features = &RegionFlowFeatureList{}
			}
			if err := m.Features.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessedFromTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrameSelection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProcessedFromTimestamp = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFrameSelection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrameSelection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameSelectionCriterion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrameSelection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameSelectionCriterion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameSelectionCriterion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SamplingRate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrameSelection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SamplingRate = &v
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandwidthFrames", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.BandwidthFrames = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchRadiusFrames", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrameSelection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SearchRadiusFrames = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SolutionEvaluator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrameSelection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFrameSelection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFrameSelection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SolutionEvaluator == nil {
				m.SolutionEvaluator = &FrameSelectionSolutionEvaluatorType{}
			}
			if err := m.SolutionEvaluator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOutputFrames", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrameSelection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxOutputFrames = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFrameSelection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrameSelection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameSelectionOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrameSelection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameSelectionOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameSelectionOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Criterion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrameSelection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFrameSelection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFrameSelection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Criterion = append(m.Criterion, &FrameSelectionCriterion{})
			if err := m.Criterion[len(m.Criterion)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrameSelection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChunkSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFrameSelection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrameSelection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFrameSelection(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFrameSelection
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrameSelection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrameSelection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFrameSelection
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFrameSelection
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFrameSelection
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFrameSelection        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFrameSelection          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFrameSelection = fmt.Errorf("proto: unexpected end of group")
)
