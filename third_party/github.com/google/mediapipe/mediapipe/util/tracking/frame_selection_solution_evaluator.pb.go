// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/util/tracking/frame_selection_solution_evaluator.proto

package tracking

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	sort "sort"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FrameSelectionSolutionEvaluatorOptions struct {
	proto.XXX_InternalExtensions `json:"-"`
}

func (m *FrameSelectionSolutionEvaluatorOptions) Reset() {
	*m = FrameSelectionSolutionEvaluatorOptions{}
}
func (*FrameSelectionSolutionEvaluatorOptions) ProtoMessage() {}
func (*FrameSelectionSolutionEvaluatorOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_04f37417a17db9c5, []int{0}
}

var extRange_FrameSelectionSolutionEvaluatorOptions = []proto.ExtensionRange{
	{Start: 20000, End: 536870911},
}

func (*FrameSelectionSolutionEvaluatorOptions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_FrameSelectionSolutionEvaluatorOptions
}

func (m *FrameSelectionSolutionEvaluatorOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrameSelectionSolutionEvaluatorOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrameSelectionSolutionEvaluatorOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrameSelectionSolutionEvaluatorOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrameSelectionSolutionEvaluatorOptions.Merge(m, src)
}
func (m *FrameSelectionSolutionEvaluatorOptions) XXX_Size() int {
	return m.Size()
}
func (m *FrameSelectionSolutionEvaluatorOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FrameSelectionSolutionEvaluatorOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FrameSelectionSolutionEvaluatorOptions proto.InternalMessageInfo

type FrameSelectionSolutionEvaluatorType struct {
	ClassName *string                                 `protobuf:"bytes,1,opt,name=class_name,json=className,def=FrameSelectionSolutionEvaluator" json:"class_name,omitempty"`
	Options   *FrameSelectionSolutionEvaluatorOptions `protobuf:"bytes,2,opt,name=options" json:"options,omitempty"`
}

func (m *FrameSelectionSolutionEvaluatorType) Reset()      { *m = FrameSelectionSolutionEvaluatorType{} }
func (*FrameSelectionSolutionEvaluatorType) ProtoMessage() {}
func (*FrameSelectionSolutionEvaluatorType) Descriptor() ([]byte, []int) {
	return fileDescriptor_04f37417a17db9c5, []int{1}
}
func (m *FrameSelectionSolutionEvaluatorType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrameSelectionSolutionEvaluatorType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrameSelectionSolutionEvaluatorType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrameSelectionSolutionEvaluatorType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrameSelectionSolutionEvaluatorType.Merge(m, src)
}
func (m *FrameSelectionSolutionEvaluatorType) XXX_Size() int {
	return m.Size()
}
func (m *FrameSelectionSolutionEvaluatorType) XXX_DiscardUnknown() {
	xxx_messageInfo_FrameSelectionSolutionEvaluatorType.DiscardUnknown(m)
}

var xxx_messageInfo_FrameSelectionSolutionEvaluatorType proto.InternalMessageInfo

const Default_FrameSelectionSolutionEvaluatorType_ClassName string = "FrameSelectionSolutionEvaluator"

func (m *FrameSelectionSolutionEvaluatorType) GetClassName() string {
	if m != nil && m.ClassName != nil {
		return *m.ClassName
	}
	return Default_FrameSelectionSolutionEvaluatorType_ClassName
}

func (m *FrameSelectionSolutionEvaluatorType) GetOptions() *FrameSelectionSolutionEvaluatorOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func init() {
	proto.RegisterType((*FrameSelectionSolutionEvaluatorOptions)(nil), "mediapipe.FrameSelectionSolutionEvaluatorOptions")
	proto.RegisterType((*FrameSelectionSolutionEvaluatorType)(nil), "mediapipe.FrameSelectionSolutionEvaluatorType")
}

func init() {
	proto.RegisterFile("mediapipe/util/tracking/frame_selection_solution_evaluator.proto", fileDescriptor_04f37417a17db9c5)
}

var fileDescriptor_04f37417a17db9c5 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0xc8, 0x4d, 0x4d, 0xc9,
	0x4c, 0x2c, 0xc8, 0x2c, 0x48, 0xd5, 0x2f, 0x2d, 0xc9, 0xcc, 0xd1, 0x2f, 0x29, 0x4a, 0x4c, 0xce,
	0xce, 0xcc, 0x4b, 0xd7, 0x4f, 0x2b, 0x4a, 0xcc, 0x4d, 0x8d, 0x2f, 0x4e, 0xcd, 0x49, 0x4d, 0x2e,
	0xc9, 0xcc, 0xcf, 0x8b, 0x2f, 0xce, 0xcf, 0x29, 0x05, 0x33, 0x52, 0xcb, 0x12, 0x73, 0x4a, 0x13,
	0x4b, 0xf2, 0x8b, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38, 0xe1, 0x26, 0x28, 0x99, 0x70,
	0xa9, 0xb9, 0x81, 0xb4, 0x05, 0xc3, 0x74, 0x05, 0x43, 0x35, 0xb9, 0xc2, 0xf4, 0xf8, 0x17, 0x80,
	0xb8, 0xc5, 0x5a, 0x5c, 0x1c, 0x0b, 0xe6, 0x30, 0x0a, 0x34, 0x34, 0x34, 0x34, 0x30, 0x29, 0x6d,
	0x62, 0xe4, 0x52, 0x26, 0xa0, 0x2d, 0xa4, 0xb2, 0x20, 0x55, 0xc8, 0x8e, 0x8b, 0x2b, 0x39, 0x27,
	0xb1, 0xb8, 0x38, 0x3e, 0x2f, 0x31, 0x37, 0x55, 0x82, 0x51, 0x81, 0x51, 0x83, 0xd3, 0x4a, 0x9e,
	0x80, 0xc6, 0x20, 0x4e, 0xb0, 0x16, 0xbf, 0xc4, 0xdc, 0x54, 0x21, 0x6f, 0x2e, 0xf6, 0x7c, 0x88,
	0xf5, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0x86, 0x7a, 0x70, 0xa7, 0xeb, 0x11, 0xe7, 0xee,
	0x20, 0x98, 0x09, 0x4e, 0x99, 0x17, 0x1e, 0xca, 0x31, 0xdc, 0x78, 0x28, 0xc7, 0xf0, 0xe1, 0xa1,
	0x1c, 0x63, 0xc3, 0x23, 0x39, 0xc6, 0x15, 0x8f, 0xe4, 0x18, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0,
	0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x17, 0x8f, 0xe4, 0x18, 0x3e, 0x3c, 0x92, 0x63, 0x9c,
	0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x8c, 0xd3, 0x33,
	0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5,
	0x11, 0xe1, 0x8f, 0x23, 0x26, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xab, 0x34, 0x6f, 0xa3,
	0x01, 0x00, 0x00,
}

func (this *FrameSelectionSolutionEvaluatorOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FrameSelectionSolutionEvaluatorOptions)
	if !ok {
		that2, ok := that.(FrameSelectionSolutionEvaluatorOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	thismap := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(this)
	thatmap := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(that1)
	for k, v := range thismap {
		if v2, ok := thatmap[k]; ok {
			if !v.Equal(&v2) {
				return false
			}
		} else {
			return false
		}
	}
	for k, _ := range thatmap {
		if _, ok := thismap[k]; !ok {
			return false
		}
	}
	return true
}
func (this *FrameSelectionSolutionEvaluatorType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FrameSelectionSolutionEvaluatorType)
	if !ok {
		that2, ok := that.(FrameSelectionSolutionEvaluatorType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassName != nil && that1.ClassName != nil {
		if *this.ClassName != *that1.ClassName {
			return false
		}
	} else if this.ClassName != nil {
		return false
	} else if that1.ClassName != nil {
		return false
	}
	if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *FrameSelectionSolutionEvaluatorOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tracking.FrameSelectionSolutionEvaluatorOptions{")
	s = append(s, "XXX_InternalExtensions: "+extensionToGoStringFrameSelectionSolutionEvaluator(this)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FrameSelectionSolutionEvaluatorType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tracking.FrameSelectionSolutionEvaluatorType{")
	if this.ClassName != nil {
		s = append(s, "ClassName: "+valueToGoStringFrameSelectionSolutionEvaluator(this.ClassName, "string")+",\n")
	}
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFrameSelectionSolutionEvaluator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringFrameSelectionSolutionEvaluator(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *FrameSelectionSolutionEvaluatorOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameSelectionSolutionEvaluatorOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrameSelectionSolutionEvaluatorOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if n, err := github_com_gogo_protobuf_proto.EncodeInternalExtensionBackwards(m, dAtA[:i]); err != nil {
		return 0, err
	} else {
		i -= n
	}
	return len(dAtA) - i, nil
}

func (m *FrameSelectionSolutionEvaluatorType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameSelectionSolutionEvaluatorType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrameSelectionSolutionEvaluatorType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFrameSelectionSolutionEvaluator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ClassName != nil {
		i -= len(*m.ClassName)
		copy(dAtA[i:], *m.ClassName)
		i = encodeVarintFrameSelectionSolutionEvaluator(dAtA, i, uint64(len(*m.ClassName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFrameSelectionSolutionEvaluator(dAtA []byte, offset int, v uint64) int {
	offset -= sovFrameSelectionSolutionEvaluator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FrameSelectionSolutionEvaluatorOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += github_com_gogo_protobuf_proto.SizeOfInternalExtension(m)
	return n
}

func (m *FrameSelectionSolutionEvaluatorType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassName != nil {
		l = len(*m.ClassName)
		n += 1 + l + sovFrameSelectionSolutionEvaluator(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovFrameSelectionSolutionEvaluator(uint64(l))
	}
	return n
}

func sovFrameSelectionSolutionEvaluator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFrameSelectionSolutionEvaluator(x uint64) (n int) {
	return sovFrameSelectionSolutionEvaluator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FrameSelectionSolutionEvaluatorOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrameSelectionSolutionEvaluatorOptions{`,
		`XXX_InternalExtensions:` + github_com_gogo_protobuf_proto.StringFromInternalExtension(this) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrameSelectionSolutionEvaluatorType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrameSelectionSolutionEvaluatorType{`,
		`ClassName:` + valueToStringFrameSelectionSolutionEvaluator(this.ClassName) + `,`,
		`Options:` + strings.Replace(this.Options.String(), "FrameSelectionSolutionEvaluatorOptions", "FrameSelectionSolutionEvaluatorOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFrameSelectionSolutionEvaluator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FrameSelectionSolutionEvaluatorOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrameSelectionSolutionEvaluator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameSelectionSolutionEvaluatorOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameSelectionSolutionEvaluatorOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			if (fieldNum >= 20000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipFrameSelectionSolutionEvaluator(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthFrameSelectionSolutionEvaluator
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				github_com_gogo_protobuf_proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipFrameSelectionSolutionEvaluator(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthFrameSelectionSolutionEvaluator
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameSelectionSolutionEvaluatorType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrameSelectionSolutionEvaluator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameSelectionSolutionEvaluatorType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameSelectionSolutionEvaluatorType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrameSelectionSolutionEvaluator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrameSelectionSolutionEvaluator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrameSelectionSolutionEvaluator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClassName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrameSelectionSolutionEvaluator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFrameSelectionSolutionEvaluator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFrameSelectionSolutionEvaluator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &FrameSelectionSolutionEvaluatorOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrameSelectionSolutionEvaluator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrameSelectionSolutionEvaluator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFrameSelectionSolutionEvaluator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFrameSelectionSolutionEvaluator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrameSelectionSolutionEvaluator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrameSelectionSolutionEvaluator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFrameSelectionSolutionEvaluator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFrameSelectionSolutionEvaluator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFrameSelectionSolutionEvaluator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFrameSelectionSolutionEvaluator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFrameSelectionSolutionEvaluator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFrameSelectionSolutionEvaluator = fmt.Errorf("proto: unexpected end of group")
)
