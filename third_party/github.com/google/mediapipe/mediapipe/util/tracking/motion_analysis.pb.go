// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/util/tracking/motion_analysis.proto

package tracking

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MotionAnalysisOptions_AnalysisPolicy int32

const (
	ANALYSIS_POLICY_LEGACY        MotionAnalysisOptions_AnalysisPolicy = 0
	ANALYSIS_POLICY_VIDEO         MotionAnalysisOptions_AnalysisPolicy = 1
	ANALYSIS_POLICY_VIDEO_MOBILE  MotionAnalysisOptions_AnalysisPolicy = 2
	ANALYSIS_POLICY_CAMERA_MOBILE MotionAnalysisOptions_AnalysisPolicy = 3
	ANALYSIS_POLICY_HYPERLAPSE    MotionAnalysisOptions_AnalysisPolicy = 4
)

var MotionAnalysisOptions_AnalysisPolicy_name = map[int32]string{
	0: "ANALYSIS_POLICY_LEGACY",
	1: "ANALYSIS_POLICY_VIDEO",
	2: "ANALYSIS_POLICY_VIDEO_MOBILE",
	3: "ANALYSIS_POLICY_CAMERA_MOBILE",
	4: "ANALYSIS_POLICY_HYPERLAPSE",
}

var MotionAnalysisOptions_AnalysisPolicy_value = map[string]int32{
	"ANALYSIS_POLICY_LEGACY":        0,
	"ANALYSIS_POLICY_VIDEO":         1,
	"ANALYSIS_POLICY_VIDEO_MOBILE":  2,
	"ANALYSIS_POLICY_CAMERA_MOBILE": 3,
	"ANALYSIS_POLICY_HYPERLAPSE":    4,
}

func (x MotionAnalysisOptions_AnalysisPolicy) Enum() *MotionAnalysisOptions_AnalysisPolicy {
	p := new(MotionAnalysisOptions_AnalysisPolicy)
	*p = x
	return p
}

func (x MotionAnalysisOptions_AnalysisPolicy) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(MotionAnalysisOptions_AnalysisPolicy_name, int32(x))
}

func (x *MotionAnalysisOptions_AnalysisPolicy) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MotionAnalysisOptions_AnalysisPolicy_value, data, "MotionAnalysisOptions_AnalysisPolicy")
	if err != nil {
		return err
	}
	*x = MotionAnalysisOptions_AnalysisPolicy(value)
	return nil
}

func (MotionAnalysisOptions_AnalysisPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c59b1aa9ccd1c513, []int{0, 0}
}

type MotionAnalysisOptions struct {
	AnalysisPolicy                   *MotionAnalysisOptions_AnalysisPolicy       `protobuf:"varint,14,opt,name=analysis_policy,json=analysisPolicy,enum=mediapipe.MotionAnalysisOptions_AnalysisPolicy,def=0" json:"analysis_policy,omitempty"`
	FlowOptions                      *RegionFlowComputationOptions               `protobuf:"bytes,1,opt,name=flow_options,json=flowOptions" json:"flow_options,omitempty"`
	MotionOptions                    *MotionEstimationOptions                    `protobuf:"bytes,2,opt,name=motion_options,json=motionOptions" json:"motion_options,omitempty"`
	SaliencyOptions                  *MotionSaliencyOptions                      `protobuf:"bytes,3,opt,name=saliency_options,json=saliencyOptions" json:"saliency_options,omitempty"`
	EstimationClipSize               *int32                                      `protobuf:"varint,4,opt,name=estimation_clip_size,json=estimationClipSize,def=16" json:"estimation_clip_size,omitempty"`
	SubtractCameraMotionFromFeatures *bool                                       `protobuf:"varint,5,opt,name=subtract_camera_motion_from_features,json=subtractCameraMotionFromFeatures,def=0" json:"subtract_camera_motion_from_features,omitempty"`
	TrackIndex                       *int32                                      `protobuf:"varint,6,opt,name=track_index,json=trackIndex,def=0" json:"track_index,omitempty"`
	ComputeMotionSaliency            *bool                                       `protobuf:"varint,7,opt,name=compute_motion_saliency,json=computeMotionSaliency,def=0" json:"compute_motion_saliency,omitempty"`
	SelectSaliencyInliers            *bool                                       `protobuf:"varint,8,opt,name=select_saliency_inliers,json=selectSaliencyInliers,def=1" json:"select_saliency_inliers,omitempty"`
	FilterSaliency                   *bool                                       `protobuf:"varint,9,opt,name=filter_saliency,json=filterSaliency,def=1" json:"filter_saliency,omitempty"`
	PostIrlsSmoothing                *bool                                       `protobuf:"varint,10,opt,name=post_irls_smoothing,json=postIrlsSmoothing,def=0" json:"post_irls_smoothing,omitempty"`
	RejectionTransformThreshold      *float32                                    `protobuf:"fixed32,13,opt,name=rejection_transform_threshold,json=rejectionTransformThreshold,def=20" json:"rejection_transform_threshold,omitempty"`
	VisualizationOptions             *MotionAnalysisOptions_VisualizationOptions `protobuf:"bytes,11,opt,name=visualization_options,json=visualizationOptions" json:"visualization_options,omitempty"`
	ForegroundOptions                *MotionAnalysisOptions_ForegroundOptions    `protobuf:"bytes,12,opt,name=foreground_options,json=foregroundOptions" json:"foreground_options,omitempty"`
}

func (m *MotionAnalysisOptions) Reset()      { *m = MotionAnalysisOptions{} }
func (*MotionAnalysisOptions) ProtoMessage() {}
func (*MotionAnalysisOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c59b1aa9ccd1c513, []int{0}
}
func (m *MotionAnalysisOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MotionAnalysisOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MotionAnalysisOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MotionAnalysisOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MotionAnalysisOptions.Merge(m, src)
}
func (m *MotionAnalysisOptions) XXX_Size() int {
	return m.Size()
}
func (m *MotionAnalysisOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_MotionAnalysisOptions.DiscardUnknown(m)
}

var xxx_messageInfo_MotionAnalysisOptions proto.InternalMessageInfo

const Default_MotionAnalysisOptions_AnalysisPolicy MotionAnalysisOptions_AnalysisPolicy = ANALYSIS_POLICY_LEGACY
const Default_MotionAnalysisOptions_EstimationClipSize int32 = 16
const Default_MotionAnalysisOptions_SubtractCameraMotionFromFeatures bool = false
const Default_MotionAnalysisOptions_TrackIndex int32 = 0
const Default_MotionAnalysisOptions_ComputeMotionSaliency bool = false
const Default_MotionAnalysisOptions_SelectSaliencyInliers bool = true
const Default_MotionAnalysisOptions_FilterSaliency bool = true
const Default_MotionAnalysisOptions_PostIrlsSmoothing bool = false
const Default_MotionAnalysisOptions_RejectionTransformThreshold float32 = 20

func (m *MotionAnalysisOptions) GetAnalysisPolicy() MotionAnalysisOptions_AnalysisPolicy {
	if m != nil && m.AnalysisPolicy != nil {
		return *m.AnalysisPolicy
	}
	return Default_MotionAnalysisOptions_AnalysisPolicy
}

func (m *MotionAnalysisOptions) GetFlowOptions() *RegionFlowComputationOptions {
	if m != nil {
		return m.FlowOptions
	}
	return nil
}

func (m *MotionAnalysisOptions) GetMotionOptions() *MotionEstimationOptions {
	if m != nil {
		return m.MotionOptions
	}
	return nil
}

func (m *MotionAnalysisOptions) GetSaliencyOptions() *MotionSaliencyOptions {
	if m != nil {
		return m.SaliencyOptions
	}
	return nil
}

func (m *MotionAnalysisOptions) GetEstimationClipSize() int32 {
	if m != nil && m.EstimationClipSize != nil {
		return *m.EstimationClipSize
	}
	return Default_MotionAnalysisOptions_EstimationClipSize
}

func (m *MotionAnalysisOptions) GetSubtractCameraMotionFromFeatures() bool {
	if m != nil && m.SubtractCameraMotionFromFeatures != nil {
		return *m.SubtractCameraMotionFromFeatures
	}
	return Default_MotionAnalysisOptions_SubtractCameraMotionFromFeatures
}

func (m *MotionAnalysisOptions) GetTrackIndex() int32 {
	if m != nil && m.TrackIndex != nil {
		return *m.TrackIndex
	}
	return Default_MotionAnalysisOptions_TrackIndex
}

func (m *MotionAnalysisOptions) GetComputeMotionSaliency() bool {
	if m != nil && m.ComputeMotionSaliency != nil {
		return *m.ComputeMotionSaliency
	}
	return Default_MotionAnalysisOptions_ComputeMotionSaliency
}

func (m *MotionAnalysisOptions) GetSelectSaliencyInliers() bool {
	if m != nil && m.SelectSaliencyInliers != nil {
		return *m.SelectSaliencyInliers
	}
	return Default_MotionAnalysisOptions_SelectSaliencyInliers
}

func (m *MotionAnalysisOptions) GetFilterSaliency() bool {
	if m != nil && m.FilterSaliency != nil {
		return *m.FilterSaliency
	}
	return Default_MotionAnalysisOptions_FilterSaliency
}

func (m *MotionAnalysisOptions) GetPostIrlsSmoothing() bool {
	if m != nil && m.PostIrlsSmoothing != nil {
		return *m.PostIrlsSmoothing
	}
	return Default_MotionAnalysisOptions_PostIrlsSmoothing
}

func (m *MotionAnalysisOptions) GetRejectionTransformThreshold() float32 {
	if m != nil && m.RejectionTransformThreshold != nil {
		return *m.RejectionTransformThreshold
	}
	return Default_MotionAnalysisOptions_RejectionTransformThreshold
}

func (m *MotionAnalysisOptions) GetVisualizationOptions() *MotionAnalysisOptions_VisualizationOptions {
	if m != nil {
		return m.VisualizationOptions
	}
	return nil
}

func (m *MotionAnalysisOptions) GetForegroundOptions() *MotionAnalysisOptions_ForegroundOptions {
	if m != nil {
		return m.ForegroundOptions
	}
	return nil
}

type MotionAnalysisOptions_VisualizationOptions struct {
	VisualizeRegionFlowFeatures *bool  `protobuf:"varint,1,opt,name=visualize_region_flow_features,json=visualizeRegionFlowFeatures,def=1" json:"visualize_region_flow_features,omitempty"`
	VisualizeSalientPoints      *bool  `protobuf:"varint,2,opt,name=visualize_salient_points,json=visualizeSalientPoints,def=0" json:"visualize_salient_points,omitempty"`
	LineThickness               *int32 `protobuf:"varint,5,opt,name=line_thickness,json=lineThickness,def=4" json:"line_thickness,omitempty"`
	ForegroundJetColoring       *bool  `protobuf:"varint,3,opt,name=foreground_jet_coloring,json=foregroundJetColoring,def=0" json:"foreground_jet_coloring,omitempty"`
	VisualizeBlurAnalysisRegion *bool  `protobuf:"varint,4,opt,name=visualize_blur_analysis_region,json=visualizeBlurAnalysisRegion,def=0" json:"visualize_blur_analysis_region,omitempty"`
	VisualizeStats              *bool  `protobuf:"varint,6,opt,name=visualize_stats,json=visualizeStats,def=1" json:"visualize_stats,omitempty"`
	MinLongFeatureTrack         *int32 `protobuf:"varint,7,opt,name=min_long_feature_track,json=minLongFeatureTrack,def=0" json:"min_long_feature_track,omitempty"`
	MaxLongFeaturePoints        *int32 `protobuf:"varint,8,opt,name=max_long_feature_points,json=maxLongFeaturePoints,def=0" json:"max_long_feature_points,omitempty"`
}

func (m *MotionAnalysisOptions_VisualizationOptions) Reset() {
	*m = MotionAnalysisOptions_VisualizationOptions{}
}
func (*MotionAnalysisOptions_VisualizationOptions) ProtoMessage() {}
func (*MotionAnalysisOptions_VisualizationOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c59b1aa9ccd1c513, []int{0, 0}
}
func (m *MotionAnalysisOptions_VisualizationOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MotionAnalysisOptions_VisualizationOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MotionAnalysisOptions_VisualizationOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MotionAnalysisOptions_VisualizationOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MotionAnalysisOptions_VisualizationOptions.Merge(m, src)
}
func (m *MotionAnalysisOptions_VisualizationOptions) XXX_Size() int {
	return m.Size()
}
func (m *MotionAnalysisOptions_VisualizationOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_MotionAnalysisOptions_VisualizationOptions.DiscardUnknown(m)
}

var xxx_messageInfo_MotionAnalysisOptions_VisualizationOptions proto.InternalMessageInfo

const Default_MotionAnalysisOptions_VisualizationOptions_VisualizeRegionFlowFeatures bool = true
const Default_MotionAnalysisOptions_VisualizationOptions_VisualizeSalientPoints bool = false
const Default_MotionAnalysisOptions_VisualizationOptions_LineThickness int32 = 4
const Default_MotionAnalysisOptions_VisualizationOptions_ForegroundJetColoring bool = false
const Default_MotionAnalysisOptions_VisualizationOptions_VisualizeBlurAnalysisRegion bool = false
const Default_MotionAnalysisOptions_VisualizationOptions_VisualizeStats bool = true
const Default_MotionAnalysisOptions_VisualizationOptions_MinLongFeatureTrack int32 = 0
const Default_MotionAnalysisOptions_VisualizationOptions_MaxLongFeaturePoints int32 = 0

func (m *MotionAnalysisOptions_VisualizationOptions) GetVisualizeRegionFlowFeatures() bool {
	if m != nil && m.VisualizeRegionFlowFeatures != nil {
		return *m.VisualizeRegionFlowFeatures
	}
	return Default_MotionAnalysisOptions_VisualizationOptions_VisualizeRegionFlowFeatures
}

func (m *MotionAnalysisOptions_VisualizationOptions) GetVisualizeSalientPoints() bool {
	if m != nil && m.VisualizeSalientPoints != nil {
		return *m.VisualizeSalientPoints
	}
	return Default_MotionAnalysisOptions_VisualizationOptions_VisualizeSalientPoints
}

func (m *MotionAnalysisOptions_VisualizationOptions) GetLineThickness() int32 {
	if m != nil && m.LineThickness != nil {
		return *m.LineThickness
	}
	return Default_MotionAnalysisOptions_VisualizationOptions_LineThickness
}

func (m *MotionAnalysisOptions_VisualizationOptions) GetForegroundJetColoring() bool {
	if m != nil && m.ForegroundJetColoring != nil {
		return *m.ForegroundJetColoring
	}
	return Default_MotionAnalysisOptions_VisualizationOptions_ForegroundJetColoring
}

func (m *MotionAnalysisOptions_VisualizationOptions) GetVisualizeBlurAnalysisRegion() bool {
	if m != nil && m.VisualizeBlurAnalysisRegion != nil {
		return *m.VisualizeBlurAnalysisRegion
	}
	return Default_MotionAnalysisOptions_VisualizationOptions_VisualizeBlurAnalysisRegion
}

func (m *MotionAnalysisOptions_VisualizationOptions) GetVisualizeStats() bool {
	if m != nil && m.VisualizeStats != nil {
		return *m.VisualizeStats
	}
	return Default_MotionAnalysisOptions_VisualizationOptions_VisualizeStats
}

func (m *MotionAnalysisOptions_VisualizationOptions) GetMinLongFeatureTrack() int32 {
	if m != nil && m.MinLongFeatureTrack != nil {
		return *m.MinLongFeatureTrack
	}
	return Default_MotionAnalysisOptions_VisualizationOptions_MinLongFeatureTrack
}

func (m *MotionAnalysisOptions_VisualizationOptions) GetMaxLongFeaturePoints() int32 {
	if m != nil && m.MaxLongFeaturePoints != nil {
		return *m.MaxLongFeaturePoints
	}
	return Default_MotionAnalysisOptions_VisualizationOptions_MaxLongFeaturePoints
}

type MotionAnalysisOptions_ForegroundOptions struct {
	ForegroundThreshold      *float32 `protobuf:"fixed32,1,opt,name=foreground_threshold,json=foregroundThreshold,def=0.5" json:"foreground_threshold,omitempty"`
	ForegroundGamma          *float32 `protobuf:"fixed32,2,opt,name=foreground_gamma,json=foregroundGamma,def=1" json:"foreground_gamma,omitempty"`
	ThresholdCoverageScaling *bool    `protobuf:"varint,3,opt,name=threshold_coverage_scaling,json=thresholdCoverageScaling,def=1" json:"threshold_coverage_scaling,omitempty"`
}

func (m *MotionAnalysisOptions_ForegroundOptions) Reset() {
	*m = MotionAnalysisOptions_ForegroundOptions{}
}
func (*MotionAnalysisOptions_ForegroundOptions) ProtoMessage() {}
func (*MotionAnalysisOptions_ForegroundOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c59b1aa9ccd1c513, []int{0, 1}
}
func (m *MotionAnalysisOptions_ForegroundOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MotionAnalysisOptions_ForegroundOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MotionAnalysisOptions_ForegroundOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MotionAnalysisOptions_ForegroundOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MotionAnalysisOptions_ForegroundOptions.Merge(m, src)
}
func (m *MotionAnalysisOptions_ForegroundOptions) XXX_Size() int {
	return m.Size()
}
func (m *MotionAnalysisOptions_ForegroundOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_MotionAnalysisOptions_ForegroundOptions.DiscardUnknown(m)
}

var xxx_messageInfo_MotionAnalysisOptions_ForegroundOptions proto.InternalMessageInfo

const Default_MotionAnalysisOptions_ForegroundOptions_ForegroundThreshold float32 = 0.5
const Default_MotionAnalysisOptions_ForegroundOptions_ForegroundGamma float32 = 1
const Default_MotionAnalysisOptions_ForegroundOptions_ThresholdCoverageScaling bool = true

func (m *MotionAnalysisOptions_ForegroundOptions) GetForegroundThreshold() float32 {
	if m != nil && m.ForegroundThreshold != nil {
		return *m.ForegroundThreshold
	}
	return Default_MotionAnalysisOptions_ForegroundOptions_ForegroundThreshold
}

func (m *MotionAnalysisOptions_ForegroundOptions) GetForegroundGamma() float32 {
	if m != nil && m.ForegroundGamma != nil {
		return *m.ForegroundGamma
	}
	return Default_MotionAnalysisOptions_ForegroundOptions_ForegroundGamma
}

func (m *MotionAnalysisOptions_ForegroundOptions) GetThresholdCoverageScaling() bool {
	if m != nil && m.ThresholdCoverageScaling != nil {
		return *m.ThresholdCoverageScaling
	}
	return Default_MotionAnalysisOptions_ForegroundOptions_ThresholdCoverageScaling
}

func init() {
	proto.RegisterEnum("mediapipe.MotionAnalysisOptions_AnalysisPolicy", MotionAnalysisOptions_AnalysisPolicy_name, MotionAnalysisOptions_AnalysisPolicy_value)
	proto.RegisterType((*MotionAnalysisOptions)(nil), "mediapipe.MotionAnalysisOptions")
	proto.RegisterType((*MotionAnalysisOptions_VisualizationOptions)(nil), "mediapipe.MotionAnalysisOptions.VisualizationOptions")
	proto.RegisterType((*MotionAnalysisOptions_ForegroundOptions)(nil), "mediapipe.MotionAnalysisOptions.ForegroundOptions")
}

func init() {
	proto.RegisterFile("mediapipe/util/tracking/motion_analysis.proto", fileDescriptor_c59b1aa9ccd1c513)
}

var fileDescriptor_c59b1aa9ccd1c513 = []byte{
	// 1015 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0x4d, 0x4f, 0xe3, 0x46,
	0x18, 0x8e, 0x03, 0xb4, 0xec, 0xb0, 0x84, 0x30, 0x7c, 0xb9, 0xd9, 0xae, 0x95, 0xa2, 0x4a, 0xcd,
	0xa1, 0x9b, 0xb0, 0x74, 0x41, 0x55, 0xd4, 0xaa, 0x0a, 0x69, 0xd8, 0x86, 0x86, 0x82, 0x1c, 0xba,
	0x12, 0xbd, 0x8c, 0x06, 0x33, 0x31, 0xc3, 0x8e, 0x3d, 0xd6, 0xcc, 0x84, 0x05, 0x4e, 0x55, 0x7f,
	0x41, 0x7f, 0x46, 0x0f, 0xfd, 0x0b, 0xbd, 0xf7, 0xc8, 0x71, 0x8f, 0x25, 0x5c, 0x7a, 0xdc, 0x63,
	0x8f, 0x95, 0xc7, 0x9f, 0xe1, 0x43, 0xdc, 0x92, 0x79, 0x9f, 0xe7, 0xfd, 0x78, 0xe6, 0x79, 0x6d,
	0x83, 0x17, 0x1e, 0x39, 0xa6, 0x38, 0xa0, 0x01, 0x69, 0x0c, 0x15, 0x65, 0x0d, 0x25, 0xb0, 0xf3,
	0x96, 0xfa, 0x6e, 0xc3, 0xe3, 0x8a, 0x72, 0x1f, 0x61, 0x1f, 0xb3, 0x0b, 0x49, 0x65, 0x3d, 0x10,
	0x5c, 0x71, 0xf8, 0x24, 0x85, 0x57, 0x1a, 0x8f, 0x30, 0x89, 0x54, 0xd4, 0xc3, 0xe1, 0xcf, 0x88,
	0x5b, 0x79, 0xac, 0x94, 0xc4, 0x8c, 0x12, 0xdf, 0xb9, 0x88, 0xe1, 0x1b, 0x0f, 0xc1, 0x05, 0x71,
	0x43, 0xf8, 0x80, 0xf1, 0x77, 0xc8, 0xe1, 0x5e, 0x30, 0x54, 0xb9, 0x2a, 0xab, 0xbf, 0xcd, 0x81,
	0xa5, 0x5d, 0x9d, 0xb0, 0x15, 0xb7, 0xbe, 0x17, 0x84, 0xff, 0x24, 0x0c, 0xc0, 0x5c, 0x32, 0x0d,
	0x0a, 0x38, 0xa3, 0xce, 0x85, 0x59, 0xaa, 0x1a, 0xb5, 0xd2, 0x7a, 0xa3, 0x9e, 0x96, 0xaa, 0xdf,
	0x4b, 0xad, 0x27, 0xff, 0xf7, 0x35, 0xad, 0xb9, 0xdc, 0xfa, 0xa9, 0xd5, 0x3b, 0xec, 0x77, 0xfb,
	0x68, 0x7f, 0xaf, 0xd7, 0x6d, 0x1f, 0xa2, 0x5e, 0xe7, 0x75, 0xab, 0x7d, 0x68, 0x97, 0xf0, 0x18,
	0x0e, 0xee, 0x80, 0xa7, 0xba, 0x4b, 0x1e, 0xa5, 0x31, 0x8d, 0xaa, 0x51, 0x9b, 0x59, 0xff, 0x22,
	0x57, 0xce, 0xd6, 0xb3, 0x6c, 0x33, 0xfe, 0xae, 0x9d, 0x4d, 0x12, 0x57, 0xb5, 0x67, 0x42, 0x72,
	0xd2, 0x7d, 0x17, 0x94, 0x62, 0x9d, 0x92, 0x6c, 0x45, 0x9d, 0x6d, 0xf5, 0x4e, 0xf3, 0x9d, 0x54,
	0xf8, 0x24, 0xd1, 0x6c, 0xc4, 0x4c, 0x52, 0xfd, 0x08, 0xca, 0x89, 0xd6, 0x69, 0xb2, 0x09, 0x9d,
	0xac, 0x7a, 0x27, 0x59, 0x3f, 0x06, 0x26, 0xa9, 0xe6, 0xe4, 0xf8, 0x01, 0x7c, 0x05, 0x16, 0xb3,
	0x9b, 0x46, 0x0e, 0xa3, 0x01, 0x92, 0xf4, 0x92, 0x98, 0x93, 0x55, 0xa3, 0x36, 0xd5, 0x2c, 0xbe,
	0xdc, 0xb4, 0x61, 0x16, 0x6f, 0x33, 0x1a, 0xf4, 0xe9, 0x25, 0x81, 0x3f, 0x83, 0xcf, 0xe5, 0xf0,
	0x28, 0xbc, 0x52, 0x85, 0x1c, 0xec, 0x11, 0x81, 0x51, 0x3c, 0xdd, 0x40, 0x70, 0x0f, 0x0d, 0x08,
	0x56, 0x43, 0x41, 0xa4, 0x39, 0x55, 0x35, 0x6a, 0xd3, 0xcd, 0xa9, 0x01, 0x66, 0x92, 0xd8, 0xd5,
	0x84, 0xd2, 0xd6, 0x8c, 0xa8, 0xc1, 0x6d, 0xc1, 0xbd, 0xed, 0x18, 0x0e, 0x57, 0xc1, 0x8c, 0xb6,
	0x09, 0xa2, 0xfe, 0x31, 0x39, 0x37, 0x3f, 0xd2, 0x3d, 0x18, 0x6b, 0x36, 0xd0, 0xa7, 0xdd, 0xf0,
	0x10, 0x7e, 0x0b, 0x56, 0x22, 0xd7, 0x10, 0x74, 0xcb, 0x78, 0xe6, 0xc7, 0xf9, 0x6a, 0x4b, 0x31,
	0x6a, 0x5c, 0x07, 0xf8, 0x0d, 0x58, 0x91, 0x84, 0x11, 0x47, 0xa5, 0x34, 0x44, 0x7d, 0x46, 0x89,
	0x90, 0xe6, 0xb4, 0xa6, 0x4f, 0x2a, 0x31, 0x24, 0xf6, 0x52, 0x04, 0x4a, 0x68, 0xdd, 0x08, 0x02,
	0x5f, 0x80, 0xb9, 0x01, 0x65, 0x8a, 0x88, 0xac, 0xe8, 0x93, 0x1c, 0xab, 0x14, 0x05, 0xd3, 0x62,
	0x1b, 0x60, 0x21, 0xe0, 0x52, 0x21, 0x2a, 0x98, 0x44, 0xd2, 0xe3, 0x5c, 0x9d, 0x50, 0xdf, 0x35,
	0x41, 0xbe, 0xcf, 0xf9, 0x10, 0xd1, 0x15, 0x4c, 0xf6, 0x93, 0x38, 0xdc, 0x06, 0xcf, 0x05, 0x39,
	0x25, 0x8e, 0x9e, 0x4e, 0x09, 0xec, 0xcb, 0x01, 0x17, 0x1e, 0x52, 0x27, 0x82, 0xc8, 0x13, 0xce,
	0x8e, 0xcd, 0xd9, 0xaa, 0x51, 0x2b, 0x36, 0x8b, 0xeb, 0x6b, 0xf6, 0xb3, 0x14, 0x78, 0x90, 0xe0,
	0x0e, 0x12, 0x18, 0x3c, 0x05, 0x4b, 0x67, 0x54, 0x0e, 0x31, 0xa3, 0x97, 0x78, 0xcc, 0x7a, 0x33,
	0xda, 0x2d, 0x1b, 0x8f, 0xee, 0xcd, 0x9b, 0x3c, 0x3b, 0xb1, 0xd0, 0xe2, 0xd9, 0x3d, 0xa7, 0x10,
	0x03, 0x38, 0xe0, 0x82, 0xb8, 0x82, 0x0f, 0xfd, 0xe3, 0xb4, 0xd0, 0x53, 0x5d, 0x68, 0xfd, 0xd1,
	0x42, 0xdb, 0x29, 0x35, 0xa9, 0x32, 0x3f, 0xb8, 0x7d, 0x54, 0xf9, 0x6f, 0x02, 0x2c, 0xde, 0xd7,
	0x11, 0xec, 0x02, 0x2b, 0xe9, 0x89, 0xa0, 0xfc, 0xe3, 0x25, 0xf5, 0xa1, 0x91, 0xbb, 0xa4, 0x67,
	0x29, 0x36, 0xdb, 0xde, 0xd4, 0x81, 0xdf, 0x01, 0x33, 0x4b, 0x15, 0xdd, 0xb1, 0x42, 0x01, 0xa7,
	0xbe, 0x8a, 0x16, 0x36, 0xbd, 0xb6, 0xe5, 0x14, 0x16, 0xdd, 0xb6, 0xda, 0xd7, 0x20, 0x58, 0x03,
	0x25, 0x46, 0x7d, 0x82, 0xd4, 0x09, 0x75, 0xde, 0xfa, 0x44, 0x46, 0x3b, 0x30, 0xd5, 0x34, 0x5e,
	0xd9, 0xb3, 0x61, 0xe0, 0x20, 0x39, 0x0f, 0x8d, 0x9c, 0x53, 0xec, 0x94, 0x28, 0xe4, 0x70, 0xc6,
	0x45, 0x68, 0x90, 0x89, 0x31, 0x23, 0x67, 0xa8, 0x1d, 0xa2, 0xda, 0x31, 0x06, 0xee, 0xe4, 0x87,
	0x3e, 0x62, 0x43, 0x91, 0x3e, 0xeb, 0x63, 0x09, 0xf4, 0x0a, 0xa7, 0x59, 0xb2, 0xa9, 0xb7, 0xd8,
	0x50, 0x24, 0xfa, 0x47, 0x0a, 0x84, 0xb6, 0xce, 0x4d, 0xad, 0xb0, 0x92, 0x7a, 0xf7, 0x52, 0x5b,
	0x67, 0xb3, 0x86, 0x31, 0xb8, 0x09, 0x96, 0x3d, 0xea, 0x23, 0xc6, 0x7d, 0x37, 0x91, 0x18, 0xe9,
	0x0d, 0xd5, 0x1b, 0xa8, 0x37, 0x76, 0xc1, 0xa3, 0x7e, 0x8f, 0xfb, 0x6e, 0x2c, 0xec, 0x41, 0x18,
	0x85, 0x5f, 0x83, 0x15, 0x0f, 0x9f, 0x8f, 0xf3, 0x62, 0x6d, 0xa7, 0x13, 0xe2, 0xa2, 0x87, 0xcf,
	0x73, 0xc4, 0x48, 0xd5, 0xca, 0x5f, 0x06, 0x98, 0xbf, 0xe3, 0x11, 0xb8, 0x09, 0x16, 0x73, 0x0a,
	0x66, 0xeb, 0x61, 0xe8, 0xf5, 0x98, 0x58, 0xab, 0x6f, 0xd8, 0x0b, 0x19, 0x20, 0xdb, 0x8b, 0x2f,
	0x41, 0x39, 0xc7, 0x73, 0xb1, 0xe7, 0x61, 0x7d, 0xb9, 0xc5, 0xa6, 0xf1, 0xd2, 0x9e, 0xcb, 0x42,
	0xaf, 0xc3, 0x08, 0xdc, 0x02, 0x95, 0x34, 0x35, 0x72, 0xf8, 0x19, 0x11, 0xd8, 0x25, 0x48, 0x3a,
	0x98, 0x65, 0x57, 0x15, 0xe9, 0x64, 0xa6, 0xb8, 0x76, 0x0c, 0xeb, 0x47, 0xa8, 0xd5, 0x3f, 0x0d,
	0x50, 0x1a, 0x7f, 0x09, 0xc1, 0x0a, 0x78, 0xe0, 0x35, 0x54, 0x2e, 0xc0, 0x4f, 0xc0, 0xd2, 0xed,
	0xd8, 0x9b, 0xee, 0xf7, 0x9d, 0xbd, 0xb2, 0x01, 0xab, 0xe0, 0xd3, 0x7b, 0x43, 0x68, 0x77, 0x6f,
	0xab, 0xdb, 0xeb, 0x94, 0x8b, 0xf0, 0x33, 0xf0, 0xfc, 0x36, 0xa2, 0xdd, 0xda, 0xed, 0xd8, 0xad,
	0x04, 0x32, 0x01, 0x2d, 0x50, 0xb9, 0x0d, 0xf9, 0xe1, 0x70, 0xbf, 0x63, 0xf7, 0x5a, 0xfb, 0xfd,
	0x4e, 0x79, 0x72, 0x8b, 0x5e, 0x5d, 0x5b, 0x85, 0xf7, 0xd7, 0x56, 0xe1, 0xc3, 0xb5, 0x65, 0xfc,
	0x3a, 0xb2, 0x8c, 0x3f, 0x46, 0x96, 0xf1, 0xf7, 0xc8, 0x32, 0xae, 0x46, 0x96, 0xf1, 0xcf, 0xc8,
	0x32, 0xfe, 0x1d, 0x59, 0x85, 0x0f, 0x23, 0xcb, 0xf8, 0xfd, 0xc6, 0x2a, 0x5c, 0xdd, 0x58, 0x85,
	0xf7, 0x37, 0x56, 0xe1, 0x97, 0xaf, 0x5c, 0xaa, 0x4e, 0x86, 0x47, 0x75, 0x87, 0x7b, 0x0d, 0x97,
	0x73, 0x97, 0x91, 0xdc, 0x37, 0xc6, 0x03, 0x5f, 0x03, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x71,
	0x62, 0xbf, 0xa7, 0xc1, 0x08, 0x00, 0x00,
}

func (x MotionAnalysisOptions_AnalysisPolicy) String() string {
	s, ok := MotionAnalysisOptions_AnalysisPolicy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MotionAnalysisOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MotionAnalysisOptions)
	if !ok {
		that2, ok := that.(MotionAnalysisOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AnalysisPolicy != nil && that1.AnalysisPolicy != nil {
		if *this.AnalysisPolicy != *that1.AnalysisPolicy {
			return false
		}
	} else if this.AnalysisPolicy != nil {
		return false
	} else if that1.AnalysisPolicy != nil {
		return false
	}
	if !this.FlowOptions.Equal(that1.FlowOptions) {
		return false
	}
	if !this.MotionOptions.Equal(that1.MotionOptions) {
		return false
	}
	if !this.SaliencyOptions.Equal(that1.SaliencyOptions) {
		return false
	}
	if this.EstimationClipSize != nil && that1.EstimationClipSize != nil {
		if *this.EstimationClipSize != *that1.EstimationClipSize {
			return false
		}
	} else if this.EstimationClipSize != nil {
		return false
	} else if that1.EstimationClipSize != nil {
		return false
	}
	if this.SubtractCameraMotionFromFeatures != nil && that1.SubtractCameraMotionFromFeatures != nil {
		if *this.SubtractCameraMotionFromFeatures != *that1.SubtractCameraMotionFromFeatures {
			return false
		}
	} else if this.SubtractCameraMotionFromFeatures != nil {
		return false
	} else if that1.SubtractCameraMotionFromFeatures != nil {
		return false
	}
	if this.TrackIndex != nil && that1.TrackIndex != nil {
		if *this.TrackIndex != *that1.TrackIndex {
			return false
		}
	} else if this.TrackIndex != nil {
		return false
	} else if that1.TrackIndex != nil {
		return false
	}
	if this.ComputeMotionSaliency != nil && that1.ComputeMotionSaliency != nil {
		if *this.ComputeMotionSaliency != *that1.ComputeMotionSaliency {
			return false
		}
	} else if this.ComputeMotionSaliency != nil {
		return false
	} else if that1.ComputeMotionSaliency != nil {
		return false
	}
	if this.SelectSaliencyInliers != nil && that1.SelectSaliencyInliers != nil {
		if *this.SelectSaliencyInliers != *that1.SelectSaliencyInliers {
			return false
		}
	} else if this.SelectSaliencyInliers != nil {
		return false
	} else if that1.SelectSaliencyInliers != nil {
		return false
	}
	if this.FilterSaliency != nil && that1.FilterSaliency != nil {
		if *this.FilterSaliency != *that1.FilterSaliency {
			return false
		}
	} else if this.FilterSaliency != nil {
		return false
	} else if that1.FilterSaliency != nil {
		return false
	}
	if this.PostIrlsSmoothing != nil && that1.PostIrlsSmoothing != nil {
		if *this.PostIrlsSmoothing != *that1.PostIrlsSmoothing {
			return false
		}
	} else if this.PostIrlsSmoothing != nil {
		return false
	} else if that1.PostIrlsSmoothing != nil {
		return false
	}
	if this.RejectionTransformThreshold != nil && that1.RejectionTransformThreshold != nil {
		if *this.RejectionTransformThreshold != *that1.RejectionTransformThreshold {
			return false
		}
	} else if this.RejectionTransformThreshold != nil {
		return false
	} else if that1.RejectionTransformThreshold != nil {
		return false
	}
	if !this.VisualizationOptions.Equal(that1.VisualizationOptions) {
		return false
	}
	if !this.ForegroundOptions.Equal(that1.ForegroundOptions) {
		return false
	}
	return true
}
func (this *MotionAnalysisOptions_VisualizationOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MotionAnalysisOptions_VisualizationOptions)
	if !ok {
		that2, ok := that.(MotionAnalysisOptions_VisualizationOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VisualizeRegionFlowFeatures != nil && that1.VisualizeRegionFlowFeatures != nil {
		if *this.VisualizeRegionFlowFeatures != *that1.VisualizeRegionFlowFeatures {
			return false
		}
	} else if this.VisualizeRegionFlowFeatures != nil {
		return false
	} else if that1.VisualizeRegionFlowFeatures != nil {
		return false
	}
	if this.VisualizeSalientPoints != nil && that1.VisualizeSalientPoints != nil {
		if *this.VisualizeSalientPoints != *that1.VisualizeSalientPoints {
			return false
		}
	} else if this.VisualizeSalientPoints != nil {
		return false
	} else if that1.VisualizeSalientPoints != nil {
		return false
	}
	if this.LineThickness != nil && that1.LineThickness != nil {
		if *this.LineThickness != *that1.LineThickness {
			return false
		}
	} else if this.LineThickness != nil {
		return false
	} else if that1.LineThickness != nil {
		return false
	}
	if this.ForegroundJetColoring != nil && that1.ForegroundJetColoring != nil {
		if *this.ForegroundJetColoring != *that1.ForegroundJetColoring {
			return false
		}
	} else if this.ForegroundJetColoring != nil {
		return false
	} else if that1.ForegroundJetColoring != nil {
		return false
	}
	if this.VisualizeBlurAnalysisRegion != nil && that1.VisualizeBlurAnalysisRegion != nil {
		if *this.VisualizeBlurAnalysisRegion != *that1.VisualizeBlurAnalysisRegion {
			return false
		}
	} else if this.VisualizeBlurAnalysisRegion != nil {
		return false
	} else if that1.VisualizeBlurAnalysisRegion != nil {
		return false
	}
	if this.VisualizeStats != nil && that1.VisualizeStats != nil {
		if *this.VisualizeStats != *that1.VisualizeStats {
			return false
		}
	} else if this.VisualizeStats != nil {
		return false
	} else if that1.VisualizeStats != nil {
		return false
	}
	if this.MinLongFeatureTrack != nil && that1.MinLongFeatureTrack != nil {
		if *this.MinLongFeatureTrack != *that1.MinLongFeatureTrack {
			return false
		}
	} else if this.MinLongFeatureTrack != nil {
		return false
	} else if that1.MinLongFeatureTrack != nil {
		return false
	}
	if this.MaxLongFeaturePoints != nil && that1.MaxLongFeaturePoints != nil {
		if *this.MaxLongFeaturePoints != *that1.MaxLongFeaturePoints {
			return false
		}
	} else if this.MaxLongFeaturePoints != nil {
		return false
	} else if that1.MaxLongFeaturePoints != nil {
		return false
	}
	return true
}
func (this *MotionAnalysisOptions_ForegroundOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MotionAnalysisOptions_ForegroundOptions)
	if !ok {
		that2, ok := that.(MotionAnalysisOptions_ForegroundOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForegroundThreshold != nil && that1.ForegroundThreshold != nil {
		if *this.ForegroundThreshold != *that1.ForegroundThreshold {
			return false
		}
	} else if this.ForegroundThreshold != nil {
		return false
	} else if that1.ForegroundThreshold != nil {
		return false
	}
	if this.ForegroundGamma != nil && that1.ForegroundGamma != nil {
		if *this.ForegroundGamma != *that1.ForegroundGamma {
			return false
		}
	} else if this.ForegroundGamma != nil {
		return false
	} else if that1.ForegroundGamma != nil {
		return false
	}
	if this.ThresholdCoverageScaling != nil && that1.ThresholdCoverageScaling != nil {
		if *this.ThresholdCoverageScaling != *that1.ThresholdCoverageScaling {
			return false
		}
	} else if this.ThresholdCoverageScaling != nil {
		return false
	} else if that1.ThresholdCoverageScaling != nil {
		return false
	}
	return true
}
func (this *MotionAnalysisOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&tracking.MotionAnalysisOptions{")
	if this.AnalysisPolicy != nil {
		s = append(s, "AnalysisPolicy: "+valueToGoStringMotionAnalysis(this.AnalysisPolicy, "MotionAnalysisOptions_AnalysisPolicy")+",\n")
	}
	if this.FlowOptions != nil {
		s = append(s, "FlowOptions: "+fmt.Sprintf("%#v", this.FlowOptions)+",\n")
	}
	if this.MotionOptions != nil {
		s = append(s, "MotionOptions: "+fmt.Sprintf("%#v", this.MotionOptions)+",\n")
	}
	if this.SaliencyOptions != nil {
		s = append(s, "SaliencyOptions: "+fmt.Sprintf("%#v", this.SaliencyOptions)+",\n")
	}
	if this.EstimationClipSize != nil {
		s = append(s, "EstimationClipSize: "+valueToGoStringMotionAnalysis(this.EstimationClipSize, "int32")+",\n")
	}
	if this.SubtractCameraMotionFromFeatures != nil {
		s = append(s, "SubtractCameraMotionFromFeatures: "+valueToGoStringMotionAnalysis(this.SubtractCameraMotionFromFeatures, "bool")+",\n")
	}
	if this.TrackIndex != nil {
		s = append(s, "TrackIndex: "+valueToGoStringMotionAnalysis(this.TrackIndex, "int32")+",\n")
	}
	if this.ComputeMotionSaliency != nil {
		s = append(s, "ComputeMotionSaliency: "+valueToGoStringMotionAnalysis(this.ComputeMotionSaliency, "bool")+",\n")
	}
	if this.SelectSaliencyInliers != nil {
		s = append(s, "SelectSaliencyInliers: "+valueToGoStringMotionAnalysis(this.SelectSaliencyInliers, "bool")+",\n")
	}
	if this.FilterSaliency != nil {
		s = append(s, "FilterSaliency: "+valueToGoStringMotionAnalysis(this.FilterSaliency, "bool")+",\n")
	}
	if this.PostIrlsSmoothing != nil {
		s = append(s, "PostIrlsSmoothing: "+valueToGoStringMotionAnalysis(this.PostIrlsSmoothing, "bool")+",\n")
	}
	if this.RejectionTransformThreshold != nil {
		s = append(s, "RejectionTransformThreshold: "+valueToGoStringMotionAnalysis(this.RejectionTransformThreshold, "float32")+",\n")
	}
	if this.VisualizationOptions != nil {
		s = append(s, "VisualizationOptions: "+fmt.Sprintf("%#v", this.VisualizationOptions)+",\n")
	}
	if this.ForegroundOptions != nil {
		s = append(s, "ForegroundOptions: "+fmt.Sprintf("%#v", this.ForegroundOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MotionAnalysisOptions_VisualizationOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&tracking.MotionAnalysisOptions_VisualizationOptions{")
	if this.VisualizeRegionFlowFeatures != nil {
		s = append(s, "VisualizeRegionFlowFeatures: "+valueToGoStringMotionAnalysis(this.VisualizeRegionFlowFeatures, "bool")+",\n")
	}
	if this.VisualizeSalientPoints != nil {
		s = append(s, "VisualizeSalientPoints: "+valueToGoStringMotionAnalysis(this.VisualizeSalientPoints, "bool")+",\n")
	}
	if this.LineThickness != nil {
		s = append(s, "LineThickness: "+valueToGoStringMotionAnalysis(this.LineThickness, "int32")+",\n")
	}
	if this.ForegroundJetColoring != nil {
		s = append(s, "ForegroundJetColoring: "+valueToGoStringMotionAnalysis(this.ForegroundJetColoring, "bool")+",\n")
	}
	if this.VisualizeBlurAnalysisRegion != nil {
		s = append(s, "VisualizeBlurAnalysisRegion: "+valueToGoStringMotionAnalysis(this.VisualizeBlurAnalysisRegion, "bool")+",\n")
	}
	if this.VisualizeStats != nil {
		s = append(s, "VisualizeStats: "+valueToGoStringMotionAnalysis(this.VisualizeStats, "bool")+",\n")
	}
	if this.MinLongFeatureTrack != nil {
		s = append(s, "MinLongFeatureTrack: "+valueToGoStringMotionAnalysis(this.MinLongFeatureTrack, "int32")+",\n")
	}
	if this.MaxLongFeaturePoints != nil {
		s = append(s, "MaxLongFeaturePoints: "+valueToGoStringMotionAnalysis(this.MaxLongFeaturePoints, "int32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MotionAnalysisOptions_ForegroundOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tracking.MotionAnalysisOptions_ForegroundOptions{")
	if this.ForegroundThreshold != nil {
		s = append(s, "ForegroundThreshold: "+valueToGoStringMotionAnalysis(this.ForegroundThreshold, "float32")+",\n")
	}
	if this.ForegroundGamma != nil {
		s = append(s, "ForegroundGamma: "+valueToGoStringMotionAnalysis(this.ForegroundGamma, "float32")+",\n")
	}
	if this.ThresholdCoverageScaling != nil {
		s = append(s, "ThresholdCoverageScaling: "+valueToGoStringMotionAnalysis(this.ThresholdCoverageScaling, "bool")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMotionAnalysis(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MotionAnalysisOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MotionAnalysisOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MotionAnalysisOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AnalysisPolicy != nil {
		i = encodeVarintMotionAnalysis(dAtA, i, uint64(*m.AnalysisPolicy))
		i--
		dAtA[i] = 0x70
	}
	if m.RejectionTransformThreshold != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.RejectionTransformThreshold))))
		i--
		dAtA[i] = 0x6d
	}
	if m.ForegroundOptions != nil {
		{
			size, err := m.ForegroundOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMotionAnalysis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.VisualizationOptions != nil {
		{
			size, err := m.VisualizationOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMotionAnalysis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.PostIrlsSmoothing != nil {
		i--
		if *m.PostIrlsSmoothing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.FilterSaliency != nil {
		i--
		if *m.FilterSaliency {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.SelectSaliencyInliers != nil {
		i--
		if *m.SelectSaliencyInliers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.ComputeMotionSaliency != nil {
		i--
		if *m.ComputeMotionSaliency {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.TrackIndex != nil {
		i = encodeVarintMotionAnalysis(dAtA, i, uint64(*m.TrackIndex))
		i--
		dAtA[i] = 0x30
	}
	if m.SubtractCameraMotionFromFeatures != nil {
		i--
		if *m.SubtractCameraMotionFromFeatures {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.EstimationClipSize != nil {
		i = encodeVarintMotionAnalysis(dAtA, i, uint64(*m.EstimationClipSize))
		i--
		dAtA[i] = 0x20
	}
	if m.SaliencyOptions != nil {
		{
			size, err := m.SaliencyOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMotionAnalysis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MotionOptions != nil {
		{
			size, err := m.MotionOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMotionAnalysis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FlowOptions != nil {
		{
			size, err := m.FlowOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMotionAnalysis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MotionAnalysisOptions_VisualizationOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MotionAnalysisOptions_VisualizationOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MotionAnalysisOptions_VisualizationOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxLongFeaturePoints != nil {
		i = encodeVarintMotionAnalysis(dAtA, i, uint64(*m.MaxLongFeaturePoints))
		i--
		dAtA[i] = 0x40
	}
	if m.MinLongFeatureTrack != nil {
		i = encodeVarintMotionAnalysis(dAtA, i, uint64(*m.MinLongFeatureTrack))
		i--
		dAtA[i] = 0x38
	}
	if m.VisualizeStats != nil {
		i--
		if *m.VisualizeStats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.LineThickness != nil {
		i = encodeVarintMotionAnalysis(dAtA, i, uint64(*m.LineThickness))
		i--
		dAtA[i] = 0x28
	}
	if m.VisualizeBlurAnalysisRegion != nil {
		i--
		if *m.VisualizeBlurAnalysisRegion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ForegroundJetColoring != nil {
		i--
		if *m.ForegroundJetColoring {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.VisualizeSalientPoints != nil {
		i--
		if *m.VisualizeSalientPoints {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.VisualizeRegionFlowFeatures != nil {
		i--
		if *m.VisualizeRegionFlowFeatures {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MotionAnalysisOptions_ForegroundOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MotionAnalysisOptions_ForegroundOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MotionAnalysisOptions_ForegroundOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ThresholdCoverageScaling != nil {
		i--
		if *m.ThresholdCoverageScaling {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ForegroundGamma != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.ForegroundGamma))))
		i--
		dAtA[i] = 0x15
	}
	if m.ForegroundThreshold != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.ForegroundThreshold))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func encodeVarintMotionAnalysis(dAtA []byte, offset int, v uint64) int {
	offset -= sovMotionAnalysis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MotionAnalysisOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlowOptions != nil {
		l = m.FlowOptions.Size()
		n += 1 + l + sovMotionAnalysis(uint64(l))
	}
	if m.MotionOptions != nil {
		l = m.MotionOptions.Size()
		n += 1 + l + sovMotionAnalysis(uint64(l))
	}
	if m.SaliencyOptions != nil {
		l = m.SaliencyOptions.Size()
		n += 1 + l + sovMotionAnalysis(uint64(l))
	}
	if m.EstimationClipSize != nil {
		n += 1 + sovMotionAnalysis(uint64(*m.EstimationClipSize))
	}
	if m.SubtractCameraMotionFromFeatures != nil {
		n += 2
	}
	if m.TrackIndex != nil {
		n += 1 + sovMotionAnalysis(uint64(*m.TrackIndex))
	}
	if m.ComputeMotionSaliency != nil {
		n += 2
	}
	if m.SelectSaliencyInliers != nil {
		n += 2
	}
	if m.FilterSaliency != nil {
		n += 2
	}
	if m.PostIrlsSmoothing != nil {
		n += 2
	}
	if m.VisualizationOptions != nil {
		l = m.VisualizationOptions.Size()
		n += 1 + l + sovMotionAnalysis(uint64(l))
	}
	if m.ForegroundOptions != nil {
		l = m.ForegroundOptions.Size()
		n += 1 + l + sovMotionAnalysis(uint64(l))
	}
	if m.RejectionTransformThreshold != nil {
		n += 5
	}
	if m.AnalysisPolicy != nil {
		n += 1 + sovMotionAnalysis(uint64(*m.AnalysisPolicy))
	}
	return n
}

func (m *MotionAnalysisOptions_VisualizationOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VisualizeRegionFlowFeatures != nil {
		n += 2
	}
	if m.VisualizeSalientPoints != nil {
		n += 2
	}
	if m.ForegroundJetColoring != nil {
		n += 2
	}
	if m.VisualizeBlurAnalysisRegion != nil {
		n += 2
	}
	if m.LineThickness != nil {
		n += 1 + sovMotionAnalysis(uint64(*m.LineThickness))
	}
	if m.VisualizeStats != nil {
		n += 2
	}
	if m.MinLongFeatureTrack != nil {
		n += 1 + sovMotionAnalysis(uint64(*m.MinLongFeatureTrack))
	}
	if m.MaxLongFeaturePoints != nil {
		n += 1 + sovMotionAnalysis(uint64(*m.MaxLongFeaturePoints))
	}
	return n
}

func (m *MotionAnalysisOptions_ForegroundOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForegroundThreshold != nil {
		n += 5
	}
	if m.ForegroundGamma != nil {
		n += 5
	}
	if m.ThresholdCoverageScaling != nil {
		n += 2
	}
	return n
}

func sovMotionAnalysis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMotionAnalysis(x uint64) (n int) {
	return sovMotionAnalysis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MotionAnalysisOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MotionAnalysisOptions{`,
		`FlowOptions:` + strings.Replace(fmt.Sprintf("%v", this.FlowOptions), "RegionFlowComputationOptions", "RegionFlowComputationOptions", 1) + `,`,
		`MotionOptions:` + strings.Replace(fmt.Sprintf("%v", this.MotionOptions), "MotionEstimationOptions", "MotionEstimationOptions", 1) + `,`,
		`SaliencyOptions:` + strings.Replace(fmt.Sprintf("%v", this.SaliencyOptions), "MotionSaliencyOptions", "MotionSaliencyOptions", 1) + `,`,
		`EstimationClipSize:` + valueToStringMotionAnalysis(this.EstimationClipSize) + `,`,
		`SubtractCameraMotionFromFeatures:` + valueToStringMotionAnalysis(this.SubtractCameraMotionFromFeatures) + `,`,
		`TrackIndex:` + valueToStringMotionAnalysis(this.TrackIndex) + `,`,
		`ComputeMotionSaliency:` + valueToStringMotionAnalysis(this.ComputeMotionSaliency) + `,`,
		`SelectSaliencyInliers:` + valueToStringMotionAnalysis(this.SelectSaliencyInliers) + `,`,
		`FilterSaliency:` + valueToStringMotionAnalysis(this.FilterSaliency) + `,`,
		`PostIrlsSmoothing:` + valueToStringMotionAnalysis(this.PostIrlsSmoothing) + `,`,
		`VisualizationOptions:` + strings.Replace(fmt.Sprintf("%v", this.VisualizationOptions), "MotionAnalysisOptions_VisualizationOptions", "MotionAnalysisOptions_VisualizationOptions", 1) + `,`,
		`ForegroundOptions:` + strings.Replace(fmt.Sprintf("%v", this.ForegroundOptions), "MotionAnalysisOptions_ForegroundOptions", "MotionAnalysisOptions_ForegroundOptions", 1) + `,`,
		`RejectionTransformThreshold:` + valueToStringMotionAnalysis(this.RejectionTransformThreshold) + `,`,
		`AnalysisPolicy:` + valueToStringMotionAnalysis(this.AnalysisPolicy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MotionAnalysisOptions_VisualizationOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MotionAnalysisOptions_VisualizationOptions{`,
		`VisualizeRegionFlowFeatures:` + valueToStringMotionAnalysis(this.VisualizeRegionFlowFeatures) + `,`,
		`VisualizeSalientPoints:` + valueToStringMotionAnalysis(this.VisualizeSalientPoints) + `,`,
		`ForegroundJetColoring:` + valueToStringMotionAnalysis(this.ForegroundJetColoring) + `,`,
		`VisualizeBlurAnalysisRegion:` + valueToStringMotionAnalysis(this.VisualizeBlurAnalysisRegion) + `,`,
		`LineThickness:` + valueToStringMotionAnalysis(this.LineThickness) + `,`,
		`VisualizeStats:` + valueToStringMotionAnalysis(this.VisualizeStats) + `,`,
		`MinLongFeatureTrack:` + valueToStringMotionAnalysis(this.MinLongFeatureTrack) + `,`,
		`MaxLongFeaturePoints:` + valueToStringMotionAnalysis(this.MaxLongFeaturePoints) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MotionAnalysisOptions_ForegroundOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MotionAnalysisOptions_ForegroundOptions{`,
		`ForegroundThreshold:` + valueToStringMotionAnalysis(this.ForegroundThreshold) + `,`,
		`ForegroundGamma:` + valueToStringMotionAnalysis(this.ForegroundGamma) + `,`,
		`ThresholdCoverageScaling:` + valueToStringMotionAnalysis(this.ThresholdCoverageScaling) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMotionAnalysis(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MotionAnalysisOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMotionAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MotionAnalysisOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MotionAnalysisOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMotionAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMotionAnalysis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowOptions == nil {
				m.FlowOptions = &RegionFlowComputationOptions{}
			}
			if err := m.FlowOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MotionOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMotionAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMotionAnalysis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MotionOptions == nil {
				m.MotionOptions = &MotionEstimationOptions{}
			}
			if err := m.MotionOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaliencyOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMotionAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMotionAnalysis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SaliencyOptions == nil {
				m.SaliencyOptions = &MotionSaliencyOptions{}
			}
			if err := m.SaliencyOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimationClipSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EstimationClipSize = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtractCameraMotionFromFeatures", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.SubtractCameraMotionFromFeatures = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackIndex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TrackIndex = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputeMotionSaliency", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ComputeMotionSaliency = &b
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectSaliencyInliers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.SelectSaliencyInliers = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterSaliency", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FilterSaliency = &b
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostIrlsSmoothing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.PostIrlsSmoothing = &b
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisualizationOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMotionAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMotionAnalysis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VisualizationOptions == nil {
				m.VisualizationOptions = &MotionAnalysisOptions_VisualizationOptions{}
			}
			if err := m.VisualizationOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForegroundOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMotionAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMotionAnalysis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForegroundOptions == nil {
				m.ForegroundOptions = &MotionAnalysisOptions_ForegroundOptions{}
			}
			if err := m.ForegroundOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectionTransformThreshold", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.RejectionTransformThreshold = &v2
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalysisPolicy", wireType)
			}
			var v MotionAnalysisOptions_AnalysisPolicy
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MotionAnalysisOptions_AnalysisPolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AnalysisPolicy = &v
		default:
			iNdEx = preIndex
			skippy, err := skipMotionAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMotionAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MotionAnalysisOptions_VisualizationOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMotionAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VisualizationOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VisualizationOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisualizeRegionFlowFeatures", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.VisualizeRegionFlowFeatures = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisualizeSalientPoints", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.VisualizeSalientPoints = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForegroundJetColoring", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ForegroundJetColoring = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisualizeBlurAnalysisRegion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.VisualizeBlurAnalysisRegion = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineThickness", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LineThickness = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisualizeStats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.VisualizeStats = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLongFeatureTrack", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinLongFeatureTrack = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLongFeaturePoints", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxLongFeaturePoints = &v
		default:
			iNdEx = preIndex
			skippy, err := skipMotionAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMotionAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MotionAnalysisOptions_ForegroundOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMotionAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForegroundOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForegroundOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForegroundThreshold", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.ForegroundThreshold = &v2
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForegroundGamma", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.ForegroundGamma = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThresholdCoverageScaling", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ThresholdCoverageScaling = &b
		default:
			iNdEx = preIndex
			skippy, err := skipMotionAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMotionAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMotionAnalysis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMotionAnalysis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMotionAnalysis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMotionAnalysis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMotionAnalysis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMotionAnalysis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMotionAnalysis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMotionAnalysis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMotionAnalysis = fmt.Errorf("proto: unexpected end of group")
)
