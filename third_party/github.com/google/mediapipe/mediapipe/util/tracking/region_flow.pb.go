// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/util/tracking/region_flow.proto

package tracking

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	sort "sort"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RegionFlowFeature_Flags int32

const (
	REGION_FLOW_FLAG_UNKNOWN      RegionFlowFeature_Flags = 0
	REGION_FLOW_FLAG_BROKEN_TRACK RegionFlowFeature_Flags = 1
)

var RegionFlowFeature_Flags_name = map[int32]string{
	0: "REGION_FLOW_FLAG_UNKNOWN",
	1: "REGION_FLOW_FLAG_BROKEN_TRACK",
}

var RegionFlowFeature_Flags_value = map[string]int32{
	"REGION_FLOW_FLAG_UNKNOWN":      0,
	"REGION_FLOW_FLAG_BROKEN_TRACK": 1,
}

func (x RegionFlowFeature_Flags) Enum() *RegionFlowFeature_Flags {
	p := new(RegionFlowFeature_Flags)
	*p = x
	return p
}

func (x RegionFlowFeature_Flags) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(RegionFlowFeature_Flags_name, int32(x))
}

func (x *RegionFlowFeature_Flags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RegionFlowFeature_Flags_value, data, "RegionFlowFeature_Flags")
	if err != nil {
		return err
	}
	*x = RegionFlowFeature_Flags(value)
	return nil
}

func (RegionFlowFeature_Flags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9e95d59746baca49, []int{3, 0}
}

type SalientPoint_SalientPointType int32

const (
	SALIENT_POINT_TYPE_UNKNOWN       SalientPoint_SalientPointType = 0
	SALIENT_POINT_TYPE_INCLUDE       SalientPoint_SalientPointType = 1
	SALIENT_POINT_TYPE_EXCLUDE_LEFT  SalientPoint_SalientPointType = 2
	SALIENT_POINT_TYPE_EXCLUDE_RIGHT SalientPoint_SalientPointType = 3
)

var SalientPoint_SalientPointType_name = map[int32]string{
	0: "SALIENT_POINT_TYPE_UNKNOWN",
	1: "SALIENT_POINT_TYPE_INCLUDE",
	2: "SALIENT_POINT_TYPE_EXCLUDE_LEFT",
	3: "SALIENT_POINT_TYPE_EXCLUDE_RIGHT",
}

var SalientPoint_SalientPointType_value = map[string]int32{
	"SALIENT_POINT_TYPE_UNKNOWN":       0,
	"SALIENT_POINT_TYPE_INCLUDE":       1,
	"SALIENT_POINT_TYPE_EXCLUDE_LEFT":  2,
	"SALIENT_POINT_TYPE_EXCLUDE_RIGHT": 3,
}

func (x SalientPoint_SalientPointType) Enum() *SalientPoint_SalientPointType {
	p := new(SalientPoint_SalientPointType)
	*p = x
	return p
}

func (x SalientPoint_SalientPointType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(SalientPoint_SalientPointType_name, int32(x))
}

func (x *SalientPoint_SalientPointType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SalientPoint_SalientPointType_value, data, "SalientPoint_SalientPointType")
	if err != nil {
		return err
	}
	*x = SalientPoint_SalientPointType(value)
	return nil
}

func (SalientPoint_SalientPointType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9e95d59746baca49, []int{6, 0}
}

type PatchDescriptor struct {
	Data []float32 `protobuf:"fixed32,1,rep,name=data" json:"data,omitempty"`
}

func (m *PatchDescriptor) Reset()      { *m = PatchDescriptor{} }
func (*PatchDescriptor) ProtoMessage() {}
func (*PatchDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e95d59746baca49, []int{0}
}
func (m *PatchDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PatchDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PatchDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PatchDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatchDescriptor.Merge(m, src)
}
func (m *PatchDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *PatchDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_PatchDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_PatchDescriptor proto.InternalMessageInfo

func (m *PatchDescriptor) GetData() []float32 {
	if m != nil {
		return m.Data
	}
	return nil
}

type BinaryFeatureDescriptor struct {
	Data []byte `protobuf:"bytes,1,opt,name=data" json:"data"`
}

func (m *BinaryFeatureDescriptor) Reset()      { *m = BinaryFeatureDescriptor{} }
func (*BinaryFeatureDescriptor) ProtoMessage() {}
func (*BinaryFeatureDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e95d59746baca49, []int{1}
}
func (m *BinaryFeatureDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BinaryFeatureDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BinaryFeatureDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BinaryFeatureDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryFeatureDescriptor.Merge(m, src)
}
func (m *BinaryFeatureDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *BinaryFeatureDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryFeatureDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryFeatureDescriptor proto.InternalMessageInfo

func (m *BinaryFeatureDescriptor) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type TemporalIRLSSmoothing struct {
	WeightSum *float32 `protobuf:"fixed32,1,opt,name=weight_sum,json=weightSum,def=0" json:"weight_sum,omitempty"`
	ValueSum  *float32 `protobuf:"fixed32,2,opt,name=value_sum,json=valueSum,def=0" json:"value_sum,omitempty"`
}

func (m *TemporalIRLSSmoothing) Reset()      { *m = TemporalIRLSSmoothing{} }
func (*TemporalIRLSSmoothing) ProtoMessage() {}
func (*TemporalIRLSSmoothing) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e95d59746baca49, []int{2}
}
func (m *TemporalIRLSSmoothing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TemporalIRLSSmoothing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TemporalIRLSSmoothing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TemporalIRLSSmoothing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemporalIRLSSmoothing.Merge(m, src)
}
func (m *TemporalIRLSSmoothing) XXX_Size() int {
	return m.Size()
}
func (m *TemporalIRLSSmoothing) XXX_DiscardUnknown() {
	xxx_messageInfo_TemporalIRLSSmoothing.DiscardUnknown(m)
}

var xxx_messageInfo_TemporalIRLSSmoothing proto.InternalMessageInfo

const Default_TemporalIRLSSmoothing_WeightSum float32 = 0
const Default_TemporalIRLSSmoothing_ValueSum float32 = 0

func (m *TemporalIRLSSmoothing) GetWeightSum() float32 {
	if m != nil && m.WeightSum != nil {
		return *m.WeightSum
	}
	return Default_TemporalIRLSSmoothing_WeightSum
}

func (m *TemporalIRLSSmoothing) GetValueSum() float32 {
	if m != nil && m.ValueSum != nil {
		return *m.ValueSum
	}
	return Default_TemporalIRLSSmoothing_ValueSum
}

type RegionFlowFeature struct {
	X                            *float32                 `protobuf:"fixed32,1,opt,name=x,def=0" json:"x,omitempty"`
	Y                            *float32                 `protobuf:"fixed32,2,opt,name=y,def=0" json:"y,omitempty"`
	Dx                           *float32                 `protobuf:"fixed32,3,opt,name=dx,def=0" json:"dx,omitempty"`
	Dy                           *float32                 `protobuf:"fixed32,4,opt,name=dy,def=0" json:"dy,omitempty"`
	TrackId                      *int32                   `protobuf:"varint,13,opt,name=track_id,json=trackId,def=-1" json:"track_id,omitempty"`
	TrackingError                *float32                 `protobuf:"fixed32,5,opt,name=tracking_error,json=trackingError,def=0" json:"tracking_error,omitempty"`
	IrlsWeight                   *float32                 `protobuf:"fixed32,6,opt,name=irls_weight,json=irlsWeight,def=1" json:"irls_weight,omitempty"`
	CornerResponse               *float32                 `protobuf:"fixed32,11,opt,name=corner_response,json=cornerResponse,def=0" json:"corner_response,omitempty"`
	FeatureDescriptor            *PatchDescriptor         `protobuf:"bytes,7,opt,name=feature_descriptor,json=featureDescriptor" json:"feature_descriptor,omitempty"`
	FeatureMatchDescriptor       *PatchDescriptor         `protobuf:"bytes,8,opt,name=feature_match_descriptor,json=featureMatchDescriptor" json:"feature_match_descriptor,omitempty"`
	InternalIrls                 *TemporalIRLSSmoothing   `protobuf:"bytes,10,opt,name=internal_irls,json=internalIrls" json:"internal_irls,omitempty"`
	Label                        string                   `protobuf:"bytes,14,opt,name=label" json:"label"`
	Flags                        int32                    `protobuf:"varint,15,opt,name=flags" json:"flags"`
	FeatureId                    int32                    `protobuf:"varint,16,opt,name=feature_id,json=featureId" json:"feature_id"`
	Octave                       *int32                   `protobuf:"varint,17,opt,name=octave,def=0" json:"octave,omitempty"`
	BinaryFeatureDescriptor      *BinaryFeatureDescriptor `protobuf:"bytes,18,opt,name=binary_feature_descriptor,json=binaryFeatureDescriptor" json:"binary_feature_descriptor,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
}

func (m *RegionFlowFeature) Reset()      { *m = RegionFlowFeature{} }
func (*RegionFlowFeature) ProtoMessage() {}
func (*RegionFlowFeature) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e95d59746baca49, []int{3}
}

var extRange_RegionFlowFeature = []proto.ExtensionRange{
	{Start: 9, End: 9},
	{Start: 12, End: 12},
}

func (*RegionFlowFeature) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_RegionFlowFeature
}

func (m *RegionFlowFeature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionFlowFeature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionFlowFeature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionFlowFeature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionFlowFeature.Merge(m, src)
}
func (m *RegionFlowFeature) XXX_Size() int {
	return m.Size()
}
func (m *RegionFlowFeature) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionFlowFeature.DiscardUnknown(m)
}

var xxx_messageInfo_RegionFlowFeature proto.InternalMessageInfo

const Default_RegionFlowFeature_X float32 = 0
const Default_RegionFlowFeature_Y float32 = 0
const Default_RegionFlowFeature_Dx float32 = 0
const Default_RegionFlowFeature_Dy float32 = 0
const Default_RegionFlowFeature_TrackId int32 = -1
const Default_RegionFlowFeature_TrackingError float32 = 0
const Default_RegionFlowFeature_IrlsWeight float32 = 1
const Default_RegionFlowFeature_CornerResponse float32 = 0
const Default_RegionFlowFeature_Octave int32 = 0

func (m *RegionFlowFeature) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return Default_RegionFlowFeature_X
}

func (m *RegionFlowFeature) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return Default_RegionFlowFeature_Y
}

func (m *RegionFlowFeature) GetDx() float32 {
	if m != nil && m.Dx != nil {
		return *m.Dx
	}
	return Default_RegionFlowFeature_Dx
}

func (m *RegionFlowFeature) GetDy() float32 {
	if m != nil && m.Dy != nil {
		return *m.Dy
	}
	return Default_RegionFlowFeature_Dy
}

func (m *RegionFlowFeature) GetTrackId() int32 {
	if m != nil && m.TrackId != nil {
		return *m.TrackId
	}
	return Default_RegionFlowFeature_TrackId
}

func (m *RegionFlowFeature) GetTrackingError() float32 {
	if m != nil && m.TrackingError != nil {
		return *m.TrackingError
	}
	return Default_RegionFlowFeature_TrackingError
}

func (m *RegionFlowFeature) GetIrlsWeight() float32 {
	if m != nil && m.IrlsWeight != nil {
		return *m.IrlsWeight
	}
	return Default_RegionFlowFeature_IrlsWeight
}

func (m *RegionFlowFeature) GetCornerResponse() float32 {
	if m != nil && m.CornerResponse != nil {
		return *m.CornerResponse
	}
	return Default_RegionFlowFeature_CornerResponse
}

func (m *RegionFlowFeature) GetFeatureDescriptor() *PatchDescriptor {
	if m != nil {
		return m.FeatureDescriptor
	}
	return nil
}

func (m *RegionFlowFeature) GetFeatureMatchDescriptor() *PatchDescriptor {
	if m != nil {
		return m.FeatureMatchDescriptor
	}
	return nil
}

func (m *RegionFlowFeature) GetInternalIrls() *TemporalIRLSSmoothing {
	if m != nil {
		return m.InternalIrls
	}
	return nil
}

func (m *RegionFlowFeature) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *RegionFlowFeature) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *RegionFlowFeature) GetFeatureId() int32 {
	if m != nil {
		return m.FeatureId
	}
	return 0
}

func (m *RegionFlowFeature) GetOctave() int32 {
	if m != nil && m.Octave != nil {
		return *m.Octave
	}
	return Default_RegionFlowFeature_Octave
}

func (m *RegionFlowFeature) GetBinaryFeatureDescriptor() *BinaryFeatureDescriptor {
	if m != nil {
		return m.BinaryFeatureDescriptor
	}
	return nil
}

type RegionFlowFrame struct {
	RegionFlow                   []*RegionFlowFrame_RegionFlow    `protobuf:"bytes,1,rep,name=region_flow,json=regionFlow" json:"region_flow,omitempty"`
	NumTotalFeatures             *int32                           `protobuf:"varint,2,opt,name=num_total_features,json=numTotalFeatures,def=0" json:"num_total_features,omitempty"`
	UnstableFrame                *bool                            `protobuf:"varint,4,opt,name=unstable_frame,json=unstableFrame,def=0" json:"unstable_frame,omitempty"`
	BlurScore                    float32                          `protobuf:"fixed32,7,opt,name=blur_score,json=blurScore" json:"blur_score"`
	FrameWidth                   int32                            `protobuf:"varint,8,opt,name=frame_width,json=frameWidth" json:"frame_width"`
	FrameHeight                  int32                            `protobuf:"varint,9,opt,name=frame_height,json=frameHeight" json:"frame_height"`
	BlockDescriptor              *RegionFlowFrame_BlockDescriptor `protobuf:"bytes,10,opt,name=block_descriptor,json=blockDescriptor" json:"block_descriptor,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
}

func (m *RegionFlowFrame) Reset()      { *m = RegionFlowFrame{} }
func (*RegionFlowFrame) ProtoMessage() {}
func (*RegionFlowFrame) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e95d59746baca49, []int{4}
}

var extRange_RegionFlowFrame = []proto.ExtensionRange{
	{Start: 3, End: 3},
	{Start: 5, End: 5},
	{Start: 6, End: 6},
}

func (*RegionFlowFrame) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_RegionFlowFrame
}

func (m *RegionFlowFrame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionFlowFrame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionFlowFrame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionFlowFrame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionFlowFrame.Merge(m, src)
}
func (m *RegionFlowFrame) XXX_Size() int {
	return m.Size()
}
func (m *RegionFlowFrame) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionFlowFrame.DiscardUnknown(m)
}

var xxx_messageInfo_RegionFlowFrame proto.InternalMessageInfo

const Default_RegionFlowFrame_NumTotalFeatures int32 = 0
const Default_RegionFlowFrame_UnstableFrame bool = false

func (m *RegionFlowFrame) GetRegionFlow() []*RegionFlowFrame_RegionFlow {
	if m != nil {
		return m.RegionFlow
	}
	return nil
}

func (m *RegionFlowFrame) GetNumTotalFeatures() int32 {
	if m != nil && m.NumTotalFeatures != nil {
		return *m.NumTotalFeatures
	}
	return Default_RegionFlowFrame_NumTotalFeatures
}

func (m *RegionFlowFrame) GetUnstableFrame() bool {
	if m != nil && m.UnstableFrame != nil {
		return *m.UnstableFrame
	}
	return Default_RegionFlowFrame_UnstableFrame
}

func (m *RegionFlowFrame) GetBlurScore() float32 {
	if m != nil {
		return m.BlurScore
	}
	return 0
}

func (m *RegionFlowFrame) GetFrameWidth() int32 {
	if m != nil {
		return m.FrameWidth
	}
	return 0
}

func (m *RegionFlowFrame) GetFrameHeight() int32 {
	if m != nil {
		return m.FrameHeight
	}
	return 0
}

func (m *RegionFlowFrame) GetBlockDescriptor() *RegionFlowFrame_BlockDescriptor {
	if m != nil {
		return m.BlockDescriptor
	}
	return nil
}

type RegionFlowFrame_RegionFlow struct {
	RegionId                     int32                `protobuf:"varint,1,req,name=region_id,json=regionId" json:"region_id"`
	CentroidX                    *float32             `protobuf:"fixed32,2,opt,name=centroid_x,json=centroidX,def=0" json:"centroid_x,omitempty"`
	CentroidY                    *float32             `protobuf:"fixed32,3,opt,name=centroid_y,json=centroidY,def=0" json:"centroid_y,omitempty"`
	FlowX                        *float32             `protobuf:"fixed32,4,opt,name=flow_x,json=flowX,def=0" json:"flow_x,omitempty"`
	FlowY                        *float32             `protobuf:"fixed32,5,opt,name=flow_y,json=flowY,def=0" json:"flow_y,omitempty"`
	Feature                      []*RegionFlowFeature `protobuf:"bytes,7,rep,name=feature" json:"feature,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
}

func (m *RegionFlowFrame_RegionFlow) Reset()      { *m = RegionFlowFrame_RegionFlow{} }
func (*RegionFlowFrame_RegionFlow) ProtoMessage() {}
func (*RegionFlowFrame_RegionFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e95d59746baca49, []int{4, 0}
}

var extRange_RegionFlowFrame_RegionFlow = []proto.ExtensionRange{
	{Start: 6, End: 6},
}

func (*RegionFlowFrame_RegionFlow) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_RegionFlowFrame_RegionFlow
}

func (m *RegionFlowFrame_RegionFlow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionFlowFrame_RegionFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionFlowFrame_RegionFlow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionFlowFrame_RegionFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionFlowFrame_RegionFlow.Merge(m, src)
}
func (m *RegionFlowFrame_RegionFlow) XXX_Size() int {
	return m.Size()
}
func (m *RegionFlowFrame_RegionFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionFlowFrame_RegionFlow.DiscardUnknown(m)
}

var xxx_messageInfo_RegionFlowFrame_RegionFlow proto.InternalMessageInfo

const Default_RegionFlowFrame_RegionFlow_CentroidX float32 = 0
const Default_RegionFlowFrame_RegionFlow_CentroidY float32 = 0
const Default_RegionFlowFrame_RegionFlow_FlowX float32 = 0
const Default_RegionFlowFrame_RegionFlow_FlowY float32 = 0

func (m *RegionFlowFrame_RegionFlow) GetRegionId() int32 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *RegionFlowFrame_RegionFlow) GetCentroidX() float32 {
	if m != nil && m.CentroidX != nil {
		return *m.CentroidX
	}
	return Default_RegionFlowFrame_RegionFlow_CentroidX
}

func (m *RegionFlowFrame_RegionFlow) GetCentroidY() float32 {
	if m != nil && m.CentroidY != nil {
		return *m.CentroidY
	}
	return Default_RegionFlowFrame_RegionFlow_CentroidY
}

func (m *RegionFlowFrame_RegionFlow) GetFlowX() float32 {
	if m != nil && m.FlowX != nil {
		return *m.FlowX
	}
	return Default_RegionFlowFrame_RegionFlow_FlowX
}

func (m *RegionFlowFrame_RegionFlow) GetFlowY() float32 {
	if m != nil && m.FlowY != nil {
		return *m.FlowY
	}
	return Default_RegionFlowFrame_RegionFlow_FlowY
}

func (m *RegionFlowFrame_RegionFlow) GetFeature() []*RegionFlowFeature {
	if m != nil {
		return m.Feature
	}
	return nil
}

type RegionFlowFrame_BlockDescriptor struct {
	BlockWidth  int32  `protobuf:"varint,1,opt,name=block_width,json=blockWidth" json:"block_width"`
	BlockHeight int32  `protobuf:"varint,2,opt,name=block_height,json=blockHeight" json:"block_height"`
	NumBlocksX  *int32 `protobuf:"varint,3,opt,name=num_blocks_x,json=numBlocksX,def=0" json:"num_blocks_x,omitempty"`
	NumBlocksY  *int32 `protobuf:"varint,4,opt,name=num_blocks_y,json=numBlocksY,def=0" json:"num_blocks_y,omitempty"`
}

func (m *RegionFlowFrame_BlockDescriptor) Reset()      { *m = RegionFlowFrame_BlockDescriptor{} }
func (*RegionFlowFrame_BlockDescriptor) ProtoMessage() {}
func (*RegionFlowFrame_BlockDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e95d59746baca49, []int{4, 1}
}
func (m *RegionFlowFrame_BlockDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionFlowFrame_BlockDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionFlowFrame_BlockDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionFlowFrame_BlockDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionFlowFrame_BlockDescriptor.Merge(m, src)
}
func (m *RegionFlowFrame_BlockDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *RegionFlowFrame_BlockDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionFlowFrame_BlockDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_RegionFlowFrame_BlockDescriptor proto.InternalMessageInfo

const Default_RegionFlowFrame_BlockDescriptor_NumBlocksX int32 = 0
const Default_RegionFlowFrame_BlockDescriptor_NumBlocksY int32 = 0

func (m *RegionFlowFrame_BlockDescriptor) GetBlockWidth() int32 {
	if m != nil {
		return m.BlockWidth
	}
	return 0
}

func (m *RegionFlowFrame_BlockDescriptor) GetBlockHeight() int32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *RegionFlowFrame_BlockDescriptor) GetNumBlocksX() int32 {
	if m != nil && m.NumBlocksX != nil {
		return *m.NumBlocksX
	}
	return Default_RegionFlowFrame_BlockDescriptor_NumBlocksX
}

func (m *RegionFlowFrame_BlockDescriptor) GetNumBlocksY() int32 {
	if m != nil && m.NumBlocksY != nil {
		return *m.NumBlocksY
	}
	return Default_RegionFlowFrame_BlockDescriptor_NumBlocksY
}

type RegionFlowFeatureList struct {
	Feature                     []*RegionFlowFeature `protobuf:"bytes,1,rep,name=feature" json:"feature,omitempty"`
	FrameWidth                  int32                `protobuf:"varint,2,opt,name=frame_width,json=frameWidth" json:"frame_width"`
	FrameHeight                 int32                `protobuf:"varint,3,opt,name=frame_height,json=frameHeight" json:"frame_height"`
	Unstable                    *bool                `protobuf:"varint,4,opt,name=unstable,def=0" json:"unstable,omitempty"`
	DistanceFromBorder          *int32               `protobuf:"varint,5,opt,name=distance_from_border,json=distanceFromBorder,def=0" json:"distance_from_border,omitempty"`
	BlurScore                   float32              `protobuf:"fixed32,6,opt,name=blur_score,json=blurScore" json:"blur_score"`
	LongTracks                  *bool                `protobuf:"varint,7,opt,name=long_tracks,json=longTracks,def=0" json:"long_tracks,omitempty"`
	FracLongFeaturesRejected    *float32             `protobuf:"fixed32,8,opt,name=frac_long_features_rejected,json=fracLongFeaturesRejected,def=0" json:"frac_long_features_rejected,omitempty"`
	VisualConsistency           *float32             `protobuf:"fixed32,9,opt,name=visual_consistency,json=visualConsistency,def=-1" json:"visual_consistency,omitempty"`
	TimestampUsec               *int64               `protobuf:"varint,10,opt,name=timestamp_usec,json=timestampUsec,def=0" json:"timestamp_usec,omitempty"`
	MatchFrame                  *int32               `protobuf:"varint,11,opt,name=match_frame,json=matchFrame,def=0" json:"match_frame,omitempty"`
	IsDuplicated                *bool                `protobuf:"varint,12,opt,name=is_duplicated,json=isDuplicated,def=0" json:"is_duplicated,omitempty"`
	ActivelyDiscardedTrackedIds []int32              `protobuf:"varint,13,rep,name=actively_discarded_tracked_ids,json=activelyDiscardedTrackedIds" json:"actively_discarded_tracked_ids,omitempty"`
}

func (m *RegionFlowFeatureList) Reset()      { *m = RegionFlowFeatureList{} }
func (*RegionFlowFeatureList) ProtoMessage() {}
func (*RegionFlowFeatureList) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e95d59746baca49, []int{5}
}
func (m *RegionFlowFeatureList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionFlowFeatureList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionFlowFeatureList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionFlowFeatureList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionFlowFeatureList.Merge(m, src)
}
func (m *RegionFlowFeatureList) XXX_Size() int {
	return m.Size()
}
func (m *RegionFlowFeatureList) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionFlowFeatureList.DiscardUnknown(m)
}

var xxx_messageInfo_RegionFlowFeatureList proto.InternalMessageInfo

const Default_RegionFlowFeatureList_Unstable bool = false
const Default_RegionFlowFeatureList_DistanceFromBorder int32 = 0
const Default_RegionFlowFeatureList_LongTracks bool = false
const Default_RegionFlowFeatureList_FracLongFeaturesRejected float32 = 0
const Default_RegionFlowFeatureList_VisualConsistency float32 = -1
const Default_RegionFlowFeatureList_TimestampUsec int64 = 0
const Default_RegionFlowFeatureList_MatchFrame int32 = 0
const Default_RegionFlowFeatureList_IsDuplicated bool = false

func (m *RegionFlowFeatureList) GetFeature() []*RegionFlowFeature {
	if m != nil {
		return m.Feature
	}
	return nil
}

func (m *RegionFlowFeatureList) GetFrameWidth() int32 {
	if m != nil {
		return m.FrameWidth
	}
	return 0
}

func (m *RegionFlowFeatureList) GetFrameHeight() int32 {
	if m != nil {
		return m.FrameHeight
	}
	return 0
}

func (m *RegionFlowFeatureList) GetUnstable() bool {
	if m != nil && m.Unstable != nil {
		return *m.Unstable
	}
	return Default_RegionFlowFeatureList_Unstable
}

func (m *RegionFlowFeatureList) GetDistanceFromBorder() int32 {
	if m != nil && m.DistanceFromBorder != nil {
		return *m.DistanceFromBorder
	}
	return Default_RegionFlowFeatureList_DistanceFromBorder
}

func (m *RegionFlowFeatureList) GetBlurScore() float32 {
	if m != nil {
		return m.BlurScore
	}
	return 0
}

func (m *RegionFlowFeatureList) GetLongTracks() bool {
	if m != nil && m.LongTracks != nil {
		return *m.LongTracks
	}
	return Default_RegionFlowFeatureList_LongTracks
}

func (m *RegionFlowFeatureList) GetFracLongFeaturesRejected() float32 {
	if m != nil && m.FracLongFeaturesRejected != nil {
		return *m.FracLongFeaturesRejected
	}
	return Default_RegionFlowFeatureList_FracLongFeaturesRejected
}

func (m *RegionFlowFeatureList) GetVisualConsistency() float32 {
	if m != nil && m.VisualConsistency != nil {
		return *m.VisualConsistency
	}
	return Default_RegionFlowFeatureList_VisualConsistency
}

func (m *RegionFlowFeatureList) GetTimestampUsec() int64 {
	if m != nil && m.TimestampUsec != nil {
		return *m.TimestampUsec
	}
	return Default_RegionFlowFeatureList_TimestampUsec
}

func (m *RegionFlowFeatureList) GetMatchFrame() int32 {
	if m != nil && m.MatchFrame != nil {
		return *m.MatchFrame
	}
	return Default_RegionFlowFeatureList_MatchFrame
}

func (m *RegionFlowFeatureList) GetIsDuplicated() bool {
	if m != nil && m.IsDuplicated != nil {
		return *m.IsDuplicated
	}
	return Default_RegionFlowFeatureList_IsDuplicated
}

func (m *RegionFlowFeatureList) GetActivelyDiscardedTrackedIds() []int32 {
	if m != nil {
		return m.ActivelyDiscardedTrackedIds
	}
	return nil
}

type SalientPoint struct {
	NormPointX                   *float32                       `protobuf:"fixed32,1,opt,name=norm_point_x,json=normPointX,def=0" json:"norm_point_x,omitempty"`
	NormPointY                   *float32                       `protobuf:"fixed32,2,opt,name=norm_point_y,json=normPointY,def=0" json:"norm_point_y,omitempty"`
	Type                         *SalientPoint_SalientPointType `protobuf:"varint,11,opt,name=type,enum=mediapipe.SalientPoint_SalientPointType,def=1" json:"type,omitempty"`
	Left                         *float32                       `protobuf:"fixed32,3,opt,name=left,def=0.3" json:"left,omitempty"`
	Bottom                       *float32                       `protobuf:"fixed32,4,opt,name=bottom,def=0.3" json:"bottom,omitempty"`
	Right                        *float32                       `protobuf:"fixed32,9,opt,name=right,def=0.3" json:"right,omitempty"`
	Top                          *float32                       `protobuf:"fixed32,10,opt,name=top,def=0.3" json:"top,omitempty"`
	Weight                       *float32                       `protobuf:"fixed32,5,opt,name=weight,def=15" json:"weight,omitempty"`
	NormMajor                    float32                        `protobuf:"fixed32,6,opt,name=norm_major,json=normMajor" json:"norm_major"`
	NormMinor                    float32                        `protobuf:"fixed32,7,opt,name=norm_minor,json=normMinor" json:"norm_minor"`
	Angle                        float32                        `protobuf:"fixed32,8,opt,name=angle" json:"angle"`
	proto.XXX_InternalExtensions `json:"-"`
}

func (m *SalientPoint) Reset()      { *m = SalientPoint{} }
func (*SalientPoint) ProtoMessage() {}
func (*SalientPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e95d59746baca49, []int{6}
}

var extRange_SalientPoint = []proto.ExtensionRange{
	{Start: 20000, End: 536870911},
}

func (*SalientPoint) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_SalientPoint
}

func (m *SalientPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SalientPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SalientPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SalientPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SalientPoint.Merge(m, src)
}
func (m *SalientPoint) XXX_Size() int {
	return m.Size()
}
func (m *SalientPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_SalientPoint.DiscardUnknown(m)
}

var xxx_messageInfo_SalientPoint proto.InternalMessageInfo

const Default_SalientPoint_NormPointX float32 = 0
const Default_SalientPoint_NormPointY float32 = 0
const Default_SalientPoint_Type SalientPoint_SalientPointType = SALIENT_POINT_TYPE_INCLUDE
const Default_SalientPoint_Left float32 = 0.3
const Default_SalientPoint_Bottom float32 = 0.3
const Default_SalientPoint_Right float32 = 0.3
const Default_SalientPoint_Top float32 = 0.3
const Default_SalientPoint_Weight float32 = 15

func (m *SalientPoint) GetNormPointX() float32 {
	if m != nil && m.NormPointX != nil {
		return *m.NormPointX
	}
	return Default_SalientPoint_NormPointX
}

func (m *SalientPoint) GetNormPointY() float32 {
	if m != nil && m.NormPointY != nil {
		return *m.NormPointY
	}
	return Default_SalientPoint_NormPointY
}

func (m *SalientPoint) GetType() SalientPoint_SalientPointType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_SalientPoint_Type
}

func (m *SalientPoint) GetLeft() float32 {
	if m != nil && m.Left != nil {
		return *m.Left
	}
	return Default_SalientPoint_Left
}

func (m *SalientPoint) GetBottom() float32 {
	if m != nil && m.Bottom != nil {
		return *m.Bottom
	}
	return Default_SalientPoint_Bottom
}

func (m *SalientPoint) GetRight() float32 {
	if m != nil && m.Right != nil {
		return *m.Right
	}
	return Default_SalientPoint_Right
}

func (m *SalientPoint) GetTop() float32 {
	if m != nil && m.Top != nil {
		return *m.Top
	}
	return Default_SalientPoint_Top
}

func (m *SalientPoint) GetWeight() float32 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return Default_SalientPoint_Weight
}

func (m *SalientPoint) GetNormMajor() float32 {
	if m != nil {
		return m.NormMajor
	}
	return 0
}

func (m *SalientPoint) GetNormMinor() float32 {
	if m != nil {
		return m.NormMinor
	}
	return 0
}

func (m *SalientPoint) GetAngle() float32 {
	if m != nil {
		return m.Angle
	}
	return 0
}

type SalientPointFrame struct {
	Point                        []*SalientPoint `protobuf:"bytes,1,rep,name=point" json:"point,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
}

func (m *SalientPointFrame) Reset()      { *m = SalientPointFrame{} }
func (*SalientPointFrame) ProtoMessage() {}
func (*SalientPointFrame) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e95d59746baca49, []int{7}
}

var extRange_SalientPointFrame = []proto.ExtensionRange{
	{Start: 20000, End: 536870911},
}

func (*SalientPointFrame) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_SalientPointFrame
}

func (m *SalientPointFrame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SalientPointFrame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SalientPointFrame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SalientPointFrame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SalientPointFrame.Merge(m, src)
}
func (m *SalientPointFrame) XXX_Size() int {
	return m.Size()
}
func (m *SalientPointFrame) XXX_DiscardUnknown() {
	xxx_messageInfo_SalientPointFrame.DiscardUnknown(m)
}

var xxx_messageInfo_SalientPointFrame proto.InternalMessageInfo

func (m *SalientPointFrame) GetPoint() []*SalientPoint {
	if m != nil {
		return m.Point
	}
	return nil
}

func init() {
	proto.RegisterEnum("mediapipe.RegionFlowFeature_Flags", RegionFlowFeature_Flags_name, RegionFlowFeature_Flags_value)
	proto.RegisterEnum("mediapipe.SalientPoint_SalientPointType", SalientPoint_SalientPointType_name, SalientPoint_SalientPointType_value)
	proto.RegisterType((*PatchDescriptor)(nil), "mediapipe.PatchDescriptor")
	proto.RegisterType((*BinaryFeatureDescriptor)(nil), "mediapipe.BinaryFeatureDescriptor")
	proto.RegisterType((*TemporalIRLSSmoothing)(nil), "mediapipe.TemporalIRLSSmoothing")
	proto.RegisterType((*RegionFlowFeature)(nil), "mediapipe.RegionFlowFeature")
	proto.RegisterType((*RegionFlowFrame)(nil), "mediapipe.RegionFlowFrame")
	proto.RegisterType((*RegionFlowFrame_RegionFlow)(nil), "mediapipe.RegionFlowFrame.RegionFlow")
	proto.RegisterType((*RegionFlowFrame_BlockDescriptor)(nil), "mediapipe.RegionFlowFrame.BlockDescriptor")
	proto.RegisterType((*RegionFlowFeatureList)(nil), "mediapipe.RegionFlowFeatureList")
	proto.RegisterType((*SalientPoint)(nil), "mediapipe.SalientPoint")
	proto.RegisterType((*SalientPointFrame)(nil), "mediapipe.SalientPointFrame")
}

func init() {
	proto.RegisterFile("mediapipe/util/tracking/region_flow.proto", fileDescriptor_9e95d59746baca49)
}

var fileDescriptor_9e95d59746baca49 = []byte{
	// 1500 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xcf, 0x6f, 0xdb, 0x46,
	0x16, 0x16, 0xf5, 0xcb, 0xd2, 0x93, 0x6c, 0xcb, 0x83, 0xcd, 0x9a, 0x71, 0x12, 0x46, 0x91, 0x37,
	0xbb, 0x5a, 0x61, 0x63, 0xc7, 0x31, 0x76, 0x0f, 0x3e, 0x6d, 0x6c, 0x4b, 0x89, 0x10, 0x45, 0x36,
	0x68, 0x19, 0xb6, 0xf7, 0xb0, 0x03, 0x8a, 0x1c, 0xc9, 0x93, 0x90, 0x1c, 0x81, 0xa4, 0x6c, 0xeb,
	0xe6, 0x73, 0x4e, 0xfd, 0x03, 0x5a, 0xa0, 0xc7, 0x02, 0xed, 0x1f, 0x92, 0x63, 0x8e, 0x39, 0x15,
	0x8d, 0x83, 0x02, 0x3d, 0xe6, 0xd8, 0x63, 0x31, 0x33, 0xa4, 0x44, 0x2b, 0x72, 0xda, 0xde, 0xc4,
	0xef, 0xfb, 0x66, 0x38, 0xef, 0xbd, 0xef, 0xbd, 0xa1, 0xe0, 0x9f, 0x0e, 0xb1, 0xa8, 0x31, 0xa0,
	0x03, 0xb2, 0x3e, 0x0c, 0xa8, 0xbd, 0x1e, 0x78, 0x86, 0xf9, 0x9a, 0xba, 0xfd, 0x75, 0x8f, 0xf4,
	0x29, 0x73, 0x71, 0xcf, 0x66, 0xe7, 0x6b, 0x03, 0x8f, 0x05, 0x0c, 0xe5, 0xc7, 0xd2, 0xca, 0x43,
	0x58, 0xdc, 0x37, 0x02, 0xf3, 0x74, 0x97, 0xf8, 0xa6, 0x47, 0x07, 0x01, 0xf3, 0x10, 0x82, 0xb4,
	0x65, 0x04, 0x86, 0xaa, 0x94, 0x53, 0xd5, 0xa4, 0x2e, 0x7e, 0x57, 0x36, 0x61, 0x79, 0x9b, 0xba,
	0x86, 0x37, 0x6a, 0x10, 0x23, 0x18, 0x7a, 0x24, 0x26, 0x57, 0xc7, 0x72, 0xa5, 0x5a, 0xdc, 0x4e,
	0xbf, 0xfd, 0xf1, 0x7e, 0x22, 0x5c, 0x74, 0x02, 0xb7, 0x3a, 0xc4, 0x19, 0x30, 0xcf, 0xb0, 0x9b,
	0x7a, 0xeb, 0xe0, 0xc0, 0x61, 0x2c, 0x38, 0xa5, 0x6e, 0x1f, 0x95, 0x01, 0xce, 0x09, 0xed, 0x9f,
	0x06, 0xd8, 0x1f, 0x3a, 0x62, 0x61, 0x72, 0x4b, 0x79, 0xac, 0xe7, 0x25, 0x78, 0x30, 0x74, 0x90,
	0x06, 0xf9, 0x33, 0xc3, 0x1e, 0x12, 0x21, 0x48, 0x46, 0x82, 0x9c, 0xc0, 0x0e, 0x86, 0x4e, 0xe5,
	0x4d, 0x16, 0x96, 0x74, 0x11, 0x57, 0xc3, 0x66, 0xe7, 0xe1, 0xa1, 0xd0, 0x22, 0x28, 0x17, 0x93,
	0xed, 0x94, 0x0b, 0x0e, 0x8c, 0x26, 0xcb, 0x95, 0x11, 0x5a, 0x82, 0xa4, 0x75, 0xa1, 0xa6, 0x22,
	0x24, 0x69, 0x5d, 0x08, 0x68, 0xa4, 0xa6, 0x27, 0xd0, 0x08, 0xdd, 0x83, 0x9c, 0xc8, 0x1e, 0xa6,
	0x96, 0x3a, 0x5f, 0x56, 0xaa, 0x99, 0xad, 0xe4, 0xa3, 0x0d, 0x7d, 0x4e, 0x60, 0x4d, 0x0b, 0x55,
	0x61, 0x21, 0x4a, 0x2e, 0x26, 0x9e, 0xc7, 0x3c, 0x35, 0x13, 0xad, 0x9e, 0x8f, 0x88, 0x3a, 0xc7,
	0x51, 0x05, 0x0a, 0xd4, 0xb3, 0x7d, 0x2c, 0x03, 0x53, 0xb3, 0x52, 0xb6, 0xa1, 0x03, 0x47, 0x8f,
	0x04, 0x88, 0x6a, 0xb0, 0x68, 0x32, 0xcf, 0x25, 0x1e, 0xf6, 0x88, 0x3f, 0x60, 0xae, 0x4f, 0xd4,
	0x42, 0xb4, 0xdd, 0x82, 0x64, 0xf4, 0x90, 0x40, 0x4d, 0x40, 0x3d, 0x19, 0x2b, 0xb6, 0xc6, 0x15,
	0x50, 0xe7, 0xca, 0x4a, 0xb5, 0xf0, 0x64, 0x65, 0x6d, 0x5c, 0xd5, 0xb5, 0xa9, 0x92, 0xea, 0x4b,
	0xbd, 0xcf, 0xca, 0xd6, 0x01, 0x35, 0xda, 0xca, 0xe1, 0xea, 0xf8, 0x86, 0xb9, 0xdf, 0xdd, 0xf0,
	0xaf, 0xe1, 0xda, 0x97, 0x53, 0xde, 0xa9, 0xc3, 0x3c, 0x75, 0x03, 0xe2, 0xb9, 0x86, 0x8d, 0x79,
	0x8c, 0x2a, 0x88, 0xad, 0xca, 0xb1, 0xad, 0x66, 0x5a, 0x42, 0x2f, 0x46, 0xcb, 0x9a, 0x9e, 0xed,
	0xa3, 0x15, 0xc8, 0xd8, 0x46, 0x97, 0xd8, 0xea, 0x42, 0x59, 0xa9, 0xe6, 0x43, 0x53, 0x49, 0x88,
	0x73, 0x3d, 0xdb, 0xe8, 0xfb, 0xea, 0x22, 0xaf, 0x4c, 0xc4, 0x09, 0x08, 0xad, 0x02, 0x44, 0x41,
	0x51, 0x4b, 0x2d, 0xc5, 0x04, 0xf9, 0x10, 0x6f, 0x5a, 0xe8, 0x36, 0x64, 0x99, 0x19, 0x18, 0x67,
	0x44, 0x5d, 0x12, 0xb5, 0x55, 0x1e, 0xeb, 0x21, 0x80, 0xfe, 0x0f, 0xb7, 0xbb, 0xc2, 0xe6, 0x78,
	0x46, 0x9a, 0x91, 0x08, 0xa5, 0x12, 0x0b, 0xe5, 0x86, 0x96, 0xd0, 0x97, 0xbb, 0xb3, 0x89, 0xca,
	0x73, 0xc8, 0x34, 0xc4, 0x41, 0xef, 0x82, 0xaa, 0xd7, 0x9f, 0x35, 0xf7, 0xda, 0xb8, 0xd1, 0xda,
	0x3b, 0xc2, 0x8d, 0xd6, 0xd3, 0x67, 0xf8, 0xb0, 0xfd, 0xa2, 0xbd, 0x77, 0xd4, 0x2e, 0x25, 0xd0,
	0x03, 0xb8, 0xf7, 0x19, 0xbb, 0xad, 0xef, 0xbd, 0xa8, 0xb7, 0x71, 0x47, 0x7f, 0xba, 0xf3, 0xa2,
	0xa4, 0xd4, 0xd2, 0xb9, 0x7c, 0x09, 0x6a, 0xe9, 0x5c, 0xb1, 0x34, 0x5f, 0xf9, 0x21, 0x0b, 0x8b,
	0xb1, 0x66, 0xf0, 0x0c, 0x87, 0xa0, 0x06, 0x14, 0x62, 0x7d, 0x2f, 0x7a, 0xb9, 0xf0, 0xe4, 0x61,
	0xec, 0xec, 0x53, 0x0b, 0x62, 0xcf, 0x3a, 0x78, 0xe3, 0xdf, 0x68, 0x1d, 0x90, 0x3b, 0x74, 0x70,
	0xc0, 0x02, 0xc3, 0x8e, 0x92, 0xe2, 0x8b, 0x96, 0x12, 0x89, 0x2b, 0xb9, 0x43, 0xa7, 0xc3, 0xb9,
	0x30, 0x56, 0x1f, 0xfd, 0x0b, 0x16, 0x86, 0xae, 0x1f, 0x18, 0x5d, 0x9b, 0xe0, 0x1e, 0xdf, 0x59,
	0xb4, 0x56, 0x6e, 0x2b, 0xd3, 0x33, 0x6c, 0x9f, 0xe8, 0xf3, 0x11, 0x29, 0x8f, 0xb9, 0x0a, 0xd0,
	0xb5, 0x87, 0x1e, 0xf6, 0x4d, 0xe6, 0x11, 0x61, 0xe4, 0x64, 0x54, 0x30, 0x8e, 0x1f, 0x70, 0x18,
	0x3d, 0x84, 0x82, 0xd8, 0x09, 0x9f, 0x53, 0x2b, 0x38, 0x15, 0xee, 0x8c, 0xca, 0x0a, 0x82, 0x38,
	0xe2, 0x38, 0xfa, 0x07, 0x14, 0xa5, 0xec, 0x54, 0x76, 0x5b, 0x3e, 0xa6, 0x93, 0x1b, 0x3c, 0x97,
	0x1d, 0x77, 0x08, 0xa5, 0xae, 0xcd, 0xcc, 0xd7, 0xf1, 0xe2, 0x4a, 0x9f, 0xd6, 0xbe, 0x90, 0xa0,
	0x6d, 0xbe, 0x24, 0x56, 0xe4, 0xc5, 0xee, 0x75, 0x60, 0xe5, 0x67, 0x05, 0x60, 0xb2, 0x08, 0x3d,
	0x80, 0x7c, 0x58, 0x01, 0x6a, 0xa9, 0x4a, 0x39, 0x39, 0x3e, 0x4b, 0x4e, 0xc2, 0x4d, 0x8b, 0xcf,
	0x41, 0x93, 0xb8, 0x81, 0xc7, 0xa8, 0x85, 0x2f, 0x26, 0x73, 0x2a, 0x1f, 0x81, 0xc7, 0xd7, 0x14,
	0xa3, 0xc9, 0xdc, 0x1a, 0x2b, 0x4e, 0x90, 0x0a, 0x59, 0x5e, 0x61, 0x7c, 0x31, 0x19, 0x61, 0x19,
	0x0e, 0x1c, 0x8f, 0x99, 0xd1, 0x64, 0x3c, 0x09, 0xe6, 0x04, 0xfd, 0x07, 0xe6, 0xc2, 0x52, 0xaa,
	0x73, 0xc2, 0x18, 0x77, 0x67, 0xc7, 0x2d, 0x35, 0x7a, 0x24, 0xae, 0xa5, 0x73, 0xd9, 0xd2, 0xdc,
	0xca, 0xf7, 0x0a, 0x2c, 0x4e, 0x25, 0x83, 0x97, 0x48, 0xa6, 0x54, 0x96, 0x48, 0x89, 0x97, 0x48,
	0x10, 0xe3, 0x12, 0x49, 0x59, 0x58, 0xa2, 0x64, 0xbc, 0x44, 0x82, 0x09, 0x4b, 0xb4, 0x0a, 0x45,
	0x6e, 0x3b, 0x01, 0xf9, 0x58, 0x4e, 0x6c, 0x61, 0x38, 0x70, 0x87, 0x8e, 0x78, 0xb9, 0x7f, 0x3c,
	0x25, 0x92, 0x33, 0x7c, 0x4a, 0x74, 0x52, 0x4b, 0xe7, 0x52, 0xa5, 0x74, 0x2d, 0x9d, 0xcb, 0x94,
	0xb2, 0xf2, 0xfc, 0x95, 0x5f, 0xd3, 0x70, 0xeb, 0xb3, 0x20, 0x5b, 0xd4, 0x0f, 0xe2, 0x79, 0x51,
	0xfe, 0x44, 0x5e, 0xa6, 0x0d, 0x9a, 0xfc, 0x83, 0x06, 0x4d, 0xdd, 0x64, 0xd0, 0x07, 0x90, 0x8b,
	0xda, 0xe4, 0x7a, 0xf7, 0x8c, 0x61, 0xb4, 0x09, 0x7f, 0xb1, 0xa8, 0x1f, 0x18, 0xae, 0xc9, 0xdb,
	0x8c, 0x39, 0xb8, 0xcb, 0x3c, 0x8b, 0xc8, 0x9b, 0x48, 0xe4, 0x00, 0x45, 0x74, 0xc3, 0x63, 0xce,
	0xb6, 0x20, 0xa7, 0xba, 0x2d, 0x3b, 0xbb, 0xdb, 0xfe, 0x0e, 0x05, 0x9b, 0xb9, 0x7d, 0x2c, 0x6e,
	0x32, 0x5f, 0xf4, 0xe4, 0xf8, 0xfd, 0xc0, 0x99, 0x8e, 0x20, 0xd0, 0x7f, 0xe1, 0x4e, 0xcf, 0x33,
	0x4c, 0x2c, 0xc4, 0xd1, 0x64, 0xc0, 0x1e, 0x79, 0x45, 0xcc, 0x80, 0x58, 0xa2, 0x4b, 0x85, 0xe7,
	0x54, 0xae, 0x6a, 0x31, 0xb7, 0x1f, 0x8d, 0x08, 0x3d, 0x94, 0xa0, 0x0d, 0x40, 0x67, 0xd4, 0x1f,
	0x1a, 0x36, 0x36, 0x99, 0xeb, 0x53, 0x3f, 0x20, 0xae, 0x39, 0x12, 0x6d, 0x9b, 0x14, 0x17, 0xee,
	0x92, 0x64, 0x77, 0x26, 0xa4, 0xb8, 0x7a, 0xa9, 0x43, 0xfc, 0xc0, 0x70, 0x06, 0x78, 0xe8, 0x13,
	0x53, 0x34, 0x6e, 0x4a, 0x5e, 0xbd, 0x11, 0x71, 0xe8, 0x13, 0x93, 0x5f, 0xbd, 0xf2, 0x5e, 0x93,
	0x43, 0xa8, 0x30, 0xf6, 0x86, 0x40, 0xe5, 0xf4, 0xa9, 0xc1, 0x3c, 0xf5, 0xb1, 0x35, 0x1c, 0xd8,
	0xd4, 0x34, 0xf8, 0xa1, 0x8b, 0xf1, 0x60, 0x8b, 0xd4, 0xdf, 0x1d, 0x53, 0x68, 0x07, 0x34, 0xc3,
	0x0c, 0xe8, 0x19, 0xb1, 0x47, 0xd8, 0xa2, 0xbe, 0x69, 0x78, 0x16, 0xb1, 0x64, 0x92, 0x88, 0x85,
	0xa9, 0xe5, 0xab, 0xf3, 0xe5, 0x54, 0x35, 0xa3, 0xdf, 0x89, 0x54, 0xbb, 0x91, 0xa8, 0x23, 0x35,
	0x4d, 0xcb, 0xaf, 0xbc, 0x4d, 0x43, 0xf1, 0xc0, 0xb0, 0x29, 0x71, 0x83, 0x7d, 0x46, 0x5d, 0xe9,
	0x73, 0xe6, 0x39, 0x78, 0xc0, 0x9f, 0x70, 0xec, 0xe3, 0x05, 0x38, 0x2c, 0x34, 0xc7, 0x53, 0xa2,
	0xd8, 0x07, 0xcd, 0x44, 0x74, 0x82, 0x8e, 0x21, 0x1d, 0x8c, 0x06, 0x32, 0xd0, 0x85, 0x27, 0xd5,
	0x98, 0x71, 0xe3, 0x2f, 0xbc, 0xf6, 0xd0, 0x19, 0x0d, 0xc8, 0xd6, 0xca, 0xc1, 0xd3, 0x56, 0xb3,
	0xde, 0xee, 0xe0, 0xfd, 0xbd, 0x66, 0xbb, 0x83, 0x3b, 0x27, 0xfb, 0x75, 0xdc, 0x6c, 0xef, 0xb4,
	0x0e, 0x77, 0xeb, 0xba, 0xd8, 0x11, 0x2d, 0x43, 0xda, 0x26, 0xbd, 0x20, 0x9c, 0x3e, 0xa9, 0xc7,
	0x6b, 0x9b, 0xba, 0x00, 0xd0, 0x1d, 0xc8, 0x76, 0x59, 0x10, 0x30, 0x27, 0x1c, 0x3d, 0x82, 0x0a,
	0x21, 0x74, 0x1b, 0x32, 0xde, 0x78, 0x0c, 0x87, 0x9c, 0x44, 0xd0, 0x2d, 0x48, 0x05, 0x6c, 0x20,
	0x2a, 0x17, 0x12, 0xfc, 0x19, 0xad, 0x40, 0x36, 0xfc, 0x4e, 0x92, 0xf3, 0x2a, 0xb9, 0xf1, 0x6f,
	0x3d, 0x44, 0xb8, 0x73, 0x45, 0x0a, 0x1c, 0xe3, 0x15, 0xf3, 0xae, 0x3b, 0x97, 0xe3, 0x2f, 0x39,
	0x3c, 0x11, 0x51, 0x37, 0xfc, 0x2a, 0xba, 0x2e, 0xe2, 0x30, 0xff, 0x7c, 0x30, 0xdc, 0xbe, 0x4d,
	0xa4, 0x41, 0xa3, 0xcf, 0x07, 0x01, 0x55, 0xbe, 0x51, 0xa0, 0x34, 0x9d, 0x20, 0xa4, 0xc1, 0xac,
	0x14, 0x4d, 0x2e, 0xeb, 0xd9, 0x7c, 0x98, 0xc2, 0x92, 0x82, 0x56, 0xe1, 0xfe, 0x0c, 0xbe, 0x7e,
	0x2c, 0x78, 0xdc, 0xaa, 0x37, 0x3a, 0xa5, 0x24, 0xfa, 0x1b, 0x94, 0xbf, 0x20, 0xd2, 0x9b, 0xcf,
	0x9e, 0x77, 0x4a, 0xa9, 0x1a, 0xe4, 0xbe, 0xfd, 0x5a, 0x29, 0x5d, 0x5e, 0x5e, 0x5e, 0x26, 0x2b,
	0x6d, 0x58, 0x8a, 0x1f, 0x55, 0x1a, 0xfa, 0x11, 0x64, 0x84, 0x49, 0xc2, 0xf1, 0xb5, 0x7c, 0x83,
	0x0b, 0x74, 0xa9, 0x8a, 0xef, 0xb7, 0xfd, 0x46, 0x79, 0xf7, 0x41, 0x4b, 0xbc, 0xff, 0xa0, 0x25,
	0x3e, 0x7d, 0xd0, 0x94, 0xcb, 0x2b, 0x4d, 0xf9, 0xee, 0x4a, 0x53, 0xde, 0x5e, 0x69, 0xca, 0xbb,
	0x2b, 0x4d, 0xf9, 0xe9, 0x4a, 0x53, 0x7e, 0xb9, 0xd2, 0x12, 0x9f, 0xae, 0x34, 0xe5, 0xab, 0x8f,
	0x5a, 0xe2, 0xdd, 0x47, 0x2d, 0xf1, 0xfe, 0xa3, 0x96, 0x80, 0x7b, 0x26, 0x73, 0xd6, 0xfa, 0x8c,
	0xf5, 0x6d, 0x12, 0x7b, 0x59, 0xf4, 0x15, 0xbc, 0xaf, 0xfc, 0x6f, 0xb3, 0x4f, 0x83, 0xd3, 0x61,
	0x77, 0xcd, 0x64, 0xce, 0xba, 0xd4, 0xad, 0x4f, 0xfe, 0xa8, 0xdc, 0xf0, 0x97, 0xe5, 0xb7, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xbf, 0x0a, 0xec, 0x55, 0xcc, 0x0c, 0x00, 0x00,
}

func (x RegionFlowFeature_Flags) String() string {
	s, ok := RegionFlowFeature_Flags_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SalientPoint_SalientPointType) String() string {
	s, ok := SalientPoint_SalientPointType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *PatchDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PatchDescriptor)
	if !ok {
		that2, ok := that.(PatchDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *BinaryFeatureDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BinaryFeatureDescriptor)
	if !ok {
		that2, ok := that.(BinaryFeatureDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *TemporalIRLSSmoothing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TemporalIRLSSmoothing)
	if !ok {
		that2, ok := that.(TemporalIRLSSmoothing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WeightSum != nil && that1.WeightSum != nil {
		if *this.WeightSum != *that1.WeightSum {
			return false
		}
	} else if this.WeightSum != nil {
		return false
	} else if that1.WeightSum != nil {
		return false
	}
	if this.ValueSum != nil && that1.ValueSum != nil {
		if *this.ValueSum != *that1.ValueSum {
			return false
		}
	} else if this.ValueSum != nil {
		return false
	} else if that1.ValueSum != nil {
		return false
	}
	return true
}
func (this *RegionFlowFeature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegionFlowFeature)
	if !ok {
		that2, ok := that.(RegionFlowFeature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != nil && that1.X != nil {
		if *this.X != *that1.X {
			return false
		}
	} else if this.X != nil {
		return false
	} else if that1.X != nil {
		return false
	}
	if this.Y != nil && that1.Y != nil {
		if *this.Y != *that1.Y {
			return false
		}
	} else if this.Y != nil {
		return false
	} else if that1.Y != nil {
		return false
	}
	if this.Dx != nil && that1.Dx != nil {
		if *this.Dx != *that1.Dx {
			return false
		}
	} else if this.Dx != nil {
		return false
	} else if that1.Dx != nil {
		return false
	}
	if this.Dy != nil && that1.Dy != nil {
		if *this.Dy != *that1.Dy {
			return false
		}
	} else if this.Dy != nil {
		return false
	} else if that1.Dy != nil {
		return false
	}
	if this.TrackId != nil && that1.TrackId != nil {
		if *this.TrackId != *that1.TrackId {
			return false
		}
	} else if this.TrackId != nil {
		return false
	} else if that1.TrackId != nil {
		return false
	}
	if this.TrackingError != nil && that1.TrackingError != nil {
		if *this.TrackingError != *that1.TrackingError {
			return false
		}
	} else if this.TrackingError != nil {
		return false
	} else if that1.TrackingError != nil {
		return false
	}
	if this.IrlsWeight != nil && that1.IrlsWeight != nil {
		if *this.IrlsWeight != *that1.IrlsWeight {
			return false
		}
	} else if this.IrlsWeight != nil {
		return false
	} else if that1.IrlsWeight != nil {
		return false
	}
	if this.CornerResponse != nil && that1.CornerResponse != nil {
		if *this.CornerResponse != *that1.CornerResponse {
			return false
		}
	} else if this.CornerResponse != nil {
		return false
	} else if that1.CornerResponse != nil {
		return false
	}
	if !this.FeatureDescriptor.Equal(that1.FeatureDescriptor) {
		return false
	}
	if !this.FeatureMatchDescriptor.Equal(that1.FeatureMatchDescriptor) {
		return false
	}
	if !this.InternalIrls.Equal(that1.InternalIrls) {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.Flags != that1.Flags {
		return false
	}
	if this.FeatureId != that1.FeatureId {
		return false
	}
	if this.Octave != nil && that1.Octave != nil {
		if *this.Octave != *that1.Octave {
			return false
		}
	} else if this.Octave != nil {
		return false
	} else if that1.Octave != nil {
		return false
	}
	if !this.BinaryFeatureDescriptor.Equal(that1.BinaryFeatureDescriptor) {
		return false
	}
	thismap := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(this)
	thatmap := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(that1)
	for k, v := range thismap {
		if v2, ok := thatmap[k]; ok {
			if !v.Equal(&v2) {
				return false
			}
		} else {
			return false
		}
	}
	for k, _ := range thatmap {
		if _, ok := thismap[k]; !ok {
			return false
		}
	}
	return true
}
func (this *RegionFlowFrame) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegionFlowFrame)
	if !ok {
		that2, ok := that.(RegionFlowFrame)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RegionFlow) != len(that1.RegionFlow) {
		return false
	}
	for i := range this.RegionFlow {
		if !this.RegionFlow[i].Equal(that1.RegionFlow[i]) {
			return false
		}
	}
	if this.NumTotalFeatures != nil && that1.NumTotalFeatures != nil {
		if *this.NumTotalFeatures != *that1.NumTotalFeatures {
			return false
		}
	} else if this.NumTotalFeatures != nil {
		return false
	} else if that1.NumTotalFeatures != nil {
		return false
	}
	if this.UnstableFrame != nil && that1.UnstableFrame != nil {
		if *this.UnstableFrame != *that1.UnstableFrame {
			return false
		}
	} else if this.UnstableFrame != nil {
		return false
	} else if that1.UnstableFrame != nil {
		return false
	}
	if this.BlurScore != that1.BlurScore {
		return false
	}
	if this.FrameWidth != that1.FrameWidth {
		return false
	}
	if this.FrameHeight != that1.FrameHeight {
		return false
	}
	if !this.BlockDescriptor.Equal(that1.BlockDescriptor) {
		return false
	}
	thismap := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(this)
	thatmap := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(that1)
	for k, v := range thismap {
		if v2, ok := thatmap[k]; ok {
			if !v.Equal(&v2) {
				return false
			}
		} else {
			return false
		}
	}
	for k, _ := range thatmap {
		if _, ok := thismap[k]; !ok {
			return false
		}
	}
	return true
}
func (this *RegionFlowFrame_RegionFlow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegionFlowFrame_RegionFlow)
	if !ok {
		that2, ok := that.(RegionFlowFrame_RegionFlow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegionId != that1.RegionId {
		return false
	}
	if this.CentroidX != nil && that1.CentroidX != nil {
		if *this.CentroidX != *that1.CentroidX {
			return false
		}
	} else if this.CentroidX != nil {
		return false
	} else if that1.CentroidX != nil {
		return false
	}
	if this.CentroidY != nil && that1.CentroidY != nil {
		if *this.CentroidY != *that1.CentroidY {
			return false
		}
	} else if this.CentroidY != nil {
		return false
	} else if that1.CentroidY != nil {
		return false
	}
	if this.FlowX != nil && that1.FlowX != nil {
		if *this.FlowX != *that1.FlowX {
			return false
		}
	} else if this.FlowX != nil {
		return false
	} else if that1.FlowX != nil {
		return false
	}
	if this.FlowY != nil && that1.FlowY != nil {
		if *this.FlowY != *that1.FlowY {
			return false
		}
	} else if this.FlowY != nil {
		return false
	} else if that1.FlowY != nil {
		return false
	}
	if len(this.Feature) != len(that1.Feature) {
		return false
	}
	for i := range this.Feature {
		if !this.Feature[i].Equal(that1.Feature[i]) {
			return false
		}
	}
	thismap := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(this)
	thatmap := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(that1)
	for k, v := range thismap {
		if v2, ok := thatmap[k]; ok {
			if !v.Equal(&v2) {
				return false
			}
		} else {
			return false
		}
	}
	for k, _ := range thatmap {
		if _, ok := thismap[k]; !ok {
			return false
		}
	}
	return true
}
func (this *RegionFlowFrame_BlockDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegionFlowFrame_BlockDescriptor)
	if !ok {
		that2, ok := that.(RegionFlowFrame_BlockDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BlockWidth != that1.BlockWidth {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if this.NumBlocksX != nil && that1.NumBlocksX != nil {
		if *this.NumBlocksX != *that1.NumBlocksX {
			return false
		}
	} else if this.NumBlocksX != nil {
		return false
	} else if that1.NumBlocksX != nil {
		return false
	}
	if this.NumBlocksY != nil && that1.NumBlocksY != nil {
		if *this.NumBlocksY != *that1.NumBlocksY {
			return false
		}
	} else if this.NumBlocksY != nil {
		return false
	} else if that1.NumBlocksY != nil {
		return false
	}
	return true
}
func (this *RegionFlowFeatureList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegionFlowFeatureList)
	if !ok {
		that2, ok := that.(RegionFlowFeatureList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Feature) != len(that1.Feature) {
		return false
	}
	for i := range this.Feature {
		if !this.Feature[i].Equal(that1.Feature[i]) {
			return false
		}
	}
	if this.FrameWidth != that1.FrameWidth {
		return false
	}
	if this.FrameHeight != that1.FrameHeight {
		return false
	}
	if this.Unstable != nil && that1.Unstable != nil {
		if *this.Unstable != *that1.Unstable {
			return false
		}
	} else if this.Unstable != nil {
		return false
	} else if that1.Unstable != nil {
		return false
	}
	if this.DistanceFromBorder != nil && that1.DistanceFromBorder != nil {
		if *this.DistanceFromBorder != *that1.DistanceFromBorder {
			return false
		}
	} else if this.DistanceFromBorder != nil {
		return false
	} else if that1.DistanceFromBorder != nil {
		return false
	}
	if this.BlurScore != that1.BlurScore {
		return false
	}
	if this.LongTracks != nil && that1.LongTracks != nil {
		if *this.LongTracks != *that1.LongTracks {
			return false
		}
	} else if this.LongTracks != nil {
		return false
	} else if that1.LongTracks != nil {
		return false
	}
	if this.FracLongFeaturesRejected != nil && that1.FracLongFeaturesRejected != nil {
		if *this.FracLongFeaturesRejected != *that1.FracLongFeaturesRejected {
			return false
		}
	} else if this.FracLongFeaturesRejected != nil {
		return false
	} else if that1.FracLongFeaturesRejected != nil {
		return false
	}
	if this.VisualConsistency != nil && that1.VisualConsistency != nil {
		if *this.VisualConsistency != *that1.VisualConsistency {
			return false
		}
	} else if this.VisualConsistency != nil {
		return false
	} else if that1.VisualConsistency != nil {
		return false
	}
	if this.TimestampUsec != nil && that1.TimestampUsec != nil {
		if *this.TimestampUsec != *that1.TimestampUsec {
			return false
		}
	} else if this.TimestampUsec != nil {
		return false
	} else if that1.TimestampUsec != nil {
		return false
	}
	if this.MatchFrame != nil && that1.MatchFrame != nil {
		if *this.MatchFrame != *that1.MatchFrame {
			return false
		}
	} else if this.MatchFrame != nil {
		return false
	} else if that1.MatchFrame != nil {
		return false
	}
	if this.IsDuplicated != nil && that1.IsDuplicated != nil {
		if *this.IsDuplicated != *that1.IsDuplicated {
			return false
		}
	} else if this.IsDuplicated != nil {
		return false
	} else if that1.IsDuplicated != nil {
		return false
	}
	if len(this.ActivelyDiscardedTrackedIds) != len(that1.ActivelyDiscardedTrackedIds) {
		return false
	}
	for i := range this.ActivelyDiscardedTrackedIds {
		if this.ActivelyDiscardedTrackedIds[i] != that1.ActivelyDiscardedTrackedIds[i] {
			return false
		}
	}
	return true
}
func (this *SalientPoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SalientPoint)
	if !ok {
		that2, ok := that.(SalientPoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NormPointX != nil && that1.NormPointX != nil {
		if *this.NormPointX != *that1.NormPointX {
			return false
		}
	} else if this.NormPointX != nil {
		return false
	} else if that1.NormPointX != nil {
		return false
	}
	if this.NormPointY != nil && that1.NormPointY != nil {
		if *this.NormPointY != *that1.NormPointY {
			return false
		}
	} else if this.NormPointY != nil {
		return false
	} else if that1.NormPointY != nil {
		return false
	}
	if this.Type != nil && that1.Type != nil {
		if *this.Type != *that1.Type {
			return false
		}
	} else if this.Type != nil {
		return false
	} else if that1.Type != nil {
		return false
	}
	if this.Left != nil && that1.Left != nil {
		if *this.Left != *that1.Left {
			return false
		}
	} else if this.Left != nil {
		return false
	} else if that1.Left != nil {
		return false
	}
	if this.Bottom != nil && that1.Bottom != nil {
		if *this.Bottom != *that1.Bottom {
			return false
		}
	} else if this.Bottom != nil {
		return false
	} else if that1.Bottom != nil {
		return false
	}
	if this.Right != nil && that1.Right != nil {
		if *this.Right != *that1.Right {
			return false
		}
	} else if this.Right != nil {
		return false
	} else if that1.Right != nil {
		return false
	}
	if this.Top != nil && that1.Top != nil {
		if *this.Top != *that1.Top {
			return false
		}
	} else if this.Top != nil {
		return false
	} else if that1.Top != nil {
		return false
	}
	if this.Weight != nil && that1.Weight != nil {
		if *this.Weight != *that1.Weight {
			return false
		}
	} else if this.Weight != nil {
		return false
	} else if that1.Weight != nil {
		return false
	}
	if this.NormMajor != that1.NormMajor {
		return false
	}
	if this.NormMinor != that1.NormMinor {
		return false
	}
	if this.Angle != that1.Angle {
		return false
	}
	thismap := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(this)
	thatmap := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(that1)
	for k, v := range thismap {
		if v2, ok := thatmap[k]; ok {
			if !v.Equal(&v2) {
				return false
			}
		} else {
			return false
		}
	}
	for k, _ := range thatmap {
		if _, ok := thismap[k]; !ok {
			return false
		}
	}
	return true
}
func (this *SalientPointFrame) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SalientPointFrame)
	if !ok {
		that2, ok := that.(SalientPointFrame)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Point) != len(that1.Point) {
		return false
	}
	for i := range this.Point {
		if !this.Point[i].Equal(that1.Point[i]) {
			return false
		}
	}
	thismap := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(this)
	thatmap := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(that1)
	for k, v := range thismap {
		if v2, ok := thatmap[k]; ok {
			if !v.Equal(&v2) {
				return false
			}
		} else {
			return false
		}
	}
	for k, _ := range thatmap {
		if _, ok := thismap[k]; !ok {
			return false
		}
	}
	return true
}
func (this *PatchDescriptor) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tracking.PatchDescriptor{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BinaryFeatureDescriptor) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tracking.BinaryFeatureDescriptor{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TemporalIRLSSmoothing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tracking.TemporalIRLSSmoothing{")
	if this.WeightSum != nil {
		s = append(s, "WeightSum: "+valueToGoStringRegionFlow(this.WeightSum, "float32")+",\n")
	}
	if this.ValueSum != nil {
		s = append(s, "ValueSum: "+valueToGoStringRegionFlow(this.ValueSum, "float32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegionFlowFeature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&tracking.RegionFlowFeature{")
	if this.X != nil {
		s = append(s, "X: "+valueToGoStringRegionFlow(this.X, "float32")+",\n")
	}
	if this.Y != nil {
		s = append(s, "Y: "+valueToGoStringRegionFlow(this.Y, "float32")+",\n")
	}
	if this.Dx != nil {
		s = append(s, "Dx: "+valueToGoStringRegionFlow(this.Dx, "float32")+",\n")
	}
	if this.Dy != nil {
		s = append(s, "Dy: "+valueToGoStringRegionFlow(this.Dy, "float32")+",\n")
	}
	if this.TrackId != nil {
		s = append(s, "TrackId: "+valueToGoStringRegionFlow(this.TrackId, "int32")+",\n")
	}
	if this.TrackingError != nil {
		s = append(s, "TrackingError: "+valueToGoStringRegionFlow(this.TrackingError, "float32")+",\n")
	}
	if this.IrlsWeight != nil {
		s = append(s, "IrlsWeight: "+valueToGoStringRegionFlow(this.IrlsWeight, "float32")+",\n")
	}
	if this.CornerResponse != nil {
		s = append(s, "CornerResponse: "+valueToGoStringRegionFlow(this.CornerResponse, "float32")+",\n")
	}
	if this.FeatureDescriptor != nil {
		s = append(s, "FeatureDescriptor: "+fmt.Sprintf("%#v", this.FeatureDescriptor)+",\n")
	}
	if this.FeatureMatchDescriptor != nil {
		s = append(s, "FeatureMatchDescriptor: "+fmt.Sprintf("%#v", this.FeatureMatchDescriptor)+",\n")
	}
	if this.InternalIrls != nil {
		s = append(s, "InternalIrls: "+fmt.Sprintf("%#v", this.InternalIrls)+",\n")
	}
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "Flags: "+fmt.Sprintf("%#v", this.Flags)+",\n")
	s = append(s, "FeatureId: "+fmt.Sprintf("%#v", this.FeatureId)+",\n")
	if this.Octave != nil {
		s = append(s, "Octave: "+valueToGoStringRegionFlow(this.Octave, "int32")+",\n")
	}
	if this.BinaryFeatureDescriptor != nil {
		s = append(s, "BinaryFeatureDescriptor: "+fmt.Sprintf("%#v", this.BinaryFeatureDescriptor)+",\n")
	}
	s = append(s, "XXX_InternalExtensions: "+extensionToGoStringRegionFlow(this)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegionFlowFrame) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&tracking.RegionFlowFrame{")
	if this.RegionFlow != nil {
		s = append(s, "RegionFlow: "+fmt.Sprintf("%#v", this.RegionFlow)+",\n")
	}
	if this.NumTotalFeatures != nil {
		s = append(s, "NumTotalFeatures: "+valueToGoStringRegionFlow(this.NumTotalFeatures, "int32")+",\n")
	}
	if this.UnstableFrame != nil {
		s = append(s, "UnstableFrame: "+valueToGoStringRegionFlow(this.UnstableFrame, "bool")+",\n")
	}
	s = append(s, "BlurScore: "+fmt.Sprintf("%#v", this.BlurScore)+",\n")
	s = append(s, "FrameWidth: "+fmt.Sprintf("%#v", this.FrameWidth)+",\n")
	s = append(s, "FrameHeight: "+fmt.Sprintf("%#v", this.FrameHeight)+",\n")
	if this.BlockDescriptor != nil {
		s = append(s, "BlockDescriptor: "+fmt.Sprintf("%#v", this.BlockDescriptor)+",\n")
	}
	s = append(s, "XXX_InternalExtensions: "+extensionToGoStringRegionFlow(this)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegionFlowFrame_RegionFlow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&tracking.RegionFlowFrame_RegionFlow{")
	s = append(s, "RegionId: "+fmt.Sprintf("%#v", this.RegionId)+",\n")
	if this.CentroidX != nil {
		s = append(s, "CentroidX: "+valueToGoStringRegionFlow(this.CentroidX, "float32")+",\n")
	}
	if this.CentroidY != nil {
		s = append(s, "CentroidY: "+valueToGoStringRegionFlow(this.CentroidY, "float32")+",\n")
	}
	if this.FlowX != nil {
		s = append(s, "FlowX: "+valueToGoStringRegionFlow(this.FlowX, "float32")+",\n")
	}
	if this.FlowY != nil {
		s = append(s, "FlowY: "+valueToGoStringRegionFlow(this.FlowY, "float32")+",\n")
	}
	if this.Feature != nil {
		s = append(s, "Feature: "+fmt.Sprintf("%#v", this.Feature)+",\n")
	}
	s = append(s, "XXX_InternalExtensions: "+extensionToGoStringRegionFlow(this)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegionFlowFrame_BlockDescriptor) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tracking.RegionFlowFrame_BlockDescriptor{")
	s = append(s, "BlockWidth: "+fmt.Sprintf("%#v", this.BlockWidth)+",\n")
	s = append(s, "BlockHeight: "+fmt.Sprintf("%#v", this.BlockHeight)+",\n")
	if this.NumBlocksX != nil {
		s = append(s, "NumBlocksX: "+valueToGoStringRegionFlow(this.NumBlocksX, "int32")+",\n")
	}
	if this.NumBlocksY != nil {
		s = append(s, "NumBlocksY: "+valueToGoStringRegionFlow(this.NumBlocksY, "int32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegionFlowFeatureList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&tracking.RegionFlowFeatureList{")
	if this.Feature != nil {
		s = append(s, "Feature: "+fmt.Sprintf("%#v", this.Feature)+",\n")
	}
	s = append(s, "FrameWidth: "+fmt.Sprintf("%#v", this.FrameWidth)+",\n")
	s = append(s, "FrameHeight: "+fmt.Sprintf("%#v", this.FrameHeight)+",\n")
	if this.Unstable != nil {
		s = append(s, "Unstable: "+valueToGoStringRegionFlow(this.Unstable, "bool")+",\n")
	}
	if this.DistanceFromBorder != nil {
		s = append(s, "DistanceFromBorder: "+valueToGoStringRegionFlow(this.DistanceFromBorder, "int32")+",\n")
	}
	s = append(s, "BlurScore: "+fmt.Sprintf("%#v", this.BlurScore)+",\n")
	if this.LongTracks != nil {
		s = append(s, "LongTracks: "+valueToGoStringRegionFlow(this.LongTracks, "bool")+",\n")
	}
	if this.FracLongFeaturesRejected != nil {
		s = append(s, "FracLongFeaturesRejected: "+valueToGoStringRegionFlow(this.FracLongFeaturesRejected, "float32")+",\n")
	}
	if this.VisualConsistency != nil {
		s = append(s, "VisualConsistency: "+valueToGoStringRegionFlow(this.VisualConsistency, "float32")+",\n")
	}
	if this.TimestampUsec != nil {
		s = append(s, "TimestampUsec: "+valueToGoStringRegionFlow(this.TimestampUsec, "int64")+",\n")
	}
	if this.MatchFrame != nil {
		s = append(s, "MatchFrame: "+valueToGoStringRegionFlow(this.MatchFrame, "int32")+",\n")
	}
	if this.IsDuplicated != nil {
		s = append(s, "IsDuplicated: "+valueToGoStringRegionFlow(this.IsDuplicated, "bool")+",\n")
	}
	if this.ActivelyDiscardedTrackedIds != nil {
		s = append(s, "ActivelyDiscardedTrackedIds: "+fmt.Sprintf("%#v", this.ActivelyDiscardedTrackedIds)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SalientPoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&tracking.SalientPoint{")
	if this.NormPointX != nil {
		s = append(s, "NormPointX: "+valueToGoStringRegionFlow(this.NormPointX, "float32")+",\n")
	}
	if this.NormPointY != nil {
		s = append(s, "NormPointY: "+valueToGoStringRegionFlow(this.NormPointY, "float32")+",\n")
	}
	if this.Type != nil {
		s = append(s, "Type: "+valueToGoStringRegionFlow(this.Type, "SalientPoint_SalientPointType")+",\n")
	}
	if this.Left != nil {
		s = append(s, "Left: "+valueToGoStringRegionFlow(this.Left, "float32")+",\n")
	}
	if this.Bottom != nil {
		s = append(s, "Bottom: "+valueToGoStringRegionFlow(this.Bottom, "float32")+",\n")
	}
	if this.Right != nil {
		s = append(s, "Right: "+valueToGoStringRegionFlow(this.Right, "float32")+",\n")
	}
	if this.Top != nil {
		s = append(s, "Top: "+valueToGoStringRegionFlow(this.Top, "float32")+",\n")
	}
	if this.Weight != nil {
		s = append(s, "Weight: "+valueToGoStringRegionFlow(this.Weight, "float32")+",\n")
	}
	s = append(s, "NormMajor: "+fmt.Sprintf("%#v", this.NormMajor)+",\n")
	s = append(s, "NormMinor: "+fmt.Sprintf("%#v", this.NormMinor)+",\n")
	s = append(s, "Angle: "+fmt.Sprintf("%#v", this.Angle)+",\n")
	s = append(s, "XXX_InternalExtensions: "+extensionToGoStringRegionFlow(this)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SalientPointFrame) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tracking.SalientPointFrame{")
	if this.Point != nil {
		s = append(s, "Point: "+fmt.Sprintf("%#v", this.Point)+",\n")
	}
	s = append(s, "XXX_InternalExtensions: "+extensionToGoStringRegionFlow(this)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRegionFlow(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringRegionFlow(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *PatchDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PatchDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PatchDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			f1 := math.Float32bits(float32(m.Data[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f1))
			i--
			dAtA[i] = 0xd
		}
	}
	return len(dAtA) - i, nil
}

func (m *BinaryFeatureDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BinaryFeatureDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BinaryFeatureDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRegionFlow(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TemporalIRLSSmoothing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TemporalIRLSSmoothing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TemporalIRLSSmoothing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValueSum != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.ValueSum))))
		i--
		dAtA[i] = 0x15
	}
	if m.WeightSum != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.WeightSum))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *RegionFlowFeature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionFlowFeature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionFlowFeature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if n, err := github_com_gogo_protobuf_proto.EncodeInternalExtensionBackwards(m, dAtA[:i]); err != nil {
		return 0, err
	} else {
		i -= n
	}
	if m.BinaryFeatureDescriptor != nil {
		{
			size, err := m.BinaryFeatureDescriptor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegionFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Octave != nil {
		i = encodeVarintRegionFlow(dAtA, i, uint64(*m.Octave))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	i = encodeVarintRegionFlow(dAtA, i, uint64(m.FeatureId))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	i = encodeVarintRegionFlow(dAtA, i, uint64(m.Flags))
	i--
	dAtA[i] = 0x78
	i -= len(m.Label)
	copy(dAtA[i:], m.Label)
	i = encodeVarintRegionFlow(dAtA, i, uint64(len(m.Label)))
	i--
	dAtA[i] = 0x72
	if m.TrackId != nil {
		i = encodeVarintRegionFlow(dAtA, i, uint64(*m.TrackId))
		i--
		dAtA[i] = 0x68
	}
	if m.CornerResponse != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.CornerResponse))))
		i--
		dAtA[i] = 0x5d
	}
	if m.InternalIrls != nil {
		{
			size, err := m.InternalIrls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegionFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.FeatureMatchDescriptor != nil {
		{
			size, err := m.FeatureMatchDescriptor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegionFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.FeatureDescriptor != nil {
		{
			size, err := m.FeatureDescriptor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegionFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.IrlsWeight != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.IrlsWeight))))
		i--
		dAtA[i] = 0x35
	}
	if m.TrackingError != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.TrackingError))))
		i--
		dAtA[i] = 0x2d
	}
	if m.Dy != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Dy))))
		i--
		dAtA[i] = 0x25
	}
	if m.Dx != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Dx))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Y != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Y))))
		i--
		dAtA[i] = 0x15
	}
	if m.X != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.X))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *RegionFlowFrame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionFlowFrame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionFlowFrame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if n, err := github_com_gogo_protobuf_proto.EncodeInternalExtensionBackwards(m, dAtA[:i]); err != nil {
		return 0, err
	} else {
		i -= n
	}
	if m.BlockDescriptor != nil {
		{
			size, err := m.BlockDescriptor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegionFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	i = encodeVarintRegionFlow(dAtA, i, uint64(m.FrameHeight))
	i--
	dAtA[i] = 0x48
	i = encodeVarintRegionFlow(dAtA, i, uint64(m.FrameWidth))
	i--
	dAtA[i] = 0x40
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BlurScore))))
	i--
	dAtA[i] = 0x3d
	if m.UnstableFrame != nil {
		i--
		if *m.UnstableFrame {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.NumTotalFeatures != nil {
		i = encodeVarintRegionFlow(dAtA, i, uint64(*m.NumTotalFeatures))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RegionFlow) > 0 {
		for iNdEx := len(m.RegionFlow) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegionFlow[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRegionFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegionFlowFrame_RegionFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionFlowFrame_RegionFlow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionFlowFrame_RegionFlow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if n, err := github_com_gogo_protobuf_proto.EncodeInternalExtensionBackwards(m, dAtA[:i]); err != nil {
		return 0, err
	} else {
		i -= n
	}
	if len(m.Feature) > 0 {
		for iNdEx := len(m.Feature) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Feature[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRegionFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.FlowY != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.FlowY))))
		i--
		dAtA[i] = 0x2d
	}
	if m.FlowX != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.FlowX))))
		i--
		dAtA[i] = 0x25
	}
	if m.CentroidY != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.CentroidY))))
		i--
		dAtA[i] = 0x1d
	}
	if m.CentroidX != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.CentroidX))))
		i--
		dAtA[i] = 0x15
	}
	i = encodeVarintRegionFlow(dAtA, i, uint64(m.RegionId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RegionFlowFrame_BlockDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionFlowFrame_BlockDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionFlowFrame_BlockDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumBlocksY != nil {
		i = encodeVarintRegionFlow(dAtA, i, uint64(*m.NumBlocksY))
		i--
		dAtA[i] = 0x20
	}
	if m.NumBlocksX != nil {
		i = encodeVarintRegionFlow(dAtA, i, uint64(*m.NumBlocksX))
		i--
		dAtA[i] = 0x18
	}
	i = encodeVarintRegionFlow(dAtA, i, uint64(m.BlockHeight))
	i--
	dAtA[i] = 0x10
	i = encodeVarintRegionFlow(dAtA, i, uint64(m.BlockWidth))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RegionFlowFeatureList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionFlowFeatureList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionFlowFeatureList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActivelyDiscardedTrackedIds) > 0 {
		for iNdEx := len(m.ActivelyDiscardedTrackedIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintRegionFlow(dAtA, i, uint64(m.ActivelyDiscardedTrackedIds[iNdEx]))
			i--
			dAtA[i] = 0x68
		}
	}
	if m.IsDuplicated != nil {
		i--
		if *m.IsDuplicated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.MatchFrame != nil {
		i = encodeVarintRegionFlow(dAtA, i, uint64(*m.MatchFrame))
		i--
		dAtA[i] = 0x58
	}
	if m.TimestampUsec != nil {
		i = encodeVarintRegionFlow(dAtA, i, uint64(*m.TimestampUsec))
		i--
		dAtA[i] = 0x50
	}
	if m.VisualConsistency != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.VisualConsistency))))
		i--
		dAtA[i] = 0x4d
	}
	if m.FracLongFeaturesRejected != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.FracLongFeaturesRejected))))
		i--
		dAtA[i] = 0x45
	}
	if m.LongTracks != nil {
		i--
		if *m.LongTracks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BlurScore))))
	i--
	dAtA[i] = 0x35
	if m.DistanceFromBorder != nil {
		i = encodeVarintRegionFlow(dAtA, i, uint64(*m.DistanceFromBorder))
		i--
		dAtA[i] = 0x28
	}
	if m.Unstable != nil {
		i--
		if *m.Unstable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	i = encodeVarintRegionFlow(dAtA, i, uint64(m.FrameHeight))
	i--
	dAtA[i] = 0x18
	i = encodeVarintRegionFlow(dAtA, i, uint64(m.FrameWidth))
	i--
	dAtA[i] = 0x10
	if len(m.Feature) > 0 {
		for iNdEx := len(m.Feature) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Feature[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRegionFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SalientPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SalientPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SalientPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if n, err := github_com_gogo_protobuf_proto.EncodeInternalExtensionBackwards(m, dAtA[:i]); err != nil {
		return 0, err
	} else {
		i -= n
	}
	if m.Type != nil {
		i = encodeVarintRegionFlow(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x58
	}
	if m.Top != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Top))))
		i--
		dAtA[i] = 0x55
	}
	if m.Right != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Right))))
		i--
		dAtA[i] = 0x4d
	}
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Angle))))
	i--
	dAtA[i] = 0x45
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.NormMinor))))
	i--
	dAtA[i] = 0x3d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.NormMajor))))
	i--
	dAtA[i] = 0x35
	if m.Weight != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Weight))))
		i--
		dAtA[i] = 0x2d
	}
	if m.Bottom != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Bottom))))
		i--
		dAtA[i] = 0x25
	}
	if m.Left != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Left))))
		i--
		dAtA[i] = 0x1d
	}
	if m.NormPointY != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.NormPointY))))
		i--
		dAtA[i] = 0x15
	}
	if m.NormPointX != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.NormPointX))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *SalientPointFrame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SalientPointFrame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SalientPointFrame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if n, err := github_com_gogo_protobuf_proto.EncodeInternalExtensionBackwards(m, dAtA[:i]); err != nil {
		return 0, err
	} else {
		i -= n
	}
	if len(m.Point) > 0 {
		for iNdEx := len(m.Point) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Point[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRegionFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRegionFlow(dAtA []byte, offset int, v uint64) int {
	offset -= sovRegionFlow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PatchDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		n += 5 * len(m.Data)
	}
	return n
}

func (m *BinaryFeatureDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovRegionFlow(uint64(l))
	}
	return n
}

func (m *TemporalIRLSSmoothing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WeightSum != nil {
		n += 5
	}
	if m.ValueSum != nil {
		n += 5
	}
	return n
}

func (m *RegionFlowFeature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != nil {
		n += 5
	}
	if m.Y != nil {
		n += 5
	}
	if m.Dx != nil {
		n += 5
	}
	if m.Dy != nil {
		n += 5
	}
	if m.TrackingError != nil {
		n += 5
	}
	if m.IrlsWeight != nil {
		n += 5
	}
	if m.FeatureDescriptor != nil {
		l = m.FeatureDescriptor.Size()
		n += 1 + l + sovRegionFlow(uint64(l))
	}
	if m.FeatureMatchDescriptor != nil {
		l = m.FeatureMatchDescriptor.Size()
		n += 1 + l + sovRegionFlow(uint64(l))
	}
	if m.InternalIrls != nil {
		l = m.InternalIrls.Size()
		n += 1 + l + sovRegionFlow(uint64(l))
	}
	if m.CornerResponse != nil {
		n += 5
	}
	if m.TrackId != nil {
		n += 1 + sovRegionFlow(uint64(*m.TrackId))
	}
	l = len(m.Label)
	n += 1 + l + sovRegionFlow(uint64(l))
	n += 1 + sovRegionFlow(uint64(m.Flags))
	n += 2 + sovRegionFlow(uint64(m.FeatureId))
	if m.Octave != nil {
		n += 2 + sovRegionFlow(uint64(*m.Octave))
	}
	if m.BinaryFeatureDescriptor != nil {
		l = m.BinaryFeatureDescriptor.Size()
		n += 2 + l + sovRegionFlow(uint64(l))
	}
	n += github_com_gogo_protobuf_proto.SizeOfInternalExtension(m)
	return n
}

func (m *RegionFlowFrame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegionFlow) > 0 {
		for _, e := range m.RegionFlow {
			l = e.Size()
			n += 1 + l + sovRegionFlow(uint64(l))
		}
	}
	if m.NumTotalFeatures != nil {
		n += 1 + sovRegionFlow(uint64(*m.NumTotalFeatures))
	}
	if m.UnstableFrame != nil {
		n += 2
	}
	n += 5
	n += 1 + sovRegionFlow(uint64(m.FrameWidth))
	n += 1 + sovRegionFlow(uint64(m.FrameHeight))
	if m.BlockDescriptor != nil {
		l = m.BlockDescriptor.Size()
		n += 1 + l + sovRegionFlow(uint64(l))
	}
	n += github_com_gogo_protobuf_proto.SizeOfInternalExtension(m)
	return n
}

func (m *RegionFlowFrame_RegionFlow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRegionFlow(uint64(m.RegionId))
	if m.CentroidX != nil {
		n += 5
	}
	if m.CentroidY != nil {
		n += 5
	}
	if m.FlowX != nil {
		n += 5
	}
	if m.FlowY != nil {
		n += 5
	}
	if len(m.Feature) > 0 {
		for _, e := range m.Feature {
			l = e.Size()
			n += 1 + l + sovRegionFlow(uint64(l))
		}
	}
	n += github_com_gogo_protobuf_proto.SizeOfInternalExtension(m)
	return n
}

func (m *RegionFlowFrame_BlockDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRegionFlow(uint64(m.BlockWidth))
	n += 1 + sovRegionFlow(uint64(m.BlockHeight))
	if m.NumBlocksX != nil {
		n += 1 + sovRegionFlow(uint64(*m.NumBlocksX))
	}
	if m.NumBlocksY != nil {
		n += 1 + sovRegionFlow(uint64(*m.NumBlocksY))
	}
	return n
}

func (m *RegionFlowFeatureList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Feature) > 0 {
		for _, e := range m.Feature {
			l = e.Size()
			n += 1 + l + sovRegionFlow(uint64(l))
		}
	}
	n += 1 + sovRegionFlow(uint64(m.FrameWidth))
	n += 1 + sovRegionFlow(uint64(m.FrameHeight))
	if m.Unstable != nil {
		n += 2
	}
	if m.DistanceFromBorder != nil {
		n += 1 + sovRegionFlow(uint64(*m.DistanceFromBorder))
	}
	n += 5
	if m.LongTracks != nil {
		n += 2
	}
	if m.FracLongFeaturesRejected != nil {
		n += 5
	}
	if m.VisualConsistency != nil {
		n += 5
	}
	if m.TimestampUsec != nil {
		n += 1 + sovRegionFlow(uint64(*m.TimestampUsec))
	}
	if m.MatchFrame != nil {
		n += 1 + sovRegionFlow(uint64(*m.MatchFrame))
	}
	if m.IsDuplicated != nil {
		n += 2
	}
	if len(m.ActivelyDiscardedTrackedIds) > 0 {
		for _, e := range m.ActivelyDiscardedTrackedIds {
			n += 1 + sovRegionFlow(uint64(e))
		}
	}
	return n
}

func (m *SalientPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NormPointX != nil {
		n += 5
	}
	if m.NormPointY != nil {
		n += 5
	}
	if m.Left != nil {
		n += 5
	}
	if m.Bottom != nil {
		n += 5
	}
	if m.Weight != nil {
		n += 5
	}
	n += 5
	n += 5
	n += 5
	if m.Right != nil {
		n += 5
	}
	if m.Top != nil {
		n += 5
	}
	if m.Type != nil {
		n += 1 + sovRegionFlow(uint64(*m.Type))
	}
	n += github_com_gogo_protobuf_proto.SizeOfInternalExtension(m)
	return n
}

func (m *SalientPointFrame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Point) > 0 {
		for _, e := range m.Point {
			l = e.Size()
			n += 1 + l + sovRegionFlow(uint64(l))
		}
	}
	n += github_com_gogo_protobuf_proto.SizeOfInternalExtension(m)
	return n
}

func sovRegionFlow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRegionFlow(x uint64) (n int) {
	return sovRegionFlow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PatchDescriptor) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PatchDescriptor{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BinaryFeatureDescriptor) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BinaryFeatureDescriptor{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TemporalIRLSSmoothing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TemporalIRLSSmoothing{`,
		`WeightSum:` + valueToStringRegionFlow(this.WeightSum) + `,`,
		`ValueSum:` + valueToStringRegionFlow(this.ValueSum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegionFlowFeature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegionFlowFeature{`,
		`X:` + valueToStringRegionFlow(this.X) + `,`,
		`Y:` + valueToStringRegionFlow(this.Y) + `,`,
		`Dx:` + valueToStringRegionFlow(this.Dx) + `,`,
		`Dy:` + valueToStringRegionFlow(this.Dy) + `,`,
		`TrackingError:` + valueToStringRegionFlow(this.TrackingError) + `,`,
		`IrlsWeight:` + valueToStringRegionFlow(this.IrlsWeight) + `,`,
		`FeatureDescriptor:` + strings.Replace(this.FeatureDescriptor.String(), "PatchDescriptor", "PatchDescriptor", 1) + `,`,
		`FeatureMatchDescriptor:` + strings.Replace(this.FeatureMatchDescriptor.String(), "PatchDescriptor", "PatchDescriptor", 1) + `,`,
		`InternalIrls:` + strings.Replace(this.InternalIrls.String(), "TemporalIRLSSmoothing", "TemporalIRLSSmoothing", 1) + `,`,
		`CornerResponse:` + valueToStringRegionFlow(this.CornerResponse) + `,`,
		`TrackId:` + valueToStringRegionFlow(this.TrackId) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`Flags:` + fmt.Sprintf("%v", this.Flags) + `,`,
		`FeatureId:` + fmt.Sprintf("%v", this.FeatureId) + `,`,
		`Octave:` + valueToStringRegionFlow(this.Octave) + `,`,
		`BinaryFeatureDescriptor:` + strings.Replace(this.BinaryFeatureDescriptor.String(), "BinaryFeatureDescriptor", "BinaryFeatureDescriptor", 1) + `,`,
		`XXX_InternalExtensions:` + github_com_gogo_protobuf_proto.StringFromInternalExtension(this) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegionFlowFrame) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRegionFlow := "[]*RegionFlowFrame_RegionFlow{"
	for _, f := range this.RegionFlow {
		repeatedStringForRegionFlow += strings.Replace(fmt.Sprintf("%v", f), "RegionFlowFrame_RegionFlow", "RegionFlowFrame_RegionFlow", 1) + ","
	}
	repeatedStringForRegionFlow += "}"
	s := strings.Join([]string{`&RegionFlowFrame{`,
		`RegionFlow:` + repeatedStringForRegionFlow + `,`,
		`NumTotalFeatures:` + valueToStringRegionFlow(this.NumTotalFeatures) + `,`,
		`UnstableFrame:` + valueToStringRegionFlow(this.UnstableFrame) + `,`,
		`BlurScore:` + fmt.Sprintf("%v", this.BlurScore) + `,`,
		`FrameWidth:` + fmt.Sprintf("%v", this.FrameWidth) + `,`,
		`FrameHeight:` + fmt.Sprintf("%v", this.FrameHeight) + `,`,
		`BlockDescriptor:` + strings.Replace(fmt.Sprintf("%v", this.BlockDescriptor), "RegionFlowFrame_BlockDescriptor", "RegionFlowFrame_BlockDescriptor", 1) + `,`,
		`XXX_InternalExtensions:` + github_com_gogo_protobuf_proto.StringFromInternalExtension(this) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegionFlowFrame_RegionFlow) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFeature := "[]*RegionFlowFeature{"
	for _, f := range this.Feature {
		repeatedStringForFeature += strings.Replace(f.String(), "RegionFlowFeature", "RegionFlowFeature", 1) + ","
	}
	repeatedStringForFeature += "}"
	s := strings.Join([]string{`&RegionFlowFrame_RegionFlow{`,
		`RegionId:` + fmt.Sprintf("%v", this.RegionId) + `,`,
		`CentroidX:` + valueToStringRegionFlow(this.CentroidX) + `,`,
		`CentroidY:` + valueToStringRegionFlow(this.CentroidY) + `,`,
		`FlowX:` + valueToStringRegionFlow(this.FlowX) + `,`,
		`FlowY:` + valueToStringRegionFlow(this.FlowY) + `,`,
		`Feature:` + repeatedStringForFeature + `,`,
		`XXX_InternalExtensions:` + github_com_gogo_protobuf_proto.StringFromInternalExtension(this) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegionFlowFrame_BlockDescriptor) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegionFlowFrame_BlockDescriptor{`,
		`BlockWidth:` + fmt.Sprintf("%v", this.BlockWidth) + `,`,
		`BlockHeight:` + fmt.Sprintf("%v", this.BlockHeight) + `,`,
		`NumBlocksX:` + valueToStringRegionFlow(this.NumBlocksX) + `,`,
		`NumBlocksY:` + valueToStringRegionFlow(this.NumBlocksY) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegionFlowFeatureList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFeature := "[]*RegionFlowFeature{"
	for _, f := range this.Feature {
		repeatedStringForFeature += strings.Replace(f.String(), "RegionFlowFeature", "RegionFlowFeature", 1) + ","
	}
	repeatedStringForFeature += "}"
	s := strings.Join([]string{`&RegionFlowFeatureList{`,
		`Feature:` + repeatedStringForFeature + `,`,
		`FrameWidth:` + fmt.Sprintf("%v", this.FrameWidth) + `,`,
		`FrameHeight:` + fmt.Sprintf("%v", this.FrameHeight) + `,`,
		`Unstable:` + valueToStringRegionFlow(this.Unstable) + `,`,
		`DistanceFromBorder:` + valueToStringRegionFlow(this.DistanceFromBorder) + `,`,
		`BlurScore:` + fmt.Sprintf("%v", this.BlurScore) + `,`,
		`LongTracks:` + valueToStringRegionFlow(this.LongTracks) + `,`,
		`FracLongFeaturesRejected:` + valueToStringRegionFlow(this.FracLongFeaturesRejected) + `,`,
		`VisualConsistency:` + valueToStringRegionFlow(this.VisualConsistency) + `,`,
		`TimestampUsec:` + valueToStringRegionFlow(this.TimestampUsec) + `,`,
		`MatchFrame:` + valueToStringRegionFlow(this.MatchFrame) + `,`,
		`IsDuplicated:` + valueToStringRegionFlow(this.IsDuplicated) + `,`,
		`ActivelyDiscardedTrackedIds:` + fmt.Sprintf("%v", this.ActivelyDiscardedTrackedIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SalientPoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SalientPoint{`,
		`NormPointX:` + valueToStringRegionFlow(this.NormPointX) + `,`,
		`NormPointY:` + valueToStringRegionFlow(this.NormPointY) + `,`,
		`Left:` + valueToStringRegionFlow(this.Left) + `,`,
		`Bottom:` + valueToStringRegionFlow(this.Bottom) + `,`,
		`Weight:` + valueToStringRegionFlow(this.Weight) + `,`,
		`NormMajor:` + fmt.Sprintf("%v", this.NormMajor) + `,`,
		`NormMinor:` + fmt.Sprintf("%v", this.NormMinor) + `,`,
		`Angle:` + fmt.Sprintf("%v", this.Angle) + `,`,
		`Right:` + valueToStringRegionFlow(this.Right) + `,`,
		`Top:` + valueToStringRegionFlow(this.Top) + `,`,
		`Type:` + valueToStringRegionFlow(this.Type) + `,`,
		`XXX_InternalExtensions:` + github_com_gogo_protobuf_proto.StringFromInternalExtension(this) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SalientPointFrame) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPoint := "[]*SalientPoint{"
	for _, f := range this.Point {
		repeatedStringForPoint += strings.Replace(f.String(), "SalientPoint", "SalientPoint", 1) + ","
	}
	repeatedStringForPoint += "}"
	s := strings.Join([]string{`&SalientPointFrame{`,
		`Point:` + repeatedStringForPoint + `,`,
		`XXX_InternalExtensions:` + github_com_gogo_protobuf_proto.StringFromInternalExtension(this) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRegionFlow(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PatchDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegionFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatchDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatchDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Data = append(m.Data, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegionFlow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRegionFlow
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRegionFlow
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Data) == 0 {
					m.Data = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Data = append(m.Data, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegionFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegionFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BinaryFeatureDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegionFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BinaryFeatureDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BinaryFeatureDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegionFlow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRegionFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegionFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegionFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TemporalIRLSSmoothing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegionFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TemporalIRLSSmoothing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TemporalIRLSSmoothing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightSum", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.WeightSum = &v2
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueSum", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.ValueSum = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipRegionFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegionFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionFlowFeature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegionFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionFlowFeature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionFlowFeature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.X = &v2
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Y = &v2
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dx", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Dx = &v2
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dy", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Dy = &v2
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackingError", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.TrackingError = &v2
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field IrlsWeight", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.IrlsWeight = &v2
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureDescriptor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegionFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegionFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeatureDescriptor == nil {
				m.FeatureDescriptor = &PatchDescriptor{}
			}
			if err := m.FeatureDescriptor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureMatchDescriptor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegionFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegionFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeatureMatchDescriptor == nil {
				m.FeatureMatchDescriptor = &PatchDescriptor{}
			}
			if err := m.FeatureMatchDescriptor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIrls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegionFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegionFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InternalIrls == nil {
				m.InternalIrls = &TemporalIRLSSmoothing{}
			}
			if err := m.InternalIrls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CornerResponse", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.CornerResponse = &v2
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TrackId = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegionFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegionFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureId", wireType)
			}
			m.FeatureId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeatureId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Octave", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Octave = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryFeatureDescriptor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegionFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegionFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BinaryFeatureDescriptor == nil {
				m.BinaryFeatureDescriptor = &BinaryFeatureDescriptor{}
			}
			if err := m.BinaryFeatureDescriptor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			if ((fieldNum >= 9) && (fieldNum < 10)) || ((fieldNum >= 12) && (fieldNum < 13)) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipRegionFlow(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthRegionFlow
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				github_com_gogo_protobuf_proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipRegionFlow(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthRegionFlow
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionFlowFrame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegionFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionFlowFrame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionFlowFrame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionFlow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegionFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegionFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionFlow = append(m.RegionFlow, &RegionFlowFrame_RegionFlow{})
			if err := m.RegionFlow[len(m.RegionFlow)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTotalFeatures", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumTotalFeatures = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstableFrame", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UnstableFrame = &b
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlurScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BlurScore = float32(math.Float32frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameWidth", wireType)
			}
			m.FrameWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameWidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameHeight", wireType)
			}
			m.FrameHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDescriptor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegionFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegionFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockDescriptor == nil {
				m.BlockDescriptor = &RegionFlowFrame_BlockDescriptor{}
			}
			if err := m.BlockDescriptor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			if ((fieldNum >= 3) && (fieldNum < 4)) || ((fieldNum >= 5) && (fieldNum < 6)) || ((fieldNum >= 6) && (fieldNum < 7)) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipRegionFlow(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthRegionFlow
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				github_com_gogo_protobuf_proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipRegionFlow(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthRegionFlow
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionFlowFrame_RegionFlow) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegionFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CentroidX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.CentroidX = &v2
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CentroidY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.CentroidY = &v2
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.FlowX = &v2
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.FlowY = &v2
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegionFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegionFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feature = append(m.Feature, &RegionFlowFeature{})
			if err := m.Feature[len(m.Feature)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			if (fieldNum >= 6) && (fieldNum < 7) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipRegionFlow(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthRegionFlow
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				github_com_gogo_protobuf_proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipRegionFlow(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthRegionFlow
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("region_id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionFlowFrame_BlockDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegionFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockWidth", wireType)
			}
			m.BlockWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockWidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBlocksX", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumBlocksX = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBlocksY", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumBlocksY = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRegionFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegionFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionFlowFeatureList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegionFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionFlowFeatureList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionFlowFeatureList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegionFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegionFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feature = append(m.Feature, &RegionFlowFeature{})
			if err := m.Feature[len(m.Feature)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameWidth", wireType)
			}
			m.FrameWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameWidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameHeight", wireType)
			}
			m.FrameHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unstable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Unstable = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistanceFromBorder", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DistanceFromBorder = &v
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlurScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BlurScore = float32(math.Float32frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongTracks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.LongTracks = &b
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FracLongFeaturesRejected", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.FracLongFeaturesRejected = &v2
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisualConsistency", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.VisualConsistency = &v2
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampUsec", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimestampUsec = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchFrame", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MatchFrame = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDuplicated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsDuplicated = &b
		case 13:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegionFlow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ActivelyDiscardedTrackedIds = append(m.ActivelyDiscardedTrackedIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegionFlow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRegionFlow
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRegionFlow
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ActivelyDiscardedTrackedIds) == 0 {
					m.ActivelyDiscardedTrackedIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegionFlow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ActivelyDiscardedTrackedIds = append(m.ActivelyDiscardedTrackedIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivelyDiscardedTrackedIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegionFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegionFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SalientPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegionFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SalientPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SalientPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormPointX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.NormPointX = &v2
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormPointY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.NormPointY = &v2
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Left = &v2
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bottom", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Bottom = &v2
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Weight = &v2
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormMajor", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.NormMajor = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormMinor", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.NormMinor = float32(math.Float32frombits(v))
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Angle", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Angle = float32(math.Float32frombits(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Right = &v2
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Top = &v2
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v SalientPoint_SalientPointType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SalientPoint_SalientPointType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			if (fieldNum >= 20000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipRegionFlow(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthRegionFlow
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				github_com_gogo_protobuf_proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipRegionFlow(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthRegionFlow
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SalientPointFrame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegionFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SalientPointFrame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SalientPointFrame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegionFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegionFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Point = append(m.Point, &SalientPoint{})
			if err := m.Point[len(m.Point)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			if (fieldNum >= 20000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipRegionFlow(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthRegionFlow
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				github_com_gogo_protobuf_proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipRegionFlow(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthRegionFlow
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegionFlow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegionFlow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegionFlow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRegionFlow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRegionFlow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRegionFlow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRegionFlow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegionFlow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRegionFlow = fmt.Errorf("proto: unexpected end of group")
)
