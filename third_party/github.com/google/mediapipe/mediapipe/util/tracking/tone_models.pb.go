// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mediapipe/util/tracking/tone_models.proto

package tracking

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GainBiasModel struct {
	GainC1 *float32 `protobuf:"fixed32,1,opt,name=gain_c1,json=gainC1,def=1" json:"gain_c1,omitempty"`
	BiasC1 *float32 `protobuf:"fixed32,2,opt,name=bias_c1,json=biasC1,def=0" json:"bias_c1,omitempty"`
	GainC2 *float32 `protobuf:"fixed32,3,opt,name=gain_c2,json=gainC2,def=1" json:"gain_c2,omitempty"`
	BiasC2 *float32 `protobuf:"fixed32,4,opt,name=bias_c2,json=biasC2,def=0" json:"bias_c2,omitempty"`
	GainC3 *float32 `protobuf:"fixed32,5,opt,name=gain_c3,json=gainC3,def=1" json:"gain_c3,omitempty"`
	BiasC3 *float32 `protobuf:"fixed32,6,opt,name=bias_c3,json=biasC3,def=0" json:"bias_c3,omitempty"`
}

func (m *GainBiasModel) Reset()      { *m = GainBiasModel{} }
func (*GainBiasModel) ProtoMessage() {}
func (*GainBiasModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_5220b5f4bfa744f0, []int{0}
}
func (m *GainBiasModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GainBiasModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GainBiasModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GainBiasModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GainBiasModel.Merge(m, src)
}
func (m *GainBiasModel) XXX_Size() int {
	return m.Size()
}
func (m *GainBiasModel) XXX_DiscardUnknown() {
	xxx_messageInfo_GainBiasModel.DiscardUnknown(m)
}

var xxx_messageInfo_GainBiasModel proto.InternalMessageInfo

const Default_GainBiasModel_GainC1 float32 = 1
const Default_GainBiasModel_BiasC1 float32 = 0
const Default_GainBiasModel_GainC2 float32 = 1
const Default_GainBiasModel_BiasC2 float32 = 0
const Default_GainBiasModel_GainC3 float32 = 1
const Default_GainBiasModel_BiasC3 float32 = 0

func (m *GainBiasModel) GetGainC1() float32 {
	if m != nil && m.GainC1 != nil {
		return *m.GainC1
	}
	return Default_GainBiasModel_GainC1
}

func (m *GainBiasModel) GetBiasC1() float32 {
	if m != nil && m.BiasC1 != nil {
		return *m.BiasC1
	}
	return Default_GainBiasModel_BiasC1
}

func (m *GainBiasModel) GetGainC2() float32 {
	if m != nil && m.GainC2 != nil {
		return *m.GainC2
	}
	return Default_GainBiasModel_GainC2
}

func (m *GainBiasModel) GetBiasC2() float32 {
	if m != nil && m.BiasC2 != nil {
		return *m.BiasC2
	}
	return Default_GainBiasModel_BiasC2
}

func (m *GainBiasModel) GetGainC3() float32 {
	if m != nil && m.GainC3 != nil {
		return *m.GainC3
	}
	return Default_GainBiasModel_GainC3
}

func (m *GainBiasModel) GetBiasC3() float32 {
	if m != nil && m.BiasC3 != nil {
		return *m.BiasC3
	}
	return Default_GainBiasModel_BiasC3
}

type MixtureGainBiasModel struct {
	Model []*GainBiasModel `protobuf:"bytes,1,rep,name=model" json:"model,omitempty"`
}

func (m *MixtureGainBiasModel) Reset()      { *m = MixtureGainBiasModel{} }
func (*MixtureGainBiasModel) ProtoMessage() {}
func (*MixtureGainBiasModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_5220b5f4bfa744f0, []int{1}
}
func (m *MixtureGainBiasModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MixtureGainBiasModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MixtureGainBiasModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MixtureGainBiasModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixtureGainBiasModel.Merge(m, src)
}
func (m *MixtureGainBiasModel) XXX_Size() int {
	return m.Size()
}
func (m *MixtureGainBiasModel) XXX_DiscardUnknown() {
	xxx_messageInfo_MixtureGainBiasModel.DiscardUnknown(m)
}

var xxx_messageInfo_MixtureGainBiasModel proto.InternalMessageInfo

func (m *MixtureGainBiasModel) GetModel() []*GainBiasModel {
	if m != nil {
		return m.Model
	}
	return nil
}

type AffineToneModel struct {
	G_00 *float32 `protobuf:"fixed32,1,opt,name=g_00,json=g00,def=1" json:"g_00,omitempty"`
	G_01 *float32 `protobuf:"fixed32,2,opt,name=g_01,json=g01,def=0" json:"g_01,omitempty"`
	G_02 *float32 `protobuf:"fixed32,3,opt,name=g_02,json=g02,def=0" json:"g_02,omitempty"`
	G_03 *float32 `protobuf:"fixed32,4,opt,name=g_03,json=g03,def=0" json:"g_03,omitempty"`
	G_10 *float32 `protobuf:"fixed32,5,opt,name=g_10,json=g10,def=0" json:"g_10,omitempty"`
	G_11 *float32 `protobuf:"fixed32,6,opt,name=g_11,json=g11,def=1" json:"g_11,omitempty"`
	G_12 *float32 `protobuf:"fixed32,7,opt,name=g_12,json=g12,def=0" json:"g_12,omitempty"`
	G_13 *float32 `protobuf:"fixed32,8,opt,name=g_13,json=g13,def=0" json:"g_13,omitempty"`
	G_20 *float32 `protobuf:"fixed32,9,opt,name=g_20,json=g20,def=0" json:"g_20,omitempty"`
	G_21 *float32 `protobuf:"fixed32,10,opt,name=g_21,json=g21,def=0" json:"g_21,omitempty"`
	G_22 *float32 `protobuf:"fixed32,11,opt,name=g_22,json=g22,def=1" json:"g_22,omitempty"`
	G_23 *float32 `protobuf:"fixed32,12,opt,name=g_23,json=g23,def=0" json:"g_23,omitempty"`
}

func (m *AffineToneModel) Reset()      { *m = AffineToneModel{} }
func (*AffineToneModel) ProtoMessage() {}
func (*AffineToneModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_5220b5f4bfa744f0, []int{2}
}
func (m *AffineToneModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AffineToneModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AffineToneModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AffineToneModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffineToneModel.Merge(m, src)
}
func (m *AffineToneModel) XXX_Size() int {
	return m.Size()
}
func (m *AffineToneModel) XXX_DiscardUnknown() {
	xxx_messageInfo_AffineToneModel.DiscardUnknown(m)
}

var xxx_messageInfo_AffineToneModel proto.InternalMessageInfo

const Default_AffineToneModel_G_00 float32 = 1
const Default_AffineToneModel_G_01 float32 = 0
const Default_AffineToneModel_G_02 float32 = 0
const Default_AffineToneModel_G_03 float32 = 0
const Default_AffineToneModel_G_10 float32 = 0
const Default_AffineToneModel_G_11 float32 = 1
const Default_AffineToneModel_G_12 float32 = 0
const Default_AffineToneModel_G_13 float32 = 0
const Default_AffineToneModel_G_20 float32 = 0
const Default_AffineToneModel_G_21 float32 = 0
const Default_AffineToneModel_G_22 float32 = 1
const Default_AffineToneModel_G_23 float32 = 0

func (m *AffineToneModel) GetG_00() float32 {
	if m != nil && m.G_00 != nil {
		return *m.G_00
	}
	return Default_AffineToneModel_G_00
}

func (m *AffineToneModel) GetG_01() float32 {
	if m != nil && m.G_01 != nil {
		return *m.G_01
	}
	return Default_AffineToneModel_G_01
}

func (m *AffineToneModel) GetG_02() float32 {
	if m != nil && m.G_02 != nil {
		return *m.G_02
	}
	return Default_AffineToneModel_G_02
}

func (m *AffineToneModel) GetG_03() float32 {
	if m != nil && m.G_03 != nil {
		return *m.G_03
	}
	return Default_AffineToneModel_G_03
}

func (m *AffineToneModel) GetG_10() float32 {
	if m != nil && m.G_10 != nil {
		return *m.G_10
	}
	return Default_AffineToneModel_G_10
}

func (m *AffineToneModel) GetG_11() float32 {
	if m != nil && m.G_11 != nil {
		return *m.G_11
	}
	return Default_AffineToneModel_G_11
}

func (m *AffineToneModel) GetG_12() float32 {
	if m != nil && m.G_12 != nil {
		return *m.G_12
	}
	return Default_AffineToneModel_G_12
}

func (m *AffineToneModel) GetG_13() float32 {
	if m != nil && m.G_13 != nil {
		return *m.G_13
	}
	return Default_AffineToneModel_G_13
}

func (m *AffineToneModel) GetG_20() float32 {
	if m != nil && m.G_20 != nil {
		return *m.G_20
	}
	return Default_AffineToneModel_G_20
}

func (m *AffineToneModel) GetG_21() float32 {
	if m != nil && m.G_21 != nil {
		return *m.G_21
	}
	return Default_AffineToneModel_G_21
}

func (m *AffineToneModel) GetG_22() float32 {
	if m != nil && m.G_22 != nil {
		return *m.G_22
	}
	return Default_AffineToneModel_G_22
}

func (m *AffineToneModel) GetG_23() float32 {
	if m != nil && m.G_23 != nil {
		return *m.G_23
	}
	return Default_AffineToneModel_G_23
}

type MixtureAffineToneModel struct {
	Model []*AffineToneModel `protobuf:"bytes,1,rep,name=model" json:"model,omitempty"`
}

func (m *MixtureAffineToneModel) Reset()      { *m = MixtureAffineToneModel{} }
func (*MixtureAffineToneModel) ProtoMessage() {}
func (*MixtureAffineToneModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_5220b5f4bfa744f0, []int{3}
}
func (m *MixtureAffineToneModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MixtureAffineToneModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MixtureAffineToneModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MixtureAffineToneModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixtureAffineToneModel.Merge(m, src)
}
func (m *MixtureAffineToneModel) XXX_Size() int {
	return m.Size()
}
func (m *MixtureAffineToneModel) XXX_DiscardUnknown() {
	xxx_messageInfo_MixtureAffineToneModel.DiscardUnknown(m)
}

var xxx_messageInfo_MixtureAffineToneModel proto.InternalMessageInfo

func (m *MixtureAffineToneModel) GetModel() []*AffineToneModel {
	if m != nil {
		return m.Model
	}
	return nil
}

func init() {
	proto.RegisterType((*GainBiasModel)(nil), "mediapipe.GainBiasModel")
	proto.RegisterType((*MixtureGainBiasModel)(nil), "mediapipe.MixtureGainBiasModel")
	proto.RegisterType((*AffineToneModel)(nil), "mediapipe.AffineToneModel")
	proto.RegisterType((*MixtureAffineToneModel)(nil), "mediapipe.MixtureAffineToneModel")
}

func init() {
	proto.RegisterFile("mediapipe/util/tracking/tone_models.proto", fileDescriptor_5220b5f4bfa744f0)
}

var fileDescriptor_5220b5f4bfa744f0 = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x3d, 0x6e, 0xe2, 0x40,
	0x1c, 0xc5, 0x3d, 0x98, 0x8f, 0x65, 0xd8, 0xd5, 0x4a, 0x08, 0xad, 0x46, 0x14, 0x23, 0xe4, 0x8a,
	0x6d, 0xec, 0xf9, 0xe8, 0xb6, 0x5b, 0x56, 0xda, 0x48, 0x91, 0x68, 0x50, 0xaa, 0x34, 0xc8, 0xc0,
	0x30, 0x19, 0x05, 0x3c, 0x08, 0x8c, 0x94, 0x32, 0x47, 0x48, 0x9b, 0x1b, 0xe4, 0x06, 0xb9, 0x42,
	0x4a, 0x4a, 0xca, 0x60, 0x9a, 0x94, 0x1c, 0x21, 0x32, 0x1e, 0x18, 0x1b, 0x29, 0xed, 0xef, 0xff,
	0xde, 0xb3, 0xdf, 0xd3, 0xc0, 0xdf, 0x73, 0x31, 0x51, 0xe1, 0x42, 0x2d, 0x44, 0xb0, 0x8e, 0xd5,
	0x2c, 0x88, 0x97, 0xe1, 0xf8, 0x5e, 0x45, 0x32, 0x88, 0x75, 0x24, 0x86, 0x73, 0x3d, 0x11, 0xb3,
	0x95, 0xbf, 0x58, 0xea, 0x58, 0x37, 0xeb, 0x67, 0xa9, 0xf7, 0x0a, 0xe0, 0x8f, 0xab, 0x50, 0x45,
	0x3d, 0x15, 0xae, 0xfa, 0xa9, 0xa6, 0xd9, 0x86, 0x35, 0x19, 0xaa, 0x68, 0x38, 0xa6, 0x08, 0x74,
	0x40, 0xb7, 0xf4, 0x07, 0xd0, 0x41, 0x35, 0x25, 0xff, 0x68, 0x7a, 0x1b, 0xa9, 0x70, 0x95, 0xde,
	0x4a, 0xd9, 0x8d, 0x0c, 0xaa, 0x29, 0xc9, 0x6e, 0x99, 0x8f, 0x21, 0xb7, 0xe8, 0x63, 0xd6, 0xc7,
	0x50, 0xb9, 0xe8, 0x63, 0xd6, 0xc7, 0x51, 0xa5, 0xe8, 0xe3, 0xd6, 0xc7, 0x51, 0xb5, 0xe8, 0xe3,
	0xde, 0x7f, 0xd8, 0xea, 0xab, 0x87, 0x78, 0xbd, 0x14, 0xc5, 0xff, 0xf7, 0x61, 0xe5, 0x58, 0x16,
	0x81, 0x8e, 0xdb, 0x6d, 0x30, 0xe4, 0x9f, 0xcb, 0xfa, 0x05, 0xe1, 0x20, 0x93, 0x79, 0xcf, 0x25,
	0xf8, 0xf3, 0xef, 0x74, 0xaa, 0x22, 0x71, 0xa3, 0x23, 0x91, 0x65, 0xb4, 0x60, 0x59, 0x0e, 0x09,
	0xb1, 0x03, 0xb8, 0x92, 0x10, 0x43, 0x73, 0xd5, 0x5d, 0x49, 0xa8, 0xa1, 0xe7, 0xd2, 0x47, 0xca,
	0x0c, 0xe5, 0xb6, 0xae, 0x2b, 0x09, 0xcf, 0x28, 0x25, 0xa7, 0xa2, 0x29, 0xa5, 0x26, 0x97, 0xd2,
	0x53, 0xc5, 0xf4, 0x6b, 0xd4, 0xe4, 0x52, 0x86, 0x6a, 0x39, 0xad, 0xc9, 0xa5, 0x1c, 0x7d, 0xcb,
	0x51, 0x93, 0xcb, 0x08, 0xaa, 0x5b, 0xca, 0x4c, 0x2e, 0xa3, 0x08, 0xe6, 0xa8, 0xc9, 0x65, 0x0c,
	0x35, 0xec, 0xd7, 0x98, 0xc9, 0x65, 0x1c, 0x7d, 0xcf, 0x69, 0xb9, 0x77, 0x0d, 0x7f, 0x99, 0x8d,
	0x2f, 0x17, 0x22, 0xc5, 0x95, 0xdb, 0xb9, 0x95, 0x2f, 0xa4, 0x66, 0xe7, 0x9e, 0xda, 0xec, 0xb0,
	0xb3, 0xdd, 0x61, 0xe7, 0xb0, 0xc3, 0xe0, 0x31, 0xc1, 0xe0, 0x25, 0xc1, 0xe0, 0x2d, 0xc1, 0x60,
	0x93, 0x60, 0xf0, 0x9e, 0x60, 0xf0, 0x91, 0x60, 0xe7, 0x90, 0x60, 0xf0, 0xb4, 0xc7, 0xce, 0x66,
	0x8f, 0x9d, 0xed, 0x1e, 0x3b, 0xb7, 0x5c, 0xaa, 0xf8, 0x6e, 0x3d, 0xf2, 0xc7, 0x7a, 0x1e, 0x48,
	0xad, 0xe5, 0x4c, 0x04, 0xf6, 0x9d, 0x7f, 0xf1, 0xe2, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x91,
	0x51, 0x53, 0x1d, 0x0b, 0x03, 0x00, 0x00,
}

func (this *GainBiasModel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GainBiasModel)
	if !ok {
		that2, ok := that.(GainBiasModel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GainC1 != nil && that1.GainC1 != nil {
		if *this.GainC1 != *that1.GainC1 {
			return false
		}
	} else if this.GainC1 != nil {
		return false
	} else if that1.GainC1 != nil {
		return false
	}
	if this.BiasC1 != nil && that1.BiasC1 != nil {
		if *this.BiasC1 != *that1.BiasC1 {
			return false
		}
	} else if this.BiasC1 != nil {
		return false
	} else if that1.BiasC1 != nil {
		return false
	}
	if this.GainC2 != nil && that1.GainC2 != nil {
		if *this.GainC2 != *that1.GainC2 {
			return false
		}
	} else if this.GainC2 != nil {
		return false
	} else if that1.GainC2 != nil {
		return false
	}
	if this.BiasC2 != nil && that1.BiasC2 != nil {
		if *this.BiasC2 != *that1.BiasC2 {
			return false
		}
	} else if this.BiasC2 != nil {
		return false
	} else if that1.BiasC2 != nil {
		return false
	}
	if this.GainC3 != nil && that1.GainC3 != nil {
		if *this.GainC3 != *that1.GainC3 {
			return false
		}
	} else if this.GainC3 != nil {
		return false
	} else if that1.GainC3 != nil {
		return false
	}
	if this.BiasC3 != nil && that1.BiasC3 != nil {
		if *this.BiasC3 != *that1.BiasC3 {
			return false
		}
	} else if this.BiasC3 != nil {
		return false
	} else if that1.BiasC3 != nil {
		return false
	}
	return true
}
func (this *MixtureGainBiasModel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MixtureGainBiasModel)
	if !ok {
		that2, ok := that.(MixtureGainBiasModel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Model) != len(that1.Model) {
		return false
	}
	for i := range this.Model {
		if !this.Model[i].Equal(that1.Model[i]) {
			return false
		}
	}
	return true
}
func (this *AffineToneModel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AffineToneModel)
	if !ok {
		that2, ok := that.(AffineToneModel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.G_00 != nil && that1.G_00 != nil {
		if *this.G_00 != *that1.G_00 {
			return false
		}
	} else if this.G_00 != nil {
		return false
	} else if that1.G_00 != nil {
		return false
	}
	if this.G_01 != nil && that1.G_01 != nil {
		if *this.G_01 != *that1.G_01 {
			return false
		}
	} else if this.G_01 != nil {
		return false
	} else if that1.G_01 != nil {
		return false
	}
	if this.G_02 != nil && that1.G_02 != nil {
		if *this.G_02 != *that1.G_02 {
			return false
		}
	} else if this.G_02 != nil {
		return false
	} else if that1.G_02 != nil {
		return false
	}
	if this.G_03 != nil && that1.G_03 != nil {
		if *this.G_03 != *that1.G_03 {
			return false
		}
	} else if this.G_03 != nil {
		return false
	} else if that1.G_03 != nil {
		return false
	}
	if this.G_10 != nil && that1.G_10 != nil {
		if *this.G_10 != *that1.G_10 {
			return false
		}
	} else if this.G_10 != nil {
		return false
	} else if that1.G_10 != nil {
		return false
	}
	if this.G_11 != nil && that1.G_11 != nil {
		if *this.G_11 != *that1.G_11 {
			return false
		}
	} else if this.G_11 != nil {
		return false
	} else if that1.G_11 != nil {
		return false
	}
	if this.G_12 != nil && that1.G_12 != nil {
		if *this.G_12 != *that1.G_12 {
			return false
		}
	} else if this.G_12 != nil {
		return false
	} else if that1.G_12 != nil {
		return false
	}
	if this.G_13 != nil && that1.G_13 != nil {
		if *this.G_13 != *that1.G_13 {
			return false
		}
	} else if this.G_13 != nil {
		return false
	} else if that1.G_13 != nil {
		return false
	}
	if this.G_20 != nil && that1.G_20 != nil {
		if *this.G_20 != *that1.G_20 {
			return false
		}
	} else if this.G_20 != nil {
		return false
	} else if that1.G_20 != nil {
		return false
	}
	if this.G_21 != nil && that1.G_21 != nil {
		if *this.G_21 != *that1.G_21 {
			return false
		}
	} else if this.G_21 != nil {
		return false
	} else if that1.G_21 != nil {
		return false
	}
	if this.G_22 != nil && that1.G_22 != nil {
		if *this.G_22 != *that1.G_22 {
			return false
		}
	} else if this.G_22 != nil {
		return false
	} else if that1.G_22 != nil {
		return false
	}
	if this.G_23 != nil && that1.G_23 != nil {
		if *this.G_23 != *that1.G_23 {
			return false
		}
	} else if this.G_23 != nil {
		return false
	} else if that1.G_23 != nil {
		return false
	}
	return true
}
func (this *MixtureAffineToneModel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MixtureAffineToneModel)
	if !ok {
		that2, ok := that.(MixtureAffineToneModel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Model) != len(that1.Model) {
		return false
	}
	for i := range this.Model {
		if !this.Model[i].Equal(that1.Model[i]) {
			return false
		}
	}
	return true
}
func (this *GainBiasModel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&tracking.GainBiasModel{")
	if this.GainC1 != nil {
		s = append(s, "GainC1: "+valueToGoStringToneModels(this.GainC1, "float32")+",\n")
	}
	if this.BiasC1 != nil {
		s = append(s, "BiasC1: "+valueToGoStringToneModels(this.BiasC1, "float32")+",\n")
	}
	if this.GainC2 != nil {
		s = append(s, "GainC2: "+valueToGoStringToneModels(this.GainC2, "float32")+",\n")
	}
	if this.BiasC2 != nil {
		s = append(s, "BiasC2: "+valueToGoStringToneModels(this.BiasC2, "float32")+",\n")
	}
	if this.GainC3 != nil {
		s = append(s, "GainC3: "+valueToGoStringToneModels(this.GainC3, "float32")+",\n")
	}
	if this.BiasC3 != nil {
		s = append(s, "BiasC3: "+valueToGoStringToneModels(this.BiasC3, "float32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MixtureGainBiasModel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tracking.MixtureGainBiasModel{")
	if this.Model != nil {
		s = append(s, "Model: "+fmt.Sprintf("%#v", this.Model)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AffineToneModel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&tracking.AffineToneModel{")
	if this.G_00 != nil {
		s = append(s, "G_00: "+valueToGoStringToneModels(this.G_00, "float32")+",\n")
	}
	if this.G_01 != nil {
		s = append(s, "G_01: "+valueToGoStringToneModels(this.G_01, "float32")+",\n")
	}
	if this.G_02 != nil {
		s = append(s, "G_02: "+valueToGoStringToneModels(this.G_02, "float32")+",\n")
	}
	if this.G_03 != nil {
		s = append(s, "G_03: "+valueToGoStringToneModels(this.G_03, "float32")+",\n")
	}
	if this.G_10 != nil {
		s = append(s, "G_10: "+valueToGoStringToneModels(this.G_10, "float32")+",\n")
	}
	if this.G_11 != nil {
		s = append(s, "G_11: "+valueToGoStringToneModels(this.G_11, "float32")+",\n")
	}
	if this.G_12 != nil {
		s = append(s, "G_12: "+valueToGoStringToneModels(this.G_12, "float32")+",\n")
	}
	if this.G_13 != nil {
		s = append(s, "G_13: "+valueToGoStringToneModels(this.G_13, "float32")+",\n")
	}
	if this.G_20 != nil {
		s = append(s, "G_20: "+valueToGoStringToneModels(this.G_20, "float32")+",\n")
	}
	if this.G_21 != nil {
		s = append(s, "G_21: "+valueToGoStringToneModels(this.G_21, "float32")+",\n")
	}
	if this.G_22 != nil {
		s = append(s, "G_22: "+valueToGoStringToneModels(this.G_22, "float32")+",\n")
	}
	if this.G_23 != nil {
		s = append(s, "G_23: "+valueToGoStringToneModels(this.G_23, "float32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MixtureAffineToneModel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tracking.MixtureAffineToneModel{")
	if this.Model != nil {
		s = append(s, "Model: "+fmt.Sprintf("%#v", this.Model)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringToneModels(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GainBiasModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GainBiasModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GainBiasModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BiasC3 != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.BiasC3))))
		i--
		dAtA[i] = 0x35
	}
	if m.GainC3 != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.GainC3))))
		i--
		dAtA[i] = 0x2d
	}
	if m.BiasC2 != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.BiasC2))))
		i--
		dAtA[i] = 0x25
	}
	if m.GainC2 != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.GainC2))))
		i--
		dAtA[i] = 0x1d
	}
	if m.BiasC1 != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.BiasC1))))
		i--
		dAtA[i] = 0x15
	}
	if m.GainC1 != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.GainC1))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *MixtureGainBiasModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MixtureGainBiasModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MixtureGainBiasModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Model) > 0 {
		for iNdEx := len(m.Model) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Model[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintToneModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AffineToneModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AffineToneModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AffineToneModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.G_23 != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.G_23))))
		i--
		dAtA[i] = 0x65
	}
	if m.G_22 != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.G_22))))
		i--
		dAtA[i] = 0x5d
	}
	if m.G_21 != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.G_21))))
		i--
		dAtA[i] = 0x55
	}
	if m.G_20 != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.G_20))))
		i--
		dAtA[i] = 0x4d
	}
	if m.G_13 != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.G_13))))
		i--
		dAtA[i] = 0x45
	}
	if m.G_12 != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.G_12))))
		i--
		dAtA[i] = 0x3d
	}
	if m.G_11 != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.G_11))))
		i--
		dAtA[i] = 0x35
	}
	if m.G_10 != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.G_10))))
		i--
		dAtA[i] = 0x2d
	}
	if m.G_03 != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.G_03))))
		i--
		dAtA[i] = 0x25
	}
	if m.G_02 != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.G_02))))
		i--
		dAtA[i] = 0x1d
	}
	if m.G_01 != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.G_01))))
		i--
		dAtA[i] = 0x15
	}
	if m.G_00 != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.G_00))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *MixtureAffineToneModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MixtureAffineToneModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MixtureAffineToneModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Model) > 0 {
		for iNdEx := len(m.Model) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Model[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintToneModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintToneModels(dAtA []byte, offset int, v uint64) int {
	offset -= sovToneModels(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GainBiasModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GainC1 != nil {
		n += 5
	}
	if m.BiasC1 != nil {
		n += 5
	}
	if m.GainC2 != nil {
		n += 5
	}
	if m.BiasC2 != nil {
		n += 5
	}
	if m.GainC3 != nil {
		n += 5
	}
	if m.BiasC3 != nil {
		n += 5
	}
	return n
}

func (m *MixtureGainBiasModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Model) > 0 {
		for _, e := range m.Model {
			l = e.Size()
			n += 1 + l + sovToneModels(uint64(l))
		}
	}
	return n
}

func (m *AffineToneModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.G_00 != nil {
		n += 5
	}
	if m.G_01 != nil {
		n += 5
	}
	if m.G_02 != nil {
		n += 5
	}
	if m.G_03 != nil {
		n += 5
	}
	if m.G_10 != nil {
		n += 5
	}
	if m.G_11 != nil {
		n += 5
	}
	if m.G_12 != nil {
		n += 5
	}
	if m.G_13 != nil {
		n += 5
	}
	if m.G_20 != nil {
		n += 5
	}
	if m.G_21 != nil {
		n += 5
	}
	if m.G_22 != nil {
		n += 5
	}
	if m.G_23 != nil {
		n += 5
	}
	return n
}

func (m *MixtureAffineToneModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Model) > 0 {
		for _, e := range m.Model {
			l = e.Size()
			n += 1 + l + sovToneModels(uint64(l))
		}
	}
	return n
}

func sovToneModels(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozToneModels(x uint64) (n int) {
	return sovToneModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GainBiasModel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GainBiasModel{`,
		`GainC1:` + valueToStringToneModels(this.GainC1) + `,`,
		`BiasC1:` + valueToStringToneModels(this.BiasC1) + `,`,
		`GainC2:` + valueToStringToneModels(this.GainC2) + `,`,
		`BiasC2:` + valueToStringToneModels(this.BiasC2) + `,`,
		`GainC3:` + valueToStringToneModels(this.GainC3) + `,`,
		`BiasC3:` + valueToStringToneModels(this.BiasC3) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MixtureGainBiasModel) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForModel := "[]*GainBiasModel{"
	for _, f := range this.Model {
		repeatedStringForModel += strings.Replace(f.String(), "GainBiasModel", "GainBiasModel", 1) + ","
	}
	repeatedStringForModel += "}"
	s := strings.Join([]string{`&MixtureGainBiasModel{`,
		`Model:` + repeatedStringForModel + `,`,
		`}`,
	}, "")
	return s
}
func (this *AffineToneModel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AffineToneModel{`,
		`G_00:` + valueToStringToneModels(this.G_00) + `,`,
		`G_01:` + valueToStringToneModels(this.G_01) + `,`,
		`G_02:` + valueToStringToneModels(this.G_02) + `,`,
		`G_03:` + valueToStringToneModels(this.G_03) + `,`,
		`G_10:` + valueToStringToneModels(this.G_10) + `,`,
		`G_11:` + valueToStringToneModels(this.G_11) + `,`,
		`G_12:` + valueToStringToneModels(this.G_12) + `,`,
		`G_13:` + valueToStringToneModels(this.G_13) + `,`,
		`G_20:` + valueToStringToneModels(this.G_20) + `,`,
		`G_21:` + valueToStringToneModels(this.G_21) + `,`,
		`G_22:` + valueToStringToneModels(this.G_22) + `,`,
		`G_23:` + valueToStringToneModels(this.G_23) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MixtureAffineToneModel) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForModel := "[]*AffineToneModel{"
	for _, f := range this.Model {
		repeatedStringForModel += strings.Replace(f.String(), "AffineToneModel", "AffineToneModel", 1) + ","
	}
	repeatedStringForModel += "}"
	s := strings.Join([]string{`&MixtureAffineToneModel{`,
		`Model:` + repeatedStringForModel + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringToneModels(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GainBiasModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToneModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GainBiasModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GainBiasModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GainC1", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.GainC1 = &v2
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiasC1", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.BiasC1 = &v2
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GainC2", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.GainC2 = &v2
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiasC2", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.BiasC2 = &v2
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GainC3", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.GainC3 = &v2
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiasC3", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.BiasC3 = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipToneModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToneModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MixtureGainBiasModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToneModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MixtureGainBiasModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MixtureGainBiasModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToneModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToneModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToneModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = append(m.Model, &GainBiasModel{})
			if err := m.Model[len(m.Model)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToneModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToneModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AffineToneModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToneModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AffineToneModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AffineToneModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field G_00", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.G_00 = &v2
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field G_01", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.G_01 = &v2
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field G_02", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.G_02 = &v2
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field G_03", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.G_03 = &v2
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field G_10", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.G_10 = &v2
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field G_11", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.G_11 = &v2
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field G_12", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.G_12 = &v2
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field G_13", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.G_13 = &v2
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field G_20", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.G_20 = &v2
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field G_21", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.G_21 = &v2
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field G_22", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.G_22 = &v2
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field G_23", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.G_23 = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipToneModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToneModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MixtureAffineToneModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToneModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MixtureAffineToneModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MixtureAffineToneModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToneModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToneModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToneModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = append(m.Model, &AffineToneModel{})
			if err := m.Model[len(m.Model)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToneModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToneModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipToneModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowToneModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowToneModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowToneModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthToneModels
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupToneModels
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthToneModels
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthToneModels        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowToneModels          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupToneModels = fmt.Errorf("proto: unexpected end of group")
)
