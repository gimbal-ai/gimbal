// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: opentelemetry/proto/logs/v1/logs.proto

package v1

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	v11 "go.opentelemetry.io/proto/otlp/common/v1"
	v1 "go.opentelemetry.io/proto/otlp/resource/v1"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SeverityNumber int32

const (
	SEVERITY_NUMBER_UNSPECIFIED SeverityNumber = 0
	SEVERITY_NUMBER_TRACE       SeverityNumber = 1
	SEVERITY_NUMBER_TRACE2      SeverityNumber = 2
	SEVERITY_NUMBER_TRACE3      SeverityNumber = 3
	SEVERITY_NUMBER_TRACE4      SeverityNumber = 4
	SEVERITY_NUMBER_DEBUG       SeverityNumber = 5
	SEVERITY_NUMBER_DEBUG2      SeverityNumber = 6
	SEVERITY_NUMBER_DEBUG3      SeverityNumber = 7
	SEVERITY_NUMBER_DEBUG4      SeverityNumber = 8
	SEVERITY_NUMBER_INFO        SeverityNumber = 9
	SEVERITY_NUMBER_INFO2       SeverityNumber = 10
	SEVERITY_NUMBER_INFO3       SeverityNumber = 11
	SEVERITY_NUMBER_INFO4       SeverityNumber = 12
	SEVERITY_NUMBER_WARN        SeverityNumber = 13
	SEVERITY_NUMBER_WARN2       SeverityNumber = 14
	SEVERITY_NUMBER_WARN3       SeverityNumber = 15
	SEVERITY_NUMBER_WARN4       SeverityNumber = 16
	SEVERITY_NUMBER_ERROR       SeverityNumber = 17
	SEVERITY_NUMBER_ERROR2      SeverityNumber = 18
	SEVERITY_NUMBER_ERROR3      SeverityNumber = 19
	SEVERITY_NUMBER_ERROR4      SeverityNumber = 20
	SEVERITY_NUMBER_FATAL       SeverityNumber = 21
	SEVERITY_NUMBER_FATAL2      SeverityNumber = 22
	SEVERITY_NUMBER_FATAL3      SeverityNumber = 23
	SEVERITY_NUMBER_FATAL4      SeverityNumber = 24
)

var SeverityNumber_name = map[int32]string{
	0:  "SEVERITY_NUMBER_UNSPECIFIED",
	1:  "SEVERITY_NUMBER_TRACE",
	2:  "SEVERITY_NUMBER_TRACE2",
	3:  "SEVERITY_NUMBER_TRACE3",
	4:  "SEVERITY_NUMBER_TRACE4",
	5:  "SEVERITY_NUMBER_DEBUG",
	6:  "SEVERITY_NUMBER_DEBUG2",
	7:  "SEVERITY_NUMBER_DEBUG3",
	8:  "SEVERITY_NUMBER_DEBUG4",
	9:  "SEVERITY_NUMBER_INFO",
	10: "SEVERITY_NUMBER_INFO2",
	11: "SEVERITY_NUMBER_INFO3",
	12: "SEVERITY_NUMBER_INFO4",
	13: "SEVERITY_NUMBER_WARN",
	14: "SEVERITY_NUMBER_WARN2",
	15: "SEVERITY_NUMBER_WARN3",
	16: "SEVERITY_NUMBER_WARN4",
	17: "SEVERITY_NUMBER_ERROR",
	18: "SEVERITY_NUMBER_ERROR2",
	19: "SEVERITY_NUMBER_ERROR3",
	20: "SEVERITY_NUMBER_ERROR4",
	21: "SEVERITY_NUMBER_FATAL",
	22: "SEVERITY_NUMBER_FATAL2",
	23: "SEVERITY_NUMBER_FATAL3",
	24: "SEVERITY_NUMBER_FATAL4",
}

var SeverityNumber_value = map[string]int32{
	"SEVERITY_NUMBER_UNSPECIFIED": 0,
	"SEVERITY_NUMBER_TRACE":       1,
	"SEVERITY_NUMBER_TRACE2":      2,
	"SEVERITY_NUMBER_TRACE3":      3,
	"SEVERITY_NUMBER_TRACE4":      4,
	"SEVERITY_NUMBER_DEBUG":       5,
	"SEVERITY_NUMBER_DEBUG2":      6,
	"SEVERITY_NUMBER_DEBUG3":      7,
	"SEVERITY_NUMBER_DEBUG4":      8,
	"SEVERITY_NUMBER_INFO":        9,
	"SEVERITY_NUMBER_INFO2":       10,
	"SEVERITY_NUMBER_INFO3":       11,
	"SEVERITY_NUMBER_INFO4":       12,
	"SEVERITY_NUMBER_WARN":        13,
	"SEVERITY_NUMBER_WARN2":       14,
	"SEVERITY_NUMBER_WARN3":       15,
	"SEVERITY_NUMBER_WARN4":       16,
	"SEVERITY_NUMBER_ERROR":       17,
	"SEVERITY_NUMBER_ERROR2":      18,
	"SEVERITY_NUMBER_ERROR3":      19,
	"SEVERITY_NUMBER_ERROR4":      20,
	"SEVERITY_NUMBER_FATAL":       21,
	"SEVERITY_NUMBER_FATAL2":      22,
	"SEVERITY_NUMBER_FATAL3":      23,
	"SEVERITY_NUMBER_FATAL4":      24,
}

func (SeverityNumber) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d1c030a3ec7e961e, []int{0}
}

type LogRecordFlags int32

const (
	LOG_RECORD_FLAGS_DO_NOT_USE       LogRecordFlags = 0
	LOG_RECORD_FLAGS_TRACE_FLAGS_MASK LogRecordFlags = 255
)

var LogRecordFlags_name = map[int32]string{
	0:   "LOG_RECORD_FLAGS_DO_NOT_USE",
	255: "LOG_RECORD_FLAGS_TRACE_FLAGS_MASK",
}

var LogRecordFlags_value = map[string]int32{
	"LOG_RECORD_FLAGS_DO_NOT_USE":       0,
	"LOG_RECORD_FLAGS_TRACE_FLAGS_MASK": 255,
}

func (LogRecordFlags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d1c030a3ec7e961e, []int{1}
}

type LogsData struct {
	ResourceLogs []*ResourceLogs `protobuf:"bytes,1,rep,name=resource_logs,json=resourceLogs,proto3" json:"resource_logs,omitempty"`
}

func (m *LogsData) Reset()      { *m = LogsData{} }
func (*LogsData) ProtoMessage() {}
func (*LogsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1c030a3ec7e961e, []int{0}
}
func (m *LogsData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogsData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogsData.Merge(m, src)
}
func (m *LogsData) XXX_Size() int {
	return m.Size()
}
func (m *LogsData) XXX_DiscardUnknown() {
	xxx_messageInfo_LogsData.DiscardUnknown(m)
}

var xxx_messageInfo_LogsData proto.InternalMessageInfo

func (m *LogsData) GetResourceLogs() []*ResourceLogs {
	if m != nil {
		return m.ResourceLogs
	}
	return nil
}

type ResourceLogs struct {
	Resource  *v1.Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	ScopeLogs []*ScopeLogs `protobuf:"bytes,2,rep,name=scope_logs,json=scopeLogs,proto3" json:"scope_logs,omitempty"`
	SchemaUrl string       `protobuf:"bytes,3,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"`
}

func (m *ResourceLogs) Reset()      { *m = ResourceLogs{} }
func (*ResourceLogs) ProtoMessage() {}
func (*ResourceLogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1c030a3ec7e961e, []int{1}
}
func (m *ResourceLogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceLogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceLogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceLogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceLogs.Merge(m, src)
}
func (m *ResourceLogs) XXX_Size() int {
	return m.Size()
}
func (m *ResourceLogs) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceLogs.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceLogs proto.InternalMessageInfo

func (m *ResourceLogs) GetResource() *v1.Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ResourceLogs) GetScopeLogs() []*ScopeLogs {
	if m != nil {
		return m.ScopeLogs
	}
	return nil
}

func (m *ResourceLogs) GetSchemaUrl() string {
	if m != nil {
		return m.SchemaUrl
	}
	return ""
}

type ScopeLogs struct {
	Scope      *v11.InstrumentationScope `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	LogRecords []*LogRecord              `protobuf:"bytes,2,rep,name=log_records,json=logRecords,proto3" json:"log_records,omitempty"`
	SchemaUrl  string                    `protobuf:"bytes,3,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"`
}

func (m *ScopeLogs) Reset()      { *m = ScopeLogs{} }
func (*ScopeLogs) ProtoMessage() {}
func (*ScopeLogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1c030a3ec7e961e, []int{2}
}
func (m *ScopeLogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeLogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeLogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeLogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeLogs.Merge(m, src)
}
func (m *ScopeLogs) XXX_Size() int {
	return m.Size()
}
func (m *ScopeLogs) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeLogs.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeLogs proto.InternalMessageInfo

func (m *ScopeLogs) GetScope() *v11.InstrumentationScope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *ScopeLogs) GetLogRecords() []*LogRecord {
	if m != nil {
		return m.LogRecords
	}
	return nil
}

func (m *ScopeLogs) GetSchemaUrl() string {
	if m != nil {
		return m.SchemaUrl
	}
	return ""
}

type LogRecord struct {
	TimeUnixNano           uint64          `protobuf:"fixed64,1,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	ObservedTimeUnixNano   uint64          `protobuf:"fixed64,11,opt,name=observed_time_unix_nano,json=observedTimeUnixNano,proto3" json:"observed_time_unix_nano,omitempty"`
	SeverityNumber         SeverityNumber  `protobuf:"varint,2,opt,name=severity_number,json=severityNumber,proto3,enum=opentelemetry.proto.logs.v1.SeverityNumber" json:"severity_number,omitempty"`
	SeverityText           string          `protobuf:"bytes,3,opt,name=severity_text,json=severityText,proto3" json:"severity_text,omitempty"`
	Body                   *v11.AnyValue   `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	Attributes             []*v11.KeyValue `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty"`
	DroppedAttributesCount uint32          `protobuf:"varint,7,opt,name=dropped_attributes_count,json=droppedAttributesCount,proto3" json:"dropped_attributes_count,omitempty"`
	Flags                  uint32          `protobuf:"fixed32,8,opt,name=flags,proto3" json:"flags,omitempty"`
	TraceId                []byte          `protobuf:"bytes,9,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId                 []byte          `protobuf:"bytes,10,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
}

func (m *LogRecord) Reset()      { *m = LogRecord{} }
func (*LogRecord) ProtoMessage() {}
func (*LogRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1c030a3ec7e961e, []int{3}
}
func (m *LogRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRecord.Merge(m, src)
}
func (m *LogRecord) XXX_Size() int {
	return m.Size()
}
func (m *LogRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LogRecord proto.InternalMessageInfo

func (m *LogRecord) GetTimeUnixNano() uint64 {
	if m != nil {
		return m.TimeUnixNano
	}
	return 0
}

func (m *LogRecord) GetObservedTimeUnixNano() uint64 {
	if m != nil {
		return m.ObservedTimeUnixNano
	}
	return 0
}

func (m *LogRecord) GetSeverityNumber() SeverityNumber {
	if m != nil {
		return m.SeverityNumber
	}
	return SEVERITY_NUMBER_UNSPECIFIED
}

func (m *LogRecord) GetSeverityText() string {
	if m != nil {
		return m.SeverityText
	}
	return ""
}

func (m *LogRecord) GetBody() *v11.AnyValue {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *LogRecord) GetAttributes() []*v11.KeyValue {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *LogRecord) GetDroppedAttributesCount() uint32 {
	if m != nil {
		return m.DroppedAttributesCount
	}
	return 0
}

func (m *LogRecord) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *LogRecord) GetTraceId() []byte {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *LogRecord) GetSpanId() []byte {
	if m != nil {
		return m.SpanId
	}
	return nil
}

func init() {
	proto.RegisterEnum("opentelemetry.proto.logs.v1.SeverityNumber", SeverityNumber_name, SeverityNumber_value)
	proto.RegisterEnum("opentelemetry.proto.logs.v1.LogRecordFlags", LogRecordFlags_name, LogRecordFlags_value)
	proto.RegisterType((*LogsData)(nil), "opentelemetry.proto.logs.v1.LogsData")
	proto.RegisterType((*ResourceLogs)(nil), "opentelemetry.proto.logs.v1.ResourceLogs")
	proto.RegisterType((*ScopeLogs)(nil), "opentelemetry.proto.logs.v1.ScopeLogs")
	proto.RegisterType((*LogRecord)(nil), "opentelemetry.proto.logs.v1.LogRecord")
}

func init() {
	proto.RegisterFile("opentelemetry/proto/logs/v1/logs.proto", fileDescriptor_d1c030a3ec7e961e)
}

var fileDescriptor_d1c030a3ec7e961e = []byte{
	// 893 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0x4f, 0x6f, 0x22, 0x37,
	0x18, 0xc6, 0x71, 0x12, 0xfe, 0xbd, 0x21, 0xac, 0xeb, 0x66, 0x93, 0xd9, 0x44, 0x9d, 0xa5, 0x69,
	0x95, 0xd2, 0x54, 0x22, 0x0a, 0x50, 0xa9, 0x52, 0x4f, 0x24, 0x0c, 0x88, 0x5d, 0x16, 0x22, 0x03,
	0xa9, 0x76, 0x2f, 0xa3, 0x01, 0x5c, 0x8a, 0x34, 0x8c, 0xd1, 0x8c, 0x41, 0xc9, 0xad, 0x1f, 0xa1,
	0xdf, 0xa2, 0x55, 0x3f, 0x44, 0x2f, 0x7b, 0xe9, 0x31, 0xc7, 0x3d, 0x36, 0xe4, 0xb2, 0xbd, 0xad,
	0xd4, 0x0f, 0xd0, 0xca, 0x66, 0xa0, 0x24, 0x9d, 0x49, 0x7a, 0xc2, 0x7e, 0x7f, 0xcf, 0xf3, 0xf8,
	0xf5, 0x18, 0xcc, 0xc0, 0x21, 0x1f, 0x33, 0x47, 0x30, 0x9b, 0x8d, 0x98, 0x70, 0xaf, 0x8e, 0xc7,
	0x2e, 0x17, 0xfc, 0xd8, 0xe6, 0x03, 0xef, 0x78, 0x7a, 0xa2, 0x3e, 0x73, 0xaa, 0x44, 0xf6, 0xef,
	0xe8, 0xe6, 0xc5, 0x9c, 0xe2, 0xd3, 0x93, 0xbd, 0xa3, 0xa0, 0x90, 0x1e, 0x1f, 0x8d, 0xb8, 0x23,
	0x63, 0xe6, 0xa3, 0xb9, 0x67, 0x2f, 0x17, 0xa4, 0x75, 0x99, 0xc7, 0x27, 0x6e, 0x8f, 0x49, 0xf5,
	0x62, 0x3c, 0xd7, 0x1f, 0xbc, 0x81, 0x44, 0x9d, 0x0f, 0xbc, 0xb2, 0x25, 0x2c, 0xd2, 0x80, 0xad,
	0x05, 0x35, 0xe5, 0xda, 0x1a, 0xca, 0xac, 0x67, 0x37, 0xf3, 0x5f, 0xe6, 0x1e, 0x68, 0x2e, 0x47,
	0x7d, 0x87, 0x4c, 0xa1, 0x29, 0x77, 0x65, 0x76, 0xf0, 0x16, 0x41, 0x6a, 0x15, 0x13, 0x03, 0x12,
	0x0b, 0x81, 0x86, 0x32, 0x28, 0x34, 0x7b, 0xd9, 0xe3, 0x4a, 0x3e, 0x5d, 0x5a, 0x89, 0x01, 0xe0,
	0xf5, 0xf8, 0xd8, 0x6f, 0x72, 0x4d, 0x35, 0x79, 0xf8, 0x60, 0x93, 0x2d, 0x29, 0x57, 0x1d, 0x26,
	0xbd, 0xc5, 0x90, 0x7c, 0x22, 0x63, 0x7e, 0x60, 0x23, 0xcb, 0x9c, 0xb8, 0xb6, 0xb6, 0x9e, 0x41,
	0xd9, 0xa4, 0xc4, 0xb2, 0xd2, 0x71, 0xed, 0x17, 0xb1, 0xc4, 0xfb, 0x38, 0xfe, 0x33, 0x7e, 0xf0,
	0x1b, 0x82, 0xe4, 0xd2, 0x4f, 0x6a, 0x10, 0x55, 0x09, 0x7e, 0xff, 0x85, 0xc0, 0x65, 0xfd, 0x13,
	0x99, 0x9e, 0xe4, 0x6a, 0x8e, 0x27, 0xdc, 0xc9, 0x88, 0x39, 0xc2, 0x12, 0x43, 0xee, 0xa8, 0x1c,
	0x3a, 0x4f, 0x20, 0x55, 0xd8, 0xb4, 0xf9, 0xc0, 0x74, 0x59, 0x8f, 0xbb, 0xfd, 0xff, 0xb7, 0x8f,
	0x3a, 0x1f, 0x50, 0x25, 0xa7, 0x60, 0x2f, 0x86, 0x8f, 0x6d, 0xe4, 0xe0, 0xaf, 0x75, 0x48, 0x2e,
	0x8d, 0xe4, 0x73, 0x48, 0x8b, 0xe1, 0x88, 0x99, 0x13, 0x67, 0x78, 0x69, 0x3a, 0x96, 0xc3, 0xd5,
	0x4e, 0x62, 0x34, 0x25, 0xab, 0x1d, 0x67, 0x78, 0xd9, 0xb0, 0x1c, 0x4e, 0xbe, 0x86, 0x5d, 0xde,
	0xf5, 0x98, 0x3b, 0x65, 0x7d, 0xf3, 0x9e, 0x7c, 0x53, 0xc9, 0xb7, 0x17, 0xb8, 0xbd, 0x6a, 0x6b,
	0xc3, 0x13, 0x8f, 0x4d, 0x99, 0x3b, 0x14, 0x57, 0xa6, 0x33, 0x19, 0x75, 0x99, 0xab, 0xad, 0x65,
	0x50, 0x36, 0x9d, 0xff, 0xea, 0xe1, 0xe3, 0xf1, 0x3d, 0x0d, 0x65, 0xa1, 0x69, 0xef, 0xce, 0x9c,
	0x7c, 0x06, 0x5b, 0xcb, 0x54, 0xc1, 0x2e, 0x85, 0xbf, 0xc5, 0xd4, 0xa2, 0xd8, 0x66, 0x97, 0x82,
	0x7c, 0x0b, 0x1b, 0x5d, 0xde, 0xbf, 0xd2, 0xa2, 0xea, 0x5c, 0xbe, 0x78, 0xe4, 0x5c, 0x4a, 0xce,
	0xd5, 0x85, 0x65, 0x4f, 0x18, 0x55, 0x26, 0x52, 0x05, 0xb0, 0x84, 0x70, 0x87, 0xdd, 0x89, 0x60,
	0x9e, 0x16, 0x53, 0x27, 0xf1, 0x58, 0xc4, 0x4b, 0xe6, 0x47, 0xac, 0x58, 0xc9, 0x37, 0xa0, 0xf5,
	0x5d, 0x3e, 0x1e, 0xb3, 0xbe, 0xf9, 0x6f, 0xd5, 0xec, 0xf1, 0x89, 0x23, 0xb4, 0x78, 0x06, 0x65,
	0xb7, 0xe8, 0x8e, 0xcf, 0x4b, 0x4b, 0x7c, 0x26, 0x29, 0xd9, 0x86, 0xe8, 0xf7, 0xb6, 0x35, 0xf0,
	0xb4, 0x44, 0x06, 0x65, 0xe3, 0x74, 0x3e, 0x21, 0xcf, 0x20, 0x21, 0x5c, 0xab, 0xc7, 0xcc, 0x61,
	0x5f, 0x4b, 0x66, 0x50, 0x36, 0x45, 0xe3, 0x6a, 0x5e, 0xeb, 0x93, 0x5d, 0x88, 0x7b, 0x63, 0xcb,
	0x91, 0x04, 0x14, 0x89, 0xc9, 0x69, 0xad, 0xff, 0x62, 0x23, 0xb1, 0x81, 0xa3, 0x47, 0x6f, 0xa3,
	0x90, 0xbe, 0xfb, 0x5c, 0xc9, 0x73, 0xd8, 0x6f, 0x19, 0x17, 0x06, 0xad, 0xb5, 0x5f, 0x9b, 0x8d,
	0xce, 0xab, 0x53, 0x83, 0x9a, 0x9d, 0x46, 0xeb, 0xdc, 0x38, 0xab, 0x55, 0x6a, 0x46, 0x19, 0x47,
	0xc8, 0x33, 0x78, 0x7a, 0x5f, 0xd0, 0xa6, 0xa5, 0x33, 0x03, 0x23, 0xb2, 0x07, 0x3b, 0x81, 0x28,
	0x8f, 0xd7, 0x42, 0x59, 0x01, 0xaf, 0x87, 0xb2, 0x22, 0xde, 0x08, 0x5a, 0xae, 0x6c, 0x9c, 0x76,
	0xaa, 0x38, 0x1a, 0x64, 0x53, 0x28, 0x8f, 0x63, 0xa1, 0xac, 0x80, 0xe3, 0xa1, 0xac, 0x88, 0x13,
	0x44, 0x83, 0xed, 0xfb, 0xac, 0xd6, 0xa8, 0x34, 0x71, 0x32, 0xa8, 0x11, 0x49, 0xf2, 0x18, 0xc2,
	0x50, 0x01, 0x6f, 0x86, 0xa1, 0x22, 0x4e, 0x05, 0x2d, 0xf5, 0x5d, 0x89, 0x36, 0xf0, 0x56, 0x90,
	0x49, 0x92, 0x3c, 0x4e, 0x87, 0xa1, 0x02, 0x7e, 0x12, 0x86, 0x8a, 0x18, 0x07, 0x21, 0x83, 0xd2,
	0x26, 0xc5, 0x1f, 0x05, 0x3d, 0x0c, 0x85, 0xf2, 0x98, 0x84, 0xb2, 0x02, 0xfe, 0x38, 0x94, 0x15,
	0xf1, 0x76, 0xd0, 0x72, 0x95, 0x52, 0xbb, 0x54, 0xc7, 0x4f, 0x83, 0x6c, 0x0a, 0xe5, 0xf1, 0x4e,
	0x28, 0x2b, 0xe0, 0xdd, 0x50, 0x56, 0xc4, 0xda, 0xd1, 0x6b, 0x48, 0x2f, 0xaf, 0xae, 0x8a, 0xfa,
	0x45, 0x3c, 0x87, 0xfd, 0x7a, 0xb3, 0x6a, 0x52, 0xe3, 0xac, 0x49, 0xcb, 0x66, 0xa5, 0x5e, 0xaa,
	0xb6, 0xcc, 0x72, 0xd3, 0x6c, 0x34, 0xdb, 0x66, 0xa7, 0x65, 0xe0, 0x08, 0x39, 0x84, 0x4f, 0xff,
	0x23, 0x50, 0x5f, 0x39, 0x7f, 0xfc, 0xaa, 0xd4, 0x7a, 0x89, 0xff, 0x46, 0xa7, 0x3f, 0xa3, 0xeb,
	0x1b, 0x3d, 0xf2, 0xee, 0x46, 0x8f, 0x7c, 0xb8, 0xd1, 0xd1, 0x8f, 0x33, 0x1d, 0xfd, 0x32, 0xd3,
	0xd1, 0xef, 0x33, 0x1d, 0x5d, 0xcf, 0x74, 0xf4, 0xc7, 0x4c, 0x47, 0xef, 0x67, 0x7a, 0xe4, 0xc3,
	0x4c, 0x47, 0x3f, 0xdd, 0xea, 0x91, 0xeb, 0x5b, 0x3d, 0xf2, 0xee, 0x56, 0x8f, 0x80, 0x3e, 0xe4,
	0x0f, 0xdd, 0x65, 0xa7, 0xf2, 0xaa, 0xf5, 0xce, 0x65, 0xe9, 0x1c, 0xbd, 0x39, 0x1c, 0xdc, 0x17,
	0x0f, 0xb9, 0xff, 0x9f, 0xcc, 0x85, 0x3d, 0x5e, 0xbc, 0x09, 0xfc, 0xba, 0xb6, 0xdf, 0x1c, 0x33,
	0xa7, 0xbd, 0x54, 0x29, 0xbf, 0xbc, 0xed, 0xbd, 0xdc, 0xc5, 0x49, 0x37, 0xa6, 0x1c, 0x85, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x88, 0xa8, 0x47, 0x81, 0x4d, 0x08, 0x00, 0x00,
}

func (x SeverityNumber) String() string {
	s, ok := SeverityNumber_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LogRecordFlags) String() string {
	s, ok := LogRecordFlags_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *LogsData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogsData)
	if !ok {
		that2, ok := that.(LogsData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ResourceLogs) != len(that1.ResourceLogs) {
		return false
	}
	for i := range this.ResourceLogs {
		if !this.ResourceLogs[i].Equal(that1.ResourceLogs[i]) {
			return false
		}
	}
	return true
}
func (this *ResourceLogs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResourceLogs)
	if !ok {
		that2, ok := that.(ResourceLogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Resource.Equal(that1.Resource) {
		return false
	}
	if len(this.ScopeLogs) != len(that1.ScopeLogs) {
		return false
	}
	for i := range this.ScopeLogs {
		if !this.ScopeLogs[i].Equal(that1.ScopeLogs[i]) {
			return false
		}
	}
	if this.SchemaUrl != that1.SchemaUrl {
		return false
	}
	return true
}
func (this *ScopeLogs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScopeLogs)
	if !ok {
		that2, ok := that.(ScopeLogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Scope.Equal(that1.Scope) {
		return false
	}
	if len(this.LogRecords) != len(that1.LogRecords) {
		return false
	}
	for i := range this.LogRecords {
		if !this.LogRecords[i].Equal(that1.LogRecords[i]) {
			return false
		}
	}
	if this.SchemaUrl != that1.SchemaUrl {
		return false
	}
	return true
}
func (this *LogRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogRecord)
	if !ok {
		that2, ok := that.(LogRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimeUnixNano != that1.TimeUnixNano {
		return false
	}
	if this.ObservedTimeUnixNano != that1.ObservedTimeUnixNano {
		return false
	}
	if this.SeverityNumber != that1.SeverityNumber {
		return false
	}
	if this.SeverityText != that1.SeverityText {
		return false
	}
	if !this.Body.Equal(that1.Body) {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if !this.Attributes[i].Equal(that1.Attributes[i]) {
			return false
		}
	}
	if this.DroppedAttributesCount != that1.DroppedAttributesCount {
		return false
	}
	if this.Flags != that1.Flags {
		return false
	}
	if !bytes.Equal(this.TraceId, that1.TraceId) {
		return false
	}
	if !bytes.Equal(this.SpanId, that1.SpanId) {
		return false
	}
	return true
}
func (this *LogsData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1.LogsData{")
	if this.ResourceLogs != nil {
		s = append(s, "ResourceLogs: "+fmt.Sprintf("%#v", this.ResourceLogs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResourceLogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v1.ResourceLogs{")
	if this.Resource != nil {
		s = append(s, "Resource: "+fmt.Sprintf("%#v", this.Resource)+",\n")
	}
	if this.ScopeLogs != nil {
		s = append(s, "ScopeLogs: "+fmt.Sprintf("%#v", this.ScopeLogs)+",\n")
	}
	s = append(s, "SchemaUrl: "+fmt.Sprintf("%#v", this.SchemaUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScopeLogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v1.ScopeLogs{")
	if this.Scope != nil {
		s = append(s, "Scope: "+fmt.Sprintf("%#v", this.Scope)+",\n")
	}
	if this.LogRecords != nil {
		s = append(s, "LogRecords: "+fmt.Sprintf("%#v", this.LogRecords)+",\n")
	}
	s = append(s, "SchemaUrl: "+fmt.Sprintf("%#v", this.SchemaUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&v1.LogRecord{")
	s = append(s, "TimeUnixNano: "+fmt.Sprintf("%#v", this.TimeUnixNano)+",\n")
	s = append(s, "ObservedTimeUnixNano: "+fmt.Sprintf("%#v", this.ObservedTimeUnixNano)+",\n")
	s = append(s, "SeverityNumber: "+fmt.Sprintf("%#v", this.SeverityNumber)+",\n")
	s = append(s, "SeverityText: "+fmt.Sprintf("%#v", this.SeverityText)+",\n")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	if this.Attributes != nil {
		s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	}
	s = append(s, "DroppedAttributesCount: "+fmt.Sprintf("%#v", this.DroppedAttributesCount)+",\n")
	s = append(s, "Flags: "+fmt.Sprintf("%#v", this.Flags)+",\n")
	s = append(s, "TraceId: "+fmt.Sprintf("%#v", this.TraceId)+",\n")
	s = append(s, "SpanId: "+fmt.Sprintf("%#v", this.SpanId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLogs(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LogsData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogsData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogsData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResourceLogs) > 0 {
		for iNdEx := len(m.ResourceLogs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourceLogs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResourceLogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceLogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceLogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchemaUrl) > 0 {
		i -= len(m.SchemaUrl)
		copy(dAtA[i:], m.SchemaUrl)
		i = encodeVarintLogs(dAtA, i, uint64(len(m.SchemaUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ScopeLogs) > 0 {
		for iNdEx := len(m.ScopeLogs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScopeLogs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Resource != nil {
		{
			size, err := m.Resource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScopeLogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeLogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeLogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchemaUrl) > 0 {
		i -= len(m.SchemaUrl)
		copy(dAtA[i:], m.SchemaUrl)
		i = encodeVarintLogs(dAtA, i, uint64(len(m.SchemaUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LogRecords) > 0 {
		for iNdEx := len(m.LogRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LogRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ObservedTimeUnixNano != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ObservedTimeUnixNano))
		i--
		dAtA[i] = 0x59
	}
	if len(m.SpanId) > 0 {
		i -= len(m.SpanId)
		copy(dAtA[i:], m.SpanId)
		i = encodeVarintLogs(dAtA, i, uint64(len(m.SpanId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TraceId) > 0 {
		i -= len(m.TraceId)
		copy(dAtA[i:], m.TraceId)
		i = encodeVarintLogs(dAtA, i, uint64(len(m.TraceId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Flags != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Flags))
		i--
		dAtA[i] = 0x45
	}
	if m.DroppedAttributesCount != 0 {
		i = encodeVarintLogs(dAtA, i, uint64(m.DroppedAttributesCount))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SeverityText) > 0 {
		i -= len(m.SeverityText)
		copy(dAtA[i:], m.SeverityText)
		i = encodeVarintLogs(dAtA, i, uint64(len(m.SeverityText)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SeverityNumber != 0 {
		i = encodeVarintLogs(dAtA, i, uint64(m.SeverityNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.TimeUnixNano != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.TimeUnixNano))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintLogs(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LogsData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResourceLogs) > 0 {
		for _, e := range m.ResourceLogs {
			l = e.Size()
			n += 1 + l + sovLogs(uint64(l))
		}
	}
	return n
}

func (m *ResourceLogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resource != nil {
		l = m.Resource.Size()
		n += 1 + l + sovLogs(uint64(l))
	}
	if len(m.ScopeLogs) > 0 {
		for _, e := range m.ScopeLogs {
			l = e.Size()
			n += 1 + l + sovLogs(uint64(l))
		}
	}
	l = len(m.SchemaUrl)
	if l > 0 {
		n += 1 + l + sovLogs(uint64(l))
	}
	return n
}

func (m *ScopeLogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovLogs(uint64(l))
	}
	if len(m.LogRecords) > 0 {
		for _, e := range m.LogRecords {
			l = e.Size()
			n += 1 + l + sovLogs(uint64(l))
		}
	}
	l = len(m.SchemaUrl)
	if l > 0 {
		n += 1 + l + sovLogs(uint64(l))
	}
	return n
}

func (m *LogRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeUnixNano != 0 {
		n += 9
	}
	if m.SeverityNumber != 0 {
		n += 1 + sovLogs(uint64(m.SeverityNumber))
	}
	l = len(m.SeverityText)
	if l > 0 {
		n += 1 + l + sovLogs(uint64(l))
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovLogs(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovLogs(uint64(l))
		}
	}
	if m.DroppedAttributesCount != 0 {
		n += 1 + sovLogs(uint64(m.DroppedAttributesCount))
	}
	if m.Flags != 0 {
		n += 5
	}
	l = len(m.TraceId)
	if l > 0 {
		n += 1 + l + sovLogs(uint64(l))
	}
	l = len(m.SpanId)
	if l > 0 {
		n += 1 + l + sovLogs(uint64(l))
	}
	if m.ObservedTimeUnixNano != 0 {
		n += 9
	}
	return n
}

func sovLogs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogs(x uint64) (n int) {
	return sovLogs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LogsData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResourceLogs := "[]*ResourceLogs{"
	for _, f := range this.ResourceLogs {
		repeatedStringForResourceLogs += strings.Replace(f.String(), "ResourceLogs", "ResourceLogs", 1) + ","
	}
	repeatedStringForResourceLogs += "}"
	s := strings.Join([]string{`&LogsData{`,
		`ResourceLogs:` + repeatedStringForResourceLogs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResourceLogs) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForScopeLogs := "[]*ScopeLogs{"
	for _, f := range this.ScopeLogs {
		repeatedStringForScopeLogs += strings.Replace(f.String(), "ScopeLogs", "ScopeLogs", 1) + ","
	}
	repeatedStringForScopeLogs += "}"
	s := strings.Join([]string{`&ResourceLogs{`,
		`Resource:` + strings.Replace(fmt.Sprintf("%v", this.Resource), "Resource", "v1.Resource", 1) + `,`,
		`ScopeLogs:` + repeatedStringForScopeLogs + `,`,
		`SchemaUrl:` + fmt.Sprintf("%v", this.SchemaUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScopeLogs) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLogRecords := "[]*LogRecord{"
	for _, f := range this.LogRecords {
		repeatedStringForLogRecords += strings.Replace(f.String(), "LogRecord", "LogRecord", 1) + ","
	}
	repeatedStringForLogRecords += "}"
	s := strings.Join([]string{`&ScopeLogs{`,
		`Scope:` + strings.Replace(fmt.Sprintf("%v", this.Scope), "InstrumentationScope", "v11.InstrumentationScope", 1) + `,`,
		`LogRecords:` + repeatedStringForLogRecords + `,`,
		`SchemaUrl:` + fmt.Sprintf("%v", this.SchemaUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogRecord) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttributes := "[]*KeyValue{"
	for _, f := range this.Attributes {
		repeatedStringForAttributes += strings.Replace(fmt.Sprintf("%v", f), "KeyValue", "v11.KeyValue", 1) + ","
	}
	repeatedStringForAttributes += "}"
	s := strings.Join([]string{`&LogRecord{`,
		`TimeUnixNano:` + fmt.Sprintf("%v", this.TimeUnixNano) + `,`,
		`SeverityNumber:` + fmt.Sprintf("%v", this.SeverityNumber) + `,`,
		`SeverityText:` + fmt.Sprintf("%v", this.SeverityText) + `,`,
		`Body:` + strings.Replace(fmt.Sprintf("%v", this.Body), "AnyValue", "v11.AnyValue", 1) + `,`,
		`Attributes:` + repeatedStringForAttributes + `,`,
		`DroppedAttributesCount:` + fmt.Sprintf("%v", this.DroppedAttributesCount) + `,`,
		`Flags:` + fmt.Sprintf("%v", this.Flags) + `,`,
		`TraceId:` + fmt.Sprintf("%v", this.TraceId) + `,`,
		`SpanId:` + fmt.Sprintf("%v", this.SpanId) + `,`,
		`ObservedTimeUnixNano:` + fmt.Sprintf("%v", this.ObservedTimeUnixNano) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLogs(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LogsData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogsData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogsData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceLogs = append(m.ResourceLogs, &ResourceLogs{})
			if err := m.ResourceLogs[len(m.ResourceLogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceLogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceLogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceLogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resource == nil {
				m.Resource = &v1.Resource{}
			}
			if err := m.Resource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeLogs = append(m.ScopeLogs, &ScopeLogs{})
			if err := m.ScopeLogs[len(m.ScopeLogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeLogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeLogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeLogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &v11.InstrumentationScope{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogRecords = append(m.LogRecords, &LogRecord{})
			if err := m.LogRecords[len(m.LogRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeUnixNano", wireType)
			}
			m.TimeUnixNano = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeUnixNano = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeverityNumber", wireType)
			}
			m.SeverityNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeverityNumber |= SeverityNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeverityText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeverityText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &v11.AnyValue{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &v11.KeyValue{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DroppedAttributesCount", wireType)
			}
			m.DroppedAttributesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DroppedAttributesCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Flags = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceId = append(m.TraceId[:0], dAtA[iNdEx:postIndex]...)
			if m.TraceId == nil {
				m.TraceId = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanId = append(m.SpanId[:0], dAtA[iNdEx:postIndex]...)
			if m.SpanId == nil {
				m.SpanId = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedTimeUnixNano", wireType)
			}
			m.ObservedTimeUnixNano = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservedTimeUnixNano = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipLogs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLogs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLogs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLogs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLogs = fmt.Errorf("proto: unexpected end of group")
)
