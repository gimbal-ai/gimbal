// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qdrant/collections_service.proto

package qdrant

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("qdrant/collections_service.proto", fileDescriptor_05802870bba8e5c5) }

var fileDescriptor_05802870bba8e5c5 = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x13, 0x94, 0x22, 0x53, 0x14, 0x19, 0x28, 0x94, 0xa8, 0xd3, 0x5a, 0xf5, 0xa4, 0xa6,
	0xa0, 0x9f, 0x40, 0xab, 0xd4, 0x62, 0x45, 0xb4, 0x88, 0x22, 0x82, 0xa4, 0xe9, 0x6b, 0x1b, 0x88,
	0x99, 0x34, 0x33, 0x11, 0x65, 0x2f, 0xfb, 0x11, 0xf6, 0x63, 0xec, 0x47, 0xd9, 0x63, 0x8f, 0x3d,
	0x6e, 0xa7, 0x97, 0x3d, 0xf6, 0x23, 0x2c, 0xdd, 0xc9, 0x4c, 0x92, 0xa6, 0xd9, 0xed, 0xee, 0x2d,
	0xef, 0xfd, 0xff, 0xef, 0xf7, 0x1e, 0x93, 0x37, 0x83, 0x9a, 0xb3, 0x51, 0xe4, 0x04, 0xbc, 0xed,
	0x52, 0xdf, 0x07, 0x97, 0x7b, 0x34, 0x60, 0xbf, 0x19, 0x44, 0x7f, 0x3d, 0x17, 0xec, 0x30, 0xa2,
	0x9c, 0xe2, 0x8a, 0x74, 0x58, 0xf5, 0xa2, 0x53, 0x3a, 0x5e, 0x89, 0x3b, 0xa8, 0xda, 0x49, 0xb3,
	0xb8, 0x8f, 0x6e, 0x75, 0x81, 0xe3, 0xa6, 0x2d, 0x2b, 0xec, 0x2e, 0xf0, 0x54, 0xee, 0x05, 0x63,
	0xfa, 0x15, 0x66, 0x31, 0x30, 0x6e, 0x3d, 0xbe, 0xc4, 0xc1, 0x42, 0x1a, 0x30, 0x68, 0x19, 0xb8,
	0x87, 0x6e, 0xf7, 0x3d, 0xc6, 0x31, 0x51, 0xe6, 0x4d, 0x94, 0x69, 0xa7, 0x60, 0x8d, 0x52, 0x3d,
	0x83, 0xaa, 0x74, 0x22, 0x70, 0x38, 0xe0, 0xba, 0x32, 0xcb, 0x38, 0xb5, 0x5b, 0x4f, 0xb4, 0xa2,
	0x73, 0x9f, 0x43, 0x88, 0x9c, 0xcd, 0x47, 0x1e, 0xf5, 0x2d, 0x1c, 0xe5, 0x50, 0x32, 0xbe, 0x11,
	0xea, 0x1d, 0xf8, 0x90, 0x45, 0xc9, 0xf8, 0xfa, 0xa8, 0x4f, 0xe8, 0xae, 0x9c, 0xe2, 0x8d, 0xef,
	0x39, 0x0c, 0x18, 0xae, 0xe9, 0xba, 0xa9, 0x13, 0x4c, 0x54, 0x7a, 0x5f, 0xdc, 0x2f, 0x54, 0xcb,
	0x1f, 0xa6, 0xc2, 0x3e, 0xdd, 0x7d, 0xd6, 0x89, 0xac, 0xfe, 0xc8, 0x83, 0xac, 0x4b, 0x6b, 0x9a,
	0xfe, 0x01, 0x55, 0x33, 0x02, 0xb6, 0x76, 0xba, 0xf7, 0x22, 0x8d, 0x51, 0x2d, 0x1d, 0xa2, 0xe3,
	0xc7, 0x8c, 0x43, 0xb4, 0xd9, 0xa2, 0x74, 0xce, 0x9d, 0xb2, 0xa2, 0x3f, 0xbb, 0xc2, 0xa5, 0xfb,
	0x7c, 0x47, 0xf7, 0x53, 0xcb, 0xfb, 0x7f, 0x1e, 0xe3, 0x0c, 0x37, 0x8a, 0xc5, 0x52, 0x51, 0xf4,
	0x66, 0xb9, 0x41, 0x83, 0x0f, 0xd0, 0xc3, 0xed, 0xed, 0x49, 0x26, 0x18, 0x00, 0x8f, 0x43, 0xfc,
	0xbc, 0x6c, 0xc7, 0xb2, 0x2e, 0xd5, 0xf0, 0xc5, 0x7e, 0x66, 0xdd, 0xfc, 0x0b, 0xba, 0x27, 0x6f,
	0xc1, 0x60, 0xea, 0x44, 0xa3, 0x8f, 0xf0, 0x1f, 0x3f, 0xca, 0xdf, 0x0e, 0x95, 0x57, 0x0d, 0x48,
	0x99, 0x9c, 0x45, 0xca, 0x15, 0x2e, 0x22, 0xf3, 0xf9, 0x02, 0x72, 0x5b, 0x56, 0xc8, 0xb7, 0x3f,
	0xe6, 0x4b, 0x62, 0x2c, 0x96, 0xc4, 0x58, 0x2f, 0x89, 0x79, 0x28, 0x88, 0x79, 0x2c, 0x88, 0x79,
	0x22, 0x88, 0x39, 0x17, 0xc4, 0x3c, 0x15, 0xc4, 0x3c, 0x13, 0xc4, 0x58, 0x0b, 0x62, 0x1e, 0xad,
	0x88, 0x31, 0x5f, 0x11, 0x63, 0xb1, 0x22, 0xc6, 0xcf, 0xd6, 0xc4, 0xe3, 0xd3, 0x78, 0x68, 0xbb,
	0xf4, 0x4f, 0x3b, 0x79, 0xbf, 0x26, 0xf4, 0xa5, 0xeb, 0x7b, 0x10, 0xf0, 0x24, 0x31, 0xac, 0x5c,
	0xbc, 0x62, 0xaf, 0xcf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x72, 0x32, 0xd7, 0xbe, 0x0b, 0x05, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CollectionsClient is the client API for Collections service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CollectionsClient interface {
	Get(ctx context.Context, in *GetCollectionInfoRequest, opts ...grpc.CallOption) (*GetCollectionInfoResponse, error)
	List(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error)
	Create(ctx context.Context, in *CreateCollection, opts ...grpc.CallOption) (*CollectionOperationResponse, error)
	Update(ctx context.Context, in *UpdateCollection, opts ...grpc.CallOption) (*CollectionOperationResponse, error)
	Delete(ctx context.Context, in *DeleteCollection, opts ...grpc.CallOption) (*CollectionOperationResponse, error)
	UpdateAliases(ctx context.Context, in *ChangeAliases, opts ...grpc.CallOption) (*CollectionOperationResponse, error)
	ListCollectionAliases(ctx context.Context, in *ListCollectionAliasesRequest, opts ...grpc.CallOption) (*ListAliasesResponse, error)
	ListAliases(ctx context.Context, in *ListAliasesRequest, opts ...grpc.CallOption) (*ListAliasesResponse, error)
	CollectionClusterInfo(ctx context.Context, in *CollectionClusterInfoRequest, opts ...grpc.CallOption) (*CollectionClusterInfoResponse, error)
	CollectionExists(ctx context.Context, in *CollectionExistsRequest, opts ...grpc.CallOption) (*CollectionExistsResponse, error)
	UpdateCollectionClusterSetup(ctx context.Context, in *UpdateCollectionClusterSetupRequest, opts ...grpc.CallOption) (*UpdateCollectionClusterSetupResponse, error)
	CreateShardKey(ctx context.Context, in *CreateShardKeyRequest, opts ...grpc.CallOption) (*CreateShardKeyResponse, error)
	DeleteShardKey(ctx context.Context, in *DeleteShardKeyRequest, opts ...grpc.CallOption) (*DeleteShardKeyResponse, error)
}

type collectionsClient struct {
	cc *grpc.ClientConn
}

func NewCollectionsClient(cc *grpc.ClientConn) CollectionsClient {
	return &collectionsClient{cc}
}

func (c *collectionsClient) Get(ctx context.Context, in *GetCollectionInfoRequest, opts ...grpc.CallOption) (*GetCollectionInfoResponse, error) {
	out := new(GetCollectionInfoResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) List(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error) {
	out := new(ListCollectionsResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) Create(ctx context.Context, in *CreateCollection, opts ...grpc.CallOption) (*CollectionOperationResponse, error) {
	out := new(CollectionOperationResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) Update(ctx context.Context, in *UpdateCollection, opts ...grpc.CallOption) (*CollectionOperationResponse, error) {
	out := new(CollectionOperationResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) Delete(ctx context.Context, in *DeleteCollection, opts ...grpc.CallOption) (*CollectionOperationResponse, error) {
	out := new(CollectionOperationResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) UpdateAliases(ctx context.Context, in *ChangeAliases, opts ...grpc.CallOption) (*CollectionOperationResponse, error) {
	out := new(CollectionOperationResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/UpdateAliases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) ListCollectionAliases(ctx context.Context, in *ListCollectionAliasesRequest, opts ...grpc.CallOption) (*ListAliasesResponse, error) {
	out := new(ListAliasesResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/ListCollectionAliases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) ListAliases(ctx context.Context, in *ListAliasesRequest, opts ...grpc.CallOption) (*ListAliasesResponse, error) {
	out := new(ListAliasesResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/ListAliases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) CollectionClusterInfo(ctx context.Context, in *CollectionClusterInfoRequest, opts ...grpc.CallOption) (*CollectionClusterInfoResponse, error) {
	out := new(CollectionClusterInfoResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/CollectionClusterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) CollectionExists(ctx context.Context, in *CollectionExistsRequest, opts ...grpc.CallOption) (*CollectionExistsResponse, error) {
	out := new(CollectionExistsResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/CollectionExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) UpdateCollectionClusterSetup(ctx context.Context, in *UpdateCollectionClusterSetupRequest, opts ...grpc.CallOption) (*UpdateCollectionClusterSetupResponse, error) {
	out := new(UpdateCollectionClusterSetupResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/UpdateCollectionClusterSetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) CreateShardKey(ctx context.Context, in *CreateShardKeyRequest, opts ...grpc.CallOption) (*CreateShardKeyResponse, error) {
	out := new(CreateShardKeyResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/CreateShardKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) DeleteShardKey(ctx context.Context, in *DeleteShardKeyRequest, opts ...grpc.CallOption) (*DeleteShardKeyResponse, error) {
	out := new(DeleteShardKeyResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/DeleteShardKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionsServer is the server API for Collections service.
type CollectionsServer interface {
	Get(context.Context, *GetCollectionInfoRequest) (*GetCollectionInfoResponse, error)
	List(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error)
	Create(context.Context, *CreateCollection) (*CollectionOperationResponse, error)
	Update(context.Context, *UpdateCollection) (*CollectionOperationResponse, error)
	Delete(context.Context, *DeleteCollection) (*CollectionOperationResponse, error)
	UpdateAliases(context.Context, *ChangeAliases) (*CollectionOperationResponse, error)
	ListCollectionAliases(context.Context, *ListCollectionAliasesRequest) (*ListAliasesResponse, error)
	ListAliases(context.Context, *ListAliasesRequest) (*ListAliasesResponse, error)
	CollectionClusterInfo(context.Context, *CollectionClusterInfoRequest) (*CollectionClusterInfoResponse, error)
	CollectionExists(context.Context, *CollectionExistsRequest) (*CollectionExistsResponse, error)
	UpdateCollectionClusterSetup(context.Context, *UpdateCollectionClusterSetupRequest) (*UpdateCollectionClusterSetupResponse, error)
	CreateShardKey(context.Context, *CreateShardKeyRequest) (*CreateShardKeyResponse, error)
	DeleteShardKey(context.Context, *DeleteShardKeyRequest) (*DeleteShardKeyResponse, error)
}

// UnimplementedCollectionsServer can be embedded to have forward compatible implementations.
type UnimplementedCollectionsServer struct {
}

func (*UnimplementedCollectionsServer) Get(ctx context.Context, req *GetCollectionInfoRequest) (*GetCollectionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCollectionsServer) List(ctx context.Context, req *ListCollectionsRequest) (*ListCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCollectionsServer) Create(ctx context.Context, req *CreateCollection) (*CollectionOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCollectionsServer) Update(ctx context.Context, req *UpdateCollection) (*CollectionOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedCollectionsServer) Delete(ctx context.Context, req *DeleteCollection) (*CollectionOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedCollectionsServer) UpdateAliases(ctx context.Context, req *ChangeAliases) (*CollectionOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAliases not implemented")
}
func (*UnimplementedCollectionsServer) ListCollectionAliases(ctx context.Context, req *ListCollectionAliasesRequest) (*ListAliasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollectionAliases not implemented")
}
func (*UnimplementedCollectionsServer) ListAliases(ctx context.Context, req *ListAliasesRequest) (*ListAliasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAliases not implemented")
}
func (*UnimplementedCollectionsServer) CollectionClusterInfo(ctx context.Context, req *CollectionClusterInfoRequest) (*CollectionClusterInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionClusterInfo not implemented")
}
func (*UnimplementedCollectionsServer) CollectionExists(ctx context.Context, req *CollectionExistsRequest) (*CollectionExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionExists not implemented")
}
func (*UnimplementedCollectionsServer) UpdateCollectionClusterSetup(ctx context.Context, req *UpdateCollectionClusterSetupRequest) (*UpdateCollectionClusterSetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollectionClusterSetup not implemented")
}
func (*UnimplementedCollectionsServer) CreateShardKey(ctx context.Context, req *CreateShardKeyRequest) (*CreateShardKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShardKey not implemented")
}
func (*UnimplementedCollectionsServer) DeleteShardKey(ctx context.Context, req *DeleteShardKeyRequest) (*DeleteShardKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShardKey not implemented")
}

func RegisterCollectionsServer(s *grpc.Server, srv CollectionsServer) {
	s.RegisterService(&_Collections_serviceDesc, srv)
}

func _Collections_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).Get(ctx, req.(*GetCollectionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).List(ctx, req.(*ListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).Create(ctx, req.(*CreateCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).Update(ctx, req.(*UpdateCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).Delete(ctx, req.(*DeleteCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_UpdateAliases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAliases)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).UpdateAliases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/UpdateAliases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).UpdateAliases(ctx, req.(*ChangeAliases))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_ListCollectionAliases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionAliasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).ListCollectionAliases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/ListCollectionAliases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).ListCollectionAliases(ctx, req.(*ListCollectionAliasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_ListAliases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAliasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).ListAliases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/ListAliases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).ListAliases(ctx, req.(*ListAliasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_CollectionClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionClusterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).CollectionClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/CollectionClusterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).CollectionClusterInfo(ctx, req.(*CollectionClusterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_CollectionExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).CollectionExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/CollectionExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).CollectionExists(ctx, req.(*CollectionExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_UpdateCollectionClusterSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectionClusterSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).UpdateCollectionClusterSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/UpdateCollectionClusterSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).UpdateCollectionClusterSetup(ctx, req.(*UpdateCollectionClusterSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_CreateShardKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShardKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).CreateShardKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/CreateShardKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).CreateShardKey(ctx, req.(*CreateShardKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_DeleteShardKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShardKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).DeleteShardKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/DeleteShardKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).DeleteShardKey(ctx, req.(*DeleteShardKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Collections_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qdrant.Collections",
	HandlerType: (*CollectionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Collections_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Collections_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Collections_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Collections_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Collections_Delete_Handler,
		},
		{
			MethodName: "UpdateAliases",
			Handler:    _Collections_UpdateAliases_Handler,
		},
		{
			MethodName: "ListCollectionAliases",
			Handler:    _Collections_ListCollectionAliases_Handler,
		},
		{
			MethodName: "ListAliases",
			Handler:    _Collections_ListAliases_Handler,
		},
		{
			MethodName: "CollectionClusterInfo",
			Handler:    _Collections_CollectionClusterInfo_Handler,
		},
		{
			MethodName: "CollectionExists",
			Handler:    _Collections_CollectionExists_Handler,
		},
		{
			MethodName: "UpdateCollectionClusterSetup",
			Handler:    _Collections_UpdateCollectionClusterSetup_Handler,
		},
		{
			MethodName: "CreateShardKey",
			Handler:    _Collections_CreateShardKey_Handler,
		},
		{
			MethodName: "DeleteShardKey",
			Handler:    _Collections_DeleteShardKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qdrant/collections_service.proto",
}
