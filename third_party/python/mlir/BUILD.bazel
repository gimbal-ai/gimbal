# Copyright 2023- Gimlet Labs, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

load("@gml//bazel/python:c_extensions_for_wheel.bzl", "c_extensions_for_wheel")
load("@gml//bazel/python:symlink_tree.bzl", "symlink_tree")
load("@gml//bazel/python:wheel_utils.bzl", "abi_tag", "platform", "python_tag", "version")
load("@rules_cc//cc:defs.bzl", "cc_binary")
load("@rules_python//python:defs.bzl", "py_library")
load("@rules_python//python:packaging.bzl", "py_wheel")

package(default_visibility = ["//visibility:public"])

symlink_tree(
    name = "py_sources",
    srcs = [
        "@llvm-project//mlir/python:AMDGPUOpsPyFiles",
        "@llvm-project//mlir/python:AffineOpsPyFiles",
        "@llvm-project//mlir/python:ArithOpsPyFiles",
        "@llvm-project//mlir/python:BufferizationOpsPyFiles",
        "@llvm-project//mlir/python:BuiltinOpsPyFiles",
        "@llvm-project//mlir/python:ComplexOpsPyFiles",
        "@llvm-project//mlir/python:ControlFlowOpsPyFiles",
        "@llvm-project//mlir/python:DialectCorePyFiles",
        "@llvm-project//mlir/python:ExecutionEnginePyFiles",
        "@llvm-project//mlir/python:ExtrasPyFiles",
        "@llvm-project//mlir/python:FuncPyFiles",
        "@llvm-project//mlir/python:GPUOpsPackagePassesPyFiles",
        "@llvm-project//mlir/python:GPUOpsPackagePyFiles",
        "@llvm-project//mlir/python:GPUOpsPyFiles",
        "@llvm-project//mlir/python:IRPyFiles",
        "@llvm-project//mlir/python:IndexOpsPyFiles",
        "@llvm-project//mlir/python:LLVMOpsPyFiles",
        "@llvm-project//mlir/python:LinalgOpsPackageOpDSLLangPyFiles",
        "@llvm-project//mlir/python:LinalgOpsPackageOpDSLOpsPyFiles",
        "@llvm-project//mlir/python:LinalgOpsPackageOpDSLPyFiles",
        "@llvm-project//mlir/python:LinalgOpsPackagePassesPyFiles",
        "@llvm-project//mlir/python:LinalgOpsPackagePyFiles",
        "@llvm-project//mlir/python:LinalgOpsPyFiles",
        "@llvm-project//mlir/python:MLProgramOpsPyFiles",
        "@llvm-project//mlir/python:MathOpsPyFiles",
        "@llvm-project//mlir/python:MemRefOpsPyFiles",
        "@llvm-project//mlir/python:MlirLibsPyFiles",
        "@llvm-project//mlir/python:NVGPUOpsPyFiles",
        "@llvm-project//mlir/python:NVVMOpsPyFiles",
        "@llvm-project//mlir/python:OpenMPOpsPyFiles",
        "@llvm-project//mlir/python:PDLPyFiles",
        "@llvm-project//mlir/python:PassManagerPyFiles",
        "@llvm-project//mlir/python:PythonTestPyFiles",
        "@llvm-project//mlir/python:QuantPyFiles",
        "@llvm-project//mlir/python:ROCDLOpsPyFiles",
        "@llvm-project//mlir/python:RuntimePyFiles",
        "@llvm-project//mlir/python:SCFPyFiles",
        "@llvm-project//mlir/python:SPIRVOpsPyFiles",
        "@llvm-project//mlir/python:ShapeOpsPyFiles",
        "@llvm-project//mlir/python:SparseTensorOpsPyFiles",
        "@llvm-project//mlir/python:TensorOpsPyFiles",
        "@llvm-project//mlir/python:TosaOpsPyFiles",
        "@llvm-project//mlir/python:TransformExtrasPackagePyFiles",
        "@llvm-project//mlir/python:TransformInterpreterPackagePyFiles",
        "@llvm-project//mlir/python:TransformOpsPackagePyFiles",
        "@llvm-project//mlir/python:TransformOpsPyFiles",
        "@llvm-project//mlir/python:VectorOpsPyFiles",
    ],
    old_root = "external/llvm-project/mlir/python",
)

# LLVM's bazel overlay doesn't include a definition for this shared lib. So we add it here.
cc_binary(
    name = "_mlirRegisterEverything.so",
    srcs = ["@llvm-project//mlir:lib/Bindings/Python/RegisterEverything.cpp"],
    linkshared = 1,
    linkstatic = 0,
    deps = [
        "@llvm-project//mlir:CAPIConversion",
        "@llvm-project//mlir:CAPIRegisterEverything",
        "@llvm-project//mlir:CAPITransforms",
        "@llvm-project//mlir:MLIRBindingsPythonCore",
        "@llvm-project//mlir:MLIRBindingsPythonHeadersAndDeps",
    ],
)

c_extensions_for_wheel(
    name = "cext",
    extensions = {
        ":_mlirRegisterEverything.so": "mlir/_mlir_libs/_mlirRegisterEverything.so",
        "@llvm-project//mlir:_mlir.so": "mlir/_mlir_libs/_mlir.so",
    },
    pkg_name = "mlir",
)

py_library(
    name = "mlir",
    srcs = [
        ":py_sources",
    ],
    data = [
        ":cext",
    ],
    imports = ["."],
)

py_wheel(
    name = "mlir_wheel",
    abi = abi_tag(),
    author = "Gimlet Labs, Inc.",
    author_email = "support@gimletlabs.ai",
    classifiers = [
        "Programming Language :: Python :: 3",
        "Operating System :: OS Independent",
        "License :: OSI Approved :: Apache Software License",
        "Typing :: Typed",
    ],
    distribution = "mlir-gml",
    platform = platform(),
    python_requires = ">=3",
    python_tag = python_tag(),
    strip_path_prefixes = ["third_party/python/mlir"],
    version = version(),
    deps = [
        ":cext",
        ":mlir",
    ],
)
