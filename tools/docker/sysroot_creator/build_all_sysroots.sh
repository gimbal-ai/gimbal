#!/bin/bash

# Copyright 2018- The Pixie Authors.
# Modifications Copyright 2023- Gimlet Labs, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

set -e

output_dir="$(realpath "$1")"
docker_image_tag="$2"
sysroot_download_url="$3"

tot="$(git rev-parse --show-toplevel)"

libc_version="glibc2.36"

# For each arch and variant a sysroot with only default features is produced.
# To enable sysroots with extra features see extra_sysroots below.
architectures=("aarch64" "x86_64")
variants=("runtime" "build" "test")

extra_sysroots=(
  # Extra sysroots to produce in 'arch variant feat1 feat2' format.
  "amd64 test debug"
  "arm64 test debug"
)

pkgdb_dir="$(mktemp -d)"

debian_arch() {
  case "$1" in
  aarch64)
    echo "arm64"
    ;;
  x86_64)
    echo "amd64"
    ;;
  esac
}

download_package_index() {
  arch="$(debian_arch "$1")"
  curl -fL "http://ftp.debian.org/debian/dists/bookworm/main/binary-${arch}/Packages.xz" |
    xz --decompress >"${pkgdb_dir}/${arch}"
}

sysroot_filename() {
  arch="$1"
  variant="$2"
  features=("${@:3}")
  fname="sysroot-${arch}-${variant}"
  for feat in "${features[@]}"; do
    fname="${fname}-${feat}"
  done
  fname="${fname}.tar.gz"
  echo "${fname}"
}

sysroot_name() {
  arch="$1"
  variant="$2"
  features=("${@:3}")
  name="sysroot_${arch}_glibc2_36_${variant}"
  for feat in "${features[@]}"; do
    name="${name}_${feat}"
  done
  echo "${name}"
}

build_sysroot() {
  arch="$1"
  variant="$2"
  features=("${@:3}")
  fname="$(sysroot_filename "$@")"
  echo "Building ${output_dir}/${fname}"
  docker run -it -v "${output_dir}":/build \
    -v "${pkgdb_dir}":/pkgdb \
    "${docker_image_tag}" \
    "/pkgdb/${arch}" \
    "/build/${fname}" \
    "${variant}" \
    "${features[@]}"
}

create_sysroots_bzl="${tot}/bazel/cc_toolchains/sysroots/create_sysroots.bzl"
register_sysroots_bzl="${tot}/bazel/cc_toolchains/sysroots/register_sysroots.bzl"
settings_bzl="${tot}/bazel/cc_toolchains/sysroots/settings.bzl"
bazelrc="${tot}/bazel/cc_toolchains/sysroots/.bazelrc"

cat <<EOF >"${create_sysroots_bzl}"
# THIS FILE IS GENERATED BY build_all_sysroots

load("//bazel/cc_toolchains/sysroots:sysroots.bzl", "sysroot_repo")

def _create_sysroots():
EOF

cat <<EOF >"${register_sysroots_bzl}"
# THIS FILE IS GENERATED BY build_all_sysroots

EOF

cat <<EOF >"${settings_bzl}"
# THIS FILE IS GENERATED BY build_all_sysroots

load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")


def _sysroot_settings():
EOF

cat <<EOF >"${bazelrc}"
# THIS FILE IS GENERATED BY build_all_sysroots

EOF

sysroot_names="$(mktemp)"

gen_bzl() {
  arch="$1"
  variant="$2"
  features=("${@:3}")

  name="$(sysroot_name "$@")"
  fname="$(sysroot_filename "$@")"
  sha="$(sha256sum "${output_dir}/${fname}" | awk '{print $1}')"

  feat_list=""
  for feat in "${features[@]}"; do
    if [[ -n "${feat_list}" ]]; then
      feat_list="${feat_list}, "
    fi
    feat_list="${feat_list}\"${feat}\""
  done

  cat <<EOF >>"${create_sysroots_bzl}"
    sysroot_repo(
        name = "${name}",
        target_arch = "${arch}",
        libc_version = "${libc_version}",
        sha256 = "${sha}",
        urls = ["${sysroot_download_url}/${fname}"],
        features = [${feat_list}],
    )
EOF

  echo "${name}" >>"${sysroot_names}"
}

for arch in "${architectures[@]}"; do
  download_package_index "${arch}"
  for variant in "${variants[@]}"; do
    build_sysroot "${arch}" "${variant}"
    gen_bzl "${arch}" "${variant}"
  done
done

declare -A uniq_features

for config in "${extra_sysroots[@]}"; do
  read -ra config_arr <<<"$config"

  arch="${config_arr[0]}"
  variant="${config_arr[1]}"
  features=("${config_arr[@]:2}")
  build_sysroot "${arch}" "${variant}" "${features[@]}"
  gen_bzl "${arch}" "${variant}" "${features[@]}"
  for feat in "${features[@]}"; do
    uniq_features["${feat}"]=true
  done
done

# Make sure the register loads are sorted.
register_counter=0
while read -r name; do
  cat <<EOF >>"${register_sysroots_bzl}"
load("@${name}//:register_toolchain.bzl", _register${register_counter} = "register_toolchain")
EOF
  register_counter="$((register_counter + 1))"
done < <(sort "${sysroot_names}")

cat <<EOF >>"${register_sysroots_bzl}"

def _register_sysroots():
EOF

register_counter=0
while read -r name; do
  cat <<EOF >>"${register_sysroots_bzl}"
    _register${register_counter}()
EOF
  register_counter="$((register_counter + 1))"
done < <(sort "${sysroot_names}")

for feat in "${!uniq_features[@]}"; do
  cat <<EOF >>"${settings_bzl}"
    bool_flag(
        name = "sysroot_enable_${feat}",
        build_setting_default = False,
    )
    native.config_setting(
        name = "sysroot_${feat}_enabled",
        flag_values = {
            ":sysroot_enable_${feat}": "True",
        },
    )
EOF
  cat <<EOF >>"${bazelrc}"
common:enable_sysroot_${feat} --repo_env GML_ENABLE_SYSROOT_${feat^^}=1
common:enable_sysroot_${feat} --//bazel/cc_toolchains/sysroots:sysroot_enable_${feat}
EOF
done

echo "create_sysroots = _create_sysroots" >>"${create_sysroots_bzl}"

echo "register_sysroots = _register_sysroots" >>"${register_sysroots_bzl}"

echo "sysroot_settings = _sysroot_settings" >>"${settings_bzl}"

rm -rf "${pkgdb_dir:?}"
